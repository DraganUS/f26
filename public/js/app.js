/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
  var defaultToConfig2Keys = [
    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath'
  ];

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys);

  var otherKeys = Object
    .keys(config2)
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function deepMerge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (typeof val === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js&":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  mounted: function mounted() {
    console.log('Component mounted.');
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home2Component.vue?vue&type=script&lang=js&":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Home2Component.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "Home2Component",
  data: function data() {
    return {};
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home3Component.vue?vue&type=script&lang=js&":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Home3Component.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "Home3Component"
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HomeMainComponent.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/HomeMainComponent.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "HomeMainComponent",
  data: function data() {
    return {
      settings: '',
      wormWord: ''
    };
  },
  mounted: function mounted() {}
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HowItWorks.vue?vue&type=script&lang=js&":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/HowItWorks.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "HowItWorks"
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ShowImage.vue?vue&type=script&lang=js&":
/*!********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/ShowImage.vue?vue&type=script&lang=js& ***!
  \********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  props: ['productsDb'],
  name: "ShowImage",
  data: function data() {
    return {
      isVisible: true,
      counter: true,
      products: [],
      imageId: 0,
      countDown: 4,
      testedID: 0
    };
  },
  mounted: function mounted() {
    this.products = JSON.parse(this.productsDb);
    console.log(this.products);
    var video = document.getElementById('video');
    Promise.all([faceapi.nets.tinyFaceDetector.loadFromUri('/js/models'), faceapi.nets.faceLandmark68Net.loadFromUri('/js/models'), faceapi.nets.faceRecognitionNet.loadFromUri('/js/models'), faceapi.nets.faceExpressionNet.loadFromUri('/js/models')]).then(startVideo);

    function startVideo() {
      navigator.getUserMedia({
        video: {}
      }, function (stream) {
        return video.srcObject = stream;
      }, function (err) {
        return console.error(err);
      });
    }

    video.addEventListener('playing', function () {
      var canvas = faceapi.createCanvasFromMedia(video);
      document.body.append(canvas);
      var displaySize = {
        width: video.width,
        height: video.height
      };
      faceapi.matchDimensions(canvas, displaySize);
      setInterval(
      /*#__PURE__*/
      _asyncToGenerator(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        var detections, resizedDetections;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();

              case 2:
                detections = _context.sent;
                resizedDetections = faceapi.resizeResults(detections, displaySize);
                canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
                faceapi.draw.drawDetections(canvas, resizedDetections);
                faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);
                faceapi.draw.drawFaceExpressions(canvas, resizedDetections);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })), 100);
    });
  },
  methods: {
    showImage: function showImage(id) {
      this.imageId = id;
      this.testedID = id;
      this.countDownTimer();
    },
    countDownTimer: function countDownTimer() {
      var _this = this;

      if (this.countDown > -2) {
        setTimeout(function () {
          _this.countDown -= 1;

          _this.countDownTimer();
        }, 210);
      }

      if (this.countDown == -2) {
        this.countDown = 4;
        this.removeTestedProduct();
      }
    },
    removeTestedProduct: function removeTestedProduct() {
      if (this.products.length == 1) {
        this.isVisible = false;
        this.counter = false;
      } else {
        console.log(this.products.length);

        for (var i = 0; i < this.products.length; i++) {
          if (this.products[i].id == this.testedID) {
            this.products.splice(i, 1);
            break;
          }
        }
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/bootstrap/dist/js/bootstrap.js":
/*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
  * Bootstrap v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
(function (global, factory) {
   true ? factory(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js")) :
  undefined;
}(this, (function (exports, $, Popper) { 'use strict';

  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;
  Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.4.1): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */

  var TRANSITION_END = 'transitionend';
  var MAX_UID = 1000000;
  var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

  function toType(obj) {
    return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
  }

  function getSpecialTransitionEndEvent() {
    return {
      bindType: TRANSITION_END,
      delegateType: TRANSITION_END,
      handle: function handle(event) {
        if ($(event.target).is(this)) {
          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
        }

        return undefined; // eslint-disable-line no-undefined
      }
    };
  }

  function transitionEndEmulator(duration) {
    var _this = this;

    var called = false;
    $(this).one(Util.TRANSITION_END, function () {
      called = true;
    });
    setTimeout(function () {
      if (!called) {
        Util.triggerTransitionEnd(_this);
      }
    }, duration);
    return this;
  }

  function setTransitionEndSupport() {
    $.fn.emulateTransitionEnd = transitionEndEmulator;
    $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
  }
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */


  var Util = {
    TRANSITION_END: 'bsTransitionEnd',
    getUID: function getUID(prefix) {
      do {
        // eslint-disable-next-line no-bitwise
        prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
      } while (document.getElementById(prefix));

      return prefix;
    },
    getSelectorFromElement: function getSelectorFromElement(element) {
      var selector = element.getAttribute('data-target');

      if (!selector || selector === '#') {
        var hrefAttr = element.getAttribute('href');
        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
      }

      try {
        return document.querySelector(selector) ? selector : null;
      } catch (err) {
        return null;
      }
    },
    getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
      if (!element) {
        return 0;
      } // Get transition-duration of the element


      var transitionDuration = $(element).css('transition-duration');
      var transitionDelay = $(element).css('transition-delay');
      var floatTransitionDuration = parseFloat(transitionDuration);
      var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

      if (!floatTransitionDuration && !floatTransitionDelay) {
        return 0;
      } // If multiple durations are defined, take the first


      transitionDuration = transitionDuration.split(',')[0];
      transitionDelay = transitionDelay.split(',')[0];
      return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
    },
    reflow: function reflow(element) {
      return element.offsetHeight;
    },
    triggerTransitionEnd: function triggerTransitionEnd(element) {
      $(element).trigger(TRANSITION_END);
    },
    // TODO: Remove in v5
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(TRANSITION_END);
    },
    isElement: function isElement(obj) {
      return (obj[0] || obj).nodeType;
    },
    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
      for (var property in configTypes) {
        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
          var expectedTypes = configTypes[property];
          var value = config[property];
          var valueType = value && Util.isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
          }
        }
      }
    },
    findShadowRoot: function findShadowRoot(element) {
      if (!document.documentElement.attachShadow) {
        return null;
      } // Can find the shadow root otherwise it'll return the document


      if (typeof element.getRootNode === 'function') {
        var root = element.getRootNode();
        return root instanceof ShadowRoot ? root : null;
      }

      if (element instanceof ShadowRoot) {
        return element;
      } // when we don't find a shadow root


      if (!element.parentNode) {
        return null;
      }

      return Util.findShadowRoot(element.parentNode);
    },
    jQueryDetection: function jQueryDetection() {
      if (typeof $ === 'undefined') {
        throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
      }

      var version = $.fn.jquery.split(' ')[0].split('.');
      var minMajor = 1;
      var ltMajor = 2;
      var minMinor = 9;
      var minPatch = 1;
      var maxMajor = 4;

      if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
        throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
      }
    }
  };
  Util.jQueryDetection();
  setTransitionEndSupport();

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'alert';
  var VERSION = '4.4.1';
  var DATA_KEY = 'bs.alert';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var Selector = {
    DISMISS: '[data-dismiss="alert"]'
  };
  var Event = {
    CLOSE: "close" + EVENT_KEY,
    CLOSED: "closed" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    ALERT: 'alert',
    FADE: 'fade',
    SHOW: 'show'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Alert =
  /*#__PURE__*/
  function () {
    function Alert(element) {
      this._element = element;
    } // Getters


    var _proto = Alert.prototype;

    // Public
    _proto.close = function close(element) {
      var rootElement = this._element;

      if (element) {
        rootElement = this._getRootElement(element);
      }

      var customEvent = this._triggerCloseEvent(rootElement);

      if (customEvent.isDefaultPrevented()) {
        return;
      }

      this._removeElement(rootElement);
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);
      this._element = null;
    } // Private
    ;

    _proto._getRootElement = function _getRootElement(element) {
      var selector = Util.getSelectorFromElement(element);
      var parent = false;

      if (selector) {
        parent = document.querySelector(selector);
      }

      if (!parent) {
        parent = $(element).closest("." + ClassName.ALERT)[0];
      }

      return parent;
    };

    _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
      var closeEvent = $.Event(Event.CLOSE);
      $(element).trigger(closeEvent);
      return closeEvent;
    };

    _proto._removeElement = function _removeElement(element) {
      var _this = this;

      $(element).removeClass(ClassName.SHOW);

      if (!$(element).hasClass(ClassName.FADE)) {
        this._destroyElement(element);

        return;
      }

      var transitionDuration = Util.getTransitionDurationFromElement(element);
      $(element).one(Util.TRANSITION_END, function (event) {
        return _this._destroyElement(element, event);
      }).emulateTransitionEnd(transitionDuration);
    };

    _proto._destroyElement = function _destroyElement(element) {
      $(element).detach().trigger(Event.CLOSED).remove();
    } // Static
    ;

    Alert._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $(this);
        var data = $element.data(DATA_KEY);

        if (!data) {
          data = new Alert(this);
          $element.data(DATA_KEY, data);
        }

        if (config === 'close') {
          data[config](this);
        }
      });
    };

    Alert._handleDismiss = function _handleDismiss(alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        alertInstance.close(this);
      };
    };

    _createClass(Alert, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);

    return Alert;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Alert._jQueryInterface;
  $.fn[NAME].Constructor = Alert;

  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Alert._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$1 = 'button';
  var VERSION$1 = '4.4.1';
  var DATA_KEY$1 = 'bs.button';
  var EVENT_KEY$1 = "." + DATA_KEY$1;
  var DATA_API_KEY$1 = '.data-api';
  var JQUERY_NO_CONFLICT$1 = $.fn[NAME$1];
  var ClassName$1 = {
    ACTIVE: 'active',
    BUTTON: 'btn',
    FOCUS: 'focus'
  };
  var Selector$1 = {
    DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
    DATA_TOGGLES: '[data-toggle="buttons"]',
    DATA_TOGGLE: '[data-toggle="button"]',
    DATA_TOGGLES_BUTTONS: '[data-toggle="buttons"] .btn',
    INPUT: 'input:not([type="hidden"])',
    ACTIVE: '.active',
    BUTTON: '.btn'
  };
  var Event$1 = {
    CLICK_DATA_API: "click" + EVENT_KEY$1 + DATA_API_KEY$1,
    FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY$1 + DATA_API_KEY$1 + " " + ("blur" + EVENT_KEY$1 + DATA_API_KEY$1),
    LOAD_DATA_API: "load" + EVENT_KEY$1 + DATA_API_KEY$1
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Button =
  /*#__PURE__*/
  function () {
    function Button(element) {
      this._element = element;
    } // Getters


    var _proto = Button.prototype;

    // Public
    _proto.toggle = function toggle() {
      var triggerChangeEvent = true;
      var addAriaPressed = true;
      var rootElement = $(this._element).closest(Selector$1.DATA_TOGGLES)[0];

      if (rootElement) {
        var input = this._element.querySelector(Selector$1.INPUT);

        if (input) {
          if (input.type === 'radio') {
            if (input.checked && this._element.classList.contains(ClassName$1.ACTIVE)) {
              triggerChangeEvent = false;
            } else {
              var activeElement = rootElement.querySelector(Selector$1.ACTIVE);

              if (activeElement) {
                $(activeElement).removeClass(ClassName$1.ACTIVE);
              }
            }
          } else if (input.type === 'checkbox') {
            if (this._element.tagName === 'LABEL' && input.checked === this._element.classList.contains(ClassName$1.ACTIVE)) {
              triggerChangeEvent = false;
            }
          } else {
            // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
            triggerChangeEvent = false;
          }

          if (triggerChangeEvent) {
            input.checked = !this._element.classList.contains(ClassName$1.ACTIVE);
            $(input).trigger('change');
          }

          input.focus();
          addAriaPressed = false;
        }
      }

      if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {
        if (addAriaPressed) {
          this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName$1.ACTIVE));
        }

        if (triggerChangeEvent) {
          $(this._element).toggleClass(ClassName$1.ACTIVE);
        }
      }
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$1);
      this._element = null;
    } // Static
    ;

    Button._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$1);

        if (!data) {
          data = new Button(this);
          $(this).data(DATA_KEY$1, data);
        }

        if (config === 'toggle') {
          data[config]();
        }
      });
    };

    _createClass(Button, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$1;
      }
    }]);

    return Button;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$1.CLICK_DATA_API, Selector$1.DATA_TOGGLE_CARROT, function (event) {
    var button = event.target;

    if (!$(button).hasClass(ClassName$1.BUTTON)) {
      button = $(button).closest(Selector$1.BUTTON)[0];
    }

    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {
      event.preventDefault(); // work around Firefox bug #1540995
    } else {
      var inputBtn = button.querySelector(Selector$1.INPUT);

      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {
        event.preventDefault(); // work around Firefox bug #1540995

        return;
      }

      Button._jQueryInterface.call($(button), 'toggle');
    }
  }).on(Event$1.FOCUS_BLUR_DATA_API, Selector$1.DATA_TOGGLE_CARROT, function (event) {
    var button = $(event.target).closest(Selector$1.BUTTON)[0];
    $(button).toggleClass(ClassName$1.FOCUS, /^focus(in)?$/.test(event.type));
  });
  $(window).on(Event$1.LOAD_DATA_API, function () {
    // ensure correct active class is set to match the controls' actual values/states
    // find all checkboxes/readio buttons inside data-toggle groups
    var buttons = [].slice.call(document.querySelectorAll(Selector$1.DATA_TOGGLES_BUTTONS));

    for (var i = 0, len = buttons.length; i < len; i++) {
      var button = buttons[i];
      var input = button.querySelector(Selector$1.INPUT);

      if (input.checked || input.hasAttribute('checked')) {
        button.classList.add(ClassName$1.ACTIVE);
      } else {
        button.classList.remove(ClassName$1.ACTIVE);
      }
    } // find all button toggles


    buttons = [].slice.call(document.querySelectorAll(Selector$1.DATA_TOGGLE));

    for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
      var _button = buttons[_i];

      if (_button.getAttribute('aria-pressed') === 'true') {
        _button.classList.add(ClassName$1.ACTIVE);
      } else {
        _button.classList.remove(ClassName$1.ACTIVE);
      }
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$1] = Button._jQueryInterface;
  $.fn[NAME$1].Constructor = Button;

  $.fn[NAME$1].noConflict = function () {
    $.fn[NAME$1] = JQUERY_NO_CONFLICT$1;
    return Button._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$2 = 'carousel';
  var VERSION$2 = '4.4.1';
  var DATA_KEY$2 = 'bs.carousel';
  var EVENT_KEY$2 = "." + DATA_KEY$2;
  var DATA_API_KEY$2 = '.data-api';
  var JQUERY_NO_CONFLICT$2 = $.fn[NAME$2];
  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var SWIPE_THRESHOLD = 40;
  var Default = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true,
    touch: true
  };
  var DefaultType = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean',
    touch: 'boolean'
  };
  var Direction = {
    NEXT: 'next',
    PREV: 'prev',
    LEFT: 'left',
    RIGHT: 'right'
  };
  var Event$2 = {
    SLIDE: "slide" + EVENT_KEY$2,
    SLID: "slid" + EVENT_KEY$2,
    KEYDOWN: "keydown" + EVENT_KEY$2,
    MOUSEENTER: "mouseenter" + EVENT_KEY$2,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$2,
    TOUCHSTART: "touchstart" + EVENT_KEY$2,
    TOUCHMOVE: "touchmove" + EVENT_KEY$2,
    TOUCHEND: "touchend" + EVENT_KEY$2,
    POINTERDOWN: "pointerdown" + EVENT_KEY$2,
    POINTERUP: "pointerup" + EVENT_KEY$2,
    DRAG_START: "dragstart" + EVENT_KEY$2,
    LOAD_DATA_API: "load" + EVENT_KEY$2 + DATA_API_KEY$2,
    CLICK_DATA_API: "click" + EVENT_KEY$2 + DATA_API_KEY$2
  };
  var ClassName$2 = {
    CAROUSEL: 'carousel',
    ACTIVE: 'active',
    SLIDE: 'slide',
    RIGHT: 'carousel-item-right',
    LEFT: 'carousel-item-left',
    NEXT: 'carousel-item-next',
    PREV: 'carousel-item-prev',
    ITEM: 'carousel-item',
    POINTER_EVENT: 'pointer-event'
  };
  var Selector$2 = {
    ACTIVE: '.active',
    ACTIVE_ITEM: '.active.carousel-item',
    ITEM: '.carousel-item',
    ITEM_IMG: '.carousel-item img',
    NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
    INDICATORS: '.carousel-indicators',
    DATA_SLIDE: '[data-slide], [data-slide-to]',
    DATA_RIDE: '[data-ride="carousel"]'
  };
  var PointerType = {
    TOUCH: 'touch',
    PEN: 'pen'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Carousel =
  /*#__PURE__*/
  function () {
    function Carousel(element, config) {
      this._items = null;
      this._interval = null;
      this._activeElement = null;
      this._isPaused = false;
      this._isSliding = false;
      this.touchTimeout = null;
      this.touchStartX = 0;
      this.touchDeltaX = 0;
      this._config = this._getConfig(config);
      this._element = element;
      this._indicatorsElement = this._element.querySelector(Selector$2.INDICATORS);
      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
      this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);

      this._addEventListeners();
    } // Getters


    var _proto = Carousel.prototype;

    // Public
    _proto.next = function next() {
      if (!this._isSliding) {
        this._slide(Direction.NEXT);
      }
    };

    _proto.nextWhenVisible = function nextWhenVisible() {
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      if (!document.hidden && $(this._element).is(':visible') && $(this._element).css('visibility') !== 'hidden') {
        this.next();
      }
    };

    _proto.prev = function prev() {
      if (!this._isSliding) {
        this._slide(Direction.PREV);
      }
    };

    _proto.pause = function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if (this._element.querySelector(Selector$2.NEXT_PREV)) {
        Util.triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    };

    _proto.cycle = function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config.interval && !this._isPaused) {
        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    };

    _proto.to = function to(index) {
      var _this = this;

      this._activeElement = this._element.querySelector(Selector$2.ACTIVE_ITEM);

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        $(this._element).one(Event$2.SLID, function () {
          return _this.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

      this._slide(direction, this._items[index]);
    };

    _proto.dispose = function dispose() {
      $(this._element).off(EVENT_KEY$2);
      $.removeData(this._element, DATA_KEY$2);
      this._items = null;
      this._config = null;
      this._element = null;
      this._interval = null;
      this._isPaused = null;
      this._isSliding = null;
      this._activeElement = null;
      this._indicatorsElement = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default, {}, config);
      Util.typeCheckConfig(NAME$2, config, DefaultType);
      return config;
    };

    _proto._handleSwipe = function _handleSwipe() {
      var absDeltax = Math.abs(this.touchDeltaX);

      if (absDeltax <= SWIPE_THRESHOLD) {
        return;
      }

      var direction = absDeltax / this.touchDeltaX;
      this.touchDeltaX = 0; // swipe left

      if (direction > 0) {
        this.prev();
      } // swipe right


      if (direction < 0) {
        this.next();
      }
    };

    _proto._addEventListeners = function _addEventListeners() {
      var _this2 = this;

      if (this._config.keyboard) {
        $(this._element).on(Event$2.KEYDOWN, function (event) {
          return _this2._keydown(event);
        });
      }

      if (this._config.pause === 'hover') {
        $(this._element).on(Event$2.MOUSEENTER, function (event) {
          return _this2.pause(event);
        }).on(Event$2.MOUSELEAVE, function (event) {
          return _this2.cycle(event);
        });
      }

      if (this._config.touch) {
        this._addTouchEventListeners();
      }
    };

    _proto._addTouchEventListeners = function _addTouchEventListeners() {
      var _this3 = this;

      if (!this._touchSupported) {
        return;
      }

      var start = function start(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchStartX = event.originalEvent.clientX;
        } else if (!_this3._pointerEvent) {
          _this3.touchStartX = event.originalEvent.touches[0].clientX;
        }
      };

      var move = function move(event) {
        // ensure swiping with one touch and not pinching
        if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {
          _this3.touchDeltaX = 0;
        } else {
          _this3.touchDeltaX = event.originalEvent.touches[0].clientX - _this3.touchStartX;
        }
      };

      var end = function end(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX;
        }

        _this3._handleSwipe();

        if (_this3._config.pause === 'hover') {
          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          _this3.pause();

          if (_this3.touchTimeout) {
            clearTimeout(_this3.touchTimeout);
          }

          _this3.touchTimeout = setTimeout(function (event) {
            return _this3.cycle(event);
          }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
        }
      };

      $(this._element.querySelectorAll(Selector$2.ITEM_IMG)).on(Event$2.DRAG_START, function (e) {
        return e.preventDefault();
      });

      if (this._pointerEvent) {
        $(this._element).on(Event$2.POINTERDOWN, function (event) {
          return start(event);
        });
        $(this._element).on(Event$2.POINTERUP, function (event) {
          return end(event);
        });

        this._element.classList.add(ClassName$2.POINTER_EVENT);
      } else {
        $(this._element).on(Event$2.TOUCHSTART, function (event) {
          return start(event);
        });
        $(this._element).on(Event$2.TOUCHMOVE, function (event) {
          return move(event);
        });
        $(this._element).on(Event$2.TOUCHEND, function (event) {
          return end(event);
        });
      }
    };

    _proto._keydown = function _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      switch (event.which) {
        case ARROW_LEFT_KEYCODE:
          event.preventDefault();
          this.prev();
          break;

        case ARROW_RIGHT_KEYCODE:
          event.preventDefault();
          this.next();
          break;
      }
    };

    _proto._getItemIndex = function _getItemIndex(element) {
      this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(Selector$2.ITEM)) : [];
      return this._items.indexOf(element);
    };

    _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
      var isNextDirection = direction === Direction.NEXT;
      var isPrevDirection = direction === Direction.PREV;

      var activeIndex = this._getItemIndex(activeElement);

      var lastItemIndex = this._items.length - 1;
      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

      if (isGoingToWrap && !this._config.wrap) {
        return activeElement;
      }

      var delta = direction === Direction.PREV ? -1 : 1;
      var itemIndex = (activeIndex + delta) % this._items.length;
      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
    };

    _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);

      var fromIndex = this._getItemIndex(this._element.querySelector(Selector$2.ACTIVE_ITEM));

      var slideEvent = $.Event(Event$2.SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
      $(this._element).trigger(slideEvent);
      return slideEvent;
    };

    _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(Selector$2.ACTIVE));
        $(indicators).removeClass(ClassName$2.ACTIVE);

        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

        if (nextIndicator) {
          $(nextIndicator).addClass(ClassName$2.ACTIVE);
        }
      }
    };

    _proto._slide = function _slide(direction, element) {
      var _this4 = this;

      var activeElement = this._element.querySelector(Selector$2.ACTIVE_ITEM);

      var activeElementIndex = this._getItemIndex(activeElement);

      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

      var nextElementIndex = this._getItemIndex(nextElement);

      var isCycling = Boolean(this._interval);
      var directionalClassName;
      var orderClassName;
      var eventDirectionName;

      if (direction === Direction.NEXT) {
        directionalClassName = ClassName$2.LEFT;
        orderClassName = ClassName$2.NEXT;
        eventDirectionName = Direction.LEFT;
      } else {
        directionalClassName = ClassName$2.RIGHT;
        orderClassName = ClassName$2.PREV;
        eventDirectionName = Direction.RIGHT;
      }

      if (nextElement && $(nextElement).hasClass(ClassName$2.ACTIVE)) {
        this._isSliding = false;
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.isDefaultPrevented()) {
        return;
      }

      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      var slidEvent = $.Event(Event$2.SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });

      if ($(this._element).hasClass(ClassName$2.SLIDE)) {
        $(nextElement).addClass(orderClassName);
        Util.reflow(nextElement);
        $(activeElement).addClass(directionalClassName);
        $(nextElement).addClass(directionalClassName);
        var nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10);

        if (nextElementInterval) {
          this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
          this._config.interval = nextElementInterval;
        } else {
          this._config.interval = this._config.defaultInterval || this._config.interval;
        }

        var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
        $(activeElement).one(Util.TRANSITION_END, function () {
          $(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName$2.ACTIVE);
          $(activeElement).removeClass(ClassName$2.ACTIVE + " " + orderClassName + " " + directionalClassName);
          _this4._isSliding = false;
          setTimeout(function () {
            return $(_this4._element).trigger(slidEvent);
          }, 0);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        $(activeElement).removeClass(ClassName$2.ACTIVE);
        $(nextElement).addClass(ClassName$2.ACTIVE);
        this._isSliding = false;
        $(this._element).trigger(slidEvent);
      }

      if (isCycling) {
        this.cycle();
      }
    } // Static
    ;

    Carousel._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$2);

        var _config = _objectSpread2({}, Default, {}, $(this).data());

        if (typeof config === 'object') {
          _config = _objectSpread2({}, _config, {}, config);
        }

        var action = typeof config === 'string' ? config : _config.slide;

        if (!data) {
          data = new Carousel(this, _config);
          $(this).data(DATA_KEY$2, data);
        }

        if (typeof config === 'number') {
          data.to(config);
        } else if (typeof action === 'string') {
          if (typeof data[action] === 'undefined') {
            throw new TypeError("No method named \"" + action + "\"");
          }

          data[action]();
        } else if (_config.interval && _config.ride) {
          data.pause();
          data.cycle();
        }
      });
    };

    Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
      var selector = Util.getSelectorFromElement(this);

      if (!selector) {
        return;
      }

      var target = $(selector)[0];

      if (!target || !$(target).hasClass(ClassName$2.CAROUSEL)) {
        return;
      }

      var config = _objectSpread2({}, $(target).data(), {}, $(this).data());

      var slideIndex = this.getAttribute('data-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel._jQueryInterface.call($(target), config);

      if (slideIndex) {
        $(target).data(DATA_KEY$2).to(slideIndex);
      }

      event.preventDefault();
    };

    _createClass(Carousel, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$2;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);

    return Carousel;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$2.CLICK_DATA_API, Selector$2.DATA_SLIDE, Carousel._dataApiClickHandler);
  $(window).on(Event$2.LOAD_DATA_API, function () {
    var carousels = [].slice.call(document.querySelectorAll(Selector$2.DATA_RIDE));

    for (var i = 0, len = carousels.length; i < len; i++) {
      var $carousel = $(carousels[i]);

      Carousel._jQueryInterface.call($carousel, $carousel.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$2] = Carousel._jQueryInterface;
  $.fn[NAME$2].Constructor = Carousel;

  $.fn[NAME$2].noConflict = function () {
    $.fn[NAME$2] = JQUERY_NO_CONFLICT$2;
    return Carousel._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$3 = 'collapse';
  var VERSION$3 = '4.4.1';
  var DATA_KEY$3 = 'bs.collapse';
  var EVENT_KEY$3 = "." + DATA_KEY$3;
  var DATA_API_KEY$3 = '.data-api';
  var JQUERY_NO_CONFLICT$3 = $.fn[NAME$3];
  var Default$1 = {
    toggle: true,
    parent: ''
  };
  var DefaultType$1 = {
    toggle: 'boolean',
    parent: '(string|element)'
  };
  var Event$3 = {
    SHOW: "show" + EVENT_KEY$3,
    SHOWN: "shown" + EVENT_KEY$3,
    HIDE: "hide" + EVENT_KEY$3,
    HIDDEN: "hidden" + EVENT_KEY$3,
    CLICK_DATA_API: "click" + EVENT_KEY$3 + DATA_API_KEY$3
  };
  var ClassName$3 = {
    SHOW: 'show',
    COLLAPSE: 'collapse',
    COLLAPSING: 'collapsing',
    COLLAPSED: 'collapsed'
  };
  var Dimension = {
    WIDTH: 'width',
    HEIGHT: 'height'
  };
  var Selector$3 = {
    ACTIVES: '.show, .collapsing',
    DATA_TOGGLE: '[data-toggle="collapse"]'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Collapse =
  /*#__PURE__*/
  function () {
    function Collapse(element, config) {
      this._isTransitioning = false;
      this._element = element;
      this._config = this._getConfig(config);
      this._triggerArray = [].slice.call(document.querySelectorAll("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
      var toggleList = [].slice.call(document.querySelectorAll(Selector$3.DATA_TOGGLE));

      for (var i = 0, len = toggleList.length; i < len; i++) {
        var elem = toggleList[i];
        var selector = Util.getSelectorFromElement(elem);
        var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {
          return foundElem === element;
        });

        if (selector !== null && filterElement.length > 0) {
          this._selector = selector;

          this._triggerArray.push(elem);
        }
      }

      this._parent = this._config.parent ? this._getParent() : null;

      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
      }

      if (this._config.toggle) {
        this.toggle();
      }
    } // Getters


    var _proto = Collapse.prototype;

    // Public
    _proto.toggle = function toggle() {
      if ($(this._element).hasClass(ClassName$3.SHOW)) {
        this.hide();
      } else {
        this.show();
      }
    };

    _proto.show = function show() {
      var _this = this;

      if (this._isTransitioning || $(this._element).hasClass(ClassName$3.SHOW)) {
        return;
      }

      var actives;
      var activesData;

      if (this._parent) {
        actives = [].slice.call(this._parent.querySelectorAll(Selector$3.ACTIVES)).filter(function (elem) {
          if (typeof _this._config.parent === 'string') {
            return elem.getAttribute('data-parent') === _this._config.parent;
          }

          return elem.classList.contains(ClassName$3.COLLAPSE);
        });

        if (actives.length === 0) {
          actives = null;
        }
      }

      if (actives) {
        activesData = $(actives).not(this._selector).data(DATA_KEY$3);

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = $.Event(Event$3.SHOW);
      $(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      if (actives) {
        Collapse._jQueryInterface.call($(actives).not(this._selector), 'hide');

        if (!activesData) {
          $(actives).data(DATA_KEY$3, null);
        }
      }

      var dimension = this._getDimension();

      $(this._element).removeClass(ClassName$3.COLLAPSE).addClass(ClassName$3.COLLAPSING);
      this._element.style[dimension] = 0;

      if (this._triggerArray.length) {
        $(this._triggerArray).removeClass(ClassName$3.COLLAPSED).attr('aria-expanded', true);
      }

      this.setTransitioning(true);

      var complete = function complete() {
        $(_this._element).removeClass(ClassName$3.COLLAPSING).addClass(ClassName$3.COLLAPSE).addClass(ClassName$3.SHOW);
        _this._element.style[dimension] = '';

        _this.setTransitioning(false);

        $(_this._element).trigger(Event$3.SHOWN);
      };

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = "scroll" + capitalizedDimension;
      var transitionDuration = Util.getTransitionDurationFromElement(this._element);
      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      this._element.style[dimension] = this._element[scrollSize] + "px";
    };

    _proto.hide = function hide() {
      var _this2 = this;

      if (this._isTransitioning || !$(this._element).hasClass(ClassName$3.SHOW)) {
        return;
      }

      var startEvent = $.Event(Event$3.HIDE);
      $(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
      Util.reflow(this._element);
      $(this._element).addClass(ClassName$3.COLLAPSING).removeClass(ClassName$3.COLLAPSE).removeClass(ClassName$3.SHOW);
      var triggerArrayLength = this._triggerArray.length;

      if (triggerArrayLength > 0) {
        for (var i = 0; i < triggerArrayLength; i++) {
          var trigger = this._triggerArray[i];
          var selector = Util.getSelectorFromElement(trigger);

          if (selector !== null) {
            var $elem = $([].slice.call(document.querySelectorAll(selector)));

            if (!$elem.hasClass(ClassName$3.SHOW)) {
              $(trigger).addClass(ClassName$3.COLLAPSED).attr('aria-expanded', false);
            }
          }
        }
      }

      this.setTransitioning(true);

      var complete = function complete() {
        _this2.setTransitioning(false);

        $(_this2._element).removeClass(ClassName$3.COLLAPSING).addClass(ClassName$3.COLLAPSE).trigger(Event$3.HIDDEN);
      };

      this._element.style[dimension] = '';
      var transitionDuration = Util.getTransitionDurationFromElement(this._element);
      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
    };

    _proto.setTransitioning = function setTransitioning(isTransitioning) {
      this._isTransitioning = isTransitioning;
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$3);
      this._config = null;
      this._parent = null;
      this._element = null;
      this._triggerArray = null;
      this._isTransitioning = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default$1, {}, config);
      config.toggle = Boolean(config.toggle); // Coerce string values

      Util.typeCheckConfig(NAME$3, config, DefaultType$1);
      return config;
    };

    _proto._getDimension = function _getDimension() {
      var hasWidth = $(this._element).hasClass(Dimension.WIDTH);
      return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
    };

    _proto._getParent = function _getParent() {
      var _this3 = this;

      var parent;

      if (Util.isElement(this._config.parent)) {
        parent = this._config.parent; // It's a jQuery object

        if (typeof this._config.parent.jquery !== 'undefined') {
          parent = this._config.parent[0];
        }
      } else {
        parent = document.querySelector(this._config.parent);
      }

      var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
      var children = [].slice.call(parent.querySelectorAll(selector));
      $(children).each(function (i, element) {
        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
      });
      return parent;
    };

    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
      var isOpen = $(element).hasClass(ClassName$3.SHOW);

      if (triggerArray.length) {
        $(triggerArray).toggleClass(ClassName$3.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
      }
    } // Static
    ;

    Collapse._getTargetFromElement = function _getTargetFromElement(element) {
      var selector = Util.getSelectorFromElement(element);
      return selector ? document.querySelector(selector) : null;
    };

    Collapse._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $(this);
        var data = $this.data(DATA_KEY$3);

        var _config = _objectSpread2({}, Default$1, {}, $this.data(), {}, typeof config === 'object' && config ? config : {});

        if (!data && _config.toggle && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        if (!data) {
          data = new Collapse(this, _config);
          $this.data(DATA_KEY$3, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Collapse, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$3;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$1;
      }
    }]);

    return Collapse;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$3.CLICK_DATA_API, Selector$3.DATA_TOGGLE, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.currentTarget.tagName === 'A') {
      event.preventDefault();
    }

    var $trigger = $(this);
    var selector = Util.getSelectorFromElement(this);
    var selectors = [].slice.call(document.querySelectorAll(selector));
    $(selectors).each(function () {
      var $target = $(this);
      var data = $target.data(DATA_KEY$3);
      var config = data ? 'toggle' : $trigger.data();

      Collapse._jQueryInterface.call($target, config);
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$3] = Collapse._jQueryInterface;
  $.fn[NAME$3].Constructor = Collapse;

  $.fn[NAME$3].noConflict = function () {
    $.fn[NAME$3] = JQUERY_NO_CONFLICT$3;
    return Collapse._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$4 = 'dropdown';
  var VERSION$4 = '4.4.1';
  var DATA_KEY$4 = 'bs.dropdown';
  var EVENT_KEY$4 = "." + DATA_KEY$4;
  var DATA_API_KEY$4 = '.data-api';
  var JQUERY_NO_CONFLICT$4 = $.fn[NAME$4];
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

  var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

  var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

  var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

  var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
  var Event$4 = {
    HIDE: "hide" + EVENT_KEY$4,
    HIDDEN: "hidden" + EVENT_KEY$4,
    SHOW: "show" + EVENT_KEY$4,
    SHOWN: "shown" + EVENT_KEY$4,
    CLICK: "click" + EVENT_KEY$4,
    CLICK_DATA_API: "click" + EVENT_KEY$4 + DATA_API_KEY$4,
    KEYDOWN_DATA_API: "keydown" + EVENT_KEY$4 + DATA_API_KEY$4,
    KEYUP_DATA_API: "keyup" + EVENT_KEY$4 + DATA_API_KEY$4
  };
  var ClassName$4 = {
    DISABLED: 'disabled',
    SHOW: 'show',
    DROPUP: 'dropup',
    DROPRIGHT: 'dropright',
    DROPLEFT: 'dropleft',
    MENURIGHT: 'dropdown-menu-right',
    MENULEFT: 'dropdown-menu-left',
    POSITION_STATIC: 'position-static'
  };
  var Selector$4 = {
    DATA_TOGGLE: '[data-toggle="dropdown"]',
    FORM_CHILD: '.dropdown form',
    MENU: '.dropdown-menu',
    NAVBAR_NAV: '.navbar-nav',
    VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'
  };
  var AttachmentMap = {
    TOP: 'top-start',
    TOPEND: 'top-end',
    BOTTOM: 'bottom-start',
    BOTTOMEND: 'bottom-end',
    RIGHT: 'right-start',
    RIGHTEND: 'right-end',
    LEFT: 'left-start',
    LEFTEND: 'left-end'
  };
  var Default$2 = {
    offset: 0,
    flip: true,
    boundary: 'scrollParent',
    reference: 'toggle',
    display: 'dynamic',
    popperConfig: null
  };
  var DefaultType$2 = {
    offset: '(number|string|function)',
    flip: 'boolean',
    boundary: '(string|element)',
    reference: '(string|element)',
    display: 'string',
    popperConfig: '(null|object)'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Dropdown =
  /*#__PURE__*/
  function () {
    function Dropdown(element, config) {
      this._element = element;
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();

      this._addEventListeners();
    } // Getters


    var _proto = Dropdown.prototype;

    // Public
    _proto.toggle = function toggle() {
      if (this._element.disabled || $(this._element).hasClass(ClassName$4.DISABLED)) {
        return;
      }

      var isActive = $(this._menu).hasClass(ClassName$4.SHOW);

      Dropdown._clearMenus();

      if (isActive) {
        return;
      }

      this.show(true);
    };

    _proto.show = function show(usePopper) {
      if (usePopper === void 0) {
        usePopper = false;
      }

      if (this._element.disabled || $(this._element).hasClass(ClassName$4.DISABLED) || $(this._menu).hasClass(ClassName$4.SHOW)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var showEvent = $.Event(Event$4.SHOW, relatedTarget);

      var parent = Dropdown._getParentFromElement(this._element);

      $(parent).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      } // Disable totally Popper.js for Dropdown in Navbar


      if (!this._inNavbar && usePopper) {
        /**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */
        if (typeof Popper === 'undefined') {
          throw new TypeError('Bootstrap\'s dropdowns require Popper.js (https://popper.js.org/)');
        }

        var referenceElement = this._element;

        if (this._config.reference === 'parent') {
          referenceElement = parent;
        } else if (Util.isElement(this._config.reference)) {
          referenceElement = this._config.reference; // Check if it's jQuery element

          if (typeof this._config.reference.jquery !== 'undefined') {
            referenceElement = this._config.reference[0];
          }
        } // If boundary is not `scrollParent`, then set position to `static`
        // to allow the menu to "escape" the scroll parent's boundaries
        // https://github.com/twbs/bootstrap/issues/24251


        if (this._config.boundary !== 'scrollParent') {
          $(parent).addClass(ClassName$4.POSITION_STATIC);
        }

        this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement && $(parent).closest(Selector$4.NAVBAR_NAV).length === 0) {
        $(document.body).children().on('mouseover', null, $.noop);
      }

      this._element.focus();

      this._element.setAttribute('aria-expanded', true);

      $(this._menu).toggleClass(ClassName$4.SHOW);
      $(parent).toggleClass(ClassName$4.SHOW).trigger($.Event(Event$4.SHOWN, relatedTarget));
    };

    _proto.hide = function hide() {
      if (this._element.disabled || $(this._element).hasClass(ClassName$4.DISABLED) || !$(this._menu).hasClass(ClassName$4.SHOW)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var hideEvent = $.Event(Event$4.HIDE, relatedTarget);

      var parent = Dropdown._getParentFromElement(this._element);

      $(parent).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      if (this._popper) {
        this._popper.destroy();
      }

      $(this._menu).toggleClass(ClassName$4.SHOW);
      $(parent).toggleClass(ClassName$4.SHOW).trigger($.Event(Event$4.HIDDEN, relatedTarget));
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$4);
      $(this._element).off(EVENT_KEY$4);
      this._element = null;
      this._menu = null;

      if (this._popper !== null) {
        this._popper.destroy();

        this._popper = null;
      }
    };

    _proto.update = function update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Private
    ;

    _proto._addEventListeners = function _addEventListeners() {
      var _this = this;

      $(this._element).on(Event$4.CLICK, function (event) {
        event.preventDefault();
        event.stopPropagation();

        _this.toggle();
      });
    };

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, this.constructor.Default, {}, $(this._element).data(), {}, config);
      Util.typeCheckConfig(NAME$4, config, this.constructor.DefaultType);
      return config;
    };

    _proto._getMenuElement = function _getMenuElement() {
      if (!this._menu) {
        var parent = Dropdown._getParentFromElement(this._element);

        if (parent) {
          this._menu = parent.querySelector(Selector$4.MENU);
        }
      }

      return this._menu;
    };

    _proto._getPlacement = function _getPlacement() {
      var $parentDropdown = $(this._element.parentNode);
      var placement = AttachmentMap.BOTTOM; // Handle dropup

      if ($parentDropdown.hasClass(ClassName$4.DROPUP)) {
        placement = AttachmentMap.TOP;

        if ($(this._menu).hasClass(ClassName$4.MENURIGHT)) {
          placement = AttachmentMap.TOPEND;
        }
      } else if ($parentDropdown.hasClass(ClassName$4.DROPRIGHT)) {
        placement = AttachmentMap.RIGHT;
      } else if ($parentDropdown.hasClass(ClassName$4.DROPLEFT)) {
        placement = AttachmentMap.LEFT;
      } else if ($(this._menu).hasClass(ClassName$4.MENURIGHT)) {
        placement = AttachmentMap.BOTTOMEND;
      }

      return placement;
    };

    _proto._detectNavbar = function _detectNavbar() {
      return $(this._element).closest('.navbar').length > 0;
    };

    _proto._getOffset = function _getOffset() {
      var _this2 = this;

      var offset = {};

      if (typeof this._config.offset === 'function') {
        offset.fn = function (data) {
          data.offsets = _objectSpread2({}, data.offsets, {}, _this2._config.offset(data.offsets, _this2._element) || {});
          return data;
        };
      } else {
        offset.offset = this._config.offset;
      }

      return offset;
    };

    _proto._getPopperConfig = function _getPopperConfig() {
      var popperConfig = {
        placement: this._getPlacement(),
        modifiers: {
          offset: this._getOffset(),
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      }; // Disable Popper.js if we have a static display

      if (this._config.display === 'static') {
        popperConfig.modifiers.applyStyle = {
          enabled: false
        };
      }

      return _objectSpread2({}, popperConfig, {}, this._config.popperConfig);
    } // Static
    ;

    Dropdown._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$4);

        var _config = typeof config === 'object' ? config : null;

        if (!data) {
          data = new Dropdown(this, _config);
          $(this).data(DATA_KEY$4, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    Dropdown._clearMenus = function _clearMenus(event) {
      if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
        return;
      }

      var toggles = [].slice.call(document.querySelectorAll(Selector$4.DATA_TOGGLE));

      for (var i = 0, len = toggles.length; i < len; i++) {
        var parent = Dropdown._getParentFromElement(toggles[i]);

        var context = $(toggles[i]).data(DATA_KEY$4);
        var relatedTarget = {
          relatedTarget: toggles[i]
        };

        if (event && event.type === 'click') {
          relatedTarget.clickEvent = event;
        }

        if (!context) {
          continue;
        }

        var dropdownMenu = context._menu;

        if (!$(parent).hasClass(ClassName$4.SHOW)) {
          continue;
        }

        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $.contains(parent, event.target)) {
          continue;
        }

        var hideEvent = $.Event(Event$4.HIDE, relatedTarget);
        $(parent).trigger(hideEvent);

        if (hideEvent.isDefaultPrevented()) {
          continue;
        } // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support


        if ('ontouchstart' in document.documentElement) {
          $(document.body).children().off('mouseover', null, $.noop);
        }

        toggles[i].setAttribute('aria-expanded', 'false');

        if (context._popper) {
          context._popper.destroy();
        }

        $(dropdownMenu).removeClass(ClassName$4.SHOW);
        $(parent).removeClass(ClassName$4.SHOW).trigger($.Event(Event$4.HIDDEN, relatedTarget));
      }
    };

    Dropdown._getParentFromElement = function _getParentFromElement(element) {
      var parent;
      var selector = Util.getSelectorFromElement(element);

      if (selector) {
        parent = document.querySelector(selector);
      }

      return parent || element.parentNode;
    } // eslint-disable-next-line complexity
    ;

    Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $(event.target).closest(Selector$4.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (this.disabled || $(this).hasClass(ClassName$4.DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this);

      var isActive = $(parent).hasClass(ClassName$4.SHOW);

      if (!isActive && event.which === ESCAPE_KEYCODE) {
        return;
      }

      if (!isActive || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
        if (event.which === ESCAPE_KEYCODE) {
          var toggle = parent.querySelector(Selector$4.DATA_TOGGLE);
          $(toggle).trigger('focus');
        }

        $(this).trigger('click');
        return;
      }

      var items = [].slice.call(parent.querySelectorAll(Selector$4.VISIBLE_ITEMS)).filter(function (item) {
        return $(item).is(':visible');
      });

      if (items.length === 0) {
        return;
      }

      var index = items.indexOf(event.target);

      if (event.which === ARROW_UP_KEYCODE && index > 0) {
        // Up
        index--;
      }

      if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
        // Down
        index++;
      }

      if (index < 0) {
        index = 0;
      }

      items[index].focus();
    };

    _createClass(Dropdown, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$4;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$2;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$2;
      }
    }]);

    return Dropdown;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$4.KEYDOWN_DATA_API, Selector$4.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event$4.KEYDOWN_DATA_API, Selector$4.MENU, Dropdown._dataApiKeydownHandler).on(Event$4.CLICK_DATA_API + " " + Event$4.KEYUP_DATA_API, Dropdown._clearMenus).on(Event$4.CLICK_DATA_API, Selector$4.DATA_TOGGLE, function (event) {
    event.preventDefault();
    event.stopPropagation();

    Dropdown._jQueryInterface.call($(this), 'toggle');
  }).on(Event$4.CLICK_DATA_API, Selector$4.FORM_CHILD, function (e) {
    e.stopPropagation();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$4] = Dropdown._jQueryInterface;
  $.fn[NAME$4].Constructor = Dropdown;

  $.fn[NAME$4].noConflict = function () {
    $.fn[NAME$4] = JQUERY_NO_CONFLICT$4;
    return Dropdown._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$5 = 'modal';
  var VERSION$5 = '4.4.1';
  var DATA_KEY$5 = 'bs.modal';
  var EVENT_KEY$5 = "." + DATA_KEY$5;
  var DATA_API_KEY$5 = '.data-api';
  var JQUERY_NO_CONFLICT$5 = $.fn[NAME$5];
  var ESCAPE_KEYCODE$1 = 27; // KeyboardEvent.which value for Escape (Esc) key

  var Default$3 = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: true
  };
  var DefaultType$3 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean',
    show: 'boolean'
  };
  var Event$5 = {
    HIDE: "hide" + EVENT_KEY$5,
    HIDE_PREVENTED: "hidePrevented" + EVENT_KEY$5,
    HIDDEN: "hidden" + EVENT_KEY$5,
    SHOW: "show" + EVENT_KEY$5,
    SHOWN: "shown" + EVENT_KEY$5,
    FOCUSIN: "focusin" + EVENT_KEY$5,
    RESIZE: "resize" + EVENT_KEY$5,
    CLICK_DISMISS: "click.dismiss" + EVENT_KEY$5,
    KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY$5,
    MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY$5,
    MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY$5,
    CLICK_DATA_API: "click" + EVENT_KEY$5 + DATA_API_KEY$5
  };
  var ClassName$5 = {
    SCROLLABLE: 'modal-dialog-scrollable',
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    SHOW: 'show',
    STATIC: 'modal-static'
  };
  var Selector$5 = {
    DIALOG: '.modal-dialog',
    MODAL_BODY: '.modal-body',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
    STICKY_CONTENT: '.sticky-top'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Modal =
  /*#__PURE__*/
  function () {
    function Modal(element, config) {
      this._config = this._getConfig(config);
      this._element = element;
      this._dialog = element.querySelector(Selector$5.DIALOG);
      this._backdrop = null;
      this._isShown = false;
      this._isBodyOverflowing = false;
      this._ignoreBackdropClick = false;
      this._isTransitioning = false;
      this._scrollbarWidth = 0;
    } // Getters


    var _proto = Modal.prototype;

    // Public
    _proto.toggle = function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    };

    _proto.show = function show(relatedTarget) {
      var _this = this;

      if (this._isShown || this._isTransitioning) {
        return;
      }

      if ($(this._element).hasClass(ClassName$5.FADE)) {
        this._isTransitioning = true;
      }

      var showEvent = $.Event(Event$5.SHOW, {
        relatedTarget: relatedTarget
      });
      $(this._element).trigger(showEvent);

      if (this._isShown || showEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = true;

      this._checkScrollbar();

      this._setScrollbar();

      this._adjustDialog();

      this._setEscapeEvent();

      this._setResizeEvent();

      $(this._element).on(Event$5.CLICK_DISMISS, Selector$5.DATA_DISMISS, function (event) {
        return _this.hide(event);
      });
      $(this._dialog).on(Event$5.MOUSEDOWN_DISMISS, function () {
        $(_this._element).one(Event$5.MOUSEUP_DISMISS, function (event) {
          if ($(event.target).is(_this._element)) {
            _this._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(function () {
        return _this._showElement(relatedTarget);
      });
    };

    _proto.hide = function hide(event) {
      var _this2 = this;

      if (event) {
        event.preventDefault();
      }

      if (!this._isShown || this._isTransitioning) {
        return;
      }

      var hideEvent = $.Event(Event$5.HIDE);
      $(this._element).trigger(hideEvent);

      if (!this._isShown || hideEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = false;
      var transition = $(this._element).hasClass(ClassName$5.FADE);

      if (transition) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent();

      $(document).off(Event$5.FOCUSIN);
      $(this._element).removeClass(ClassName$5.SHOW);
      $(this._element).off(Event$5.CLICK_DISMISS);
      $(this._dialog).off(Event$5.MOUSEDOWN_DISMISS);

      if (transition) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, function (event) {
          return _this2._hideModal(event);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        this._hideModal();
      }
    };

    _proto.dispose = function dispose() {
      [window, this._element, this._dialog].forEach(function (htmlElement) {
        return $(htmlElement).off(EVENT_KEY$5);
      });
      /**
       * `document` has 2 events `Event.FOCUSIN` and `Event.CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `Event.CLICK_DATA_API` event that should remain
       */

      $(document).off(Event$5.FOCUSIN);
      $.removeData(this._element, DATA_KEY$5);
      this._config = null;
      this._element = null;
      this._dialog = null;
      this._backdrop = null;
      this._isShown = null;
      this._isBodyOverflowing = null;
      this._ignoreBackdropClick = null;
      this._isTransitioning = null;
      this._scrollbarWidth = null;
    };

    _proto.handleUpdate = function handleUpdate() {
      this._adjustDialog();
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default$3, {}, config);
      Util.typeCheckConfig(NAME$5, config, DefaultType$3);
      return config;
    };

    _proto._triggerBackdropTransition = function _triggerBackdropTransition() {
      var _this3 = this;

      if (this._config.backdrop === 'static') {
        var hideEventPrevented = $.Event(Event$5.HIDE_PREVENTED);
        $(this._element).trigger(hideEventPrevented);

        if (hideEventPrevented.defaultPrevented) {
          return;
        }

        this._element.classList.add(ClassName$5.STATIC);

        var modalTransitionDuration = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, function () {
          _this3._element.classList.remove(ClassName$5.STATIC);
        }).emulateTransitionEnd(modalTransitionDuration);

        this._element.focus();
      } else {
        this.hide();
      }
    };

    _proto._showElement = function _showElement(relatedTarget) {
      var _this4 = this;

      var transition = $(this._element).hasClass(ClassName$5.FADE);
      var modalBody = this._dialog ? this._dialog.querySelector(Selector$5.MODAL_BODY) : null;

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // Don't move modal's DOM position
        document.body.appendChild(this._element);
      }

      this._element.style.display = 'block';

      this._element.removeAttribute('aria-hidden');

      this._element.setAttribute('aria-modal', true);

      if ($(this._dialog).hasClass(ClassName$5.SCROLLABLE) && modalBody) {
        modalBody.scrollTop = 0;
      } else {
        this._element.scrollTop = 0;
      }

      if (transition) {
        Util.reflow(this._element);
      }

      $(this._element).addClass(ClassName$5.SHOW);

      if (this._config.focus) {
        this._enforceFocus();
      }

      var shownEvent = $.Event(Event$5.SHOWN, {
        relatedTarget: relatedTarget
      });

      var transitionComplete = function transitionComplete() {
        if (_this4._config.focus) {
          _this4._element.focus();
        }

        _this4._isTransitioning = false;
        $(_this4._element).trigger(shownEvent);
      };

      if (transition) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._dialog);
        $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
      } else {
        transitionComplete();
      }
    };

    _proto._enforceFocus = function _enforceFocus() {
      var _this5 = this;

      $(document).off(Event$5.FOCUSIN) // Guard against infinite focus loop
      .on(Event$5.FOCUSIN, function (event) {
        if (document !== event.target && _this5._element !== event.target && $(_this5._element).has(event.target).length === 0) {
          _this5._element.focus();
        }
      });
    };

    _proto._setEscapeEvent = function _setEscapeEvent() {
      var _this6 = this;

      if (this._isShown && this._config.keyboard) {
        $(this._element).on(Event$5.KEYDOWN_DISMISS, function (event) {
          if (event.which === ESCAPE_KEYCODE$1) {
            _this6._triggerBackdropTransition();
          }
        });
      } else if (!this._isShown) {
        $(this._element).off(Event$5.KEYDOWN_DISMISS);
      }
    };

    _proto._setResizeEvent = function _setResizeEvent() {
      var _this7 = this;

      if (this._isShown) {
        $(window).on(Event$5.RESIZE, function (event) {
          return _this7.handleUpdate(event);
        });
      } else {
        $(window).off(Event$5.RESIZE);
      }
    };

    _proto._hideModal = function _hideModal() {
      var _this8 = this;

      this._element.style.display = 'none';

      this._element.setAttribute('aria-hidden', true);

      this._element.removeAttribute('aria-modal');

      this._isTransitioning = false;

      this._showBackdrop(function () {
        $(document.body).removeClass(ClassName$5.OPEN);

        _this8._resetAdjustments();

        _this8._resetScrollbar();

        $(_this8._element).trigger(Event$5.HIDDEN);
      });
    };

    _proto._removeBackdrop = function _removeBackdrop() {
      if (this._backdrop) {
        $(this._backdrop).remove();
        this._backdrop = null;
      }
    };

    _proto._showBackdrop = function _showBackdrop(callback) {
      var _this9 = this;

      var animate = $(this._element).hasClass(ClassName$5.FADE) ? ClassName$5.FADE : '';

      if (this._isShown && this._config.backdrop) {
        this._backdrop = document.createElement('div');
        this._backdrop.className = ClassName$5.BACKDROP;

        if (animate) {
          this._backdrop.classList.add(animate);
        }

        $(this._backdrop).appendTo(document.body);
        $(this._element).on(Event$5.CLICK_DISMISS, function (event) {
          if (_this9._ignoreBackdropClick) {
            _this9._ignoreBackdropClick = false;
            return;
          }

          if (event.target !== event.currentTarget) {
            return;
          }

          _this9._triggerBackdropTransition();
        });

        if (animate) {
          Util.reflow(this._backdrop);
        }

        $(this._backdrop).addClass(ClassName$5.SHOW);

        if (!callback) {
          return;
        }

        if (!animate) {
          callback();
          return;
        }

        var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
        $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
      } else if (!this._isShown && this._backdrop) {
        $(this._backdrop).removeClass(ClassName$5.SHOW);

        var callbackRemove = function callbackRemove() {
          _this9._removeBackdrop();

          if (callback) {
            callback();
          }
        };

        if ($(this._element).hasClass(ClassName$5.FADE)) {
          var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);

          $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
        } else {
          callbackRemove();
        }
      } else if (callback) {
        callback();
      }
    } // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // todo (fat): these should probably be refactored out of modal.js
    // ----------------------------------------------------------------------
    ;

    _proto._adjustDialog = function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!this._isBodyOverflowing && isModalOverflowing) {
        this._element.style.paddingLeft = this._scrollbarWidth + "px";
      }

      if (this._isBodyOverflowing && !isModalOverflowing) {
        this._element.style.paddingRight = this._scrollbarWidth + "px";
      }
    };

    _proto._resetAdjustments = function _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    };

    _proto._checkScrollbar = function _checkScrollbar() {
      var rect = document.body.getBoundingClientRect();
      this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    };

    _proto._setScrollbar = function _setScrollbar() {
      var _this10 = this;

      if (this._isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
        var fixedContent = [].slice.call(document.querySelectorAll(Selector$5.FIXED_CONTENT));
        var stickyContent = [].slice.call(document.querySelectorAll(Selector$5.STICKY_CONTENT)); // Adjust fixed content padding

        $(fixedContent).each(function (index, element) {
          var actualPadding = element.style.paddingRight;
          var calculatedPadding = $(element).css('padding-right');
          $(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this10._scrollbarWidth + "px");
        }); // Adjust sticky content margin

        $(stickyContent).each(function (index, element) {
          var actualMargin = element.style.marginRight;
          var calculatedMargin = $(element).css('margin-right');
          $(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this10._scrollbarWidth + "px");
        }); // Adjust body padding

        var actualPadding = document.body.style.paddingRight;
        var calculatedPadding = $(document.body).css('padding-right');
        $(document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
      }

      $(document.body).addClass(ClassName$5.OPEN);
    };

    _proto._resetScrollbar = function _resetScrollbar() {
      // Restore fixed content padding
      var fixedContent = [].slice.call(document.querySelectorAll(Selector$5.FIXED_CONTENT));
      $(fixedContent).each(function (index, element) {
        var padding = $(element).data('padding-right');
        $(element).removeData('padding-right');
        element.style.paddingRight = padding ? padding : '';
      }); // Restore sticky content

      var elements = [].slice.call(document.querySelectorAll("" + Selector$5.STICKY_CONTENT));
      $(elements).each(function (index, element) {
        var margin = $(element).data('margin-right');

        if (typeof margin !== 'undefined') {
          $(element).css('margin-right', margin).removeData('margin-right');
        }
      }); // Restore body padding

      var padding = $(document.body).data('padding-right');
      $(document.body).removeData('padding-right');
      document.body.style.paddingRight = padding ? padding : '';
    };

    _proto._getScrollbarWidth = function _getScrollbarWidth() {
      // thx d.walsh
      var scrollDiv = document.createElement('div');
      scrollDiv.className = ClassName$5.SCROLLBAR_MEASURER;
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    } // Static
    ;

    Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$5);

        var _config = _objectSpread2({}, Default$3, {}, $(this).data(), {}, typeof config === 'object' && config ? config : {});

        if (!data) {
          data = new Modal(this, _config);
          $(this).data(DATA_KEY$5, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config](relatedTarget);
        } else if (_config.show) {
          data.show(relatedTarget);
        }
      });
    };

    _createClass(Modal, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$5;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$3;
      }
    }]);

    return Modal;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$5.CLICK_DATA_API, Selector$5.DATA_TOGGLE, function (event) {
    var _this11 = this;

    var target;
    var selector = Util.getSelectorFromElement(this);

    if (selector) {
      target = document.querySelector(selector);
    }

    var config = $(target).data(DATA_KEY$5) ? 'toggle' : _objectSpread2({}, $(target).data(), {}, $(this).data());

    if (this.tagName === 'A' || this.tagName === 'AREA') {
      event.preventDefault();
    }

    var $target = $(target).one(Event$5.SHOW, function (showEvent) {
      if (showEvent.isDefaultPrevented()) {
        // Only register focus restorer if modal will actually get shown
        return;
      }

      $target.one(Event$5.HIDDEN, function () {
        if ($(_this11).is(':visible')) {
          _this11.focus();
        }
      });
    });

    Modal._jQueryInterface.call($(target), config, this);
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$5] = Modal._jQueryInterface;
  $.fn[NAME$5].Constructor = Modal;

  $.fn[NAME$5].noConflict = function () {
    $.fn[NAME$5] = JQUERY_NO_CONFLICT$5;
    return Modal._jQueryInterface;
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.4.1): tools/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */
  var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href'];
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  var DefaultWhitelist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

  function allowedAttribute(attr, allowedAttributeList) {
    var attrName = attr.nodeName.toLowerCase();

    if (allowedAttributeList.indexOf(attrName) !== -1) {
      if (uriAttrs.indexOf(attrName) !== -1) {
        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));
      }

      return true;
    }

    var regExp = allowedAttributeList.filter(function (attrRegex) {
      return attrRegex instanceof RegExp;
    }); // Check if a regular expression validates the attribute.

    for (var i = 0, l = regExp.length; i < l; i++) {
      if (attrName.match(regExp[i])) {
        return true;
      }
    }

    return false;
  }

  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
    if (unsafeHtml.length === 0) {
      return unsafeHtml;
    }

    if (sanitizeFn && typeof sanitizeFn === 'function') {
      return sanitizeFn(unsafeHtml);
    }

    var domParser = new window.DOMParser();
    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    var whitelistKeys = Object.keys(whiteList);
    var elements = [].slice.call(createdDocument.body.querySelectorAll('*'));

    var _loop = function _loop(i, len) {
      var el = elements[i];
      var elName = el.nodeName.toLowerCase();

      if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
        el.parentNode.removeChild(el);
        return "continue";
      }

      var attributeList = [].slice.call(el.attributes);
      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
      attributeList.forEach(function (attr) {
        if (!allowedAttribute(attr, whitelistedAttributes)) {
          el.removeAttribute(attr.nodeName);
        }
      });
    };

    for (var i = 0, len = elements.length; i < len; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    }

    return createdDocument.body.innerHTML;
  }

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$6 = 'tooltip';
  var VERSION$6 = '4.4.1';
  var DATA_KEY$6 = 'bs.tooltip';
  var EVENT_KEY$6 = "." + DATA_KEY$6;
  var JQUERY_NO_CONFLICT$6 = $.fn[NAME$6];
  var CLASS_PREFIX = 'bs-tooltip';
  var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
  var DefaultType$4 = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(number|string|function)',
    container: '(string|element|boolean)',
    fallbackPlacement: '(string|array)',
    boundary: '(string|element)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    whiteList: 'object',
    popperConfig: '(null|object)'
  };
  var AttachmentMap$1 = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: 'right',
    BOTTOM: 'bottom',
    LEFT: 'left'
  };
  var Default$4 = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: 0,
    container: false,
    fallbackPlacement: 'flip',
    boundary: 'scrollParent',
    sanitize: true,
    sanitizeFn: null,
    whiteList: DefaultWhitelist,
    popperConfig: null
  };
  var HoverState = {
    SHOW: 'show',
    OUT: 'out'
  };
  var Event$6 = {
    HIDE: "hide" + EVENT_KEY$6,
    HIDDEN: "hidden" + EVENT_KEY$6,
    SHOW: "show" + EVENT_KEY$6,
    SHOWN: "shown" + EVENT_KEY$6,
    INSERTED: "inserted" + EVENT_KEY$6,
    CLICK: "click" + EVENT_KEY$6,
    FOCUSIN: "focusin" + EVENT_KEY$6,
    FOCUSOUT: "focusout" + EVENT_KEY$6,
    MOUSEENTER: "mouseenter" + EVENT_KEY$6,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$6
  };
  var ClassName$6 = {
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector$6 = {
    TOOLTIP: '.tooltip',
    TOOLTIP_INNER: '.tooltip-inner',
    ARROW: '.arrow'
  };
  var Trigger = {
    HOVER: 'hover',
    FOCUS: 'focus',
    CLICK: 'click',
    MANUAL: 'manual'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tooltip =
  /*#__PURE__*/
  function () {
    function Tooltip(element, config) {
      if (typeof Popper === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper.js (https://popper.js.org/)');
      } // private


      this._isEnabled = true;
      this._timeout = 0;
      this._hoverState = '';
      this._activeTrigger = {};
      this._popper = null; // Protected

      this.element = element;
      this.config = this._getConfig(config);
      this.tip = null;

      this._setListeners();
    } // Getters


    var _proto = Tooltip.prototype;

    // Public
    _proto.enable = function enable() {
      this._isEnabled = true;
    };

    _proto.disable = function disable() {
      this._isEnabled = false;
    };

    _proto.toggleEnabled = function toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    };

    _proto.toggle = function toggle(event) {
      if (!this._isEnabled) {
        return;
      }

      if (event) {
        var dataKey = this.constructor.DATA_KEY;
        var context = $(event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          $(event.currentTarget).data(dataKey, context);
        }

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {
        if ($(this.getTipElement()).hasClass(ClassName$6.SHOW)) {
          this._leave(null, this);

          return;
        }

        this._enter(null, this);
      }
    };

    _proto.dispose = function dispose() {
      clearTimeout(this._timeout);
      $.removeData(this.element, this.constructor.DATA_KEY);
      $(this.element).off(this.constructor.EVENT_KEY);
      $(this.element).closest('.modal').off('hide.bs.modal', this._hideModalHandler);

      if (this.tip) {
        $(this.tip).remove();
      }

      this._isEnabled = null;
      this._timeout = null;
      this._hoverState = null;
      this._activeTrigger = null;

      if (this._popper) {
        this._popper.destroy();
      }

      this._popper = null;
      this.element = null;
      this.config = null;
      this.tip = null;
    };

    _proto.show = function show() {
      var _this = this;

      if ($(this.element).css('display') === 'none') {
        throw new Error('Please use show on visible elements');
      }

      var showEvent = $.Event(this.constructor.Event.SHOW);

      if (this.isWithContent() && this._isEnabled) {
        $(this.element).trigger(showEvent);
        var shadowRoot = Util.findShadowRoot(this.element);
        var isInTheDom = $.contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);

        if (showEvent.isDefaultPrevented() || !isInTheDom) {
          return;
        }

        var tip = this.getTipElement();
        var tipId = Util.getUID(this.constructor.NAME);
        tip.setAttribute('id', tipId);
        this.element.setAttribute('aria-describedby', tipId);
        this.setContent();

        if (this.config.animation) {
          $(tip).addClass(ClassName$6.FADE);
        }

        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

        var attachment = this._getAttachment(placement);

        this.addAttachmentClass(attachment);

        var container = this._getContainer();

        $(tip).data(this.constructor.DATA_KEY, this);

        if (!$.contains(this.element.ownerDocument.documentElement, this.tip)) {
          $(tip).appendTo(container);
        }

        $(this.element).trigger(this.constructor.Event.INSERTED);
        this._popper = new Popper(this.element, tip, this._getPopperConfig(attachment));
        $(tip).addClass(ClassName$6.SHOW); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

        if ('ontouchstart' in document.documentElement) {
          $(document.body).children().on('mouseover', null, $.noop);
        }

        var complete = function complete() {
          if (_this.config.animation) {
            _this._fixTransition();
          }

          var prevHoverState = _this._hoverState;
          _this._hoverState = null;
          $(_this.element).trigger(_this.constructor.Event.SHOWN);

          if (prevHoverState === HoverState.OUT) {
            _this._leave(null, _this);
          }
        };

        if ($(this.tip).hasClass(ClassName$6.FADE)) {
          var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
          $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
        } else {
          complete();
        }
      }
    };

    _proto.hide = function hide(callback) {
      var _this2 = this;

      var tip = this.getTipElement();
      var hideEvent = $.Event(this.constructor.Event.HIDE);

      var complete = function complete() {
        if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
          tip.parentNode.removeChild(tip);
        }

        _this2._cleanTipClass();

        _this2.element.removeAttribute('aria-describedby');

        $(_this2.element).trigger(_this2.constructor.Event.HIDDEN);

        if (_this2._popper !== null) {
          _this2._popper.destroy();
        }

        if (callback) {
          callback();
        }
      };

      $(this.element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      $(tip).removeClass(ClassName$6.SHOW); // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support

      if ('ontouchstart' in document.documentElement) {
        $(document.body).children().off('mouseover', null, $.noop);
      }

      this._activeTrigger[Trigger.CLICK] = false;
      this._activeTrigger[Trigger.FOCUS] = false;
      this._activeTrigger[Trigger.HOVER] = false;

      if ($(this.tip).hasClass(ClassName$6.FADE)) {
        var transitionDuration = Util.getTransitionDurationFromElement(tip);
        $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }

      this._hoverState = '';
    };

    _proto.update = function update() {
      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Protected
    ;

    _proto.isWithContent = function isWithContent() {
      return Boolean(this.getTitle());
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $(this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var tip = this.getTipElement();
      this.setElementContent($(tip.querySelectorAll(Selector$6.TOOLTIP_INNER)), this.getTitle());
      $(tip).removeClass(ClassName$6.FADE + " " + ClassName$6.SHOW);
    };

    _proto.setElementContent = function setElementContent($element, content) {
      if (typeof content === 'object' && (content.nodeType || content.jquery)) {
        // Content is a DOM node or a jQuery
        if (this.config.html) {
          if (!$(content).parent().is($element)) {
            $element.empty().append(content);
          }
        } else {
          $element.text($(content).text());
        }

        return;
      }

      if (this.config.html) {
        if (this.config.sanitize) {
          content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);
        }

        $element.html(content);
      } else {
        $element.text(content);
      }
    };

    _proto.getTitle = function getTitle() {
      var title = this.element.getAttribute('data-original-title');

      if (!title) {
        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
      }

      return title;
    } // Private
    ;

    _proto._getPopperConfig = function _getPopperConfig(attachment) {
      var _this3 = this;

      var defaultBsConfig = {
        placement: attachment,
        modifiers: {
          offset: this._getOffset(),
          flip: {
            behavior: this.config.fallbackPlacement
          },
          arrow: {
            element: Selector$6.ARROW
          },
          preventOverflow: {
            boundariesElement: this.config.boundary
          }
        },
        onCreate: function onCreate(data) {
          if (data.originalPlacement !== data.placement) {
            _this3._handlePopperPlacementChange(data);
          }
        },
        onUpdate: function onUpdate(data) {
          return _this3._handlePopperPlacementChange(data);
        }
      };
      return _objectSpread2({}, defaultBsConfig, {}, this.config.popperConfig);
    };

    _proto._getOffset = function _getOffset() {
      var _this4 = this;

      var offset = {};

      if (typeof this.config.offset === 'function') {
        offset.fn = function (data) {
          data.offsets = _objectSpread2({}, data.offsets, {}, _this4.config.offset(data.offsets, _this4.element) || {});
          return data;
        };
      } else {
        offset.offset = this.config.offset;
      }

      return offset;
    };

    _proto._getContainer = function _getContainer() {
      if (this.config.container === false) {
        return document.body;
      }

      if (Util.isElement(this.config.container)) {
        return $(this.config.container);
      }

      return $(document).find(this.config.container);
    };

    _proto._getAttachment = function _getAttachment(placement) {
      return AttachmentMap$1[placement.toUpperCase()];
    };

    _proto._setListeners = function _setListeners() {
      var _this5 = this;

      var triggers = this.config.trigger.split(' ');
      triggers.forEach(function (trigger) {
        if (trigger === 'click') {
          $(_this5.element).on(_this5.constructor.Event.CLICK, _this5.config.selector, function (event) {
            return _this5.toggle(event);
          });
        } else if (trigger !== Trigger.MANUAL) {
          var eventIn = trigger === Trigger.HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN;
          var eventOut = trigger === Trigger.HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT;
          $(_this5.element).on(eventIn, _this5.config.selector, function (event) {
            return _this5._enter(event);
          }).on(eventOut, _this5.config.selector, function (event) {
            return _this5._leave(event);
          });
        }
      });

      this._hideModalHandler = function () {
        if (_this5.element) {
          _this5.hide();
        }
      };

      $(this.element).closest('.modal').on('hide.bs.modal', this._hideModalHandler);

      if (this.config.selector) {
        this.config = _objectSpread2({}, this.config, {
          trigger: 'manual',
          selector: ''
        });
      } else {
        this._fixTitle();
      }
    };

    _proto._fixTitle = function _fixTitle() {
      var titleType = typeof this.element.getAttribute('data-original-title');

      if (this.element.getAttribute('title') || titleType !== 'string') {
        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
        this.element.setAttribute('title', '');
      }
    };

    _proto._enter = function _enter(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
      }

      if ($(context.getTipElement()).hasClass(ClassName$6.SHOW) || context._hoverState === HoverState.SHOW) {
        context._hoverState = HoverState.SHOW;
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HoverState.SHOW;

      if (!context.config.delay || !context.config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.SHOW) {
          context.show();
        }
      }, context.config.delay.show);
    };

    _proto._leave = function _leave(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HoverState.OUT;

      if (!context.config.delay || !context.config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.OUT) {
          context.hide();
        }
      }, context.config.delay.hide);
    };

    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
      for (var trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    };

    _proto._getConfig = function _getConfig(config) {
      var dataAttributes = $(this.element).data();
      Object.keys(dataAttributes).forEach(function (dataAttr) {
        if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
          delete dataAttributes[dataAttr];
        }
      });
      config = _objectSpread2({}, this.constructor.Default, {}, dataAttributes, {}, typeof config === 'object' && config ? config : {});

      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      Util.typeCheckConfig(NAME$6, config, this.constructor.DefaultType);

      if (config.sanitize) {
        config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);
      }

      return config;
    };

    _proto._getDelegateConfig = function _getDelegateConfig() {
      var config = {};

      if (this.config) {
        for (var key in this.config) {
          if (this.constructor.Default[key] !== this.config[key]) {
            config[key] = this.config[key];
          }
        }
      }

      return config;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length) {
        $tip.removeClass(tabClass.join(''));
      }
    };

    _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {
      var popperInstance = popperData.instance;
      this.tip = popperInstance.popper;

      this._cleanTipClass();

      this.addAttachmentClass(this._getAttachment(popperData.placement));
    };

    _proto._fixTransition = function _fixTransition() {
      var tip = this.getTipElement();
      var initConfigAnimation = this.config.animation;

      if (tip.getAttribute('x-placement') !== null) {
        return;
      }

      $(tip).removeClass(ClassName$6.FADE);
      this.config.animation = false;
      this.hide();
      this.show();
      this.config.animation = initConfigAnimation;
    } // Static
    ;

    Tooltip._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$6);

        var _config = typeof config === 'object' && config;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Tooltip(this, _config);
          $(this).data(DATA_KEY$6, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tooltip, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$6;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$4;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$6;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$6;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event$6;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$6;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$4;
      }
    }]);

    return Tooltip;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $.fn[NAME$6] = Tooltip._jQueryInterface;
  $.fn[NAME$6].Constructor = Tooltip;

  $.fn[NAME$6].noConflict = function () {
    $.fn[NAME$6] = JQUERY_NO_CONFLICT$6;
    return Tooltip._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$7 = 'popover';
  var VERSION$7 = '4.4.1';
  var DATA_KEY$7 = 'bs.popover';
  var EVENT_KEY$7 = "." + DATA_KEY$7;
  var JQUERY_NO_CONFLICT$7 = $.fn[NAME$7];
  var CLASS_PREFIX$1 = 'bs-popover';
  var BSCLS_PREFIX_REGEX$1 = new RegExp("(^|\\s)" + CLASS_PREFIX$1 + "\\S+", 'g');

  var Default$5 = _objectSpread2({}, Tooltip.Default, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
  });

  var DefaultType$5 = _objectSpread2({}, Tooltip.DefaultType, {
    content: '(string|element|function)'
  });

  var ClassName$7 = {
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector$7 = {
    TITLE: '.popover-header',
    CONTENT: '.popover-body'
  };
  var Event$7 = {
    HIDE: "hide" + EVENT_KEY$7,
    HIDDEN: "hidden" + EVENT_KEY$7,
    SHOW: "show" + EVENT_KEY$7,
    SHOWN: "shown" + EVENT_KEY$7,
    INSERTED: "inserted" + EVENT_KEY$7,
    CLICK: "click" + EVENT_KEY$7,
    FOCUSIN: "focusin" + EVENT_KEY$7,
    FOCUSOUT: "focusout" + EVENT_KEY$7,
    MOUSEENTER: "mouseenter" + EVENT_KEY$7,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$7
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Popover =
  /*#__PURE__*/
  function (_Tooltip) {
    _inheritsLoose(Popover, _Tooltip);

    function Popover() {
      return _Tooltip.apply(this, arguments) || this;
    }

    var _proto = Popover.prototype;

    // Overrides
    _proto.isWithContent = function isWithContent() {
      return this.getTitle() || this._getContent();
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $(this.getTipElement()).addClass(CLASS_PREFIX$1 + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $(this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var $tip = $(this.getTipElement()); // We use append for html objects to maintain js events

      this.setElementContent($tip.find(Selector$7.TITLE), this.getTitle());

      var content = this._getContent();

      if (typeof content === 'function') {
        content = content.call(this.element);
      }

      this.setElementContent($tip.find(Selector$7.CONTENT), content);
      $tip.removeClass(ClassName$7.FADE + " " + ClassName$7.SHOW);
    } // Private
    ;

    _proto._getContent = function _getContent() {
      return this.element.getAttribute('data-content') || this.config.content;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX$1);

      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    } // Static
    ;

    Popover._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$7);

        var _config = typeof config === 'object' ? config : null;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Popover(this, _config);
          $(this).data(DATA_KEY$7, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Popover, null, [{
      key: "VERSION",
      // Getters
      get: function get() {
        return VERSION$7;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$5;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$7;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$7;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event$7;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$7;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$5;
      }
    }]);

    return Popover;
  }(Tooltip);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $.fn[NAME$7] = Popover._jQueryInterface;
  $.fn[NAME$7].Constructor = Popover;

  $.fn[NAME$7].noConflict = function () {
    $.fn[NAME$7] = JQUERY_NO_CONFLICT$7;
    return Popover._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$8 = 'scrollspy';
  var VERSION$8 = '4.4.1';
  var DATA_KEY$8 = 'bs.scrollspy';
  var EVENT_KEY$8 = "." + DATA_KEY$8;
  var DATA_API_KEY$6 = '.data-api';
  var JQUERY_NO_CONFLICT$8 = $.fn[NAME$8];
  var Default$6 = {
    offset: 10,
    method: 'auto',
    target: ''
  };
  var DefaultType$6 = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };
  var Event$8 = {
    ACTIVATE: "activate" + EVENT_KEY$8,
    SCROLL: "scroll" + EVENT_KEY$8,
    LOAD_DATA_API: "load" + EVENT_KEY$8 + DATA_API_KEY$6
  };
  var ClassName$8 = {
    DROPDOWN_ITEM: 'dropdown-item',
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active'
  };
  var Selector$8 = {
    DATA_SPY: '[data-spy="scroll"]',
    ACTIVE: '.active',
    NAV_LIST_GROUP: '.nav, .list-group',
    NAV_LINKS: '.nav-link',
    NAV_ITEMS: '.nav-item',
    LIST_ITEMS: '.list-group-item',
    DROPDOWN: '.dropdown',
    DROPDOWN_ITEMS: '.dropdown-item',
    DROPDOWN_TOGGLE: '.dropdown-toggle'
  };
  var OffsetMethod = {
    OFFSET: 'offset',
    POSITION: 'position'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var ScrollSpy =
  /*#__PURE__*/
  function () {
    function ScrollSpy(element, config) {
      var _this = this;

      this._element = element;
      this._scrollElement = element.tagName === 'BODY' ? window : element;
      this._config = this._getConfig(config);
      this._selector = this._config.target + " " + Selector$8.NAV_LINKS + "," + (this._config.target + " " + Selector$8.LIST_ITEMS + ",") + (this._config.target + " " + Selector$8.DROPDOWN_ITEMS);
      this._offsets = [];
      this._targets = [];
      this._activeTarget = null;
      this._scrollHeight = 0;
      $(this._scrollElement).on(Event$8.SCROLL, function (event) {
        return _this._process(event);
      });
      this.refresh();

      this._process();
    } // Getters


    var _proto = ScrollSpy.prototype;

    // Public
    _proto.refresh = function refresh() {
      var _this2 = this;

      var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
      var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
      this._offsets = [];
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      var targets = [].slice.call(document.querySelectorAll(this._selector));
      targets.map(function (element) {
        var target;
        var targetSelector = Util.getSelectorFromElement(element);

        if (targetSelector) {
          target = document.querySelector(targetSelector);
        }

        if (target) {
          var targetBCR = target.getBoundingClientRect();

          if (targetBCR.width || targetBCR.height) {
            // TODO (fat): remove sketch reliance on jQuery position/offset
            return [$(target)[offsetMethod]().top + offsetBase, targetSelector];
          }
        }

        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).forEach(function (item) {
        _this2._offsets.push(item[0]);

        _this2._targets.push(item[1]);
      });
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$8);
      $(this._scrollElement).off(EVENT_KEY$8);
      this._element = null;
      this._scrollElement = null;
      this._config = null;
      this._selector = null;
      this._offsets = null;
      this._targets = null;
      this._activeTarget = null;
      this._scrollHeight = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default$6, {}, typeof config === 'object' && config ? config : {});

      if (typeof config.target !== 'string') {
        var id = $(config.target).attr('id');

        if (!id) {
          id = Util.getUID(NAME$8);
          $(config.target).attr('id', id);
        }

        config.target = "#" + id;
      }

      Util.typeCheckConfig(NAME$8, config, DefaultType$6);
      return config;
    };

    _proto._getScrollTop = function _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    };

    _proto._getScrollHeight = function _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    };

    _proto._getOffsetHeight = function _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    };

    _proto._process = function _process() {
      var scrollTop = this._getScrollTop() + this._config.offset;

      var scrollHeight = this._getScrollHeight();

      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }

        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;

        this._clear();

        return;
      }

      var offsetLength = this._offsets.length;

      for (var i = offsetLength; i--;) {
        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    };

    _proto._activate = function _activate(target) {
      this._activeTarget = target;

      this._clear();

      var queries = this._selector.split(',').map(function (selector) {
        return selector + "[data-target=\"" + target + "\"]," + selector + "[href=\"" + target + "\"]";
      });

      var $link = $([].slice.call(document.querySelectorAll(queries.join(','))));

      if ($link.hasClass(ClassName$8.DROPDOWN_ITEM)) {
        $link.closest(Selector$8.DROPDOWN).find(Selector$8.DROPDOWN_TOGGLE).addClass(ClassName$8.ACTIVE);
        $link.addClass(ClassName$8.ACTIVE);
      } else {
        // Set triggered link as active
        $link.addClass(ClassName$8.ACTIVE); // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

        $link.parents(Selector$8.NAV_LIST_GROUP).prev(Selector$8.NAV_LINKS + ", " + Selector$8.LIST_ITEMS).addClass(ClassName$8.ACTIVE); // Handle special case when .nav-link is inside .nav-item

        $link.parents(Selector$8.NAV_LIST_GROUP).prev(Selector$8.NAV_ITEMS).children(Selector$8.NAV_LINKS).addClass(ClassName$8.ACTIVE);
      }

      $(this._scrollElement).trigger(Event$8.ACTIVATE, {
        relatedTarget: target
      });
    };

    _proto._clear = function _clear() {
      [].slice.call(document.querySelectorAll(this._selector)).filter(function (node) {
        return node.classList.contains(ClassName$8.ACTIVE);
      }).forEach(function (node) {
        return node.classList.remove(ClassName$8.ACTIVE);
      });
    } // Static
    ;

    ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$8);

        var _config = typeof config === 'object' && config;

        if (!data) {
          data = new ScrollSpy(this, _config);
          $(this).data(DATA_KEY$8, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(ScrollSpy, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$8;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$6;
      }
    }]);

    return ScrollSpy;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(window).on(Event$8.LOAD_DATA_API, function () {
    var scrollSpys = [].slice.call(document.querySelectorAll(Selector$8.DATA_SPY));
    var scrollSpysLength = scrollSpys.length;

    for (var i = scrollSpysLength; i--;) {
      var $spy = $(scrollSpys[i]);

      ScrollSpy._jQueryInterface.call($spy, $spy.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$8] = ScrollSpy._jQueryInterface;
  $.fn[NAME$8].Constructor = ScrollSpy;

  $.fn[NAME$8].noConflict = function () {
    $.fn[NAME$8] = JQUERY_NO_CONFLICT$8;
    return ScrollSpy._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$9 = 'tab';
  var VERSION$9 = '4.4.1';
  var DATA_KEY$9 = 'bs.tab';
  var EVENT_KEY$9 = "." + DATA_KEY$9;
  var DATA_API_KEY$7 = '.data-api';
  var JQUERY_NO_CONFLICT$9 = $.fn[NAME$9];
  var Event$9 = {
    HIDE: "hide" + EVENT_KEY$9,
    HIDDEN: "hidden" + EVENT_KEY$9,
    SHOW: "show" + EVENT_KEY$9,
    SHOWN: "shown" + EVENT_KEY$9,
    CLICK_DATA_API: "click" + EVENT_KEY$9 + DATA_API_KEY$7
  };
  var ClassName$9 = {
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active',
    DISABLED: 'disabled',
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector$9 = {
    DROPDOWN: '.dropdown',
    NAV_LIST_GROUP: '.nav, .list-group',
    ACTIVE: '.active',
    ACTIVE_UL: '> li > .active',
    DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
    DROPDOWN_TOGGLE: '.dropdown-toggle',
    DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tab =
  /*#__PURE__*/
  function () {
    function Tab(element) {
      this._element = element;
    } // Getters


    var _proto = Tab.prototype;

    // Public
    _proto.show = function show() {
      var _this = this;

      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ClassName$9.ACTIVE) || $(this._element).hasClass(ClassName$9.DISABLED)) {
        return;
      }

      var target;
      var previous;
      var listElement = $(this._element).closest(Selector$9.NAV_LIST_GROUP)[0];
      var selector = Util.getSelectorFromElement(this._element);

      if (listElement) {
        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? Selector$9.ACTIVE_UL : Selector$9.ACTIVE;
        previous = $.makeArray($(listElement).find(itemSelector));
        previous = previous[previous.length - 1];
      }

      var hideEvent = $.Event(Event$9.HIDE, {
        relatedTarget: this._element
      });
      var showEvent = $.Event(Event$9.SHOW, {
        relatedTarget: previous
      });

      if (previous) {
        $(previous).trigger(hideEvent);
      }

      $(this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
        return;
      }

      if (selector) {
        target = document.querySelector(selector);
      }

      this._activate(this._element, listElement);

      var complete = function complete() {
        var hiddenEvent = $.Event(Event$9.HIDDEN, {
          relatedTarget: _this._element
        });
        var shownEvent = $.Event(Event$9.SHOWN, {
          relatedTarget: previous
        });
        $(previous).trigger(hiddenEvent);
        $(_this._element).trigger(shownEvent);
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$9);
      this._element = null;
    } // Private
    ;

    _proto._activate = function _activate(element, container, callback) {
      var _this2 = this;

      var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $(container).find(Selector$9.ACTIVE_UL) : $(container).children(Selector$9.ACTIVE);
      var active = activeElements[0];
      var isTransitioning = callback && active && $(active).hasClass(ClassName$9.FADE);

      var complete = function complete() {
        return _this2._transitionComplete(element, active, callback);
      };

      if (active && isTransitioning) {
        var transitionDuration = Util.getTransitionDurationFromElement(active);
        $(active).removeClass(ClassName$9.SHOW).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto._transitionComplete = function _transitionComplete(element, active, callback) {
      if (active) {
        $(active).removeClass(ClassName$9.ACTIVE);
        var dropdownChild = $(active.parentNode).find(Selector$9.DROPDOWN_ACTIVE_CHILD)[0];

        if (dropdownChild) {
          $(dropdownChild).removeClass(ClassName$9.ACTIVE);
        }

        if (active.getAttribute('role') === 'tab') {
          active.setAttribute('aria-selected', false);
        }
      }

      $(element).addClass(ClassName$9.ACTIVE);

      if (element.getAttribute('role') === 'tab') {
        element.setAttribute('aria-selected', true);
      }

      Util.reflow(element);

      if (element.classList.contains(ClassName$9.FADE)) {
        element.classList.add(ClassName$9.SHOW);
      }

      if (element.parentNode && $(element.parentNode).hasClass(ClassName$9.DROPDOWN_MENU)) {
        var dropdownElement = $(element).closest(Selector$9.DROPDOWN)[0];

        if (dropdownElement) {
          var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(Selector$9.DROPDOWN_TOGGLE));
          $(dropdownToggleList).addClass(ClassName$9.ACTIVE);
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    } // Static
    ;

    Tab._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $(this);
        var data = $this.data(DATA_KEY$9);

        if (!data) {
          data = new Tab(this);
          $this.data(DATA_KEY$9, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tab, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$9;
      }
    }]);

    return Tab;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$9.CLICK_DATA_API, Selector$9.DATA_TOGGLE, function (event) {
    event.preventDefault();

    Tab._jQueryInterface.call($(this), 'show');
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$9] = Tab._jQueryInterface;
  $.fn[NAME$9].Constructor = Tab;

  $.fn[NAME$9].noConflict = function () {
    $.fn[NAME$9] = JQUERY_NO_CONFLICT$9;
    return Tab._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$a = 'toast';
  var VERSION$a = '4.4.1';
  var DATA_KEY$a = 'bs.toast';
  var EVENT_KEY$a = "." + DATA_KEY$a;
  var JQUERY_NO_CONFLICT$a = $.fn[NAME$a];
  var Event$a = {
    CLICK_DISMISS: "click.dismiss" + EVENT_KEY$a,
    HIDE: "hide" + EVENT_KEY$a,
    HIDDEN: "hidden" + EVENT_KEY$a,
    SHOW: "show" + EVENT_KEY$a,
    SHOWN: "shown" + EVENT_KEY$a
  };
  var ClassName$a = {
    FADE: 'fade',
    HIDE: 'hide',
    SHOW: 'show',
    SHOWING: 'showing'
  };
  var DefaultType$7 = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
  };
  var Default$7 = {
    animation: true,
    autohide: true,
    delay: 500
  };
  var Selector$a = {
    DATA_DISMISS: '[data-dismiss="toast"]'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Toast =
  /*#__PURE__*/
  function () {
    function Toast(element, config) {
      this._element = element;
      this._config = this._getConfig(config);
      this._timeout = null;

      this._setListeners();
    } // Getters


    var _proto = Toast.prototype;

    // Public
    _proto.show = function show() {
      var _this = this;

      var showEvent = $.Event(Event$a.SHOW);
      $(this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      }

      if (this._config.animation) {
        this._element.classList.add(ClassName$a.FADE);
      }

      var complete = function complete() {
        _this._element.classList.remove(ClassName$a.SHOWING);

        _this._element.classList.add(ClassName$a.SHOW);

        $(_this._element).trigger(Event$a.SHOWN);

        if (_this._config.autohide) {
          _this._timeout = setTimeout(function () {
            _this.hide();
          }, _this._config.delay);
        }
      };

      this._element.classList.remove(ClassName$a.HIDE);

      Util.reflow(this._element);

      this._element.classList.add(ClassName$a.SHOWING);

      if (this._config.animation) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto.hide = function hide() {
      if (!this._element.classList.contains(ClassName$a.SHOW)) {
        return;
      }

      var hideEvent = $.Event(Event$a.HIDE);
      $(this._element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      this._close();
    };

    _proto.dispose = function dispose() {
      clearTimeout(this._timeout);
      this._timeout = null;

      if (this._element.classList.contains(ClassName$a.SHOW)) {
        this._element.classList.remove(ClassName$a.SHOW);
      }

      $(this._element).off(Event$a.CLICK_DISMISS);
      $.removeData(this._element, DATA_KEY$a);
      this._element = null;
      this._config = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default$7, {}, $(this._element).data(), {}, typeof config === 'object' && config ? config : {});
      Util.typeCheckConfig(NAME$a, config, this.constructor.DefaultType);
      return config;
    };

    _proto._setListeners = function _setListeners() {
      var _this2 = this;

      $(this._element).on(Event$a.CLICK_DISMISS, Selector$a.DATA_DISMISS, function () {
        return _this2.hide();
      });
    };

    _proto._close = function _close() {
      var _this3 = this;

      var complete = function complete() {
        _this3._element.classList.add(ClassName$a.HIDE);

        $(_this3._element).trigger(Event$a.HIDDEN);
      };

      this._element.classList.remove(ClassName$a.SHOW);

      if (this._config.animation) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    } // Static
    ;

    Toast._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $(this);
        var data = $element.data(DATA_KEY$a);

        var _config = typeof config === 'object' && config;

        if (!data) {
          data = new Toast(this, _config);
          $element.data(DATA_KEY$a, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config](this);
        }
      });
    };

    _createClass(Toast, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$a;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$7;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$7;
      }
    }]);

    return Toast;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $.fn[NAME$a] = Toast._jQueryInterface;
  $.fn[NAME$a].Constructor = Toast;

  $.fn[NAME$a].noConflict = function () {
    $.fn[NAME$a] = JQUERY_NO_CONFLICT$a;
    return Toast._jQueryInterface;
  };

  exports.Alert = Alert;
  exports.Button = Button;
  exports.Carousel = Carousel;
  exports.Collapse = Collapse;
  exports.Dropdown = Dropdown;
  exports.Modal = Modal;
  exports.Popover = Popover;
  exports.Scrollspy = ScrollSpy;
  exports.Tab = Tab;
  exports.Toast = Toast;
  exports.Tooltip = Tooltip;
  exports.Util = Util;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bootstrap.js.map


/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "\ndiv#exp2[data-v-2cded535]{\n    padding:20px;\n    background: #f5f6fa;\n    margin-bottom: 200px;\n}\n.fa-check-square[data-v-2cded535]{\n    font-size: 19px;\n    color: #2b6bde;\n}\n.fm2[data-v-2cded535], h4[data-v-2cded535]{\n    min-width: 230px;\n    max-width: 230px;\n}\ni[data-v-2cded535]{\n    margin-top: 1px;\n    margin-left: 3px;\n    margin-right: 7px;\n}\n@media only screen and (max-width: 994px) {\n.justify-content-around[data-v-2cded535]{\n        flex-wrap: wrap;\n}\ndiv#exp2[data-v-2cded535]{\n        padding:15px;\n        margin-bottom: 80px;\n}\n}\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "\nh3[data-v-0ebc9ed4]{\n    margin-top: 200px;\n    color: #2b6bde;\n}\nh2[data-v-0ebc9ed4]{\n    font-family: 'Inconsolata', monospace;\n}\nsvg[data-v-0ebc9ed4]{\n    height: auto;\n    width: 49%;\n}\n@media only screen and (max-width: 425px) {\nsvg[data-v-0ebc9ed4]{\n        width: 90%;\n}\nh3[data-v-0ebc9ed4]{\n        margin-top: 70px;\n        color: #2b6bde;\n}\n}\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css&":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "\n.container[data-v-6e28316c]{\n        margin-bottom: 63px;\n}\nh2[data-v-6e28316c]{\n        font-family: 'Inconsolata', monospace;\n}\nsvg[data-v-6e28316c]{\n    height: auto;\n    width: 49%;\n}\n@media only screen and (max-width: 425px) {\nsvg[data-v-6e28316c]{\n        width: 90%;\n}\n}\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css&":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "\ndiv.howContainer[data-v-2c1b2bd2]{\n    margin-top: 130px;\n    margin-bottom: 70px;\n    background: #f2f7fc;\n    padding: 30px;\n}\nh2[data-v-2c1b2bd2]{\n    padding: 61px;\n    text-align: center;\n    font-size: 2rem;\n    font-weight: 700;\n}\ndiv#exp2[data-v-2c1b2bd2]{\n    padding:20px;\n    margin-bottom: 70px;\n}\nh4[data-v-2c1b2bd2]{\n    text-align: center;\n    width: 100%;\n}\np[data-v-2c1b2bd2]{\n    padding: 5px 85px;\n    text-align:center;\n}\ni[data-v-2c1b2bd2]{\n    color:#2a69dd;\n    font-size: 48px;\n    text-align: center;\n    width: 100%;\n}\n@media only screen and (max-width: 994px) {\n.justify-content-around[data-v-2c1b2bd2]{\n        flex-wrap: wrap;\n}\ndiv.howContainer[data-v-2c1b2bd2]{\n        margin-top: 50px;\n        margin-bottom: 30px;\n        background: #f2f7fc;\n        padding: 30px;\n}\nh2[data-v-2c1b2bd2]{\n        padding: 61px;\n        text-align: center;\n        font-size: 2rem;\n        font-weight: 700;\n}\ndiv#exp2[data-v-2c1b2bd2]{\n        padding:3px;\n        margin-bottom: 70px;\n}\np[data-v-2c1b2bd2]{\n        padding: 3px;\n}\n}\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css&":
/*!***************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css& ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "\n.container[data-v-59ad00fa]{\n    font-family: 'Inconsolata', monospace;\n}\n#productImage[data-v-59ad00fa]{\n    height: 300px;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n}\n.fa-play-circle[data-v-59ad00fa]{\n    font-size: 40px;\n}\n.fa-play-circle[data-v-59ad00fa]:hover {\n    cursor: pointer;\n}\ncanvas[data-v-59ad00fa] {\n    position: absolute;\n}\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.4.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code, options ) {
		DOMEval( code, { nonce: options && options.nonce } );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) &&

				// Support: IE 8 only
				// Exclude object elements
				(nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 && rdescend.test( selector ) ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = (elem.ownerDocument || elem).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( typeof elem.contentDocument !== "undefined" ) {
			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								} );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	// Support: IE 9-11 only
	// Also use offsetWidth/offsetHeight for when box sizing is unreliable
	// We use getClientRects() to check for hidden/disconnected.
	// In those cases, the computed value can be trusted to be border-box
	if ( ( !support.boxSizingReliable() && isBorderBox ||
		val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url, options ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.15';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      // Like with sourceURL, we take care to not check the option's prototype,
      // as this configuration is a code injection vector.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

var timeoutDuration = function () {
  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      return 1;
    }
  }
  return 0;
}();

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */
function getReferenceNode(reference) {
  return reference && reference.referenceNode ? reference.referenceNode : reference;
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent || null;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.width;
  var height = sizes.height || element.clientHeight || result.height;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop);
    var marginLeft = parseFloat(styles.marginLeft);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicitly asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var round = Math.round,
      floor = Math.floor;

  var noRound = function noRound(v) {
    return v;
  };

  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);

  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;

  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

    // flips variation if reference element overflows boundaries
    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    // flips variation if popper content overflows boundaries
    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

    var flippedVariation = flippedVariationByRef || flippedVariationByContent;

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport',
    /**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariations: false,
    /**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariationsByContent: false
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

/* harmony default export */ __webpack_exports__["default"] = (Popper);
//# sourceMappingURL=popper.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css&":
/*!***************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css& ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css&":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e&":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e& ***!
  \*******************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _vm._m(0)
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "container" }, [
      _c("div", { staticClass: "row justify-content-center" }, [
        _c("div", { staticClass: "col-md-8" }, [
          _c("div", { staticClass: "card" }, [
            _c("div", { staticClass: "card-header" }, [
              _vm._v("Example Component")
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "card-body" }, [
              _vm._v(
                "\n                    I'm an example component.\n                "
              )
            ])
          ])
        ])
      ])
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home2Component.vue?vue&type=template&id=2cded535&scoped=true&":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Home2Component.vue?vue&type=template&id=2cded535&scoped=true& ***!
  \*****************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _vm._m(0)
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "container" }, [
      _c("img", {
        staticStyle: { width: "100%" },
        attrs: {
          src: "https://tahi26.de/storage/Hero-sofunktionierts_2x-min.jpg",
          alt: ""
        }
      }),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "d-flex justify-content-around align-items-center",
          attrs: { id: "exp2" }
        },
        [
          _c("div", [
            _c("div", { staticClass: "d-flex flex-row fm2" }, [
              _c("i", { staticClass: "fas fa-check-square" }),
              _vm._v(" "),
              _c("h4", [_vm._v("First glimpse")])
            ]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Determination of the first spontaneous and unreflected impression and the emotional impression (positive or negative associations)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("div", [
            _c("div", { staticClass: "d-flex flex-row ml-2 fm2" }, [
              _c("i", { staticClass: "fas fa-check-square" }),
              _vm._v(" "),
              _c("h4", [_vm._v("Legibility of writing")])
            ]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Measuring the readability of headlines, texts, advertising messages, etc. and determining the time necessary for understanding"
              )
            ])
          ]),
          _vm._v(" "),
          _c("div", [
            _c("div", { staticClass: "d-flex flex-row ml-2 fm2" }, [
              _c("i", { staticClass: "fas fa-check-square" }),
              _vm._v(" "),
              _c("h4", [_vm._v("Advertising success forecast")])
            ]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Compare the impression of the advertising material desired for your advertising goals with the actually realized perception"
              )
            ])
          ])
        ]
      )
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home3Component.vue?vue&type=template&id=0ebc9ed4&scoped=true&":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Home3Component.vue?vue&type=template&id=0ebc9ed4&scoped=true& ***!
  \*****************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "container mt-8" }, [
    _c("div", { staticClass: "row justify-content-center" }, [
      _c("div", { staticClass: "col-md-12" }, [
        _c("div", { staticClass: "row mt-5" }, [
          _c(
            "svg",
            {
              attrs: {
                xmlns: "http://www.w3.org/2000/svg",
                version: "1.1",
                id: "Layer_1",
                x: "0px",
                y: "0px",
                viewBox: "0 0 1554.103 1655.549",
                "enable-background": "new 0 0 1554.103 1655.549"
              }
            },
            [
              _c("g", [
                _c("g", [
                  _c("g", [
                    _c("path", {
                      attrs: {
                        fill: "#040000",
                        d:
                          "M673.208,31.827c13.572,10.792,33.383,15.067,47.574,26.575c7.74,6.28,14.662,16.905,17.643,26.445 c6.868,21.98,7.287,57.184-1.371,79.073c-3.891,9.84-9.966,16.813-7.11,25.68c1.918,5.952,8.13,13.101,11.328,18.639 c6.303,10.917,13.653,21.575,18.856,33.072c6.809,15.045,8.816,34.018,0.826,49.024c-5.42,10.182-22.293,33.267-33.878,36.534 c10.038,7.382,18.737,14.176,22.42,26.465c1.634,5.452,3.982,17.617,2.193,22.932c-2.459,7.3-5.947,5.094-10.333,9.937 c-5.807,6.411-4.333,6.35-2.041,17.198c1.837,8.696,3.62,17.157,6.087,25.709c1.624,5.636,3.629,11.261,4.429,17.09 c3.537,25.761,2.65,54.846,1.855,80.78c-0.768,25.034-17.234,73.619-44.725,80.281c3.863,10.605,10.6,21.437,15.1,32.013 c4.863,11.426,9.162,22.956,14.158,34.336c4.116,9.379,6.832,18.47,9.354,28.263c1.828,7.102,3.465,13.436,4.116,20.841 c2.705,30.791,1.556,62.237,1.704,93.096c0.109,23.032,4.67,49.436-5.412,70.179c-6.384,13.132-14.063,21.912-23.565,32.176 c21.41,19.464,39.23,60.994,32.176,89.641c-1.556,6.319-5.308,12.328-9.081,17.534c-7.985,11.016-8.433,11.742-3.808,24.442 c5.499,15.097,9.527,28.618,13.336,44.364c5.314,21.967,8.646,36.503,9.075,60.034c0.472,25.888,4.469,53.592-4.473,78.462 c-4.442,12.355-15.778,26.75-16.914,39.421c-1.245,13.892,14.809,27.915,19.859,40.579c4.736,11.879,4.817,27.064,4.455,39.641 c-0.784,27.313-12.97,51.978-17.13,78.78c-1.733,11.169-7.518,28.899-5.448,40.166c0.298,1.624,6.101,5.469,6.763,7.346 c1.635,4.64,0.533,7.257,1.15,11.644c0.562,3.99,1.672,7.872,2.17,11.839c3.215,25.612,0.85,50.679-15.142,71.682 c-7.007,9.205-16.304,15.665-26.215,21.195c-5.595,3.122-10.834,5.981-16.928,7.972c-2.408,0.787-9.853-1.778-10.607-1.407 c-6.456,3.184-11.754,13.081-19.193,17.031c-4.608,2.446-9.103,4.17-14.117,5.456c-21.044,5.401-48.44,4.456-69.855,0.737 c-21.398-3.715-46.911-16.588-66.108-26.684c-15.616-8.212-22.918-15.862-32.313-29.021 c-5.954-8.339-13.983-15.034-21.588-21.979c-5.278-4.819-11.84-14.693-17.777-18.06c-14.064-7.978-44.653,5.031-62.399,7.176 c-30.419,3.677-58.768,0.438-85.77-14.05c-12.889-6.916-26.056-10.711-36.284-21.771c-13.432-14.524-18.71-33.543-27.07-50.892 c-7.793-16.171-3.597-48.626-18.413-56.459c-5.194-2.746-14.399-4.239-20.157-6.262c-22.19-7.798-35.039-16.562-50.456-34.831 c-10.383-12.303-17.751-26.369-26.732-39.748c-19.722-29.377-29.538-55.651-25.473-91.5c1.212-10.686,4.184-20.863,5.659-31.595 c1.434-10.433,7.903-21.91,7.343-29.514c-0.584-7.934-6.267-16.001-7.355-24.289c-1.343-10.23,6.016-25.748,2.914-34.407 c-2.977-8.313-19.837-20.357-26.022-26.096c-8.255-7.658-15.901-15.626-23.306-24.12c-14.671-16.832-21.652-35.095-24.388-57.226 c-4.713-38.109,14.426-76.16,37.954-104.647c-27.771-15.268-40.731-30.903-35.738-64.766 c2.582-17.512,9.856-38.453,17.254-53.971c6.56-13.758,15.447-24.119,24.838-36.2c3.09-1.862,6.206-3.679,9.347-5.452 c-0.399-4.975-0.732-9.955-0.996-14.94c-0.406-7.55-0.702-15.115-0.763-22.676c-0.117-14.788,3.643-25.094,9.585-38.794 c5.51-12.703,11.571-21.614,22.68-30.319c11.184-8.764,12.593-6.648,9.075-21.206c-4.332-17.928-9.094-35.279-9.857-53.824 c-1.672-40.653-0.266-72.968,21.272-108.768c13.712-22.791,33.398-36.612,53.39-53.645 c18.438-15.707,21.007-39.799,22.732-63.427c1.7-23.266,4.283-54.85,19.737-73.401c8.565-10.281,19.032-15.173,31.873-17.132 c12.256-1.869,32.864,3.524,34.375-14.285c0.888-10.478-6.443-23.803-6.628-34.981c-0.352-21.21,7.13-41.402,18.811-58.89 c33.517-50.18,85.363-67.14,141.872-45.499c9.537,3.652,25.648,17.992,35.777,16.144c9.369-1.709,18.523-16.905,27.134-21.869 c18.149-10.46,39.963-19.265,61.015-21.09c8.075-0.701,9.573-0.476,15.733-4.294c5.003-3.103,8.148-6.989,13.728-9.668 c12.639-6.068,26.192-6.157,39.921-6.902C650.664,28.365,664.622,25.461,673.208,31.827 M653.365,42.549 c-48.536-14.263-76.771,35.754-80.735,75.265c-0.918,9.124-1.096,13.778-5.116,21.222c-1.508,2.796-5.181,1.808-6.777,5.878 c-7.829,19.972,16.81,34.127,32.631,33.148c2.962-0.184,27.97-8.825,26.7,3.334c-0.469,4.48-16.302,4.998-20.109,5.64 c-17.217,2.904-38.276,6.613-52.539-6.181c-12.161-10.908-15.43-40.848-4.293-54.172c3.164-3.786,10.575-4.917,12.989-8.309 c3.444-4.839,2.77-16.103,4.319-21.706c3.464-12.535,7.998-23.545,14.687-34.546c-33.575,6.723-69.366,20.525-86.419,52.716 c-10.078,19.023-6.332,36.679-3.899,56.636c1.268,10.417,5.258,26.705,3.768,36.95c-0.996,6.841-8.402,18.71-16.471,10.912 c-5.782-5.587-1.164-40.574-2.56-49.946c-0.838-5.627-0.498-12.102-1.837-17.508c-2.946-11.898-5.894-6.93-17.191-6.583 c-8.696,0.266-33.676-3.776-20.229-11.884c7.044-4.248,20.77,0.783,28.682-2.017c8.616-3.048,4.392-0.661,8.651-6.93 c1.892-2.783,6.108-12.301,6.988-15.649c-8.121-2.428-12.694-7.96-20.297-11.798c-8.429-4.256-18.338-8.238-27.403-11.11 c-20.588-6.523-44.1-7.17-64.303,1.837c-23.873,10.645-45.46,40.316-56.194,63.516c-11.625,25.123-3.484,47.202,5.176,72.134 c6.226-4.726,85.266-47.176,84.112-25.334c-0.393,7.438-21.389,8.65-25.732,10.269c-5.017,1.869-10.916,5.395-15.798,7.886 c-10.843,5.533-10.495,5.606-13.559,16.39c-4.871,17.137-6.312,33.735-28.848,19.514c-7.061,17.642-8.102,31.355-9.806,49.434 c-0.505,5.355-0.218,15.438-9.055,12.294c-7.45-2.651-3.815-20.895-3.812-27.205c0.005-7.821,0.386-14.413,1.975-21.813 c0.982-4.574,8.839-22.489,7.619-24.029c-2.767-3.492-21.392,1.307-25.66,2.176c-33.304,6.781-47.585,29.527-50.814,63.192 c-1.021,10.641-0.084,21.452-0.579,32.124c-0.639,13.778-3.556,17.824,6.065,24.766c6.939,5.005,7.117,0.779,10.689,8.853 c1.43,3.233,7.33,17.132,7.321,19.071c-0.081,17.52-23.09-0.004-32.151-2.946c-15.624-5.071-30.213,16.436-42.585,26.996 c-25.065,21.393-40.906,48.751-45.618,81.998c-4.351,30.688-1.895,63.536,8.759,92.771c5.973,16.391,11.672,31.931,24.065,44.525 c3.121,3.171,15.54,10.477,5.334,15.422c-5.297,2.566-14.038-4.628-18.004-8.073c-3.86-3.352-9.142-14.214-13.903-14.829 c-4.551-0.588-17,12.607-19.356,15.359c-10.67,12.469-16.638,31.721-17.784,48.077c-1.783,25.432,7.746,57.956,31.915,70.311 c4.753-18.546,9.799-37.049,19.371-53.777c5.706-9.974,19.245-32.051,32.083-34.05c28.552-4.446-2.04,18.575-6.885,24.208 c-11.734,13.643-19.362,31.422-24.609,48.473c-8.813,28.644-3.904,61.324,15.524,85.073c6.891,8.426,27.074,17.421,29.694,27.48 c3.534,13.567-15.78,9.266-23.638,3.655c-9.863-7.043-16.987-19.809-23.673-29.6c-4.6-6.736-8.393-11.354-11.623-19.306 c-2.678-6.592-3.899-26.734-6.981-30.874c-1.307-1.755-11.597-4.714-14.38-6.953c-5.307-4.267-9.627-10.066-13.814-15.386 c-7.622-9.685-7.156-15.201-18.09-6.975c-19.785,14.887-38.488,58.134-34.608,82.844c3.072,19.57,22.434,36.217,39.058,45.405 c13.263,7.332,30.729,16.769,45.795,18.005c10.195,0.836,31.413-8.663,39.9-0.078c4.528,4.581,2.813,15.376,5.358,21.573 c3.191,7.768,9.187,14.961,13.823,21.89c8.533,12.756,16.026,26.106,28.084,35.949c20.334,16.598,44.668,13.58,66.037,25.129 c25.06,13.544-12.697,12.758-21.937,11.629c-59.753-7.307-72.18-63.309-111.736-97.489c-10.033-8.668-16.412-4.646-29.356-6.16 c-13.027-1.523-26.182-11.408-39.212-11.941c-8.885-0.363-7.834,1.615-14.147,11.041c-3.668,5.475-7.811,10.962-10.693,16.929 c-4.782,9.901-8.347,22.587-10.798,33.431c-10.35,45.81,16.881,101.5,61.489,119.081c13.344,5.26,16.294,4.7,14.997,19.606 c-1.329,15.28-7.39,25.504-3.353,41.46c4.402,17.406,17.628,32.445,34.831,37.895c14.527,4.602,30.41-0.024,44.567,5.085 c0.404,22.569-70.648,4.502-79.17-0.983c-22.709,54.008-5.59,99.43,26.27,145.722c31.058,45.128,83.923,57.375,135.897,47.694 c23.92-4.456,46.441-20.615,63.247-37.674c4.867-4.94,31.861-31.886,25.976-7.288c-1.963,8.205-15.162,18.876-20.815,24.006 c-9.432,8.559-26.378,17.902-33.753,27.64c-8.731,11.529,1.594,29.296,11.558,38.291c11.91,10.75,25.129,12.446,40.41,12.611 c5.764,0.062,30.108-2.715,32.993,5.515c7.443,21.233-58.175,12.866-67.67,9.153c-27.676-10.821-36.493-33.007-34.537-60.816 c-22.221,5.564-38.636,6.467-61.513,6.336c7.481,25.175,9.026,47.893,22,71.295c11.891,21.446,24.889,34.531,47.687,43.906 c57.007,23.44,135.601,14.639,182.07-28.512c-18.431-2.96-29.959-14.742-39.599-29.499c-10.482-16.045-7.515-36.487-17.2-52.172 c0.164-8.215-2.919-10.105-9.251-5.669c-3.484,0.61-6.983,0.789-10.494,0.539c-6.722,0.481-16.71,1.318-22.926-1.618 c-4.601-2.173-17.408-15.135-12.142-19.297c2.533-2.003,17.928,3.002,21.617,2.975c5.701-0.041,11.674-1.357,17.218-2.547 c10.378-2.227,19.639-5.365,28.458-11.295c6.106-4.107,16.933-17.973,24.82-18.037c15.207-0.126,6.121,14.956,2.116,21.599 c-12.731,21.115-23.165,39.867-14.52,65.477c2.281,6.762,7.577,13.984,12.796,18.708c5.103,4.62,26.581,20.186,31.977,19.458 c2.163-0.293,13.571-11.622,14.767-13.427c4.81-7.252,4.529-9.394,1.808-18.813c-4.267-14.764-10.948-32.164,0.136-46.175 c12.173,8.313,10.727,33.796,14.386,46.928c2.742,9.843,7.538,18.911,14.352,26.553c12.383,13.891,29.233,20.181,45.643,27.767 c13.86,6.407,21.618,16.536,0.228,15.906c-22.68-0.667-49.878-18.155-62.184-36.745c-11.652,11.805-29.179,18.253-42.343,28.805 c-11.946,9.576-22.936,14.674-35.754,22.104c35.901,20.776,54.874,58.035,94.657,72.849 c32.286,12.023,65.221,20.343,99.015,8.385c11.829-4.185,21.911-10.003,28.496-20.907c4.153-6.874,5.316-15.178,10.585-21.451 c7.646,6.664,7.848,17.977,7.418,27.261c23.908-17.547,43.492-31.841,47.45-63.222c3.293-26.109-7.788-50.507-9.193-76.36 c-18.298,11.997-33.314,24.535-54.082,31.249c-18.267,5.904-17.196-5.507-3.95-14.138c15.797-10.294,32.393-16.226,46.751-29.251 c15.468-14.032,20.8-17.462,22.895-39.158c-40.049,14.135-70.442,19.503-114.066,13.018c-38.669-5.749-74.17-42.124-76.46-81.475 c-26.173,5.525-43.971,6.176-59.27-18.588c-13.703-22.181-11.713-44.141-10.771-68.802c-33.8,23.085-58.332,31.547-98.841,30.531 c-32.485-0.814-67.981-3.36-97.952-16.489c-29.942-13.116-45.786-41.631-59.002-70.354 c-17.212-37.408-37.733-79.231-20.83-120.533c-29.721-1.046-61.571-23.821-73.932-50.954c-2.8-6.147-3.063-19.559-6.526-24.054 c-4.31-5.595-15.258-3.64-23.989-4.189c-10.806-0.68-24.473-1.526-28.539-13.518c-1.498-4.42-0.813-17.181,4.293-20.046 c7.495-4.208,25.402,13.692,38.674,8.924c16.096-5.782,14.534-23.894,27.363-31.719c15.904-9.7,14.272,13.048,11.808,23.918 c-3.598,15.877-18.171,22.799-13.563,38.833c2.8,9.745,7.178,19.039,13.525,26.988c11.383,14.257,27.658,22.048,44.568,27.748 c6.42,2.165,24.078,4.237,25.609,12.652c0.378,2.073-7.084,16.983-7.778,21.502c-1.829,11.9-2.239,23.192-0.094,35.06 c5.971,33.04,22.509,72.391,42.546,99.423c13.287,17.927,34.742,26.768,55.582,32.861c45.507,13.305,93.278,15.945,136.335-5.275 c19.47-9.595,31.138-21.853,46.528-36.512c4.796-4.57,14.966-15.843,17.944-2.908c1.601,6.958-12.127,20.782-14.484,27.381 c-6.664,18.66-8.983,52.308,6,68.122c13.513,14.262,35.197,7.029,52.073,11.106c16.286,3.933,9.885,19.842,14.717,33.901 c4.704,13.684,14.579,27.198,26.241,35.802c22.641,16.705,57.843,20.194,84.945,17.728c25.87-2.354,61.463-20.406,66.965-48.652 c3.907-20.057-3.247-34.225-17.104-46.993c-1.402,5.927-6.768,21.714-13.084,24.602c-12.496,5.714-11.057-6.715-8.583-15.137 c5.088-17.322,12.517-34.745,19.424-51.526c17.249-41.915,23.976-82.581,17.519-128.052 c-3.749-26.395-12.45-56.148-23.818-79.767c-4.095-8.509-7.128-16.818-12.457-24.667c-3.312-4.878-23.508-20.727-23.501-25.17 c0.009-6.31,13.832-5.708,17.313-4.909c12.106,2.778,13.743,13.923,21.389,22.057c3.922-12.292,9.776-23.877,8.666-36.944 c-1.205-14.192-10.491-40.044-23.862-47.475c-8.218-4.568-4.33-2.873-12.925,0.331c-5.977,2.229-11.833,6.342-17.402,9.422 c-12.712,7.03-25.352,12.31-39.093,16.869c-6.837,2.268-13.272,3.569-19.846,6.243c-4.932,2.005-12.328,8.854-18.041,8.297 c-12.91-1.258-5.419-9.01,1.598-14.041c9.066-6.501,18.487-9.958,29.118-13.964c54.913-20.692,101.792-51.723,101.833-115.5 c0.028-45.193,5.559-101.172-11.188-143.929c-7.849-20.037-15.985-40.581-25.431-59.903 c-7.605-15.556-28.093-36.457-28.969-54.131c8.992-2.571,22.121,10.216,25.368,17.394c45.742-23.532,41.474-89.503,38.24-131.65 c-1.288-16.78-7.612-29.081-12.554-44.512c-2.913-9.098-3.479-21.676-3.24-31.146c0.263-10.408,8.021-22.605,7.045-32.105 c-2.329-22.668-49.868-38.289-68.216-43.958c-18.734-5.789-38.235-7.808-57.644-4.623c-26.128,4.288-52.381,22.501-79.449,18.09 c-0.805-11.871,26.378-15.183,33.797-17.576c14.35-4.628,28.412-8.77,43.496-11.377c16.945-2.93,33.861-4.778,50.7-0.573 c14.957,3.737,29.068,9.322,42.694,16.222c22.891,11.593,31.169,0.403,43.455-18.677c19.682-30.567,6.318-50.893-10.89-78.155 c-10.726-16.991-21.107-30.995-37.883-43.098c-9.386-6.772-21.348-10.94-30.205-18.153c-6.871-5.596-16.546-22.681-3.019-22.446 c6.021,0.105,20.202,14.88,25.306,18.471c12.434,8.745,24.479,17.659,35.852,27.789c13.096-25.481,13.488-59.861,3.351-86.293 C707.989,58.463,680.776,52.124,653.365,42.549C651.134,41.895,657.743,44.078,653.365,42.549z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#040000",
                        d:
                          "M483.527,241.287c-10.431,19.86-27.405,25.758-33.964,49.67c-5.396,19.666-6.751,42.601,10.743,56.432 c8.99,7.107,35.755,20.86,47.369,20.12c6.487-0.413,25.016-24.32,31.104-19.734c9.037,6.807-15.638,31.551-18.13,36.464 c-4.669,9.209-5.801,24.645-13.57,31.705c-19.868,18.057-5.615-29.486-3.281-36.146c-19.634-1.389-37.583-0.891-54.244-13.626 c-7.52-5.749-9.53-11.994-17.308-13.887c-7.37-1.792-17.988,2.058-26.067,1.152c-12.204-1.37-23.963-4.032-27.406-17.307 c-3.844-14.823,2.966-9.94,14.001-6.719c12.115,3.536,24.379,4.365,36.987,5.432c-2.764-14.78-2.62-36.674,1.475-51.236 C435.656,267.886,464.227,234.114,483.527,241.287C481.252,245.618,480.649,240.216,483.527,241.287z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#040000",
                        d:
                          "M644.381,349.866c-1.883,8.318-8.06,14.267-11.154,21.977c-2.651,6.599-2.708,14.249-5.894,20.589 c8.084-0.341,32.943-4.771,39.366,3.814c9.743,13.022-18.223,7.891-23.848,7.599c-26.44-1.375-61.159,2.048-82.541,18.764 c-23.949,18.722-37.357,48.45-50.528,74.864c-9.867,19.788-23.691,31.535-38.203,47.282 c-12.17,13.205-14.416,28.25-15.195,45.136c-0.63,13.649,4.932,26.985,12.371,38.276c7.76,11.78,15.169,17.09,7.327,30.959 c-8.954,15.832-17.533,24.936-8.836,44.532c4.266,9.612,10.07,16.225,19.257,21.415c11.061,6.25,24.574,10.084,37.095,11.205 c4.864,0.435,14.24,2.054,18.826,0.125c5.954-2.506,8.183-9.799,12.138-15.377c5.629-7.939,13.556-15.789,23.09-18.879 c3.625-1.175,8.528-4.257,12.314-1.325c7.383,5.717-4.139,13.725-8.948,18.108c-10.552,9.618-18.169,17.641-22.103,31.978 c-3.717,13.541-0.028,26.465-1.069,40.253c26.906-0.738,43.821,9.286,54.131,35.462c32.23-11.451,87.488-25.227,101.144,21.625 c8.355,28.663-12.577,15.326-22.791,2.197c-12.371-15.902-24.415-26.926-47.323-19.945c-9.764,2.976-23.092,18.154-32.721,17.727 c-8.483-0.376-14.385-12.398-18.603-18.597c-16.899-24.829-35.734-30.608-63.677-17.026 c-25.533,12.41-45.896,43.124-50.431,70.878c-2.855,17.471,0.978,41.409,6.795,58.035c1.552,4.436,16.406,24.822,13.667,29.283 c-5.111,8.328-20.312-0.648-23.579-5.525c-3.224-4.812-3.29-11.503-4.658-16.967c-1.537-6.139-3.361-11.662-4.4-18.024 c-1.084-6.64,1.553-24.099-2.252-28.451c-5.224-5.975-35.11-8.029-43.913-7.436c-16.372,1.104-35.614,7.839-49.643,16.101 c-8.836,5.205-18.357,18.959-28.346,11.813c-6.574-4.702-9.01-18.93-12.24-25.831c-5.971-12.76-13.621-23.169-26.582-29.449 c-15.309-7.419-32.463-4.697-47.688-12.039c8.483-11.905,39.03-4.308,50.027-0.971c23.864,7.244,40.555,25.494,46.237,49.995 c23.588-10.042,50.535-22.179,76.8-22.423c12.399-0.115,23.14,4.288,35.012,7.003c1.132-45.947,37.85-87.362,83.167-95.364 c-4.194-14.666-3.007-27.896-3.367-43.436c-32.594,5.447-72.917-3.28-91.093-33.569c-14.449-24.078-9.811-55.48,12.914-72.035 c-16.811-16.625-37.768-55.021-20.835-77.668c-23.691-0.987-131.847-4.61-93.553-53.493 c15.766,11.454,22.052,23.849,42.581,30.588c31.621,10.381,52.345,3.994,77.296-18.243 c30.395-27.089,40.226-70.488,67.409-100.253c20.869-22.852,49.692-32.359,80.109-32.359 c-17.796-1.853-3.994-22.326,2.206-31.408C621.432,358.737,645.431,333.335,644.381,349.866 C642.269,359.196,644.654,345.569,644.381,349.866z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#040000",
                        d:
                          "M343.992,350.877c15.62,4.948,7.148,27.726,4.241,37.569c-3.175,10.758-5.342,23.524-4.251,34.823 c1.444,14.941,15.696,29.869,15.705,44.138c0.009,13.71-20.795,16.908-31.416,24.636 c-48.506,35.295-82.283,103.949-83.018,162.936c-0.783,62.952,42.089,119.549,98.584,143.405 c4.959,2.094,24.682,9.21,17.054,16.958c-6.301,6.4-27.322-3.367-33.1-6.018c-17.184-7.886-32.716-20.147-45.539-33.926 c-4.302-4.622-11.779-18.668-17.535-20.393c-5.238-1.571-23.319,9.693-27.79,12.878c-8.363,5.957-24.428,43.17-35.632,38.695 c-9.938-3.969,4.742-32.072,9.15-37.123c10.485-12.016,29.391-23.63,45.382-25.681c-22.925-25.703-26.988-76.049-23.383-108.198 c0.522-4.663,3.945-13.099,2.457-17.804c-1.634-5.171-14.968-13.455-19.304-17.537c-3.222-3.034-6.253-6.836-9.876-9.387 c-5.591-3.936-13.431-6.669-19.945-8.185c-7.101-1.652-30.699,0.998-31.4-11.138c36.263-11.007,62.188,2.8,84.687,30.455 c3.98-15.747,10.382-32.773,18.286-46.919c5.727-10.249,19.71-19.828,23.162-30.788c2.873-9.123,1.911-5.193-5.395-14.036 c-4.109-4.972-6.884-10.643-9.978-16.259c-3.099-5.627-7.492-11.197-9.218-17.48c-3.471-12.644,1.958-12.255-12.717-13.459 c-15.358-1.259-25.949-1.276-39.566,7.221c-6.162,3.845-23.377,18.836-26.214,0.194c-1.927-12.67,26.572-16.973,35.253-19.261 c14.414-3.797,26.292-4.506,41.251-4.077c1.055-14.355-2.073-34.688,5.812-47.66c8.092-13.314,25.879-30.208,41.764-30.283 c0.374,9.174-9.451,13.566-14.959,19.589c-6.934,7.583-10.097,15.592-12.599,25.595c-9.578,38.296,0.58,60.436,19.767,92.14 c10.139-12.509,22.378-23.505,31.731-36.609c4.889-6.848,8.008-12.249,7.96-19.598c-0.036-5.518-3.087-12.087-3.548-17.877 C328.007,409.222,330.662,371.059,343.992,350.877C348.027,352.155,337.848,360.179,343.992,350.877z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#040000",
                        d:
                          "M637.372,476.641c21.262,2.65-8.119,16.023-11.974,18.924c-5.975,4.5-10.762,12.2-15.857,18.001 c-2.428,2.764-12.743,11.899-13.083,15.547c-0.51,5.465,13.055,20.189,15.483,25.531c13.656,30.052,11.172,64.408-4.961,91.405 c18.854,0.709,35.051-0.641,52.61,8.585c6.913,3.632,47.418,34.18,26.142,36.88c-7.567,0.96-19.429-13.751-25.264-17.913 c-8.906-6.352-19.021-12.909-29.84-15.353c-9.24-2.087-62.86,7.347-64.844,1.973c5.287-11.591,13.882-5.873,22.192-10.88 c7.6-4.579,3.967-2.235,6.727-11.526c1.226-4.127,2.134-8.437,3.393-12.597c5.917-19.547,6.746-34.413,1.571-54.438 c-2.355-9.111-5.52-18.505-11.142-26.198c-8.392-11.485-14.844-6.714-27.829-7.858c-14.025-1.235-26.289-8.558-20.325-26.532 c10.252,0.633,17.999,4.842,28.516,2.921c9.544-1.745,18.696-7.529,26.666-12.823 C606.615,492.942,622.364,475.067,637.372,476.641C643.969,477.462,633.813,476.267,637.372,476.641z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#040000",
                        d:
                          "M556.846,983.266c-2.76,14.047-10.098,23.464-7.346,38.256c1.208,6.499,3.597,15.153,8.239,20.145 c7.155,7.695,10.224,5.253,19.736,4.103c12.617-1.526,24.965-3.756,35.85,4.452c7.759,5.851,9.221,11.712,19.324,15.282 c4.213,1.489,55.285,11.106,28.326,18.535c-13.907,3.832-40.71-8.998-52.745-14.506c-9.256-4.236-13.509-7.618-23.247-6.071 c-4.713,0.748-8.681,3.429-13.001,5.151c-1.878,0.748-3.375,2.335-5.342,2.987c-10.784,3.573-22.946,2.365-34.101,1.883 c-29.794-1.285-55.221-1.968-80.288-18.859c-15.099-10.174-33.457-18.693-26.485-41.167c9.992,1.249,15.902,11.658,22.479,18.046 c8.97,8.713,17.973,13.675,29.775,17.551c18.845,6.19,45.007,13.565,64.946,8.739c-13.14-14.705-14.037-29.99-12.783-49.646 c0.506-7.934,1.345-14.001,5.306-20.927C538.362,982.197,560.876,968.001,556.846,983.266 C555.925,987.946,557.746,979.854,556.846,983.266z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#040000",
                        d:
                          "M340.423,1007.205c-0.208,29.846-25.275,61.288-16.937,91.382c10.263,37.036,59.533,36.935,87.087,20.641 c7.872-4.655,5.927-7.533,14.096-3.542c5.278,2.579,10.146,9.761,14.814,13.453c20.648,16.335,46.335,23.712,72.071,27.26 c31.891,4.397,58.529,0.314,88.441-12.063c11.979-4.958,22.125-11.255,31.936-19.678c5.152-4.421,16.804-20.358,24.416-17.412 c26.468,10.245-45.874,46.363-47.296,48.219c-3.226,4.21-4.23,24.88-2.66,31.842c3.071,13.616,14.76,17.299,25.672,24.101 c7.429,4.631,24.247,11.643,12.629,19.335c-8.684,5.75-33.562-0.769-40.641-6.936c-17.436-15.192-13.735-38.985-11.351-59.153 c-52.977,14.554-118.673,11.501-166.852-18.896c-2.514-2.149-5.066-4.252-7.654-6.31c-2.602-3.479-5.19-2.759-7.763,2.159 c-2.141,0.487-5.519,2.763-7.598,3.72c-10.279,4.739-20.582,5.169-31.68,4.827c-21.253-0.655-42.377-6.291-56.002-23.586 c-13.684-17.37-8.659-42.318-3.56-62.668c5.276-21.061,5.895-48.905,24.582-63.449 C337.59,1002.703,339.006,1004.954,340.423,1007.205C340.369,1015.043,339.55,1004.657,340.423,1007.205z"
                      }
                    })
                  ])
                ]),
                _vm._v(" "),
                _c("g", [
                  _c("path", {
                    attrs: {
                      d:
                        "M880.896,31.827c8.586-6.366,22.543-3.462,32.296-2.933c13.729,0.745,27.282,0.833,39.921,6.902 c5.579,2.679,8.725,6.565,13.728,9.668c6.16,3.818,7.658,3.593,15.733,4.294c21.052,1.826,42.866,10.63,61.015,21.09 c8.612,4.964,17.765,20.161,27.134,21.869c10.129,1.849,26.239-12.491,35.777-16.144c56.509-21.641,108.355-4.681,141.872,45.499 c11.681,17.488,19.163,37.681,18.811,58.89c-0.185,11.178-7.517,24.502-6.628,34.981c1.511,17.809,22.119,12.416,34.375,14.285 c12.84,1.959,23.307,6.852,31.873,17.132c15.454,18.551,18.037,50.135,19.737,73.401c1.725,23.628,4.294,47.72,22.732,63.427 c19.993,17.032,39.678,30.853,53.39,53.645c21.538,35.8,22.944,68.116,21.272,108.768c-0.763,18.546-5.525,35.896-9.857,53.824 c-3.518,14.558-2.109,12.441,9.075,21.206c11.109,8.705,17.169,17.616,22.679,30.319c5.942,13.699,9.702,24.006,9.585,38.794 c-0.06,7.56-0.357,15.126-0.763,22.676c-0.265,4.985-0.597,9.965-0.996,14.94c3.141,1.773,6.257,3.591,9.347,5.452 c9.391,12.082,18.277,22.442,24.838,36.2c7.398,15.517,14.672,36.458,17.254,53.971c4.993,33.863-7.967,49.498-35.738,64.766 c23.528,28.487,42.667,66.538,37.954,104.647c-2.736,22.131-9.717,40.395-24.388,57.226c-7.405,8.494-15.051,16.462-23.306,24.12 c-6.185,5.739-23.045,17.783-26.022,26.096c-3.102,8.659,4.257,24.176,2.914,34.407c-1.087,8.288-6.771,16.356-7.355,24.289 c-0.56,7.604,5.909,19.081,7.343,29.514c1.475,10.733,4.447,20.909,5.659,31.595c4.065,35.849-5.751,62.123-25.473,91.5 c-8.981,13.378-16.349,27.445-26.732,39.748c-15.417,18.268-28.265,27.033-50.456,34.831c-5.758,2.023-14.963,3.516-20.157,6.262 c-14.816,7.832-10.621,40.288-18.413,56.459c-8.36,17.349-13.638,36.369-27.07,50.892c-10.228,11.06-23.395,14.855-36.284,21.771 c-27.002,14.488-55.351,17.727-85.77,14.05c-17.746-2.145-48.335-15.154-62.399-7.176c-5.936,3.367-12.499,13.241-17.777,18.06 c-7.605,6.944-15.634,13.639-21.588,21.979c-9.395,13.159-16.697,20.809-32.313,29.021 c-19.197,10.096-44.709,22.968-66.108,26.684c-21.415,3.719-48.811,4.664-69.855-0.737c-5.013-1.286-9.509-3.01-14.117-5.456 c-7.438-3.95-12.737-13.847-19.193-17.031c-0.754-0.371-8.198,2.194-10.607,1.407c-6.094-1.991-11.333-4.85-16.928-7.972 c-9.911-5.531-19.208-11.991-26.215-21.195c-15.992-21.003-18.357-46.07-15.142-71.682c0.498-3.967,1.607-7.849,2.17-11.839 c0.618-4.387-0.485-7.004,1.15-11.644c0.662-1.877,6.465-5.722,6.763-7.346c2.07-11.267-3.715-28.997-5.448-40.166 c-4.159-26.802-16.345-51.467-17.13-78.78c-0.362-12.577-0.281-27.762,4.455-39.641c5.05-12.665,21.104-26.688,19.859-40.579 c-1.136-12.671-12.472-27.066-16.914-39.421c-8.942-24.87-4.945-52.574-4.473-78.462c0.429-23.531,3.761-38.067,9.075-60.034 c3.809-15.746,7.838-29.267,13.336-44.364c4.626-12.701,4.177-13.426-3.808-24.442c-3.773-5.206-7.526-11.215-9.082-17.534 c-7.054-28.647,10.766-70.177,32.176-89.641c-9.503-10.264-17.181-19.044-23.565-32.176c-10.083-20.742-5.522-47.146-5.412-70.179 c0.148-30.859-1.001-62.305,1.704-93.096c0.651-7.405,2.288-13.739,4.116-20.841c2.521-9.793,5.238-18.883,9.354-28.263 c4.995-11.381,9.295-22.911,14.158-34.336c4.5-10.576,11.237-21.407,15.1-32.013c-27.491-6.662-43.957-55.247-44.725-80.281 c-0.795-25.934-1.682-55.02,1.855-80.78c0.8-5.828,2.805-11.454,4.429-17.09c2.466-8.553,4.249-17.013,6.086-25.709 c2.292-10.848,3.765-10.786-2.041-17.198c-4.387-4.842-7.875-2.637-10.333-9.937c-1.79-5.315,0.558-17.48,2.193-22.932 c3.683-12.29,12.382-19.084,22.42-26.465c-11.585-3.267-28.458-26.352-33.878-36.534c-7.99-15.006-5.984-33.979,0.825-49.024 c5.203-11.496,12.553-22.154,18.856-33.072c3.198-5.538,9.41-12.688,11.328-18.639c2.856-8.867-3.219-15.839-7.11-25.68 c-8.658-21.889-8.239-57.093-1.371-79.073c2.981-9.54,9.903-20.165,17.643-26.445C847.513,46.894,867.323,42.619,880.896,31.827 M900.738,42.549c-27.41,9.575-54.624,15.914-66.064,45.744c-10.137,26.432-9.745,60.812,3.351,86.293 c11.373-10.13,23.419-19.044,35.852-27.789c5.104-3.591,19.285-18.366,25.306-18.471c13.526-0.235,3.851,16.85-3.019,22.446 c-8.857,7.212-20.819,11.381-30.205,18.153c-16.777,12.104-27.157,26.107-37.883,43.098 c-17.208,27.261-30.572,47.588-10.89,78.155c12.286,19.08,20.564,30.269,43.455,18.677c13.626-6.9,27.736-12.485,42.694-16.222 c16.838-4.206,33.755-2.357,50.7,0.573c15.085,2.607,29.146,6.749,43.496,11.377c7.419,2.393,34.602,5.705,33.797,17.576 c-27.068,4.411-53.321-13.802-79.449-18.09c-19.408-3.185-38.909-1.166-57.644,4.623c-18.348,5.669-65.887,21.29-68.216,43.958 c-0.976,9.5,6.782,21.697,7.045,32.105c0.239,9.471-0.327,22.048-3.24,31.146c-4.943,15.431-11.267,27.731-12.554,44.512 c-3.234,42.147-7.501,108.118,38.24,131.65c3.247-7.178,16.376-19.966,25.368-17.394c-0.876,17.674-21.364,38.575-28.969,54.131 c-9.446,19.322-17.582,39.866-25.431,59.903c-16.747,42.757-11.216,98.735-11.188,143.929 c0.041,63.778,46.92,94.808,101.833,115.5c10.631,4.005,20.052,7.463,29.118,13.964c7.017,5.031,14.508,12.783,1.598,14.041 c-5.713,0.557-13.109-6.292-18.041-8.297c-6.574-2.674-13.009-3.975-19.846-6.243c-13.74-4.559-26.381-9.839-39.093-16.869 c-5.569-3.08-11.424-7.193-17.402-9.422c-8.595-3.204-4.708-4.899-12.925-0.331c-13.371,7.431-22.656,33.282-23.862,47.475 c-1.11,13.066,4.744,24.651,8.666,36.944c7.646-8.134,9.283-19.279,21.389-22.057c3.482-0.799,17.304-1.401,17.313,4.909 c0.006,4.443-20.189,20.292-23.501,25.17c-5.329,7.849-8.361,16.158-12.457,24.667c-11.368,23.619-20.07,53.372-23.818,79.767 c-6.458,45.471,0.27,86.137,17.519,128.052c6.907,16.782,14.336,34.204,19.424,51.526c2.474,8.422,3.913,20.851-8.583,15.137 c-6.316-2.888-11.682-18.675-13.084-24.602c-13.857,12.769-21.011,26.937-17.104,46.993c5.502,28.246,41.096,46.297,66.965,48.652 c27.102,2.466,62.304-1.023,84.945-17.728c11.662-8.604,21.537-22.118,26.241-35.802c4.832-14.059-1.569-29.968,14.717-33.901 c16.877-4.077,38.56,3.156,52.073-11.106c14.983-15.814,12.665-49.462,6-68.122c-2.357-6.599-16.085-20.422-14.484-27.381 c2.977-12.936,13.147-1.663,17.943,2.908c15.39,14.66,27.059,26.917,46.529,36.512c43.057,21.22,90.828,18.58,136.335,5.275 c20.84-6.093,42.295-14.934,55.582-32.861c20.037-27.033,36.575-66.384,42.546-99.423c2.145-11.869,1.736-23.161-0.094-35.06 c-0.695-4.519-8.156-19.429-7.778-21.502c1.532-8.415,19.189-10.487,25.609-12.652c16.91-5.7,33.185-13.491,44.568-27.748 c6.347-7.949,10.725-17.243,13.525-26.988c4.607-16.035-9.965-22.957-13.563-38.833c-2.464-10.87-4.095-33.619,11.808-23.918 c12.829,7.825,11.266,25.936,27.363,31.719c13.272,4.768,31.179-13.132,38.674-8.924c5.106,2.865,5.791,15.626,4.293,20.046 c-4.066,11.992-17.733,12.838-28.539,13.518c-8.731,0.549-19.679-1.406-23.989,4.189c-3.462,4.496-3.726,17.908-6.526,24.054 c-12.362,27.133-44.211,49.907-73.932,50.954c16.904,41.302-3.618,83.124-20.829,120.533 c-13.215,28.724-29.06,57.238-59.002,70.354c-29.971,13.129-65.467,15.675-97.952,16.489c-40.509,1.016-65.041-7.446-98.84-30.531 c0.942,24.662,2.932,46.621-10.771,68.802c-15.299,24.764-33.097,24.113-59.27,18.588c-2.29,39.351-37.791,75.726-76.46,81.475 c-43.625,6.486-74.017,1.117-114.066-13.018c2.095,21.696,7.427,25.126,22.895,39.158c14.358,13.025,30.954,18.958,46.751,29.251 c13.246,8.631,14.317,20.043-3.95,14.138c-20.768-6.714-35.784-19.252-54.082-31.249c-1.406,25.853-12.486,50.251-9.193,76.36 c3.958,31.381,23.542,45.675,47.45,63.222c-0.43-9.285-0.229-20.597,7.418-27.261c5.269,6.273,6.432,14.577,10.585,21.451 c6.586,10.903,16.667,16.721,28.496,20.907c33.795,11.958,66.729,3.638,99.015-8.385c39.782-14.814,58.755-52.073,94.657-72.849 c-12.817-7.431-23.808-12.529-35.754-22.104c-13.164-10.552-30.692-17-42.343-28.805c-12.306,18.589-39.505,36.077-62.184,36.745 c-21.389,0.63-13.631-9.499,0.229-15.906c16.409-7.586,33.259-13.876,45.643-27.767c6.813-7.641,11.609-16.71,14.352-26.553 c3.659-13.132,2.213-38.615,14.386-46.928c11.084,14.011,4.403,31.412,0.136,46.175c-2.722,9.419-3.003,11.561,1.808,18.813 c1.197,1.805,12.604,13.134,14.767,13.427c5.396,0.728,26.874-14.838,31.977-19.458c5.219-4.723,10.514-11.946,12.796-18.708 c8.645-25.61-1.788-44.363-14.52-65.477c-4.005-6.642-13.091-21.724,2.116-21.599c7.886,0.064,18.714,13.93,24.82,18.037 c8.818,5.93,18.08,9.067,28.458,11.295c5.545,1.19,11.517,2.506,17.218,2.547c3.688,0.027,19.084-4.977,21.617-2.975 c5.266,4.162-7.541,17.123-12.142,19.297c-6.216,2.936-16.204,2.099-22.926,1.618c-3.511,0.25-7.01,0.071-10.494-0.539 c-6.332-4.436-9.415-2.546-9.251,5.669c-9.685,15.685-6.718,36.127-17.2,52.172c-9.64,14.757-21.167,26.539-39.599,29.499 c46.469,43.151,125.063,51.951,182.07,28.512c22.798-9.374,35.796-22.46,47.687-43.906c12.974-23.402,14.52-46.12,22-71.295 c-22.877,0.131-39.292-0.772-61.513-6.336c1.957,27.808-6.861,49.995-34.537,60.816c-9.495,3.713-75.113,12.079-67.67-9.153 c2.886-8.23,27.229-5.454,32.994-5.515c15.281-0.164,28.5-1.86,40.41-12.611c9.964-8.994,20.289-26.762,11.558-38.291 c-7.375-9.738-24.322-19.081-33.754-27.64c-5.654-5.13-18.852-15.801-20.815-24.006c-5.885-24.598,21.109,2.348,25.976,7.288 c16.806,17.059,39.328,33.218,63.247,37.674c51.974,9.681,104.84-2.566,135.897-47.694c31.86-46.292,48.979-91.714,26.27-145.722 c-8.522,5.486-79.575,23.552-79.17,0.983c14.156-5.109,30.04-0.483,44.567-5.085c17.203-5.45,30.429-20.489,34.831-37.895 c4.036-15.956-2.025-26.18-3.353-41.46c-1.297-14.906,1.653-14.346,14.997-19.606c44.608-17.58,71.839-73.271,61.489-119.081 c-2.451-10.844-6.016-23.531-10.798-33.431c-2.882-5.967-7.025-11.454-10.693-16.929c-6.314-9.426-5.262-11.404-14.147-11.041 c-13.031,0.533-26.185,10.418-39.212,11.941c-12.945,1.514-19.324-2.509-29.356,6.16c-39.556,34.18-51.983,90.181-111.736,97.489 c-9.241,1.13-46.997,1.915-21.938-11.629c21.369-11.549,45.703-8.531,66.037-25.129c12.059-9.843,19.551-23.193,28.084-35.949 c4.636-6.929,10.631-14.122,13.823-21.89c2.546-6.197,0.831-16.992,5.359-21.573c8.487-8.585,29.706,0.914,39.9,0.078 c15.067-1.236,32.532-10.674,45.795-18.005c16.624-9.188,35.986-25.835,39.058-45.405c3.88-24.71-14.824-67.958-34.609-82.844 c-10.934-8.227-10.468-2.71-18.09,6.975c-4.186,5.32-8.506,11.119-13.814,15.386c-2.783,2.239-13.073,5.198-14.38,6.953 c-3.082,4.14-4.303,24.282-6.981,30.874c-3.23,7.952-7.024,12.57-11.623,19.306c-6.686,9.792-13.81,22.558-23.673,29.6 c-7.858,5.611-27.173,9.912-23.638-3.655c2.62-10.059,22.803-19.054,29.694-27.48c19.428-23.749,24.337-56.429,15.524-85.073 c-5.247-17.051-12.875-34.831-24.609-48.473c-4.845-5.633-35.437-28.654-6.885-24.208c12.838,1.999,26.377,24.076,32.083,34.05 c9.572,16.728,14.619,35.231,19.371,53.777c24.169-12.355,33.698-44.879,31.915-70.311c-1.146-16.355-7.115-35.607-17.784-48.077 c-2.356-2.753-14.805-15.947-19.356-15.359c-4.762,0.615-10.043,11.477-13.903,14.829c-3.966,3.444-12.707,10.639-18.004,8.073 c-10.206-4.945,2.213-12.251,5.334-15.422c12.392-12.594,18.091-28.133,24.065-44.525c10.654-29.234,13.11-62.083,8.759-92.771 c-4.713-33.248-20.553-60.605-45.618-81.998c-12.372-10.559-26.961-32.067-42.585-26.996c-9.061,2.942-32.071,20.466-32.151,2.946 c-0.009-1.939,5.891-15.838,7.321-19.071c3.572-8.074,3.75-3.848,10.689-8.853c9.621-6.941,6.704-10.988,6.065-24.766 c-0.495-10.672,0.442-21.483-0.579-32.124c-3.229-33.665-17.51-56.411-50.814-63.192c-4.269-0.869-22.894-5.668-25.66-2.176 c-1.22,1.539,6.637,19.455,7.619,24.029c1.588,7.4,1.969,13.992,1.974,21.813c0.004,6.31,3.638,24.554-3.812,27.205 c-8.836,3.144-8.55-6.939-9.055-12.294c-1.704-18.078-2.745-31.792-9.806-49.434c-22.536,14.222-23.977-2.376-28.848-19.514 c-3.064-10.784-2.716-10.857-13.559-16.39c-4.882-2.492-10.781-6.017-15.798-7.886c-4.343-1.619-25.339-2.831-25.732-10.269 c-1.154-21.841,77.885,20.609,84.111,25.334c8.661-24.931,16.801-47.011,5.176-72.134c-10.734-23.199-32.321-52.87-56.194-63.516 c-20.203-9.007-43.714-8.36-64.303-1.837c-9.065,2.872-18.973,6.854-27.403,11.11c-7.603,3.839-12.176,9.37-20.297,11.798 c0.879,3.348,5.095,12.866,6.988,15.649c4.26,6.269,0.036,3.882,8.651,6.93c7.912,2.8,21.638-2.231,28.682,2.017 c13.448,8.108-11.532,12.15-20.229,11.884c-11.297-0.347-14.245-5.315-17.191,6.583c-1.339,5.406-0.999,11.882-1.837,17.508 c-1.395,9.372,3.222,44.359-2.56,49.946c-8.069,7.798-15.475-4.071-16.471-10.912c-1.491-10.245,2.5-26.533,3.768-36.95 c2.433-19.957,6.179-37.613-3.899-56.636c-17.053-32.191-52.843-45.993-86.419-52.716c6.689,11.001,11.223,22.011,14.687,34.546 c1.548,5.604,0.874,16.868,4.319,21.706c2.415,3.392,9.825,4.523,12.989,8.309c11.137,13.324,7.868,43.264-4.293,54.172 c-14.263,12.794-35.322,9.085-52.539,6.181c-3.808-0.642-19.641-1.159-20.109-5.64c-1.27-12.159,23.739-3.518,26.7-3.334 c15.821,0.98,40.46-13.176,32.631-33.148c-1.596-4.071-5.269-3.082-6.777-5.878c-4.02-7.445-4.198-12.098-5.116-21.222 C977.509,78.303,949.274,28.286,900.738,42.549C896.36,44.078,902.969,41.895,900.738,42.549z M1070.576,241.287 c19.301-7.173,47.871,26.599,52.292,42.316c4.095,14.562,4.239,36.456,1.475,51.236c12.608-1.067,24.872-1.896,36.987-5.432 c11.035-3.221,17.845-8.103,14.001,6.719c-3.443,13.274-15.203,15.937-27.406,17.307c-8.079,0.906-18.697-2.944-26.068-1.152 c-7.778,1.892-9.788,8.138-17.308,13.887c-16.661,12.735-34.61,12.237-54.244,13.626c2.334,6.66,16.587,54.203-3.281,36.146 c-7.768-7.06-8.901-22.496-13.57-31.705c-2.492-4.913-27.166-29.657-18.13-36.464c6.088-4.586,24.617,19.321,31.104,19.734 c11.615,0.741,38.379-13.013,47.369-20.12c17.494-13.83,16.139-36.765,10.743-56.432 C1097.981,267.045,1081.007,261.147,1070.576,241.287C1073.454,240.216,1072.851,245.618,1070.576,241.287z M909.722,349.866 c-1.05-16.531,22.949,8.871,24.737,11.491c6.199,9.082,20.002,29.555,2.206,31.408c30.417,0,59.239,9.508,80.109,32.359 c27.183,29.765,37.014,73.163,67.409,100.253c24.951,22.237,45.675,28.623,77.296,18.243 c20.529-6.739,26.815-19.134,42.581-30.588c38.294,48.883-69.861,52.506-93.553,53.493c16.933,22.647-4.023,61.043-20.835,77.668 c22.724,16.555,27.363,47.957,12.914,72.035c-18.176,30.289-58.499,39.016-91.093,33.569c-0.361,15.54,0.827,28.77-3.367,43.436 c45.317,8.002,82.034,49.417,83.167,95.364c11.871-2.715,22.613-7.119,35.012-7.003c26.265,0.244,53.212,12.381,76.8,22.423 c5.682-24.501,22.373-42.75,46.237-49.995c10.997-3.338,41.544-10.934,50.027,0.971c-15.224,7.342-32.379,4.62-47.688,12.039 c-12.961,6.28-20.611,16.689-26.582,29.449c-3.23,6.902-5.666,21.129-12.24,25.831c-9.989,7.146-19.51-6.609-28.346-11.813 c-14.029-8.262-33.271-14.997-49.643-16.101c-8.803-0.593-38.69,1.461-43.913,7.436c-3.805,4.352-1.168,21.812-2.252,28.451 c-1.039,6.362-2.863,11.885-4.4,18.024c-1.367,5.464-1.434,12.155-4.658,16.967c-3.267,4.877-18.469,13.853-23.579,5.525 c-2.738-4.461,12.115-24.848,13.667-29.283c5.817-16.626,9.65-40.564,6.795-58.035c-4.536-27.754-24.898-58.468-50.431-70.878 c-27.943-13.583-46.779-7.803-63.677,17.026c-4.219,6.199-10.12,18.221-18.603,18.597c-9.63,0.427-22.957-14.751-32.721-17.727 c-22.908-6.981-34.953,4.043-47.323,19.945c-10.214,13.129-31.146,26.467-22.791-2.197 c13.656-46.852,68.914-33.077,101.144-21.625c10.31-26.177,27.225-36.2,54.131-35.462c-1.041-13.788,2.647-26.712-1.069-40.253 c-3.934-14.337-11.552-22.36-22.103-31.978c-4.809-4.383-16.331-12.391-8.948-18.108c3.786-2.932,8.689,0.15,12.314,1.325 c9.535,3.09,17.461,10.94,23.09,18.879c3.955,5.578,6.184,12.871,12.138,15.377c4.586,1.93,13.961,0.311,18.826-0.125 c12.521-1.121,26.034-4.955,37.095-11.205c9.187-5.19,14.991-11.803,19.257-21.415c8.696-19.596,0.118-28.701-8.836-44.532 c-7.843-13.869-0.434-19.179,7.327-30.959c7.438-11.291,13.001-24.627,12.371-38.276c-0.779-16.886-3.025-31.93-15.195-45.136 c-14.512-15.747-28.336-27.494-38.203-47.282c-13.17-26.414-26.578-56.143-50.528-74.864 c-21.383-16.716-56.102-20.139-82.541-18.764c-5.624,0.293-33.59,5.423-23.848-7.599c6.423-8.585,31.282-4.156,39.366-3.814 c-3.186-6.341-3.243-13.991-5.894-20.589C917.781,364.133,911.605,358.184,909.722,349.866 C909.45,345.569,911.834,359.196,909.722,349.866z M1210.111,350.877c13.33,20.183,15.984,58.346,14.138,81.536 c-0.461,5.79-3.512,12.359-3.548,17.877c-0.049,7.35,3.071,12.751,7.96,19.598c9.354,13.104,21.592,24.099,31.731,36.609 c19.186-31.705,29.345-53.845,19.766-92.14c-2.502-10.003-5.665-18.012-12.599-25.595c-5.507-6.024-15.332-10.415-14.959-19.589 c15.886,0.076,33.673,16.969,41.764,30.283c7.885,12.971,4.756,33.304,5.812,47.66c14.959-0.429,26.836,0.28,41.251,4.077 c8.681,2.288,37.18,6.591,35.253,19.261c-2.837,18.642-20.052,3.651-26.214-0.194c-13.617-8.497-24.208-8.481-39.567-7.221 c-14.675,1.204-9.246,0.815-12.717,13.459c-1.725,6.283-6.119,11.853-9.218,17.48c-3.094,5.617-5.868,11.287-9.978,16.259 c-7.306,8.843-8.268,4.913-5.395,14.036c3.452,10.96,17.435,20.539,23.162,30.788c7.904,14.146,14.307,31.172,18.286,46.919 c22.499-27.655,48.423-41.463,84.687-30.455c-0.701,12.136-24.3,9.486-31.4,11.138c-6.514,1.516-14.354,4.249-19.945,8.185 c-3.623,2.551-6.654,6.354-9.876,9.387c-4.337,4.081-17.67,12.365-19.304,17.537c-1.488,4.705,1.935,13.141,2.457,17.804 c3.605,32.149-0.458,82.495-23.383,108.198c15.991,2.052,34.897,13.665,45.382,25.681c4.407,5.052,19.087,33.154,9.15,37.123 c-11.204,4.475-27.269-32.738-35.632-38.695c-4.471-3.185-22.552-14.449-27.79-12.878c-5.756,1.725-13.233,15.771-17.535,20.393 c-12.823,13.779-28.355,26.039-45.539,33.926c-5.778,2.651-26.799,12.418-33.1,6.018c-7.628-7.748,12.095-14.864,17.054-16.958 c56.495-23.855,99.367-80.453,98.584-143.405c-0.734-58.988-34.512-127.641-83.018-162.936 c-10.621-7.728-31.425-10.926-31.416-24.636c0.009-14.269,14.26-29.197,15.705-44.138c1.091-11.299-1.076-24.065-4.251-34.823 C1202.963,378.603,1194.491,355.824,1210.111,350.877C1216.256,360.179,1206.076,352.155,1210.111,350.877z M916.731,476.641 c15.008-1.574,30.757,16.302,41.821,23.649c7.97,5.293,17.122,11.078,26.666,12.823c10.517,1.922,18.263-2.288,28.516-2.921 c5.965,17.974-6.299,25.297-20.325,26.532c-12.984,1.144-19.437-3.627-27.829,7.858c-5.622,7.694-8.787,17.087-11.142,26.198 c-5.175,20.025-4.346,34.891,1.571,54.438c1.259,4.159,2.167,8.469,3.393,12.597c2.76,9.291-0.873,6.947,6.727,11.526 c8.31,5.007,16.905-0.711,22.192,10.88c-1.985,5.374-55.605-4.061-64.844-1.973c-10.82,2.444-20.935,9.001-29.841,15.353 c-5.835,4.162-17.697,18.873-25.264,17.913c-21.276-2.7,19.229-33.248,26.142-36.88c17.558-9.225,33.756-7.876,52.61-8.585 c-16.132-26.997-18.616-61.352-4.961-91.405c2.428-5.342,15.992-20.066,15.483-25.531c-0.34-3.647-10.655-12.783-13.083-15.547 c-5.095-5.801-9.883-13.502-15.857-18.001C924.85,492.664,895.469,479.291,916.731,476.641 C920.29,476.267,910.134,477.462,916.731,476.641z M997.257,983.266c-4.03-15.266,18.484-1.069,21.357,3.955 c3.961,6.926,4.8,12.993,5.306,20.927c1.254,19.656,0.357,34.941-12.783,49.646c19.939,4.826,46.101-2.548,64.946-8.739 c11.802-3.876,20.805-8.838,29.775-17.551c6.577-6.388,12.487-16.797,22.479-18.046c6.972,22.474-11.386,30.993-26.485,41.167 c-25.067,16.891-50.494,17.574-80.288,18.859c-11.155,0.481-23.318,1.689-34.101-1.883c-1.967-0.652-3.464-2.239-5.342-2.987 c-4.32-1.722-8.288-4.402-13.001-5.151c-9.738-1.547-13.991,1.835-23.247,6.071c-12.034,5.507-38.837,18.338-52.745,14.506 c-26.96-7.429,24.112-17.046,28.326-18.535c10.102-3.57,11.564-9.431,19.324-15.282c10.885-8.209,23.233-5.979,35.85-4.452 c9.512,1.15,12.581,3.592,19.736-4.103c4.642-4.993,7.031-13.647,8.239-20.145C1007.356,1006.73,1000.017,997.314,997.257,983.266 C996.357,979.854,998.178,987.946,997.257,983.266z M1213.68,1007.205c1.417-2.252,2.833-4.502,4.251-6.754 c18.687,14.544,19.306,42.388,24.582,63.449c5.099,20.351,10.124,45.299-3.56,62.668c-13.625,17.295-34.748,22.931-56.002,23.586 c-11.098,0.341-21.401-0.089-31.68-4.827c-2.078-0.958-5.456-3.234-7.598-3.72c-2.573-4.918-5.161-5.638-7.763-2.159 c-2.588,2.058-5.14,4.161-7.654,6.31c-48.179,30.398-113.875,33.451-166.852,18.896c2.384,20.168,6.085,43.961-11.351,59.153 c-7.079,6.167-31.957,12.687-40.641,6.936c-11.618-7.693,5.199-14.704,12.629-19.335c10.912-6.802,22.601-10.485,25.672-24.101 c1.57-6.962,0.566-27.632-2.66-31.842c-1.422-1.856-73.764-37.975-47.296-48.219c7.613-2.946,19.265,12.991,24.416,17.412 c9.811,8.423,19.957,14.72,31.936,19.678c29.911,12.377,56.55,16.459,88.44,12.063c25.736-3.548,51.422-10.925,72.071-27.26 c4.668-3.692,9.536-10.874,14.814-13.453c8.169-3.991,6.224-1.113,14.096,3.542c27.554,16.294,76.825,16.395,87.087-20.641 C1238.956,1068.494,1213.888,1037.051,1213.68,1007.205C1214.553,1004.657,1213.734,1015.043,1213.68,1007.205z"
                    }
                  }),
                  _vm._v(" "),
                  _c("g", [
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1084.93,260.278c3.32,3.542,6.628,7,9.644,10.902c0.161,0.208,0.321,0.417,0.48,0.627 c3.911,5.179,7.29,11.175,9.49,19.207c1.015,3.697,1.887,7.509,2.518,11.354c2.727,16.614,0.953,33.845-13.258,45.076 c-8.99,7.11-35.75,20.86-47.37,20.12c-0.09-0.006-0.19-0.03-0.285-0.044c-2.166-0.334-5.513-2.965-9.262-6.237 c-6.839-5.97-14.996-14.038-19.684-14.038c-0.71,0-1.34,0.19-1.87,0.59c-3.306,2.49-2.094,7.381,0.884,12.82 c5.167,9.435,15.666,20.526,17.246,23.641c1.979,3.903,3.323,8.925,4.806,13.953c2.016,6.838,4.287,13.688,8.764,17.757 c19.87,18.05,5.61-29.49,3.28-36.15c19.63-1.39,37.58-0.89,54.24-13.62c7.52-5.75,9.53-12,17.31-13.89 c4.922-1.195,11.292,0.121,17.388,0.859c1.466,0.177,2.914,0.317,4.324,0.384c1.507,0.072,2.972,0.063,4.358-0.094 c12.2-1.37,23.96-4.03,27.41-17.31c3.84-14.82-2.97-9.94-14.01-6.72c-7.253,2.12-14.56,3.265-21.963,4.075 c-1.678,0.183-3.36,0.351-5.048,0.507c-3.301,0.305-6.622,0.574-9.969,0.858c1.085-5.812,1.714-12.729,1.838-19.864 c0.111-6.362-0.182-12.894-0.933-18.985c-0.33-2.675-0.754-5.251-1.262-7.7c-0.337-1.625-0.704-3.204-1.123-4.691 c-0.44-1.565-1.132-3.318-2.018-5.183c-0.128-0.269-0.248-0.534-0.385-0.807c-0.455-0.914-0.964-1.857-1.509-2.816 c-0.614-1.082-1.284-2.188-2.002-3.31c-1.951-3.048-4.262-6.206-6.837-9.297c-0.701-0.841-1.42-1.675-2.157-2.501 c-0.033-0.037-0.068-0.074-0.101-0.112c-1.111-1.243-2.261-2.462-3.442-3.65c-8.674-8.725-19.024-15.633-28.179-15.633 c-1.95,0-3.85,0.32-5.66,0.99c0.08,0.16,0.17,0.31,0.24,0.44c3.132,5.853,6.835,10.486,10.66,14.749 C1082.625,257.806,1083.778,259.048,1084.93,260.278z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1352.313,453.797c-4.447-1.1-8.443-1.901-10.879-2.543c-1.447-0.382-2.864-0.724-4.266-1.045 c-7.271-1.666-14.015-2.554-21.012-2.926c-5.086-0.27-10.308-0.272-15.972-0.109c-0.089-1.2-0.146-2.445-0.185-3.72 c-0.119-3.912-0.049-8.142-0.041-12.469c0.003-1.356-0.002-2.722-0.02-4.09c-0.065-4.922-0.315-9.873-1.115-14.534 c-0.803-4.685-2.16-9.078-4.449-12.846c-0.25-0.42-0.52-0.84-0.79-1.26c-1.78-2.771-3.956-5.664-6.422-8.507 c-1.285-1.481-2.65-2.947-4.08-4.375c-4.23-4.225-9.03-8.105-14.037-11.003c-0.117-0.068-0.233-0.14-0.35-0.206 c-5.289-3.007-10.796-4.901-16.091-4.929c-0.04,1.01,0.04,1.97,0.23,2.87c1.52,7.29,9.84,11.36,14.73,16.72 c1.219,1.331,2.315,2.676,3.317,4.042c0.938,1.279,1.788,2.578,2.565,3.902c1.144,1.948,2.132,3.952,3.002,6.034 c0.179,0.428,0.356,0.858,0.526,1.293c1.158,2.97,2.107,6.107,2.97,9.465c0.073,0.285,0.148,0.566,0.22,0.855 c1.202,4.806,2.093,9.356,2.694,13.704c0.411,2.972,0.679,5.844,0.826,8.642c0.066,1.254,0.115,2.498,0.13,3.722 c0.112,9.116-1.181,17.433-3.616,25.556c-0.716,2.389-1.531,4.761-2.439,7.132c-0.332,0.865-0.676,1.731-1.032,2.597 c-0.021,0.051-0.04,0.101-0.061,0.152c-3.787,9.175-8.929,18.423-15.051,28.621c-0.402,0.669-0.802,1.337-1.212,2.015 c-0.604-0.745-1.216-1.484-1.834-2.219c-1.037-1.234-2.094-2.452-3.162-3.664c-0.021-0.024-0.043-0.048-0.064-0.073 c-0.53-0.6-1.062-1.199-1.597-1.795c-4.981-5.546-10.179-10.935-15.118-16.516c-3.513-3.97-6.895-8.037-9.964-12.333 c-0.85-1.194-1.643-2.341-2.379-3.465c-3.488-5.324-5.612-10.066-5.571-16.135c0-0.101,0.009-0.206,0.012-0.308 c0.055-2.186,0.556-4.528,1.172-6.918c0.372-1.443,0.78-2.901,1.157-4.353c0.556-2.144,1.038-4.271,1.199-6.301 c0.164-2.066,0.292-4.255,0.38-6.535c0.304-7.81,0.137-16.738-0.674-25.853c-0.385-4.335-0.924-8.708-1.62-13.026 c-0.091-0.563-0.178-1.128-0.275-1.689c-0.034-0.201-0.066-0.402-0.102-0.603c-0.668-3.801-1.466-7.542-2.411-11.153 c-1.242-4.735-2.74-9.237-4.511-13.368c-1.195-2.787-2.511-5.409-3.969-7.802c-0.06-0.12-0.14-0.23-0.22-0.35 c-0.2-0.33-0.43-0.7-0.69-1.1c-0.01-0.02-0.03-0.04-0.04-0.06c-0.09,0.03-0.17,0.06-0.25,0.09 c-7.581,2.535-9.33,9.371-8.819,16.81c0.004,0.057,0.005,0.112,0.009,0.169c0.09,1.228,0.245,2.471,0.44,3.713 c0.412,2.622,1.019,5.238,1.68,7.697c0.052,0.193,0.105,0.383,0.157,0.574c0.846,3.082,1.747,5.884,2.408,8.099 c0.042,0.139,0.086,0.284,0.125,0.418c0.232,0.786,0.457,1.585,0.677,2.391c0.852,3.116,1.608,6.37,2.222,9.688 c0.136,0.734,0.264,1.47,0.385,2.209c0.523,3.19,0.908,6.42,1.104,9.622c0.226,3.713,0.203,7.389-0.138,10.921 c-0.538,5.583-2.866,11.165-5.57,16.711c-0.757,1.552-1.542,3.1-2.327,4.646c-3.916,7.711-7.797,15.333-7.802,22.773 c-0.005,5.173,2.957,8.849,7.215,11.838c4.204,2.951,9.673,5.233,14.805,7.622c3.45,1.6,6.74,3.25,9.39,5.18 c5.317,3.869,10.445,8.16,15.384,12.774c0.151,0.141,0.302,0.281,0.452,0.422c4.678,4.401,9.184,9.095,13.477,14.065 c6.228,7.209,12.022,14.972,17.335,23.128c4.535,6.962,8.717,14.208,12.499,21.66c0.995,1.961,1.969,3.934,2.909,5.921 c1.497,3.165,2.909,6.366,4.26,9.586c1.152,2.746,2.254,5.506,3.297,8.283c0.995,2.65,1.932,5.312,2.824,7.982 c2.653,7.942,4.847,15.953,6.532,23.947c0.135,0.638,0.272,1.276,0.4,1.914c0.794,3.956,1.459,7.904,2,11.834 c0.994,7.23,1.564,14.397,1.651,21.426c0.031,2.511-0.014,5.011-0.12,7.501c-0.276,6.52-1.014,12.958-2.184,19.286 c-0.45,2.436-0.963,4.855-1.538,7.256c-0.809,3.374-1.741,6.712-2.788,10.01c-0.738,2.326-1.528,4.633-2.38,6.917 c-2.249,6.027-4.891,11.9-7.884,17.592c-2.219,4.22-4.633,8.339-7.228,12.345c-0.773,1.193-1.56,2.376-2.364,3.549 c-2.416,3.522-4.974,6.949-7.662,10.275c-0.501,0.62-1.007,1.235-1.517,1.848c-5.376,6.458-11.248,12.514-17.543,18.101 c-7.079,6.283-14.689,11.972-22.723,16.97c-7.234,4.5-14.81,8.443-22.649,11.752c-1.598,0.677-4.73,1.876-7.985,3.447 c-0.562,0.271-1.127,0.552-1.689,0.845c-2.47,1.286-4.868,2.773-6.586,4.397c-2.654,2.509-3.678,5.344-0.8,8.271 c3.796,3.851,12.915,1.847,20.836-0.937c5.245-1.843,9.965-4.028,12.264-5.083c0.098-0.045,0.194-0.094,0.292-0.14 c17.073-7.894,32.5-20.089,45.248-33.78c1.768-1.899,4.068-5.382,6.563-8.949c0.49-0.7,0.987-1.402,1.489-2.097 c1.317-1.823,2.668-3.587,4.008-5.094c0.831-0.935,1.657-1.769,2.469-2.455c1.036-0.877,2.048-1.516,3.012-1.805 c0.697-0.209,1.626-0.185,2.715,0.011c6.938,1.25,20.554,9.709,24.786,12.666c0.098,0.069,0.201,0.14,0.289,0.202 c0.844,0.601,1.767,1.525,2.754,2.688c0.767,0.904,1.574,1.953,2.415,3.115c0.632,0.874,1.283,1.81,1.951,2.796 c1.039,1.534,2.117,3.183,3.226,4.894c1.388,2.143,2.823,4.379,4.286,6.601c1.874,2.846,3.794,5.665,5.719,8.226 c1.16,1.542,2.322,2.989,3.477,4.292c4.157,4.692,8.227,7.514,11.801,6.087c4.258-1.701,3.992-7.833,1.958-14.682 c-0.476-1.602-1.045-3.241-1.68-4.875c-1.041-2.676-2.246-5.326-3.465-7.75c-2.283-4.538-4.608-8.271-5.963-9.823 c-0.235-0.269-0.495-0.536-0.738-0.804c-5.851-6.463-14.056-12.754-22.881-17.432c-1.373-0.728-2.763-1.402-4.159-2.046 c-0.895-0.413-1.792-0.813-2.691-1.188c-1.064-0.444-2.129-0.858-3.194-1.245c-0.352-0.128-0.703-0.244-1.054-0.365 c-1.386-0.477-2.768-0.913-4.14-1.281c-2.208-0.591-4.392-1.045-6.523-1.319c1.616-1.812,3.128-3.759,4.561-5.801 c2.115-3.015,4.032-6.264,5.768-9.699c0.183-0.362,0.373-0.716,0.552-1.082c1.184-2.422,2.273-4.937,3.284-7.518 c4.604-11.755,7.469-24.987,8.989-38.164c0.762-6.603,1.188-13.187,1.327-19.564c0.12-5.505,0.025-10.848-0.248-15.915 c-0.197-3.644-0.481-7.151-0.853-10.457c-0.057-0.507-0.152-1.065-0.267-1.652c-0.007-0.036-0.013-0.071-0.02-0.107 c-0.856-4.282-2.938-10.361-2.451-14.578c0.059-0.515,0.145-1.011,0.289-1.463c0.266-0.845,0.849-1.774,1.65-2.753 c2.686-3.285,7.864-7.144,12.141-10.377c0.86-0.65,1.682-1.274,2.441-1.863c1.119-0.869,2.096-1.66,2.847-2.345 c0.074-0.067,0.152-0.137,0.221-0.202c2.164-2.036,4.245-4.413,6.474-6.531c1.088-1.034,2.208-2.012,3.396-2.849 c5.6-3.94,13.44-6.67,19.95-8.19c3.452-0.8,10.805-0.588,17.53-1.551c0.118-0.017,0.237-0.033,0.354-0.051 c6.749-1.013,12.78-3.258,13.466-8.978c0.02-0.18,0.04-0.37,0.05-0.56c-1.759-0.534-3.486-0.992-5.197-1.411 c-30.488-7.457-53.514,3.219-73.524,24.967c-2.018,2.194-4.008,4.492-5.969,6.904c-0.552-2.186-1.156-4.398-1.799-6.622 c-3.432-11.868-8.118-24.117-13.69-35.061c-0.499-0.979-1.006-1.947-1.518-2.904c-0.42-0.785-0.843-1.565-1.272-2.333 c-3.475-6.217-9.983-12.187-15.34-18.368c-3.476-4.01-6.469-8.109-7.83-12.422c-2.87-9.12-1.91-5.19,5.4-14.04 c2.754-3.33,4.904-6.977,6.957-10.707c1.011-1.837,2-3.692,3.023-5.543c0.762-1.385,1.603-2.766,2.463-4.155 c0.737-1.191,1.487-2.388,2.215-3.597c1.876-3.116,3.602-6.317,4.542-9.728c3.458-12.608-1.919-12.263,12.571-13.448 c0.048-0.004,0.091-0.008,0.139-0.011c5.721-0.469,10.78-0.765,15.58-0.514c1.793,0.094,3.549,0.271,5.29,0.537 c1.139,0.174,2.272,0.396,3.404,0.657c1.485,0.343,2.972,0.771,4.468,1.286c3.487,1.203,7.039,2.889,10.827,5.253 c2.53,1.577,6.924,5.031,11.422,7.268c2.605,1.295,5.241,2.174,7.573,2.048c3.38-0.183,6.109-2.5,7.15-8.774 c0.02-0.121,0.047-0.227,0.065-0.351C1378.072,461.399,1363.712,456.616,1352.313,453.797z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1215.944,1143.814c8.791-3.672,16.709-9.176,23.02-17.181c1.018-1.293,1.921-2.632,2.739-4.004 c0.941-1.576,1.762-3.198,2.461-4.863c0.27-0.642,0.52-1.291,0.756-1.945c2.242-6.215,3.004-12.941,2.854-19.807 c-0.024-1.083-0.07-2.17-0.137-3.258c-0.111-1.815-0.28-3.635-0.494-5.454c-0.669-5.682-1.786-11.349-3.042-16.799 c-0.511-2.22-1.044-4.406-1.578-6.539c-1.829-7.299-3.103-15.417-4.76-23.513c-0.488-2.385-1.015-4.766-1.594-7.126 c-1.356-5.521-3.037-10.907-5.336-15.898c-0.749-1.626-1.547-3.221-2.44-4.753c-2.69-4.61-6.07-8.75-10.45-12.16 c-0.294,0.465-0.587,0.929-0.88,1.393c-1.043,1.652-2.084,3.302-3.13,4.957c-0.06-0.03-0.14,0.09-0.25,0.4 c0,0.26,0.01,0.51,0.01,0.77c0,0.15,0,0.29,0.01,0.43c0,0.02,0,0.05,0,0.07c0.01,0.34,0.02,0.62,0.04,0.85 c0,0.14,0.01,0.26,0.02,0.37c0.611,11.858,4.867,23.951,9.15,36.098c0.021,0.061,0.043,0.121,0.064,0.182 c1.78,5.049,3.555,10.106,5.078,15.16c0.342,1.135,0.672,2.27,0.985,3.405c1.618,5.863,2.813,11.717,3.17,17.541 c0.143,2.329,0.135,4.652-0.015,6.971c-0.095,1.476-0.247,2.95-0.478,4.421c-0.268,1.708-0.623,3.413-1.094,5.112 c-0.363,1.309-0.779,2.566-1.236,3.784c-0.443,1.18-0.931,2.316-1.459,3.411c-0.021,0.042-0.041,0.085-0.062,0.127 c-4.65,9.57-12.424,15.929-21.687,19.639c-4.806,1.925-10.01,3.137-15.386,3.716c-1.641,0.177-3.298,0.295-4.965,0.356 c-1.768,0.065-3.545,0.069-5.326,0.008c-10.336-0.351-20.761-2.765-29.755-6.713c-2.528-1.11-4.946-2.338-7.214-3.679 c-7.87-4.66-5.92-7.54-14.09-3.55c-3.322,1.623-6.481,5.066-9.53,8.319c-0.557,0.594-1.11,1.181-1.66,1.75 c-1.225,1.268-2.434,2.445-3.63,3.392c-1.643,1.3-3.328,2.523-5.033,3.712c-2.603,1.816-5.271,3.509-8.002,5.081 c-3.1,1.785-6.278,3.414-9.519,4.911c-4.49,2.074-9.099,3.886-13.799,5.468c-0.698,0.235-1.393,0.479-2.096,0.704 c-4.853,1.556-9.792,2.878-14.78,4.003c-1.29,0.291-2.583,0.568-3.878,0.833c-3.281,0.672-6.578,1.268-9.882,1.792 c-1.693,0.268-3.386,0.521-5.081,0.755c-11.963,1.647-23.187,2.102-34.122,1.374c-3.184-0.212-6.342-0.543-9.488-0.955 c-3.841-0.503-7.665-1.148-11.487-1.949c-9.177-1.925-18.356-4.698-27.816-8.333c-1.831-0.704-3.673-1.439-5.527-2.206 c-4.159-1.719-8.085-3.613-11.864-5.689c-1.27-0.698-2.522-1.421-3.759-2.164c-4.522-2.717-8.846-5.74-13.07-9.138 c-1.084-0.872-2.164-1.757-3.237-2.679c-5.15-4.43-16.81-20.36-24.42-17.42c-13.813,5.349-0.715,17.741,15.169,28.633 c2.158,1.48,4.366,2.933,6.567,4.336c1.601,1.021,3.196,2.014,4.764,2.975c1.447,0.886,2.869,1.743,4.25,2.564 c2.41,1.434,4.689,2.757,6.744,3.939c5.569,3.202,9.486,5.357,9.806,5.774c2.802,3.664,3.93,19.792,3.14,28.503 c-0.118,1.298-0.277,2.435-0.48,3.337c-3.07,13.62-14.76,17.3-25.67,24.11c-0.066,0.041-0.138,0.084-0.205,0.125 c-0.386,0.238-0.792,0.48-1.22,0.73c-7.914,4.615-22.13,11.244-11.204,18.475c4.139,2.742,11.962,2.69,19.781,1.22 c4.869-0.915,9.731-2.379,13.707-4.066c3.031-1.286,5.549-2.698,7.151-4.094c2.463-2.147,4.492-4.471,6.174-6.927 c2.802-4.09,4.621-8.556,5.726-13.248c0.486-2.064,0.832-4.173,1.071-6.309c0.461-4.116,0.514-8.339,0.33-12.576 c-0.095-2.179-0.248-4.361-0.442-6.533c-0.412-4.607-0.992-9.168-1.51-13.557c4.039,1.109,8.158,2.105,12.331,3.006 c3.483,0.752,7.006,1.431,10.565,2.032c3.772,0.637,7.578,1.196,11.417,1.657c3.492,0.419,7.009,0.761,10.542,1.03 c9.93,0.756,19.996,0.91,30.044,0.412c1.895-0.094,3.789-0.206,5.681-0.347c1.491-0.109,2.98-0.246,4.469-0.385 c1.108-0.103,2.214-0.219,3.32-0.339c0.856-0.093,1.712-0.185,2.567-0.287c10.783-1.294,21.443-3.388,31.796-6.326 c0.181-0.051,0.361-0.103,0.542-0.154c0.983-0.282,1.967-0.559,2.943-0.856c2.498-0.761,4.971-1.586,7.427-2.449 c1.649-0.58,3.288-1.182,4.916-1.808c2.891-1.112,5.755-2.282,8.572-3.544c6.827-3.059,13.423-6.561,19.718-10.532 c2.51-2.15,5.07-4.26,7.65-6.31c2.61-3.48,5.19-2.76,7.77,2.15c2.14,0.49,5.52,2.77,7.6,3.72 c10.196,4.706,20.431,5.163,31.44,4.836c0.08-0.002,0.16-0.004,0.241-0.006c9.384-0.287,18.742-1.55,27.441-4.357 c1.344-0.433,2.67-0.906,3.98-1.416C1214.907,1144.238,1215.427,1144.03,1215.944,1143.814z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M868.449,676.065c-1.423,1.584-2.678,3.14-3.676,4.618c-3.71,5.5-3.92,9.94,3.61,10.89 c1.373,0.174,2.89-0.173,4.485-0.876c2.31-1.017,4.786-2.785,7.244-4.834c0.109-0.091,0.218-0.183,0.327-0.275 c5.077-4.285,10.033-9.663,13.203-11.925c0.98-0.699,1.978-1.4,2.987-2.098c0.683-0.473,1.371-0.945,2.067-1.413 c1.352-0.909,2.729-1.804,4.127-2.676c2.006-1.251,4.057-2.447,6.149-3.555c4.654-2.464,9.505-4.481,14.511-5.609 c1.656-0.375,4.741-0.378,8.695-0.164c7.125,0.385,17.078,1.479,26.637,2.397c3.503,0.336,6.95,0.649,10.187,0.894 c1.156,0.088,2.283,0.166,3.377,0.235c8.735,0.546,15.284,0.42,15.955-1.391c-2.907-6.369-6.814-7.509-11.122-8.077 c-0.781-0.103-1.575-0.189-2.379-0.282c-2.832-0.327-5.783-0.764-8.698-2.522c-7.6-4.58-3.96-2.24-6.72-11.53 c-1.23-4.13-2.14-8.44-3.4-12.59c-3.926-12.986-5.594-23.912-4.768-35.649c0.418-5.933,1.462-12.069,3.198-18.792 c0.6-2.315,1.252-4.648,1.982-6.967c1.152-3.659,2.504-7.279,4.155-10.739c1.422-2.979,3.063-5.84,5.003-8.494 c8.4-11.49,14.85-6.71,27.83-7.86c6.871-0.602,13.311-2.673,17.4-6.734c4.262-4.232,5.971-10.626,2.93-19.796 c-2.363,0.145-4.589,0.484-6.751,0.891c-7.216,1.358-13.674,3.506-21.769,2.029c-8.646-1.577-16.968-6.48-24.385-11.323 c-0.199-0.13-0.4-0.26-0.599-0.391c-0.564-0.37-1.124-0.74-1.676-1.107c-0.227-0.151-0.46-0.313-0.691-0.472 c-9.401-6.484-21.981-19.868-34.594-22.727c-1.965-0.445-3.931-0.642-5.885-0.51c0.02,0,0.04,0,0.06-0.01 c-0.07,0-0.19,0.02-0.38,0.04c-0.11,0.01-0.22,0.02-0.33,0.03c-0.11,0.01-0.21,0.03-0.31,0.04c-0.96,0.12-1.52,0.19-1.78,0.23 c0.18-0.02,0.48-0.05,0.82-0.09c-8.334,1.345-7.406,4.627-3.467,8.111c4.937,4.366,14.604,9.049,16.707,10.629 c5.97,4.5,10.76,12.2,15.86,18c1.291,1.471,4.805,4.738,7.868,8.023c2.703,2.9,5.053,5.815,5.213,7.527 c0.434,4.659-9.333,16.023-13.742,22.592c-0.768,1.144-1.377,2.146-1.738,2.938c-0.503,1.106-0.977,2.22-1.436,3.337 c-1.693,4.12-3.086,8.312-4.194,12.545c-2.34,8.943-3.39,18.072-3.205,27.117c0.112,5.458,0.67,10.883,1.667,16.218 c0.377,2.019,0.818,4.025,1.32,6.015c0.473,1.877,1,3.739,1.583,5.584c0.477,1.513,0.985,3.015,1.535,4.503 c2.062,5.575,4.629,10.966,7.691,16.091c-4.685,0.176-9.205,0.226-13.622,0.341c-4.121,0.108-8.152,0.276-12.144,0.657 c-8.097,0.772-16.033,2.433-24.226,6.286c-0.264,0.124-0.528,0.246-0.793,0.375c-0.607,0.295-1.215,0.6-1.825,0.92 c-1.165,0.613-3.289,1.994-5.904,3.872c-2.247,1.613-4.857,3.596-7.549,5.784c-0.599,0.487-1.2,0.981-1.803,1.486 c-2.047,1.715-4.1,3.524-6.038,5.359C871.515,672.816,869.894,674.455,868.449,676.065z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M942.742,1071.036c1.128-0.518,2.186-1.005,3.141-1.442c6.923-3.166,11.052-5.86,16.769-6.366 c1.922-0.17,4.023-0.094,6.471,0.296c3.835,0.609,7.176,2.488,10.611,4.095c0.793,0.371,1.589,0.732,2.399,1.055 c1.87,0.75,3.37,2.34,5.34,2.99c0.995,0.329,2.005,0.606,3.021,0.858c2.507,0.622,5.071,1.032,7.671,1.277 c0.97,0.091,1.945,0.157,2.923,0.208c0.846,0.044,1.693,0.076,2.542,0.095c3.288,0.073,6.595-0.022,9.867-0.169 c0.078-0.003,0.155-0.007,0.233-0.011c2.648-0.121,5.272-0.269,7.843-0.379c0.121-0.005,0.24-0.01,0.361-0.016 c2.729-0.117,5.422-0.23,8.081-0.351c18.112-0.825,34.672-2.049,50.655-7.763c7.151-2.556,14.186-6.01,21.194-10.731 c0.002-0.001,0.004-0.002,0.005-0.004c9.979-6.72,21.37-12.724,25.94-22.507c2.344-5.019,2.898-11.031,0.535-18.649 c-9.99,1.24-15.9,11.65-22.48,18.04c-2.214,2.15-4.43,4.07-6.689,5.803c-3.853,2.957-7.837,5.364-12.15,7.423 c-0.504,0.241-1.014,0.476-1.528,0.708c-1.159,0.522-2.342,1.024-3.555,1.505c-1.28,0.507-2.59,0.995-3.938,1.463 c-0.63,0.219-1.264,0.436-1.91,0.647c-1.468,0.482-2.984,0.971-4.534,1.461c-4.118,1.302-8.5,2.609-13.033,3.805 c-15.676,4.135-33.12,6.928-47.382,3.473c6.572-7.353,10.082-14.853,11.792-22.972c0.214-1.019,0.401-2.047,0.561-3.087 c1.116-7.237,0.979-14.993,0.428-23.581c-0.5-7.94-1.34-14.01-5.3-20.93c-2.87-5.03-25.39-19.22-21.36-3.96 c-0.67-2.55,0.17,1.32,0.27,1.49c0-0.06-0.04-0.31-0.14-0.85c2.85,13.7,9.93,23.06,7.22,37.62c-1.21,6.5-3.6,15.15-8.24,20.15 c-7.16,7.69-10.23,5.25-19.74,4.1c-10.755-1.305-21.32-3.114-30.953,1.475c-1.661,0.791-3.296,1.768-4.898,2.975 c-2.892,2.18-4.909,4.362-6.824,6.426c-1.911,2.059-3.725,4-6.201,5.706c-1.702,1.173-3.714,2.236-6.294,3.148 c-4.22,1.49-55.29,11.11-28.33,18.54c12.303,3.387,34.682-6.255,48.021-12.341C941.7,1071.513,942.228,1071.271,942.742,1071.036 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M911.103,830.563c3.663,1.113,7.824,3.943,12.103,7.023c0.599,0.431,1.2,0.867,1.802,1.304 c2.223,1.612,4.463,3.235,6.668,4.67c4.316,2.809,8.497,4.892,12.147,4.733c1.398-0.063,2.724-0.446,3.986-1.062 c0.56-0.274,1.108-0.594,1.642-0.955c0.213-0.144,0.424-0.293,0.633-0.449c0.833-0.622,1.636-1.336,2.407-2.119 c1.759-1.785,3.361-3.915,4.822-6.07c1.246-1.838,2.392-3.693,3.444-5.363c0.186-0.295,0.369-0.583,0.549-0.866 c0.32-0.501,0.631-0.979,0.933-1.43c0.064-0.096,0.129-0.194,0.193-0.287c0.015-0.022,0.031-0.043,0.046-0.066 c2.922-4.288,5.903-7.994,8.979-11.141c14.693-15.034,31.562-17.042,54.645-5.823c1.036,0.504,2.061,1.048,3.08,1.61 c8.991,4.965,17.26,12.162,24.322,20.625c6.625,7.94,12.181,16.985,16.273,26.336c3.23,7.381,5.555,14.948,6.756,22.308 c1.001,6.115,1.168,13.026,0.732,20.135c-0.141,2.296-0.345,4.608-0.608,6.926c-0.995,8.766-2.807,17.536-5.085,25.259 c-0.067,0.228-0.136,0.45-0.204,0.676c-0.522,1.736-1.06,3.433-1.624,5.044c-0.371,1.062-1.511,3.045-2.986,5.5 c-3.944,6.568-10.303,16.542-10.96,21.548c-0.122,0.933-0.052,1.699,0.275,2.232c2.031,3.311,5.656,3.882,9.493,3.068 c0.274-0.058,0.549-0.124,0.825-0.196c1.278-0.333,2.567-0.804,3.819-1.372c0.936-0.424,1.85-0.898,2.723-1.406 c0.005-0.003,0.01-0.005,0.014-0.008c3.049-1.777,5.582-3.938,6.706-5.616c1.016-1.513,1.718-3.212,2.246-5 c1.151-3.897,1.475-8.217,2.414-11.96c0.696-2.773,1.446-5.423,2.158-8.08c0.168-0.626,0.332-1.255,0.494-1.884 c0.673-2.61,1.288-5.256,1.748-8.066c0.107-0.657,0.176-1.422,0.22-2.267c0.255-4.883-0.372-12.52,0.007-18.46 c0.017-0.26,0.035-0.518,0.055-0.771c0.251-3.082,0.81-5.627,1.968-6.952c0.437-0.499,1.059-0.969,1.814-1.414 c4.953-2.922,16.166-4.699,26.11-5.535c0.307-0.026,0.612-0.051,0.916-0.075c6.3-0.498,11.983-0.616,15.07-0.406 c16.38,1.1,35.62,7.83,49.65,16.1c2.399,1.413,4.85,3.458,7.346,5.544c6.692,5.59,13.718,11.474,20.994,6.266 c1.862-1.33,3.383-3.437,4.693-5.91c2.134-4.031,3.69-9.056,5.14-13.458c0.298-0.903,0.592-1.769,0.885-2.605 c0.5-1.425,1.001-2.743,1.522-3.857c3.137-6.706,6.749-12.754,11.343-17.903c0.241-0.27,0.48-0.542,0.726-0.807 c3.592-3.863,7.787-7.183,12.807-9.854c0.564-0.3,1.127-0.602,1.713-0.886c6.627-3.214,13.603-4.525,20.62-5.576 c0.242-0.036,0.483-0.072,0.725-0.107c0.957-0.141,1.915-0.279,2.872-0.417c2.673-0.384,5.344-0.774,7.997-1.255 c0.088-0.016,0.176-0.032,0.264-0.048c0.69-0.127,1.379-0.258,2.065-0.4c0.043-0.009,0.086-0.019,0.129-0.028 c4.382-0.908,8.698-2.153,12.868-4.146c0.047-0.022,0.094-0.042,0.141-0.065c-0.188-0.264-0.4-0.507-0.61-0.752 c-4.089-4.785-12.135-6.017-20.776-5.615c-1.108,0.052-2.224,0.128-3.345,0.229c-0.768,0.069-1.537,0.149-2.305,0.238 c-0.187,0.022-0.374,0.042-0.561,0.064c-0.97,0.119-1.936,0.253-2.896,0.398c-0.231,0.035-0.463,0.07-0.694,0.106 c-1.595,0.251-3.164,0.532-4.691,0.833c-5.73,1.129-10.829,2.521-14.143,3.528c-0.113,0.034-0.222,0.073-0.334,0.107 c-1.65,0.509-3.263,1.074-4.843,1.687c-2.653,1.03-5.207,2.199-7.651,3.51c-5.903,3.166-11.18,7.13-15.748,11.787 c-4.212,4.295-7.815,9.182-10.752,14.572c-1.822,3.343-3.384,6.88-4.674,10.592c-0.869,2.502-1.622,5.079-2.238,7.734 c-23.357-9.941-50.008-21.923-76.021-22.402c-0.259-0.005-0.519-0.016-0.778-0.018c-11.347-0.101-21.306,3.572-32.011,6.274 c-0.65,0.164-1.303,0.323-1.959,0.479c-0.347,0.082-0.691,0.168-1.04,0.247c-0.026-1.063-0.092-2.12-0.156-3.177 c-0.328-5.409-1.149-10.743-2.41-15.959c-0.074-0.306-0.144-0.614-0.221-0.92c-0.58-2.295-1.25-4.564-1.998-6.807 c-0.333-0.998-0.672-1.993-1.037-2.979c-0.629-1.7-1.315-3.379-2.037-5.042c-5.732-13.203-14.331-25.173-24.946-34.994 c-3.677-3.402-7.587-6.552-11.711-9.399c-0.604-0.417-1.218-0.82-1.831-1.224c-11.096-7.318-23.587-12.522-36.824-14.859 c2.639-9.239,3.147-17.907,3.252-26.94c0.012-1.012,0.018-2.03,0.022-3.052c0.017-4.343-0.012-8.791,0.096-13.448 c13.596,2.274,28.535,2.068,42.653-1.13c4.966-1.125,9.832-2.612,14.499-4.503c0.777-0.315,1.546-0.646,2.312-0.983 c3.67-1.614,7.199-3.488,10.551-5.621c8.434-5.368,15.72-12.404,21.075-21.323c14.45-24.08,9.81-55.48-12.91-72.04 c3.486-3.446,7.146-7.838,10.613-12.823c2.435-3.501,4.77-7.295,6.881-11.273c1.792-3.377,3.418-6.881,4.804-10.448 c0.141-0.362,0.277-0.725,0.412-1.088c2.092-5.604,3.571-11.333,4.127-16.922c0.912-9.158-0.637-17.93-6.008-25.116 c3.253-0.135,8.107-0.32,13.948-0.665c3.986-0.235,8.432-0.546,13.154-0.965c4.126-0.367,8.457-0.816,12.873-1.373 c0.609-0.077,1.221-0.158,1.832-0.239c5.787-0.766,11.68-1.722,17.404-2.916c7.896-1.646,15.468-3.745,21.973-6.44 c2.647-1.096,5.112-2.293,7.356-3.595c3.603-2.09,6.63-4.453,8.862-7.133c2.448-2.939,3.934-6.261,4.214-10.006 c0.18-2.404-0.136-4.983-1.033-7.753c-1.053-3.252-2.905-6.768-5.657-10.564c-0.441-0.608-0.889-1.219-1.377-1.842 c-0.597,0.434-1.177,0.87-1.749,1.306c-2.19,1.672-4.201,3.359-6.102,5.04c-1.818,1.608-3.538,3.21-5.221,4.791 c-2.628,2.467-5.172,4.877-7.869,7.166c-4.528,3.842-9.495,7.338-16.043,10.169c-1.747,0.755-3.603,1.464-5.596,2.119 c-3.685,1.21-7.216,2.182-10.629,2.938c-1.531,0.339-3.037,0.63-4.52,0.878c-1.371,0.229-2.727,0.429-4.061,0.581 c-5.061,0.576-9.865,0.59-14.508,0.057c-3.686-0.423-7.269-1.198-10.796-2.314c-6.416-2.029-12.649-5.189-18.976-9.483 c-4.386-2.977-8.82-6.498-13.392-10.549c-0.137-0.121-0.272-0.236-0.409-0.358c-0.189-0.168-0.368-0.345-0.555-0.515 c-1.922-1.74-3.761-3.545-5.527-5.408c-3.107-3.278-5.993-6.731-8.703-10.324c-8.286-10.985-14.971-23.241-21.573-35.571 c-3.508-6.552-6.999-13.121-10.693-19.531c-1.567-2.719-3.169-5.41-4.828-8.057c-4.625-7.38-9.674-14.43-15.531-20.845 c-1.3-1.43-2.64-2.8-4.01-4.13c-11.735-11.391-25.654-18.993-40.767-23.412c-0.139-0.041-0.279-0.08-0.419-0.121 c-2.527-0.728-5.086-1.367-7.674-1.921c-8.811-1.883-17.949-2.777-27.24-2.777c17.8-1.85,3.99-22.32-2.21-31.41 c-0.883-1.3-7.233-8.204-13.28-12.815c-6.001-4.577-11.705-6.896-11.47,0.765c0,0.02,0,0.03,0,0.05c0,0.16,0.01,0.33,0.02,0.51 c0.075,0.33,0.143,0.621,0.207,0.896c0.635,2.719,0.743,2.803,0.643,1.994c2.46,6.88,7.58,12.3,10.3,19.09 c2.65,6.6,2.71,14.25,5.9,20.59c-8.09-0.34-32.95-4.77-39.37,3.81c-9.74,13.03,18.22,7.9,23.85,7.6 c9.19-0.476,19.38-0.371,29.663,0.667c7.771,0.785,15.591,2.109,23.076,4.117c0.689,0.185,1.375,0.374,2.057,0.571 c10.326,2.973,19.928,7.302,27.744,13.415c4.984,3.897,9.508,8.272,13.672,12.992c3.745,4.246,7.198,8.771,10.423,13.486 c0.439,0.642,0.873,1.288,1.304,1.937c1.745,2.626,3.421,5.307,5.045,8.023c0.177,0.296,0.353,0.592,0.529,0.889 c6.77,11.445,12.598,23.516,18.317,35.053c0.42,0.83,0.83,1.66,1.24,2.48c6.108,12.26,13.742,21.433,22.115,30.382 c5.143,5.497,10.564,10.909,16.085,16.898c3.72,4.038,6.51,8.248,8.617,12.629c4.787,9.95,6.041,20.784,6.583,32.512 c0.078,1.689,0.06,3.373-0.044,5.049c-0.108,1.75-0.313,3.491-0.601,5.22c-0.466,2.798-1.165,5.561-2.038,8.278 c-0.546,1.697-1.162,3.375-1.841,5.03c-0.487,1.187-0.996,2.365-1.543,3.527c-1.832,3.89-3.98,7.633-6.313,11.176 c-6.372,9.674-12.501,14.988-10.145,24.253c0.513,2.018,1.421,4.219,2.825,6.697c8.95,15.84,17.53,24.94,8.83,44.54 c-3.594,8.107-8.299,14.074-15.192,18.86c-1.278,0.887-2.622,1.739-4.058,2.55c-4.721,2.668-9.893,4.893-15.241,6.658 c-7.181,2.37-14.683,3.91-21.859,4.552c-3.44,0.304-9.14,1.199-13.805,1.015c-1.925-0.076-3.678-0.331-5.016-0.895 c-2.14-0.898-3.796-2.42-5.226-4.254c-2.553-3.273-4.382-7.55-6.914-11.126c-5.489-7.731-13.168-15.373-22.381-18.616 c-0.237-0.083-0.47-0.177-0.709-0.254c-2.858-0.929-6.502-3.024-9.773-2.448c-0.883,0.156-1.741,0.495-2.547,1.118 c-3.276,2.539-2.824,5.53-0.891,8.454c2.421,3.663,7.167,7.221,9.841,9.656c1.471,1.341,2.878,2.65,4.233,3.95 c4.118,3.953,7.698,7.818,10.668,12.195c1.24,1.827,2.369,3.75,3.395,5.8c0.321,0.642,0.629,1.302,0.928,1.971 c0.608,1.36,1.17,2.785,1.688,4.275c0.424,1.219,0.827,2.469,1.189,3.788c0.415,1.51,0.725,3.012,0.973,4.509 c0.498,3.016,0.694,6.009,0.719,8.995c0.073,8.822-1.312,17.593-0.622,26.746c-24.75-0.681-41.046,7.758-51.524,29.5 c-0.91,1.889-1.782,3.867-2.606,5.96c-5.837-2.074-12.432-4.222-19.396-6.075c-10.427-2.774-21.684-4.881-32.487-5.064 c-21.821-0.371-41.781,7.102-49.257,32.769c-2.21,7.57-2.37,12.21-1.23,14.7c3.18,6.93,16.51-2.85,24.02-12.51 c9.185-11.806,18.192-20.914,31.599-21.968c0.151-0.012,0.299-0.029,0.452-0.039 C900.365,828.204,905.396,828.825,911.103,830.563z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M855.558,1317.4c-0.89-0.019-1.79-0.042-2.707-0.073c-1.986,3.212-3.98,6.203-5.972,8.988 c0.333,0.332,0.667,0.664,1.001,0.997C850.781,1323.828,853.33,1320.521,855.558,1317.4z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1123.015,933.788c-0.751-3.185-1.412-6.361-1.962-9.497c-0.853,0.323-1.791,0.632-2.812,0.925 c1.632,2.861,3.211,5.718,4.735,8.56C1122.989,933.78,1123.001,933.784,1123.015,933.788z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1443.216,671.829c-0.066-0.187-0.134-0.374-0.203-0.561c-1.141-1.242-2.253-2.479-3.333-3.706 c-11.647,10.296-14.517,7.016-6.309-7.487c-4.19-5.21-7.581-9.96-9.85-13.731c-0.451-0.219-0.899-0.442-1.344-0.668 c-4.443,50.914,13.036,50.323,21.839,36.516c-1.515,0.683-3.046,1.37-4.592,2.06 C1440.703,679.899,1441.967,675.762,1443.216,671.829z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M936.302,1423.012c-3.597-3.633-7.363-7.786-11.398-12.235c-5.829,0.842-11.424,1.469-16.839,1.892 c9.477,5.028,18.165,9.443,26.109,13.294C934.87,1425.044,935.579,1424.062,936.302,1423.012z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1124.068,796.302c-0.202-0.822-0.403-1.633-0.605-2.471c-0.95-1.136-1.866-2.252-2.768-3.358 c-0.021,0.773-0.044,1.559-0.067,2.342C1121.888,793.953,1123.032,795.118,1124.068,796.302z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1426.206,1152c-1.973,1.485-3.948,3.104-5.918,4.864c0.438,1.249,0.837,2.772,1.18,4.608 c1.26,0.27,2.512,0.542,3.75,0.816c1.629-1.984,3.125-4.078,4.466-6.271c-0.437-1.396-0.919-2.765-1.445-4.109 C1427.557,1151.947,1426.88,1151.978,1426.206,1152z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M890.51,123.497c-5.901,2.598-11.64,4.392-17.195,5.514c-0.983,1.736-2.1,3.505-3.36,5.306 c3.11,1.854,6.113,3.742,8.994,5.679c1.003,0,2.002,0,2.995-0.002c2.949-2.602,6.19-5.401,9.193-7.602 c0.446-1.136,0.91-1.469,1.344-0.957c1.291-0.885,2.516-1.623,3.633-2.154C894.308,127.551,892.451,125.624,890.51,123.497z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1324.493,975.003c4.989,0.125,8.353,1.872,10.387,5.108c0.255-0.186,0.51-0.37,0.764-0.562 c-2.744-2.878-5.223-5.53-7.332-7.874C1327.043,972.795,1325.769,973.905,1324.493,975.003z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1124.53,798.189c-1.381,0.216-2.75,0.428-4.098,0.632c-0.139,3.892-0.307,7.906-0.506,12.048 c0.972,1.003,1.831,2.024,2.596,3.064c1.839-0.826,3.658-1.642,5.459-2.449C1126.847,807.306,1125.696,802.886,1124.53,798.189z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M897.065,152.872c0.61-1.103,1.221-2.185,1.833-3.244c-0.355-0.109-0.703-0.215-1.06-0.325 c-0.564,0.57-1.123,1.089-1.665,1.531c-0.571,0.465-1.157,0.917-1.752,1.358c0.241,0.228,0.487,0.452,0.725,0.682 C895.789,152.871,896.429,152.87,897.065,152.872z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M899.959,1385.231c-0.423,0.024-0.844,0.06-1.262,0.107c-0.843,0.352-1.695,0.708-2.555,1.069 c0.999,4.026,1.985,7.836,2.964,11.42c1.564-0.126,3.13-0.279,4.697-0.451c2.509-0.44,5.003-0.851,7.479-1.23 C907.737,1392.513,903.977,1388.844,899.959,1385.231z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1297.586,838.41c1.115,5.036,2.459,10.068,4.089,14.999c1.436-4.215,2.66-8.846,3.613-13.694 c-2.793-0.126-5.285-0.544-7.387-1.334C1297.796,838.39,1297.691,838.4,1297.586,838.41z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1329.802,970.357c2.989,2.388,5.846,4.708,8.591,6.969c4.919-4.188,9.083-8.959,12.877-14.029 c-2.372-1.835-4.821-3.823-7.347-5.969C1339.291,961.743,1334.572,966.116,1329.802,970.357z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M804.825,1132.965c0.603,0.153,1.207,0.306,1.816,0.457c-0.002-0.348-0.004-0.697,0-1.049 C806.053,1132.55,805.448,1132.746,804.825,1132.965z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M813.909,1320.07c1.989,0.893,3.915,1.8,5.781,2.72c1.281-2.343,2.816-4.601,4.613-6.752 c-0.023-0.194-0.045-0.388-0.064-0.583c-0.105-0.23-0.208-0.462-0.311-0.694c-2.087-0.278-4.215-0.576-6.401-0.902 C816.438,1315.693,815.233,1317.76,813.909,1320.07z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1220.144,136.95c-2.053-1.52-4.051-2.965-5.995-4.34c0.665,1.819,1.33,3.644,1.995,5.472 c1.05,0.061,2.126,0.137,3.227,0.228C1219.631,137.852,1219.887,137.403,1220.144,136.95z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1213.929,132.01c1.197-0.468,2.406-0.975,3.629-1.523c-1.031-0.997-2.068-2.056-3.115-3.193 c-0.677,0.201-1.353,0.401-2.032,0.6C1212.919,129.26,1213.424,130.633,1213.929,132.01z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1448.161,883.024c1.36-0.352,2.763-0.683,4.213-0.991c-0.374-0.698-0.741-1.41-1.108-2.123 c-1.194,0.687-2.328,1.214-3.404,1.599C1447.962,882.012,1448.061,882.517,1448.161,883.024z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M902.253,1336.056c6.767-6.755,5.037-10.216,2.117-12.68c-0.726,0.292-1.442,0.568-2.152,0.832 C903.33,1328.475,903.378,1332.456,902.253,1336.056z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1179.51,693.472c2.183-1.826,6.699-2.192,12.118-0.896c0.596-0.409,1.196-0.813,1.798-1.21 c-1.335-2.723-2.85-6.335-4.462-10.956c-4.652,0.745-9.595,1.261-14.741,1.685c-2.804,4.086-5.764,8.059-8.813,11.917 C1169.884,693.522,1174.582,693.324,1179.51,693.472z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M866.28,1414.204c-0.229,0.482-0.462,0.958-0.7,1.426c5.541,2.611,11.317,5.297,17.332,8.056 c4.442-2.458,8.945-4.969,13.51-7.534c-3.984,3.302-7.811,6.1-11.491,8.46c2.235,1.022,4.498,2.053,6.799,3.096 c-2.875-0.642-5.758-1.289-8.645-1.941c-2.46,1.498-4.852,2.8-7.178,3.913c2.035,3.111,4.219,6.925,6.563,11.519 c4.775,0.333,9.168,1.382,13.179,2.992c0.408-0.001,0.826-0.005,1.223-0.004c3.411-2.254,7.325-4.611,11.794-7.081 c2.298,1.75,4.33,3.147,6.049,4.263c9.421-3.863,17.687-8.338,24.312-13.079c-1.586-0.751-3.203-1.527-4.852-2.326 c-13.475,17.778-22.169,11.171-30.476-12.994c-11.975,0.7-23.119,0.364-34.061-0.917 C873.079,1414.516,871.44,1415.219,866.28,1414.204z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M885.353,1338.949c0.63,2.881,1.248,5.71,1.857,8.486c6.088-3.897,10.46-7.164,13.51-9.924 c-4.072-0.618-8.031-1.22-11.872-1.804C887.71,1336.784,886.545,1337.864,885.353,1338.949z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M873.075,1397.961c2.876,0.198,5.827,0.33,8.834,0.386c-1.209-0.681-2.424-1.366-3.654-2.063 C876.521,1396.971,874.793,1397.527,873.075,1397.961z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M861.821,179.898c-0.137-0.479-0.286-0.975-0.434-1.469c-0.702-1.408-1.481-2.757-2.332-4.043 c-1.781,1.5-3.491,3.028-5.132,4.587C856.24,178.964,858.93,179.282,861.821,179.898z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1293.701,813.669c0.213-0.555,0.438-1.122,0.674-1.699c-0.28-0.03-0.562-0.062-0.852-0.1 C1293.581,812.467,1293.64,813.066,1293.701,813.669z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1299.937,426.894c2.087,1.733,4.098,3.394,6.029,4.979c1.72,0.283,3.411,0.595,5.04,0.952 c3.233-2.917,6.425-5.615,9.576-8.109c-0.728-1.363-1.468-2.74-2.22-4.133c-6.092-1.744-12.697-4.909-19.54-8.223 C1299.622,417.021,1299.873,421.972,1299.937,426.894z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1452.235,789.899c-0.564-0.926-1.132-1.861-1.706-2.812c-3.422-0.618-6.821-1.322-10.354-2.365 c0.901,3.543,1.561,6.897,1.971,10.011c1.771,0.95,3.664,1.909,5.693,2.878C1449.11,795.047,1450.575,792.461,1452.235,789.899z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1374.855,826.488c0.738-1.634,1.506-3.273,2.302-4.914c-0.031-0.232-0.061-0.463-0.091-0.693 c-2.416,2.039-4.995,4.166-7.734,6.38C1371.264,826.932,1373.111,826.669,1374.855,826.488z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1253.743,838.852c-0.484-0.194-0.965-0.395-1.443-0.605c3.349,2.668,0.899,3.89-6.797,6.078 c-2.502,3.589-5.072,7.456-7.719,11.631c2.058-0.112,4.188-0.139,6.392-0.079c1.58-0.613,3.193-1.178,4.843-1.687 c3.547-3.974,6.554-8.394,8.91-13.042C1256.557,840.479,1255.16,839.71,1253.743,838.852z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1237.429,827.451c0.243,0.287,0.49,0.568,0.74,0.846c0.005-0.184,0.007-0.365,0.011-0.548 C1237.926,827.644,1237.68,827.551,1237.429,827.451z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1230.931,821.593c0.212,1.57,0.141,2.8-0.19,3.688c2.068,0.5,4.296,1.218,6.688,2.17 c-1.306-1.541-2.494-3.217-3.549-5.03C1232.887,822.147,1231.903,821.872,1230.931,821.593z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M910.637,1024.651c-0.831-0.569-1.665-1.139-2.514-1.719c-1.735,1.06-3.437,2.183-5.093,3.37 c0.997,3.237,2.017,6.297,3.056,9.197c1.981,1.316,3.786,2.619,5.419,3.904C911.64,1033.998,911.277,1029.061,910.637,1024.651z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1006.395,1223.284c1.027-1.292,2.168-2.651,3.422-4.078c-2.579-2.467-5.127-4.91-7.615-7.307 c-0.278,3.591-0.588,7.211-0.846,10.69C1003.022,1222.816,1004.703,1223.047,1006.395,1223.284z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1351.502,492.344c0.065,0.201,0.129,0.4,0.193,0.599c0.176-0.313,0.347-0.635,0.519-0.96 C1351.975,492.105,1351.739,492.224,1351.502,492.344z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1472.244,1060.995c-2.935,1.133-5.597,1.95-7.818,2.419c-0.172,0.96-0.351,1.91-0.545,2.841 c1.427,0.719,2.836,1.43,4.209,2.125c2.082-1.56,4.112-3.195,6.069-4.925c-0.166-0.791-0.327-1.581-0.482-2.372 C1473.202,1061.049,1472.723,1061.021,1472.244,1060.995z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1430.648,884.965c0.557,0.139,1.111,0.274,1.665,0.408c-0.076-0.429-0.146-0.848-0.212-1.257 C1431.611,884.405,1431.127,884.688,1430.648,884.965z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1457.509,875.409c-0.005-0.019-0.01-0.039-0.015-0.058c-0.076,0.066-0.15,0.127-0.226,0.192 C1457.349,875.498,1457.428,875.454,1457.509,875.409z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M970.761,1339.833c-4.893-3.316-9.389-6.475-13.493-9.486c-3.036,3.821-6.325,8.448-9.894,13.975 c6.011,0.828,12.156,1.649,18.414,2.453C967.347,1344.422,969.016,1342.11,970.761,1339.833z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1237.329,846.583c-0.072,2.028-0.162,3.97-0.272,5.824c0.967-2.253,1.893-4.423,2.778-6.514 C1239.034,846.112,1238.198,846.342,1237.329,846.583z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1287.599,1169.34c0.116,0.061,0.231,0.123,0.348,0.184c1.6-1.679,3.186-3.377,4.759-5.091 c0.927-5.451,2.384-11.092,4.362-16.851c-3.534,3.831-7.253,7.761-11.19,11.803c-0.081-0.513-0.166-1.016-0.249-1.524 c-0.798,2.218-1.622,4.441-2.471,6.649C1284.624,1166.144,1286.104,1167.754,1287.599,1169.34z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1238.17,828.297c-0.018,0.71-0.04,1.431-0.064,2.154c2.035,1.021,3.851,1.936,5.482,2.771 C1241.644,831.77,1239.825,830.132,1238.17,828.297z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1440.29,844.84c0.965-2.965,2.094-6.089,3.387-9.358c-2.74-2.714-3.544-5.943-1.819-9.832 c-0.163-0.742-0.281-1.543-0.354-2.395c-1.709-1.014-3.472-2.049-5.294-3.107c1.244-0.817,2.44-1.635,3.616-2.452 c-0.587-0.959-1.153-2.02-1.699-3.179c-2.325,1.7-5.604,2.063-9.926,0.788c0.06,2.121,0.076,4.18,0.044,6.169 C1433.225,821.534,1436.784,830.363,1440.29,844.84z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1266.161,845.573c-0.836,1.696-1.725,3.359-2.665,4.982c1.527-0.301,3.096-0.582,4.691-0.833 c-0.022-0.078-0.045-0.155-0.067-0.233C1267.405,848.181,1266.756,846.876,1266.161,845.573z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1431.002,871.592c1.735-0.001,3.34-0.094,4.796-0.273c-0.32-4.012,0.108-9.07,1.384-15.07 c-3.24-2.289-7.594-4.785-13.217-7.456c-1.181,3.394-2.575,6.421-4.143,9.114c1.863,5.035,2.626,8.985,2.439,11.972 C1429.69,868.248,1430.705,867.847,1431.002,871.592z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M810.573,1325.965c-0.323,0.577-0.653,1.168-0.988,1.769c1.843,4.118,3.501,8.06,4.998,11.847 c0.025,0.019,0.051,0.039,0.076,0.058c0.336-3.75,1.122-7.448,2.408-11.017C814.806,1327.731,812.631,1326.843,810.573,1325.965z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M949.815,96.489c1.467,1.375,2.874,2.665,4.232,3.883c1.301,0.844,2.609,1.677,3.926,2.497 c7.065-0.567,14.176,0.142,21.32,1.671c-0.778-3.436-1.727-6.887-2.839-10.311c-6.68-2.364-12.65-4.857-17.975-7.417 C955.466,91.24,952.521,94.646,949.815,96.489z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M890.176,1582.17c-0.906,0.138-1.81,0.213-2.715,0.22c-1.194,1.809-2.471,3.623-3.826,5.439 c1.964,2.351,4.132,4.416,6.479,6.243C890.114,1590.422,890.134,1586.461,890.176,1582.17z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M964.394,77.024c1.679,0.172,3.413,0.389,5.194,0.649c-0.805-1.563-1.645-3.105-2.527-4.615 c-0.305,0.227-0.609,0.451-0.911,0.673C965.567,74.851,964.981,75.95,964.394,77.024z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1292.727,801.663c-0.93,0.325-1.865,0.681-2.805,1.066c0.025,3.012-0.032,5.847-0.173,8.5 c1.329,0.269,2.592,0.487,3.776,0.641C1293.19,808.363,1292.93,804.947,1292.727,801.663z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M862.77,154.676c0.085-0.009,0.17-0.018,0.255-0.027c0.53-0.389,1.056-0.782,1.588-1.169 c-0.207-0.196-0.404-0.39-0.602-0.583C863.639,153.515,863.225,154.109,862.77,154.676z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1258.28,840.439c-0.116,0.237-0.231,0.474-0.35,0.709c2.311,1.128,4.551,1.982,6.702,2.534 c-1.124-0.839-2.231-1.652-3.316-2.43C1260.301,841.01,1259.288,840.74,1258.28,840.439z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M940.514,1317.007c-2.558-2.265-4.833-4.43-6.832-6.502c-0.043,0.05-0.086,0.1-0.129,0.15 c-3.173,11.325-6.615,21.363-10.26,30.234c6.587,0.968,13.39,1.947,20.378,2.92c2.26-4.508,6.627-9.397,12.073-14.585 c-5.362-3.979-10.031-7.696-14.045-11.18C937.72,1335.293,937.116,1329.944,940.514,1317.007z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1158.552,856.077c-0.027-0.241-0.055-0.484-0.078-0.717c-0.709-0.957-1.416-1.932-2.117-2.939 c-0.348,0.156-0.707,0.326-1.071,0.505C1156.366,853.963,1157.454,855.012,1158.552,856.077z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1150.747,1122.972c8.995,3.948,19.419,6.362,29.755,6.713c-2.986-2.089-5.691-4.282-8.078-6.529 C1165.312,1122.775,1157.874,1122.794,1150.747,1122.972z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M895.728,1384.728c0.088,0.359,0.177,0.721,0.265,1.078c0.889-0.212,1.79-0.367,2.705-0.468 c0.314-0.131,0.632-0.264,0.943-0.394c-0.717-0.642-1.444-1.282-2.178-1.92C896.886,1383.609,896.308,1384.177,895.728,1384.728z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M859.47,155.056c-0.471-2.272-0.953-4.608-1.446-7.009c-1.686,1.629-3.486,3.275-5.405,4.937 c1.623,0.9,3.641,1.599,5.769,2.2C858.75,155.139,859.109,155.099,859.47,155.056z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M944.09,1439.156c1.189-2.313,2.298-4.484,3.33-6.523c-0.589-0.398-1.179-0.818-1.771-1.261 c-0.028-0.013-0.057-0.026-0.085-0.039C945.145,1433.763,944.658,1436.379,944.09,1439.156z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1114.306,1123.757c1.317,0.723,2.632,1.413,3.948,2.054c0.55-0.569,1.103-1.156,1.66-1.75 C1117.527,1124.063,1115.618,1123.977,1114.306,1123.757z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1170.036,596.243c0.18,0.669,0.361,1.328,0.545,1.974c0.883-0.338,1.752-0.66,2.61-0.969 C1172.14,596.92,1171.088,596.586,1170.036,596.243z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1004.14,1457.838c-1.484-0.149-2.942-0.291-4.365-0.426c-0.189,1.511-0.397,3.045-0.625,4.599 C1004.644,1461.422,1007.358,1460.328,1004.14,1457.838z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1310.262,732.079c-0.541-1.255-1.092-2.503-1.65-3.745c-1.736,3.435-3.653,6.685-5.768,9.699 c0.91,1.657,1.837,3.337,2.793,5.057C1307.177,739.292,1308.719,735.624,1310.262,732.079z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M930.932,1010.068c-3.679,0.613-7.401,1.216-11.156,1.807c0.35,0.387,0.685,0.77,1.027,1.155 c1.454,0.49,2.889,0.996,4.309,1.514c3.201-1.282,6.316-2.394,9.237-3.355C933.215,1010.826,932.076,1010.453,930.932,1010.068z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M964.234,191.506c-6.902,1.055-13.851,2.066-20.779,3.016c1.223,3.288,2.221,6.261,3.02,8.937 C956.092,198.379,961.683,194.46,964.234,191.506z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1234.139,655.577c2.858,2.371,5.474,4.779,7.88,7.218c4.557,0.879,9.325,2.337,14.326,4.63 c2.572-1.309,5.151-2.616,7.732-3.919c-2.331-3.045-4.485-6.141-6.497-9.254c-0.926-0.724-1.889-1.459-2.901-2.206 c0.152-0.582,0.297-1.152,0.441-1.718c-2.526-4.144-4.838-8.288-7.032-12.351c-0.64,0.381-1.399,0.675-2.266,0.898 c-3.65,2.557-7.391,5.065-11.19,7.514C1235.966,647.362,1235.85,650.587,1234.139,655.577z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M853.395,1439.681c-2.407,1.274-4.793,2.529-7.151,3.758c0.371,0.902,0.73,1.807,1.073,2.714 c0.612,0.398,1.223,0.798,1.839,1.183c1.182-0.139,2.343-0.272,3.491-0.401C852.849,1444.389,853.097,1441.963,853.395,1439.681z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1381.036,790.539c0.059-0.094,0.117-0.184,0.176-0.275c3.135-5.575,6.638-11.617,9.053-17.506 c-0.094-0.148-0.189-0.299-0.283-0.447c-0.729-0.085-1.469-0.166-2.224-0.24c-4.122,3.42-8.066,6.363-11.855,8.906 C1377.618,784.095,1379.329,787.278,1381.036,790.539z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1315.497,745.277c-0.534-1.482-1.085-2.96-1.652-4.433c-1.615,1.843-3.247,3.705-4.898,5.589 c0.351,0.121,0.702,0.238,1.054,0.365c1.833-0.284,3.686-0.587,5.554-0.905C1315.535,745.689,1315.516,745.483,1315.497,745.277z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1255.836,680.338c0.545,0.874,1.076,1.75,1.59,2.629c1.42-0.47,2.787-0.71,4.113-0.726 C1259.581,681.316,1257.68,680.689,1255.836,680.338z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1387.465,803.21c1.77-2.729,3.631-5.405,5.585-8.006c-2.593-8.683-7.468-11.704-11.838-4.94 c-0.056,0.099-0.11,0.197-0.166,0.295C1383.194,794.662,1385.334,798.878,1387.465,803.21z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1348.13,730.31c3.113,1.848,6.493,4.09,9.98,6.744c1.952-0.458,3.906-0.92,5.861-1.387 c-3.236-4.241-5.673-8.61-7.401-13.089c-1.139-1.585-2.254-3.123-3.347-4.619C1351.436,722.347,1349.742,726.458,1348.13,730.31z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M839.313,337.529c-0.014-0.334-0.026-0.672-0.039-1.009c-0.926-0.241-1.84-0.486-2.747-0.733 c-3.553,3.079-6.425,6.373-8.276,9.868c1.627,0.547,3.22,1.06,4.786,1.546C835.194,343.714,837.286,340.493,839.313,337.529z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1004.14,1457.838c1.234,0.124,2.487,0.254,3.759,0.389c-2.625-2.117-5.122-4.198-7.521-6.254 c-0.111,1.135-0.233,2.283-0.366,3.445C1001.888,1456.344,1003.246,1457.146,1004.14,1457.838z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M834.469,266.526c-9.076,6.828-8.275,5.131-0.25-0.217c-0.791-0.688-1.551-1.378-2.293-2.067 c-6.116,4.259-12.527,9.868-19.015,17.855c0.445-0.023,0.886-0.052,1.328-0.08c5.585-3.932,14.181-7.586,26.164-10.755 C838.283,269.694,836.306,268.113,834.469,266.526z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M923.828,1046.445c-1.053,0.12-2.075,0.823-3.099,2.201c0.296,0.409,0.573,0.815,0.834,1.218 C922.249,1048.734,923.007,1047.594,923.828,1046.445z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1262.126,682.239c2.195,0.084,4.286,0.798,6.345,2.089c0.69-0.453,1.376-0.902,2.056-1.346 c-5.633-2.156-11.798-4.744-18.359-8.135c0.658,0.921,1.295,1.844,1.913,2.771 C1257.015,678.739,1259.716,680.268,1262.126,682.239z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1195.764,689.861c1.697-1.063,3.415-2.075,5.145-3.038c0.907-1.555,1.798-3.058,2.674-4.514 c-1.821-1.26-3.611-2.535-5.368-3.831c-2.867,0.771-5.897,1.392-9.065,1.904C1192.077,683.971,1194.242,687.186,1195.764,689.861 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M829.238,353.51c-0.953-0.813-1.935-1.631-2.954-2.453c-0.111,0.548-0.203,1.1-0.26,1.657 c-0.187,1.83-0.045,3.762,0.3,5.76c0.013,0.008,0.027,0.016,0.041,0.023C827.334,356.782,828.292,355.122,829.238,353.51z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M902.213,235.514c0.017,0.167,0.025,0.323,0.041,0.489c0.178-0.047,0.358-0.093,0.537-0.14 C902.599,235.748,902.406,235.631,902.213,235.514z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1008.867,1416.735c0.589,0.632,1.207,1.273,1.844,1.921c1.005-2.281,1.986-4.533,2.938-6.75 c-1.1-0.523-2.174-1.039-3.222-1.548c-1.286,0.573-2.581,1.06-3.873,1.429 C1007.261,1413.527,1008.036,1415.171,1008.867,1416.735z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M842.455,1431.64c-0.078,0.657-0.154,1.324-0.23,1.996c3.659,1.074,7.599,1.675,11.842,1.62 c0.394-2.242,0.846-4.302,1.361-6.149C850.414,1433.396,845.441,1434.66,842.455,1431.64z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1082.952,751.936c-0.105,0.372-0.215,0.745-0.33,1.119c0.526-0.049,1.05-0.097,1.575-0.146 C1083.783,752.584,1083.369,752.259,1082.952,751.936z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1128.359,787.653c1.323,3.2,2.658,6.29,4.004,9.278c4.932-0.818,10.067-1.719,15.375-2.7 c-0.845-1.413-1.703-2.852-2.574-4.32c-6.305-1.458-11.931-3.479-16.347-6.744c-2.598,0.923-5.271,1.826-8.012,2.71 c-0.023,1.048-0.049,2.111-0.075,3.178c2.327,2.914,4.521,5.817,6.589,8.698c1.243-0.198,2.513-0.407,3.782-0.616 C1130.163,794.065,1129.246,790.912,1128.359,787.653z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1034.258,1577.685c-0.192,1.009-0.396,2.016-0.616,3.023c0.76-0.562,1.509-1.135,2.256-1.71 C1035.347,1578.557,1034.803,1578.121,1034.258,1577.685z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1207.31,515.25c7.784,1.308,14.175,2.296,19.353,3.046c-2.347-2.335-4.301-4.539-5.911-6.621 C1216.648,512.848,1212.178,514.04,1207.31,515.25z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1214.912,543.738c-2.04-0.109-4.113-0.131-6.193-0.042c1.402,0.78,2.729,1.542,3.992,2.289 c0.702-0.409,1.346-0.771,1.935-1.086C1214.727,544.506,1214.817,544.119,1214.912,543.738z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1237.153,527.511c-1.387-1.099-2.692-2.173-3.934-3.226c-2.564,1.005-5.24,2.339-7.756,4.125 C1229.677,528.684,1233.515,528.348,1237.153,527.511z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M880.29,1425.133c-3.173-0.721-6.349-1.45-9.527-2.189c1.287,1.372,2.651,3.09,4.094,5.176 C876.656,1427.135,878.469,1426.137,880.29,1425.133z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M926.32,215.794c2.041,4.137,4.178,8.96,6.776,14.508c2.766-0.283,5.558-0.509,8.378-0.665 c2.164-3.31,5.08-5.821,9.25-7.567c0.986-1.597,1.98-3.234,2.98-4.911c1.559-3.729,3.644-7.428,6.361-11.06 c1.466-2.64,2.945-5.369,4.436-8.185c-5.501,2.3-11.33,4.721-17.525,7.273c7.269,26.003-5.728,21.394-12.101,4.961 c-1.535,0.626-3.085,1.258-4.657,1.897C929.074,213.383,927.776,214.633,926.32,215.794z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M902.584,234.387c0.778,0.308,1.554,0.616,2.331,0.923c6.91-1.74,14.125-3.189,21.577-4.22 c-2.045-4.102-3.664-8.173-4.766-12.238c-3.444,1.911-7.528,3.463-12.352,4.597c-0.126-0.956-0.247-1.897-0.37-2.845 c-1.549,0.62-3.094,1.239-4.672,1.868c1.596-0.65,3.142-1.286,4.666-1.916c-0.485-3.736-0.946-7.405-1.38-10.999 c-3.092,3.051-6.106,5.936-9.04,8.654c1.451,4.944,2.511,9.482,3.156,13.587c0.408,0.486,0.809,0.967,1.224,1.46 C902.843,233.66,902.717,234.033,902.584,234.387z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M862.137,713.452c-0.865-0.811-1.754-1.641-2.678-2.503c-1.626,0.341-3.21,0.714-4.776,1.1 c0.194,2.223,0.241,4.587,0.129,7.096c0.269,0.082,0.533,0.161,0.805,0.245C857.407,716.901,859.615,714.845,862.137,713.452z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M815.351,835.873c0.017,0.664,0.035,1.329,0.062,1.986c0.177-0.316,0.376-0.713,0.601-1.215 C815.788,836.387,815.573,836.13,815.351,835.873z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M928.202,1593.5c1.184-5.799,2.412-11.944,3.685-18.451c-3.149,3.245-6.082,6.791-8.812,10.472 C924.713,1588.199,926.425,1590.865,928.202,1593.5z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M931.079,210.983c1.197-0.549,2.37-1.092,3.497-1.622c-0.3-0.819-0.583-1.665-0.846-2.536 C932.976,208.282,932.094,209.669,931.079,210.983z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1118.245,908.472c-0.181,1.091-0.361,2.176-0.541,3.238c0.624,0.166,1.219,0.339,1.785,0.518 c-0.114-1.419-0.198-2.82-0.252-4.201C1118.911,908.177,1118.579,908.325,1118.245,908.472z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1349.41,734.518c-0.894-0.405-1.736-0.795-2.554-1.177c-0.157,0.371-0.312,0.736-0.467,1.102 c0.153,0.207,0.307,0.415,0.46,0.623C1347.695,734.879,1348.539,734.692,1349.41,734.518z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1249.253,561.921c0.412-0.413,0.822-0.821,1.231-1.228c-0.416-1.959-0.818-3.898-1.204-5.813 c-1.236,0.583-2.494,1.167-3.773,1.749c-0.066,1.776-0.141,3.525-0.228,5.244 C1246.601,561.891,1247.926,561.907,1249.253,561.921z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1217.41,570.783c0.129,0.387,0.264,0.778,0.401,1.171c0.213-0.596,0.425-1.197,0.637-1.78 C1218.102,570.386,1217.756,570.587,1217.41,570.783z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1085.563,270.807c-0.934-0.276-1.862-0.555-2.778-0.839c-0.139,1.159-0.227,2.35-0.26,3.575 C1083.636,272.617,1084.645,271.706,1085.563,270.807z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M838.578,308.053c-0.072,0.176-0.147,0.343-0.22,0.515c0.312,0.032,0.623,0.064,0.942,0.1 c0.328-9.371,0.973-19.663,2.006-30.938c-7.874,2.022-17.055,3.662-27.066,4.287c-0.426,0.3-0.828,0.602-1.219,0.905 c1.186,2.38,2.557,4.814,4.172,7.322c4.791,7.438,8.973,13.665,13.647,17.821c2.021,0.05,4.229,0.182,6.646,0.414 C837.846,308.34,838.207,308.201,838.578,308.053z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1211.208,573.534c-0.672,0.217-1.341,0.41-2.005,0.574c1.95,2.278,3.829,4.488,5.621,6.613 c0.346-1.063,0.692-2.126,1.039-3.156C1214.283,576.121,1212.734,574.785,1211.208,573.534z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1225.177,565.088c-1.837,0.7-3.709,1.398-5.62,2.094c-0.369,0.982-0.738,1.972-1.109,2.992 C1220.668,568.819,1222.915,567.133,1225.177,565.088z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M942.59,283.795c1.337,0.74,2.691,1.516,4.055,2.324c0.636-0.845,1.267-1.7,1.891-2.568 c-0.774-1.224-1.585-2.377-2.427-3.463C944.906,281.333,943.725,282.579,942.59,283.795z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1373.991,791.441c0.668,8.669,1.652,18.5,3.076,29.44c0.248-0.21,0.49-0.416,0.735-0.623 c2.511-5.069,5.305-10.131,8.387-15.048C1382.333,800.571,1378.241,795.982,1373.991,791.441z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M864.062,233.89c3.135,0.061,6.213,0.15,9.227,0.267c0.193-0.448,0.379-0.909,0.559-1.38 c-1.636-0.979-3.403-1.838-5.303-2.557C867.173,231.453,865.671,232.68,864.062,233.89z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M807.16,1140.884c-1.351,0.124-2.693,0.24-4.028,0.349c-0.186,1.793-0.348,3.578-0.493,5.357 c2.055,0.416,3.993,0.863,5.825,1.337C807.928,1145.656,807.48,1143.313,807.16,1140.884z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M878.09,713.676c0.074-0.127,0.148-0.255,0.222-0.382c-1.114-1.025-2.208-2.039-3.283-3.042 c-3.526-0.019-6.947-0.059-10.242-0.111c0.852,0.508,1.701,1.014,2.537,1.519C870.636,711.141,874.277,711.697,878.09,713.676z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1315.413,925.543c1.706-0.878,3.39-1.737,5.037-2.563c1.228-1.696,2.316-3.432,3.218-5.191 c-2.353,2.159-5.59,4.605-9.576,7.182C1314.531,925.16,1314.967,925.348,1315.413,925.543z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M981.438,1550.875c-1.138,1.13-2.236,2.167-3.298,3.111c-0.019,0.882-0.306,1.05-0.921,0.808 c-1.923,1.646-3.734,2.989-5.463,4.03c3.257,0.468,6.634,1.337,10.135,2.667c-9.206,1.478-19.144,0.922-29.353-0.655 c-2.259,0.83-4.442,1.854-6.552,3.045c2.155,18.355,3.595,33.677,4.952,45.214c7.079-0.481,14.124-1.565,21.135-3.096 c4.688-12.21,10.578-28.776,18.076-50.182C987.353,1554.387,984.448,1552.748,981.438,1550.875z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1305.643,837.844c-0.113,0.627-0.232,1.25-0.354,1.871c3.289,0.148,6.992-0.108,10.971-0.644 c-0.289-0.526-0.579-1.054-0.872-1.586C1312.135,837.553,1308.883,837.67,1305.643,837.844z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M967.662,722.217c2.612,6.182,2.374,11.698-0.086,16.628c0.162,0.094,0.325,0.189,0.488,0.283 c1.756-0.073,3.415-0.115,4.982-0.131c2.714-0.701,5.526-1.427,8.432-2.177c-1.601-4.871-2.985-9.497-4.152-13.876 c-1.355-1.3-2.762-2.609-4.233-3.95c-2.675-2.436-7.421-5.994-9.841-9.656c-0.972,2.417-2.039,4.888-3.185,7.383 C962.519,718.429,965.05,720.26,967.662,722.217z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1215.085,562.277c-0.046-0.223-0.095-0.448-0.139-0.668c-5.807,0.045-11.235,0.193-16.1,0.524 c1.859,2.129,3.659,4.202,5.402,6.218c0.977,0.652,1.965,1.34,2.965,2.074C1210.042,567.579,1212.657,564.866,1215.085,562.277z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1229.882,709.353c2.873-1.768,5.691-3.535,8.453-5.291c-3.101-1.882-6.167-3.728-9.193-5.555 c-0.213,0.39-0.424,0.784-0.634,1.184C1228.938,702.654,1229.393,705.864,1229.882,709.353z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1082.515,275.147c0.024,2.125,0.209,4.35,0.562,6.674c0.24-0.247,0.481-0.494,0.728-0.743 c1.193-2.373,2.625-4.299,4.24-5.789c-0.325-0.864-0.617-1.715-0.89-2.56C1085.624,273.525,1084.081,274.329,1082.515,275.147z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M858.598,237.685c-3.357,2.163-6.994,4.234-10.756,6.157c-2.697,3.374-5.727,6.743-9.1,10.086 c6.011-1.69,12.747-3.471,20.308-5.304c0.946-0.554,1.903-1.126,2.876-1.727C860.819,243.72,859.718,240.642,858.598,237.685z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M854.488,227.75c0.58,1.264,1.149,2.563,1.707,3.894c0.715-1.244,1.389-2.485,2.02-3.721 C857.009,227.817,855.767,227.759,854.488,227.75z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M837.697,254.955c-0.086,0.083-0.171,0.167-0.258,0.251c1.536,0.567,3.049,1.109,4.536,1.627 c4.165-1.512,8.733-3.577,13.718-6.306C850.08,251.989,844.009,253.506,837.697,254.955z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M901.808,320.208c-1.02-4.507-1.686-8.714-2.049-12.635c-0.427-0.011-0.856-0.028-1.286-0.052 c-0.495,0.137-0.99,0.277-1.485,0.42c1.297,5.042,2.47,9.949,3.508,14.71C900.93,321.771,901.368,320.954,901.808,320.208z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1240.498,711.908c-3.105,2.49-6.164,5.133-9.158,7.927c0.749,5.412,1.565,11.341,2.464,17.83 c-0.118,3.134-0.495,5.702-1.096,7.769c1.959,1.962,3.838,3.796,5.643,5.505c2.3,0.213,4.363,0.521,6.211,0.912 c0.199-0.36,0.417-0.733,0.62-1.096c-1.425-2.042-2.699-4.009-3.801-5.888c2.125,0.507,4.225,1.018,6.304,1.53 c0.396-0.673,0.796-1.348,1.206-2.029C1239.145,738.852,1235.409,728.682,1240.498,711.908z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1003.438,1122.425c0.309,1.588,0.565,3.129,0.773,4.624c3.191-0.748,6.348-1.521,9.453-2.321 C1010.106,1124.141,1006.7,1123.366,1003.438,1122.425z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1005.079,1431.162c0.084-0.182,0.167-0.363,0.25-0.545c-0.225-0.072-0.446-0.147-0.67-0.22 c0.025,0.071,0.05,0.143,0.075,0.214C1004.852,1430.796,1004.966,1430.979,1005.079,1431.162z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1019.203,451.088c-0.431-0.649-0.865-1.295-1.304-1.937c-1.962,1.264-4.067,2.568-6.318,3.914 C1014.132,452.417,1016.674,451.757,1019.203,451.088z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1403.917,767.616c-0.412,0.161-0.806,0.324-1.225,0.485c-1.363,0.895-2.305,2.897-2.505,6.208 c3.483,1.113,6.076,2.657,7.416,4.841c1.423-1.277,2.881-2.506,4.373-3.683c0.019-0.99,0.021-1.98,0.009-2.971 C1409.268,769.018,1406.235,767.177,1403.917,767.616z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1299.998,443.453c3.093-3.181,6.152-6.167,9.176-8.958c-1.043-0.849-2.116-1.727-3.208-2.623 c-1.981-0.326-3.999-0.616-6.009-0.889C1299.949,435.311,1299.879,439.541,1299.998,443.453z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M917.582,316.741c0.245-0.338,0.492-0.672,0.736-1.013c-0.099,0.371-0.197,0.731-0.295,1.098 c3.685-3.502,7.407-7.06,11.092-10.769c-1.179-1.048-2.439-2.102-3.793-3.16c-1.179,0.078-2.358,0.171-3.535,0.282 c-1.541,4.073-3.278,8.303-5.254,12.697C916.88,316.144,917.23,316.432,917.582,316.741z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1272.683,673.529c-2.643-0.686-5.218-1.161-7.714-1.419c3.391,2.131,6.884,4.667,10.485,7.682 c0.75-0.481,1.494-0.955,2.232-1.423C1275.94,676.789,1274.274,675.174,1272.683,673.529z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1016.709,737.358c4.664,0.184,10.364-0.711,13.805-1.015c7.175-0.642,14.677-2.181,21.859-4.552 c-11.635-6.464-24.446-12.354-38.506-17.434C1008.236,722.401,1011.65,730.753,1016.709,737.358z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M942.714,276.244c-0.62,0.273-1.236,0.543-1.863,0.822c-0.59,1.643-1.245,3.227-1.955,4.758 c1.127,0.578,2.273,1.189,3.431,1.827c1.043-1.239,2.174-2.586,3.397-4.046C944.757,278.395,943.751,277.275,942.714,276.244z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M852.53,223.719c3.489-2.078,6.83-4.094,10.031-6.054c1.524-4.522,2.497-8.94,2.969-13.195 c-0.556-0.206-1.126-0.409-1.727-0.606c-0.139-0.105-0.266-0.205-0.403-0.308c-3.318,8.061-12.944,6.56-22.017,1.708 c-0.258,0.966-0.512,1.94-0.777,2.889C845.389,211.926,849.195,217.26,852.53,223.719z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M995.557,1121.984c1.226-0.292,2.503-0.571,3.826-0.837c-1.195-0.409-2.368-0.842-3.523-1.294 C995.766,1120.567,995.664,1121.278,995.557,1121.984z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M854.64,233.799c-6.499-0.001-13.195,0.127-20.03,0.403c-1.229,0.708-2.473,1.423-3.731,2.144 c-2.039,4.853-4.174,9.434-6.395,13.751c1.473,0.615,2.927,1.212,4.364,1.79c0.593-0.2,1.19-0.407,1.789-0.619 C838.463,245.651,846.741,239.491,854.64,233.799z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1275.309,690.746c2.523,3.102,5.116,7.008,7.907,11.675c1.496-0.898,3.027-1.812,4.584-2.743 c-2.292-3.929-4.177-7.833-5.582-11.716C1279.933,688.81,1277.628,689.737,1275.309,690.746z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M830.637,251.267c-0.401,0.287-0.8,0.573-1.198,0.858c0.839,0.336,1.675,0.669,2.501,0.992 c2.019-1.589,4.037-3.155,6.053-4.7C835.525,249.455,833.06,250.41,830.637,251.267z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M965.089,854.26c-0.88-0.248-1.729-0.586-2.551-1.001c-0.171-0.069-0.344-0.139-0.517-0.21 c0.875,2.881,1.609,5.8,2.182,8.755c0.078,0.004,0.155,0.007,0.233,0.01c0.78-1.862,1.987-4.016,3.641-6.474 C967.112,855.008,966.117,854.649,965.089,854.26z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1456.495,922.077c0.109,0.46,0.219,0.921,0.33,1.382c0.551,0.372,1.09,0.735,1.616,1.088 c0.026-0.42,0.05-0.834,0.08-1.262C1457.856,922.884,1457.18,922.482,1456.495,922.077z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M946.867,1236.56c1.252,0.541,2.527,1.068,3.83,1.575c-0.594-1.855-1.148-3.887-1.652-6.117 C948.312,1233.557,947.587,1235.066,946.867,1236.56z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M950.624,1477.989c2.079-0.918,4.377-1.701,6.839-2.357c-6.123-7.007-0.11-10.019,9.487-11.46 c-0.24-2.856-0.481-5.79-0.72-8.823c-6.281,2.099-14.768,7.666-26.089,17.814c2.616,1.276,4.903,2.531,6.823,3.746 C948.189,1477.265,949.409,1477.625,950.624,1477.989z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1040.657,1572.985c-0.092-0.743-0.237-1.429-0.443-2.047c-0.653,0.142-1.309,0.284-1.95,0.423 C1039.058,1571.894,1039.854,1572.433,1040.657,1572.985z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1170.832,145.416c-1.005-1.71-1.875-3.418-2.613-5.123c-2.176,1.379-4.401,2.638-6.662,3.792 C1164.771,144.605,1167.864,145.05,1170.832,145.416z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M932.974,1556.878c0.767,0.182,1.535,0.362,2.302,0.54c0.124-0.655,0.249-1.319,0.374-1.981 C934.746,1555.907,933.854,1556.387,932.974,1556.878z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1190.86,136.635c-0.667,1.701-1.234,3.355-1.695,4.969c0.772-0.377,1.592-0.727,2.462-1.05 C1191.365,139.174,1191.109,137.872,1190.86,136.635z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1326.975,1204.132c-0.072,1.179-0.142,2.367-0.212,3.563c0.217-0.023,0.437-0.049,0.679-0.091 C1327.467,1206.355,1327.335,1205.184,1326.975,1204.132z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1156.489,1215.052c0.077,0.052,0.154,0.105,0.231,0.157c0.083-0.184,0.168-0.368,0.252-0.553 C1156.81,1214.788,1156.654,1214.919,1156.489,1215.052z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M900.045,1155.833c0.551,0.079,1.102,0.183,1.654,0.306c-0.551-3.704-1.191-7.049-1.913-10.051 c-1.545,0.524-3.097,1.066-4.655,1.626c-0.772,1.719-1.546,3.402-2.319,5.048 C895.294,1153.769,897.701,1154.794,900.045,1155.833z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1161.985,1178.627c0.359-0.269,0.714-0.545,1.065-0.829c-0.506,0.009-1.017,0.018-1.517,0.027 C1161.683,1178.092,1161.834,1178.36,1161.985,1178.627z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M863.772,710.125c0.108,0.169,0.216,0.338,0.325,0.507c-0.086-0.169-0.172-0.336-0.258-0.506 C863.817,710.125,863.794,710.125,863.772,710.125z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M946.599,1553.412c-0.585,0.248-1.179,0.509-1.784,0.789c0.228,1.827,0.448,3.627,0.662,5.402 c2.364,0.457,4.72,0.872,7.061,1.233c1.016-0.374,2.048-0.708,3.095-1C952.812,1558.443,949.865,1556.278,946.599,1553.412z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1211.792,1050.418c-0.414,0.163-0.818,0.325-1.238,0.49c0.468,0.282,0.935,0.563,1.402,0.843 C1211.901,1051.306,1211.842,1050.86,1211.792,1050.418z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M904.681,631.407c0.624-1.096,1.283-2.186,1.989-3.267c-1.769-0.612-3.498-1.209-5.192-1.795 c-4.45,0.527-8.29,0.746-11.691,0.614c0.273,0.997,0.504,1.943,0.691,2.836C895.066,630.255,899.809,630.798,904.681,631.407z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1292.139,1393.502c-0.147-0.01-0.295-0.019-0.442-0.029c0.035,0.194,0.066,0.386,0.1,0.579 C1291.911,1393.869,1292.025,1393.685,1292.139,1393.502z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M910.347,1142.748c-1.802,0.527-3.621,1.084-5.45,1.664c1.664,0.336,3.311,0.715,4.94,1.13 C910.006,1144.609,910.176,1143.669,910.347,1142.748z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M924.76,1153.233c-0.542,1.177-1.077,2.334-1.609,3.483c1.749-1.023,3.54-2.064,5.39-3.13 c0.008-0.368,0.01-0.729,0.015-1.094c-2.166-1.104-4.415-2.125-6.738-3.059c-1.409,3.49-2.906,7.065-4.484,10.72 c1.66-0.991,3.362-2,5.124-3.033C923.233,1155.829,924.002,1154.535,924.76,1153.233z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1151.469,1183.458c-0.725-1.867-1.412-3.653-2.061-5.359c-2.253,0.065-4.442,0.139-6.556,0.229 c-1.006,1.025-2.048,2.09-3.122,3.19C1143.959,1181.925,1147.917,1182.572,1151.469,1183.458z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1161.036,437.101c7.89-3.123,18-6.24,28.933-8.914c-3.199-2.873-6.506-6.013-9.919-9.458 c-2.696-0.831-5.448-1.678-8.241-2.545C1168.147,423.72,1164.552,430.679,1161.036,437.101z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1008.346,1433.326c-0.425,0.475-0.85,0.953-1.279,1.442c1.151,2.411,1.808,4.613,1.88,6.513 c1.827,4.153,3.91,8.418,6.279,12.801c2.528-4.327,4.557-8.933,6.081-13.746 C1016.611,1440.233,1012.08,1438.127,1008.346,1433.326z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M979.579,841.142c-1.022-3.771-1.712-6.925-2.124-9.532c-5.59,1.718-11.373,3.455-17.346,5.21 c-0.516,2.396-0.995,4.716-1.438,6.96c1.267,3.019,2.383,6.086,3.33,9.198c0.177,0.099,0.357,0.19,0.538,0.281 c0.869,0.351,1.723,0.687,2.551,1.001c1.082,0.305,2.209,0.476,3.379,0.511C971.084,850.967,974.751,846.447,979.579,841.142z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1118.962,274.856c0.544,0.959,1.054,1.903,1.509,2.816c1.205,0.13,2.468,0.288,3.809,0.484 c-1.008,0.492-2.157,0.581-3.425,0.324c0.886,1.866,1.578,3.618,2.018,5.183c0.419,1.487,0.786,3.066,1.123,4.691 c1.23,0.988,2.324,2.01,3.307,3.059c0.18-0.852,0.429-1.504,0.76-1.917c-0.013-3.13-0.056-6.206-0.129-9.229 c-0.737-1.126-1.485-2.253-2.251-3.382c0.756,0.865,1.498,1.711,2.231,2.546c-0.12-4.545-0.317-8.963-0.61-13.237 c-1.161,0.55-2.315,1.109-3.457,1.681C1122.206,270.187,1120.579,272.517,1118.962,274.856z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M940.582,1249.49c0.007-0.057,0.014-0.113,0.021-0.17c-0.029,0.058-0.059,0.118-0.088,0.176 C940.537,1249.494,940.56,1249.492,940.582,1249.49z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1289.307,950.459c0.4-0.303,0.792-0.602,1.189-0.903c-0.542-0.839-1.067-1.66-1.576-2.466 c-2.647,0.682-3.622-0.09-1.726-2.765c-0.964-1.568-1.859-3.065-2.687-4.494c-1.665,0.657-3.361,1.303-5.091,1.932 C1282.895,944.752,1286.187,947.651,1289.307,950.459z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1142.77,151.483c-5.692,1.739-11.377,3.146-16.864,4.468c6.51,1.156,12.105,2.126,16.844,2.937 C1142.716,156.452,1142.722,153.984,1142.77,151.483z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M995.805,842.029c-0.781-1.136-1.571-2.281-2.371-3.432c0.521,1.392,0.959,2.792,1.291,4.171 C995.076,842.525,995.435,842.279,995.805,842.029z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M963.097,410.29c-8.079-1.225-15.474-1.798-22.278-1.852c6.95,0.741,14.329,1.539,21.979,2.395 C962.895,410.653,962.998,410.47,963.097,410.29z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1345.68,1011.011c0.142-0.365,0.249-0.75,0.34-1.144c-0.309-0.091-0.621-0.185-0.934-0.282 C1345.296,1010.054,1345.494,1010.53,1345.68,1011.011z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1159.369,412.268c1.564-1.257,3.185-2.361,4.879-3.315c-1.611-1.68-0.606-2.743,3.686-3.267 c-2.636-3.01-5.318-6.176-8.051-9.534c-1.936,2.899-4.027,5.931-6.288,9.12c-2.062-4.306-3.936-8.597-5.641-12.861 c-0.028,0.01-0.056,0.021-0.084,0.031c0.182,3.102,0.344,6.244,0.463,9.475c-0.514-3.139-1.018-6.163-1.515-9.093 c-2.776,0.989-5.415,1.86-7.924,2.621c-1.567,2.691-3.31,5.372-5.159,8.031C1142.179,406.621,1150.856,409.536,1159.369,412.268z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1036.052,1556.497c0.089,3.208-0.005,6.476-0.261,9.772c2.011,0.79,3.623,2.263,4.423,4.669 c2.286-0.496,4.647-1.009,7.08-1.536c3.545-3.214,7.006-6.529,10.446-9.881c-6.29-7.056-10.675-13.411-13.035-19.356 C1041.821,1546.44,1038.892,1552.04,1036.052,1556.497z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1349.431,986.62c0.551,0.475,1.108,0.953,1.647,1.421c6.7,1.378,13.383,2.642,19.995,3.82 c-2.46-6.436-5.091-13.251-7.617-20.003c-0.716-0.448-1.443-0.916-2.177-1.396c-3.967,5.191-8.046,10.209-12.401,14.898 c-0.014,0.224-0.024,0.457-0.036,0.685C1349.036,986.231,1349.232,986.42,1349.431,986.62z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1467.858,904.738c-0.599,0.122-1.19,0.242-1.772,0.361c1.137,0.508,2.269,1,3.395,1.478 C1468.936,905.974,1468.395,905.36,1467.858,904.738z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M945.229,1243.846c-0.28-0.726-0.55-1.472-0.808-2.244c-0.302,0.618-0.603,1.231-0.902,1.84 C944.087,1243.575,944.659,1243.711,945.229,1243.846z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M982.133,849.685c-0.115-0.356-0.223-0.699-0.333-1.047c-0.021,0.441-0.041,0.882-0.059,1.318 C981.872,849.864,982.001,849.78,982.133,849.685z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M892.069,1149.769c-0.835,0.565-1.669,1.132-2.503,1.703c0.618,0.241,1.226,0.484,1.835,0.728 C891.62,1151.398,891.841,1150.59,892.069,1149.769z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1136.243,1181.24c1.094-0.948,2.149-1.863,3.167-2.747c-6.69,0.353-12.64,0.896-17.898,1.795 c0.156,0.29,0.31,0.577,0.468,0.868C1126.885,1180.921,1131.69,1180.95,1136.243,1181.24z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1181.465,1235.053c-1.615,2.208-3.168,4.321-4.658,6.336c2.385,0.77,4.858,1.729,7.401,2.85 c2.225-1.606,4.718-3.025,7.46-4.225c-2.391-1.762-4.754-3.494-7.079-5.182 C1183.537,1234.934,1182.496,1235.009,1181.465,1235.053z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1239.201,448.105c-0.004,0.623-0.007,1.255-0.011,1.905c0.955,0.284,1.785,0.589,2.507,0.906 c0.129-0.512,0.261-1.027,0.395-1.545c-0.89-0.523-1.777-1.04-2.663-1.552C1239.353,447.914,1239.277,448.009,1239.201,448.105z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1260.49,1467.487c-0.191-0.887-0.368-1.771-0.529-2.653c-0.774-0.401-1.589-0.789-2.44-1.163 c-1.121,0.645-2.184,1.239-3.16,1.76C1256.482,1466.018,1258.525,1466.706,1260.49,1467.487z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1239.177,456.026c0.003,1.886,0.014,3.864,0.037,5.934c0.373-1.913,0.786-3.872,1.244-5.887 C1240.056,456.073,1239.629,456.057,1239.177,456.026z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M975.331,873.236c-1.072-0.012-1.986,0.124-2.742,0.403c-0.451,1.206-0.946,2.444-1.492,3.701 C972.504,875.97,973.916,874.602,975.331,873.236z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1229.423,1446.589c-0.196-0.046-0.393-0.093-0.589-0.136c-0.638,0.29-1.263,0.572-1.875,0.845 c-0.712,1.085-1.479,2.185-2.307,3.301c-0.59,1.734-1.419,3.73-2.515,6.01c2.291,1.944,4.874,4.158,7.785,6.654 c0.837-0.064,1.657-0.097,2.48-0.135C1231.174,1457.343,1230.189,1451.837,1229.423,1446.589z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1275.977,406.01c-2.381-0.503-4.657-1.191-6.806-2.055c-0.047,0.183-0.096,0.366-0.146,0.55 c0.298,3.178-1.502,7.26-4.571,11.982c-0.627,1.263-1.303,2.534-2.034,3.814c0.773,0.881,1.559,1.777,2.371,2.702 c-1.071-0.349-2.213-0.657-3.416-0.928c-0.262,0.432-0.537,0.867-0.811,1.301c1.65,0.896,3.318,1.815,5.005,2.758 C1269.063,419.366,1272.537,412.635,1275.977,406.01z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1262.702,431.695c0.138-0.267,0.275-0.534,0.413-0.801c-2.413-1.095-4.764-2.151-7.065-3.176 c-3.689,4.539-7.831,9.382-11.968,14.383c-0.179,0.623-0.357,1.243-0.529,1.857c5.956,5.695,12.379,11.85,19.308,18.498 c4.338,2.938,8.658,6.009,12.924,9.215c1.478-1.924,2.949-3.802,4.413-5.635c2.435-8.123,3.728-16.44,3.616-25.556 c-7.208-3.394-13.994-6.542-20.379-9.442C1263.189,431.26,1262.949,431.473,1262.702,431.695z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1114.017,260.775c0.74-0.969,1.455-1.913,2.159-2.844c-1.9,0.948-3.831,1.916-5.8,2.907 c-0.079,0.466-0.168,0.94-0.253,1.411c2.575,3.091,4.886,6.249,6.837,9.297c2.247-1.27,4.544-2.494,6.887-3.669 c1.077-1.516,2.16-3.025,3.25-4.522c-0.047-0.583-0.102-1.154-0.152-1.73C1121.365,260.016,1116.737,259.399,1114.017,260.775z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1274.135,473.833c0.081-0.107,0.162-0.216,0.243-0.322c-3.987-3.828-7.825-7.511-11.517-11.054 c-2.43-1.646-4.866-3.251-7.301-4.815C1261.09,462.804,1267.316,468.191,1274.135,473.833z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1276.395,475.696c0.09,0.074,0.181,0.148,0.271,0.222c0.021-0.051,0.04-0.101,0.061-0.152 c-0.067-0.064-0.134-0.129-0.201-0.193C1276.482,475.615,1276.439,475.654,1276.395,475.696z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M998.385,1074.307c-0.072-0.169-0.146-0.339-0.22-0.508c-2.599-0.245-5.164-0.655-7.671-1.277 c0.321,0.854,0.627,1.703,0.921,2.55C993.698,1074.823,996.022,1074.568,998.385,1074.307z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1002.261,1089.774c0.127-1.198,1.003-3.087,2.871-5.743c-0.458-3.379-0.958-6.691-1.502-9.928 c-0.849-0.019-1.697-0.051-2.542-0.095c-0.907,0.101-1.807,0.201-2.703,0.3 C1000.647,1079.621,1001.959,1084.831,1002.261,1089.774z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1231.781,394.591c-2.328-2.567-4.982-5.289-8.032-8.166c-0.467,0.208-0.935,0.417-1.409,0.633 c0.696,4.318,1.235,8.691,1.62,13.026c2.819-0.466,5.484-0.873,7.998-1.223C1231.918,397.292,1231.84,395.853,1231.781,394.591z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1174.73,1177.585c-3.93,0.078-7.702,0.142-11.329,0.207c-0.129,0.546-0.397,1.173-0.823,1.888 c1.937,3.449,3.91,7.024,5.883,10.648C1170.482,1186.17,1172.576,1181.916,1174.73,1177.585z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1030.015,1073.177c-2.659,0.121-5.352,0.234-8.081,0.351c-4.123,8.114-10.369,14.071-14.719,16.569 c-0.348,0.8-0.678,1.589-1.041,2.397c-0.065-0.59-0.138-1.167-0.205-1.753c-1.997,0.911-3.399,0.894-3.675-0.223 c0.029,0.708,0.043,1.411,0.03,2.107c8.336,1.283,17.61,3.293,27.947,6.231c2.156-4.196,3.946-7.83,5.42-10.955 C1033.04,1082.94,1031.188,1077.99,1030.015,1073.177z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M947.809,847.232c-1.262,0.616-2.588,0.999-3.986,1.062c-3.65,0.159-7.831-1.924-12.147-4.733 c-1.762,0.376-3.656,0.745-5.687,1.108c0.225,3.377,0.45,6.879,0.677,10.528c-3.175,2.323-5.797,4.555-7.954,6.72 c6.515-0.499,13.312-0.717,20.315-0.734c3.172-3.975,7.177-8.357,9.517-12.908C948.299,847.927,948.054,847.579,947.809,847.232z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1013.73,1073.923c-0.078,0.004-0.155,0.007-0.233,0.011c-0.042,0.123-0.086,0.247-0.128,0.37 C1013.491,1074.176,1013.606,1074.052,1013.73,1073.923z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1239.533,1463.121c3.798-2.629,7.84-5.266,12.121-7.873c-4.502-2.061-8.907-4.111-13.24-5.794 c-0.555,4.283-1.206,8.803-1.962,13.586C1237.492,1463.045,1238.518,1463.074,1239.533,1463.121z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M969.573,878.091c0.168-2.167,1.105-3.748,3.017-4.452c0.229-0.611,0.447-1.215,0.654-1.808 c-0.169-0.037-0.335-0.074-0.5-0.112c-4.987,0.179-8.183-0.892-9.123-3.516c-6.253-4.057-2.584-7.716-8.711,0.354 c-0.31,3.366-0.481,6.431-0.525,9.216C959.625,877.819,964.7,877.927,969.573,878.091z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1159.429,440.008c-2.474,4.435-4.908,8.61-7.296,12.532c7.408,1.439,20.661,1.854,41.496,0.701 c2.756-3.062,5.656-5.956,8.597-8.55c0.785-1.545,1.571-3.094,2.327-4.646c-1.073-0.778-2.164-1.591-3.273-2.44 C1191.054,440.192,1177.465,441.277,1159.429,440.008z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1185.728,507.26c0.686,1.915,0.805,3.303,0.414,4.247c2.872,0.531,5.615,1.029,8.241,1.499 c1.204-4.378,2.326-8.907,3.361-13.527c-0.97-0.032-1.944-0.061-2.926-0.086C1190.242,504.969,1186.88,508.213,1185.728,507.26z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1275.55,420.429c-2.541,2.167-5.177,4.454-7.911,6.868c5.188,2.934,10.543,6.087,16.045,9.462 c-0.147-2.798-0.415-5.67-0.826-8.642C1277.663,426.652,1274.518,424.434,1275.55,420.429z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1225.463,528.409c-4.323-0.282-9.045-1.207-14.365-2.911c0.897,2.771,1.213,5.349,1.033,7.753 c2.215,0.754,4.353,1.494,6.396,2.216C1220.469,532.55,1222.88,530.242,1225.463,528.409z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1436.088,926.7c-5.951,7.661-10.049,13.284-12.82,17.123c2.6,5.103,5.175,10.247,9.893,13.901 c4.08-5.295,8.305-10.38,12.627-15.239C1441.264,935.936,1437.984,930.809,1436.088,926.7z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1042.754,1532.245c-0.035-0.002-0.07-0.005-0.104-0.007c0.037,0.031,0.075,0.062,0.112,0.094 C1042.759,1532.303,1042.756,1532.274,1042.754,1532.245z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1202.709,552.169c-1.175-0.561-2.398-1.156-3.655-1.778c-2.245,1.302-4.709,2.499-7.356,3.595 c0.974,1.105,1.934,2.196,2.88,3.273C1197.648,555.352,1200.341,553.659,1202.709,552.169z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1180.021,383.958c2.652,3.008,7.389,4.399,13.453,4.689c-0.591-1.703-1.134-3.4-1.611-5.086 C1187.736,384.32,1183.74,384.463,1180.021,383.958z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1161.185,507.339c0.047,3.629,0.114,7.164,0.202,10.6c5.07,1.35,10.073,2.737,14.96,4.139 c5.83-1.152,11.291-2.294,16.41-3.424c0.08-0.266,0.161-0.53,0.241-0.797c-2.852-1.439-5.857-3.052-9.01-4.826 C1180.165,513.763,1171.98,511.005,1161.185,507.339z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1190.861,1233.917c0.934,1.972,1.773,3.784,2.5,5.404c0.376-0.148,0.756-0.293,1.14-0.434 c0.277-2.059,0.58-4.05,0.905-5.985C1193.875,1233.292,1192.36,1233.629,1190.861,1233.917z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1193.927,139.792c0.942-0.272,1.938-0.515,2.981-0.731c0.617-0.999,1.213-1.994,1.783-2.987 c-2.16,0.3-4.256,0.471-6.282,0.525C1192.884,137.631,1193.391,138.698,1193.927,139.792z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1084.746,1110.155c0.145-1.01,0.305-2.027,0.476-3.05c-1.24,0.004-2.5,0.004-3.78,0 c-0.179,0.875-0.354,1.759-0.521,2.655C1082.24,1109.851,1083.515,1109.983,1084.746,1110.155z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1112.365,1122.337c-0.101,0.053-0.196,0.104-0.297,0.157c0.075,0.044,0.15,0.09,0.224,0.134 C1112.298,1122.535,1112.317,1122.439,1112.365,1122.337z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1319.368,1145.723C1315.33,1163.56,1311.382,1152.11,1319.368,1145.723c0.365-1.61,0.73-3.458,1.087-5.571 c-1.78-0.729-3.606-1.51-5.463-2.328c-6.959,9.132-14.45,18.074-22.287,26.609c-0.309,1.819-0.559,3.616-0.75,5.389 c9.373-4.772,18.762-10.42,27.994-16.286c0.782-2.094,3.81-4.426,9.93-6.824c0.127-0.384,0.256-0.768,0.381-1.151 c-1.585-1.017-3.136-1.941-4.61-2.777C1323.021,1143.382,1320.958,1144.452,1319.368,1145.723z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M980.823,1462.982c0.115-0.005,0.229-0.011,0.343-0.016c-1.029-3.562-2.691-6.206-5.192-7.568 c-2.14-0.188-3.958-0.366-5.413-0.547C974.231,1457.765,977.648,1460.474,980.823,1462.982z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1192.757,518.654c-0.572,1.898-1.161,3.758-1.765,5.576c1.683-1.58,3.403-3.183,5.221-4.791 c-0.717-0.344-1.447-0.703-2.183-1.069C1193.606,518.465,1193.186,518.56,1192.757,518.654z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M957.23,1135.914c-0.923-0.039-1.854,0.047-2.798,0.273c0.052,0.037,0.105,0.073,0.157,0.109 C955.467,1136.171,956.347,1136.044,957.23,1135.914z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1201.744,1039.018c-0.917,1.461-1.917,2.987-2.999,4.577c0.581,0.37,1.162,0.74,1.742,1.106 C1201.412,1042.868,1201.855,1041.018,1201.744,1039.018z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1421.425,1165.338c-0.981,0.233-1.876,0.373-2.693,0.434c0.595,0.51,1.2,1.02,1.807,1.53 c0.53-0.501,1.045-1.016,1.554-1.539c-0.012-0.104-0.023-0.211-0.035-0.314 C1421.846,1165.413,1421.635,1165.376,1421.425,1165.338z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1102.69,1115.126c-0.009,0.376-0.021,0.755-0.031,1.132c2.092,1.55,4.177,2.986,6.257,4.309 c1.547-1.84,3.087-3.846,4.571-6.014c-0.877-0.578-1.744-1.156-2.595-1.737C1108.237,1113.794,1105.504,1114.58,1102.69,1115.126 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1131.83,290.886c0.373-0.838,0.753-1.702,1.134-2.569c-1.13-1.907-2.321-3.833-3.555-5.768 c-0.393,2.17-0.791,4.43-1.192,6.783C1128.99,288.588,1130.154,288.986,1131.83,290.886z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M955.71,861.466c0.929,0.031,1.859,0.064,2.792,0.099c-0.8-1.013-1.592-2.034-2.38-3.058 C955.976,859.512,955.837,860.501,955.71,861.466z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1261.934,1081.595c-1.303-2.856-2.541-5.517-3.681-8c-1.419,0.976-2.754,1.987-4.002,3.033 C1256.932,1078.298,1259.499,1079.951,1261.934,1081.595z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1049.536,674.056c1.678,1.139,3.339,2.2,4.992,3.225c1.224-1.175,2.442-2.351,3.654-3.528 c-4.057-0.959-8.22-1.772-12.459-2.425c-0.031,0.055-0.061,0.11-0.092,0.165c0.959,1.194,1.924,2.442,2.897,3.746 C1048.832,674.861,1049.159,674.471,1049.536,674.056z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M994.992,851.726c-1.226,4.51-5.159,7.461-13.433,6.775c0,1.444,0.015,2.859,0.045,4.249 c1.47,0.089,2.94,0.179,4.413,0.27c4.277-4.056,8.56-8.088,12.816-12.091C997.428,851.25,996.152,851.513,994.992,851.726z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1219.161,1301.922c-0.147-0.819-0.291-1.635-0.43-2.444c-0.586,1.071-1.179,2.122-1.78,3.152 C1217.703,1302.391,1218.44,1302.155,1219.161,1301.922z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M965.632,829.027c-1.143,0.325-2.272,0.642-3.391,0.954c-0.302,0.451-0.613,0.929-0.933,1.43 c-0.045,0.197-0.088,0.391-0.133,0.587C962.71,830.97,964.193,829.983,965.632,829.027z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1431.913,725.637c0.163-2.125,0.341-4.29,0.533-6.495c-0.121,0.027-0.242,0.053-0.363,0.079 c-1.523,2.02-2.955,4.119-4.32,6.252C1429.141,725.421,1430.526,725.473,1431.913,725.637z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1349.833,1194.785c1.064-0.975,2.162-1.949,3.285-2.918c0.178-0.938,0.325-1.86,0.446-2.768 c-3.397-0.801-7.192-1.711-11.419-2.738C1338.354,1186.73,1339.186,1189.001,1349.833,1194.785z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1348.834,1195.71c-4.474-1.822-8.878-3.591-13.197-5.326c-0.657,0.569-1.296,1.101-1.921,1.605 c1.3,3.969,2.392,8.089,3.398,12.054c1.998-0.93,4.242-2.041,6.744-3.339C1345.365,1199.064,1347.042,1197.389,1348.834,1195.71z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1136.495,294.567c-0.185-0.345-0.374-0.691-0.564-1.037c0.041,0.898,0.073,1.789,0.102,2.677 c0.038-0.001,0.075-0.001,0.113-0.002C1136.259,295.651,1136.375,295.106,1136.495,294.567z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1187.393,1031.504c0.062,0.46,0.125,0.921,0.186,1.392c0.828-1.829,1.707-3.544,2.622-5.138 c-0.144-0.042-0.288-0.083-0.432-0.124C1189.048,1029.088,1188.256,1030.387,1187.393,1031.504z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1240.503,505.155c-1.188,0.464-2.422,0.933-3.73,1.407c2.164,2.208,4.117,4.457,5.789,6.724 c-0.224-1.866-0.433-3.7-0.629-5.505C1241.42,506.948,1240.942,506.075,1240.503,505.155z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1340.414,1185.94c0.589,0.144,1.158,0.282,1.731,0.421c2.428-0.236,6.748,0.306,11.597,1.204 c0.942-9.418-1.167-17.179-4.83-23.568c-6.4,9.536-12.088,17.747-16.45,24.404c0.103,0.276,0.206,0.553,0.307,0.832 c0.952,0.383,1.907,0.766,2.868,1.152C1337.142,1189.081,1338.731,1187.605,1340.414,1185.94z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1022.941,684.625c1.517,0.996,3.046,2.01,4.588,3.042c4.868,2.458,11.632,5.492,20.659,9.123 c-1.872,0.473-3.648,0.959-5.351,1.454c0.53,0.377,1.055,0.747,1.587,1.128c-1.209-0.17-2.399-0.35-3.576-0.535 c-7.414,2.275-13.173,4.752-17.559,7.351c12.345,0.855,23.283,2.835,32.929,5.572c3.073-1.048,6.051-2.072,8.934-3.072 c-1.242-3.405-2.142-6.643-2.742-9.734c-14.724-10.657-31.124-17.095-39.542-18.835 C1023.039,681.746,1023.063,683.243,1022.941,684.625z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1292.108,755.075c-1.089-0.196-2.018-0.22-2.715-0.011c-0.963,0.289-1.975,0.929-3.012,1.805 c3.237,0.96,6.385,1.917,9.448,2.868C1294.521,758.192,1293.282,756.638,1292.108,755.075z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1448.295,733.298c0.353-0.866,0.663-1.724,0.931-2.573c-1.698,0.036-3.187,0.002-4.49-0.1 c1.12,0.772,2.228,1.639,3.322,2.6C1448.137,733.25,1448.215,733.274,1448.295,733.298z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1051.31,1453.113c-2.722-3.794-4.311-7.213-4.924-10.339c-1.539-0.383-3.047-0.795-4.527-1.235 c-2.348,1.185-4.736,2.402-7.162,3.65c-0.194,1.897-0.017,3.502,0.625,5.246c1.273,1.404,2.041,2.723,2.031,3.97 c0.314,0.508,0.646,1.033,1.02,1.598c0.63,0.945,4.073,4.515,7.515,7.737c1.67,0.32,3.344,0.651,5.021,0.998 C1051.18,1460.608,1051.301,1456.745,1051.31,1453.113z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1267.878,945.576c-0.964,0.287-1.932,0.57-2.909,0.845c-0.811,0.479-1.615,0.951-2.411,1.415 c0.011,0.595,0.024,1.175,0.036,1.762C1264.361,948.331,1266.132,946.985,1267.878,945.576z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1285.895,761.316c0.291,1.798,0.562,3.558,0.82,5.29c1.716-1.096,3.466-2.343,5.287-3.693 c-2.624-1.155-5.318-2.35-8.089-3.589c-1.34,1.507-2.69,3.271-4.008,5.094c0.175,0.222,0.358,0.441,0.529,0.665 C1282.156,763.872,1283.973,762.618,1285.895,761.316z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1320.459,815.385c0.162-6.118,0.522-12.052,1.045-17.825c-5.366,0.233-10.582,0.42-15.813,1.107 c1.037,4.615,1.613,9.59,1.795,14.708c4.642,3.85,9.361,7.653,14.107,11.37c11.209,1.44,21.833,2.431,31.485,3.333 c3.153-10.552,5.818-20.055,8.069-28.533c-3.291,4.867-6.672,9.913-10.151,15.161c-3.494-4.817-6.817-9.535-9.983-14.149 c-1.155-1.304-2.317-2.75-3.477-4.292c-4.588,0.659-8.982,0.959-13.264,1.169 C1323.766,803.633,1322.547,809.651,1320.459,815.385z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1427.543,884.166c1.396-1.054,2.772-2.108,4.119-3.162c-0.542-4.485-0.508-7.494-0.66-9.412 c-2.669,0.002-5.643-0.212-8.85-0.659c-0.773,5.087-4.749,6.909-11.049,6.165c3.718,1.789,7.452,3.674,11.189,5.608 C1424.058,883.22,1425.808,883.707,1427.543,884.166z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1068.656,744.221c-4.667,1.891-9.533,3.378-14.499,4.503c5.156,0.839,9.871,1.747,14.148,2.722 C1068.43,749.081,1068.547,746.674,1068.656,744.221z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1273.189,751.62c0.51-0.613,1.016-1.228,1.517-1.848c-0.523-0.01-1.04-0.024-1.554-0.041 C1273.173,750.367,1273.186,750.997,1273.189,751.62z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1341.113,910.151c0.429-0.346,0.847-0.685,1.271-1.027c-0.815,0.116-1.646,0.231-2.497,0.345 C1340.303,909.7,1340.708,909.925,1341.113,910.151z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1431.664,729.002c3.545,0.715,7.289,1.614,11.184,2.695c0.188-0.402,0.364-0.806,0.531-1.21 c-3.921-0.507-5.813-1.772-6.42-3.744c-1.677-0.541-3.362-0.906-5.045-1.106C1431.826,726.77,1431.743,727.892,1431.664,729.002z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1284.834,1370.245c1.051,2.707,2.035,5.44,2.934,8.172c4.27,0.462,8.531,0.759,12.773,0.905 c1.445-2.531,2.873-5.063,4.292-7.574C1297.449,1372.025,1290.116,1371.292,1284.834,1370.245z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1354.996,906.985c-0.748,0.152-1.52,0.303-2.315,0.453c0.246,0.069,0.488,0.142,0.736,0.209 c-0.271-0.061-0.542-0.131-0.813-0.194c-1.043,0.197-2.129,0.391-3.256,0.584c0.172,0.578,0.328,1.131,0.468,1.66 c2.115-0.822,4.163-1.583,6.143-2.278C1355.638,907.277,1355.318,907.134,1354.996,906.985z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1441.484,1211.7c0.06,0.039,0.117,0.078,0.177,0.117c-0.07-0.029-0.137-0.053-0.207-0.082 c-0.283,0.342-0.563,0.708-0.843,1.1c1.336-0.158,2.653-0.3,3.951-0.427c-0.163-0.961-0.343-1.925-0.531-2.89 c-0.117,0.011-0.232,0.023-0.349,0.034C1442.935,1210.128,1442.203,1210.835,1441.484,1211.7z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1061.849,695.45c-0.113-0.891-0.201-1.77-0.264-2.637c-1.006-0.891-2.025-1.819-3.051-2.778 C1059.631,691.79,1060.736,693.595,1061.849,695.45z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1430.118,1210.604c-0.332,0.02-0.667,0.039-1,0.059c0.314,0.415,0.615,0.832,0.9,1.254 C1430.049,1211.481,1430.083,1211.043,1430.118,1210.604z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1182.13,476.293c-1.175-0.589-2.348-1.178-3.486-1.728c-1.394,2.782-2.473,5.448-3.163,7.903 C1177.781,480.349,1179.992,478.294,1182.13,476.293z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1462.396,1055.823c0.263-0.239,0.537-0.484,0.825-0.735c0.819-0.197,1.628-0.394,2.427-0.593 c0.04-0.407,0.081-0.812,0.117-1.223c-1.781-0.996-3.631-2.003-5.559-3.018c-0.036,0.086-0.071,0.174-0.106,0.26 C1461.488,1052.144,1462.087,1053.853,1462.396,1055.823z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1135.196,283.175c0.161,1.664,0.292,3.306,0.411,4.937c0.66,0.735,1.312,1.458,1.954,2.166 c2.362-8.551,5.657-14.992,9.413-18.667c-3.655-1-7.165-3.438-10.881-6.882c-0.98-0.367-1.951-0.725-2.906-1.065 c-1.135,5.097-2.328,10.962-3.565,17.711c1.467,1.666,2.888,3.271,4.27,4.82C1134.323,285.202,1134.755,284.205,1135.196,283.175 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1400.164,1121.099c0.528-0.996,1.059-1.989,1.591-2.98c-0.77-0.028-1.541-0.069-2.311-0.121 C1399.718,1119.04,1399.959,1120.074,1400.164,1121.099z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1348.841,986.045c-0.106-0.101-0.213-0.208-0.318-0.304c-0.017,0.018-0.033,0.036-0.05,0.054 c0.123,0.106,0.241,0.209,0.364,0.314C1348.839,986.088,1348.84,986.066,1348.841,986.045z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1178.644,474.566c3.317-6.618,8.404-13.88,14.205-20.456c-12.87,4.12-23.808,8.333-33.076,12.56 C1165.476,468.621,1171.721,471.22,1178.644,474.566z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1132.773,168.346c5.195,4.813,9.025,9.571,11.698,14.265c-0.897-6.586-1.452-13.467-1.656-20.63 c-6.44-0.211-14.24-0.4-23.197-0.462c1.865,1.885,3.131,4.009,3.866,6.243c2.577-2.056,4.717-3.732,6.042-4.791 c0.103-0.181,0.207-0.353,0.31-0.537c1.744-1.157,1.378-0.811-0.31,0.537c-1.75,3.083-3.536,5.75-5.348,8.014 c0.212,1.974,0.061,3.981-0.415,5.943c0.76,3.909,1.536,7.723,2.326,11.445c4.948-0.997,10.222-2.014,15.849-3.059 C1139.067,179.837,1136.019,174.184,1132.773,168.346z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M900.43,1446.463c2.133-0.657,4.224-1.349,6.278-2.067c-2.812-0.121-6.069-0.205-9.836-0.209 c-0.157,0.104-0.312,0.207-0.467,0.311C897.794,1445.086,899.137,1445.741,900.43,1446.463z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1314.638,1216.394c-0.483-0.569-0.968-1.141-1.446-1.703c-0.714,1.161-1.443,2.31-2.182,3.449 c0.832,0.52,1.691,1.014,2.577,1.483C1313.935,1218.565,1314.285,1217.489,1314.638,1216.394z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1156.293,516.601c0.606-3.346,1.261-6.765,1.963-10.256c-4.873-1.649-10.205-3.424-15.856-5.117 c0.841,4.153,1.452,8.272,1.835,12.359C1148.268,514.558,1152.296,515.565,1156.293,516.601z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M979.857,819.713c-0.732-0.979-1.472-1.962-2.219-2.946c-0.025-0.011-0.05-0.021-0.074-0.032 c-1.982,0.627-4.025,1.216-6.106,1.751c-3.076,3.147-6.057,6.853-8.979,11.141c1.145-0.269,2.306-0.544,3.491-0.825 C971.216,825.321,975.83,822.307,979.857,819.713z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1197.174,397.782c-0.652-1.406-1.262-2.807-1.834-4.203c-2.252,0.085-4.484-0.143-6.68-0.734 c1.592,1.373,3.287,2.859,5.094,4.466C1194.831,397.423,1195.971,397.58,1197.174,397.782z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1434.985,1052.669c2.305,1.582,4.531,3.053,6.685,4.428c2.927-3.35,5.808-6.338,8.623-8.907 c-0.303,0.015-0.597,0.035-0.904,0.049c0.006-0.415,0.023-0.82,0.039-1.226c-7.793-2.376-15.166-4.093-22.154-5.254 c-6.55,9.29-12.565,17.601-18.113,24.998c8.408-1.214,17.65-2.663,27.042-3.828 C1435.833,1059.617,1435.429,1056.201,1434.985,1052.669z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1185.728,507.26c-0.122-0.342-0.263-0.701-0.422-1.077C1185.352,506.722,1185.499,507.069,1185.728,507.26z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1168.846,415.263c-3.122-0.974-6.288-1.972-9.477-2.995c-6.534,5.253-12.11,13.138-18.193,23.486 c1.215-0.5,2.244-0.871,3.099-1.122C1150.99,428.426,1159.035,421.914,1168.846,415.263z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1143.828,188.947c-4.396,4.09-9.424,8.158-14.895,12.183c0.1,0.427,0.199,0.86,0.299,1.283 c1.16,0.497,2.315,0.966,3.468,1.416c4.383-2.836,9.034-5.752,13.941-8.776c-0.074-0.347-0.151-0.693-0.223-1.042 C1145.572,192.342,1144.71,190.655,1143.828,188.947z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1181.581,499.309c1.715,2.751,2.944,5.023,3.725,6.873c-0.106-1.252,0.315-3.501,1.343-6.9 C1184.976,499.279,1183.287,499.288,1181.581,499.309z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1085.564,1091.41c-1.537,4.73-2.914,9.855-4.061,15.401c1.281-0.103,2.554-0.2,3.823-0.294 c0.269-1.57,0.562-3.15,0.894-4.749c0.139,0.143,0.277,0.274,0.416,0.416c0.27-2.529,0.719-5.234,1.376-8.236 C1087.176,1093.104,1086.362,1092.258,1085.564,1091.41z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "none",
                        d:
                          "M1377.737,1167.685c-1.962-0.334-3.777-0.654-5.452-0.963c1.312,1.772,2.542,3.456,3.693,5.058 C1376.555,1170.425,1377.14,1169.061,1377.737,1167.685z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1271.842,1375.975c0.596,0.126,1.192,0.25,1.79,0.362c-0.648-0.402-1.285-0.802-1.909-1.199 C1271.763,1375.414,1271.803,1375.694,1271.842,1375.975z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1304.834,1371.748c-1.419,2.511-2.848,5.043-4.292,7.574c0.488,0.017,0.976,0.039,1.464,0.052 c1.088-2.451,2.187-5.007,3.295-7.645C1305.145,1371.736,1304.989,1371.742,1304.834,1371.748z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1342.621,1369.217c-4.52,2.699-9.283,5.57-14.314,8.641c4.484-0.654,8.911-1.516,13.262-2.598 c0.505-1.942,0.979-3.82,1.419-5.625C1342.865,1369.497,1342.742,1369.356,1342.621,1369.217z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1278.985,1368.645c-1.847,0.27-3.695,0.503-5.543,0.71c-0.163,0.217-0.326,0.434-0.489,0.653 c4.396,2.057,8.936,4.754,13.443,8.246c0.458,0.053,0.915,0.114,1.373,0.163c-0.899-2.732-1.883-5.465-2.934-8.172 C1282.368,1369.756,1280.352,1369.199,1278.985,1368.645z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1343.166,1368.892c-0.06,0.248-0.118,0.493-0.179,0.744c1.206,1.378,2.434,2.782,3.7,4.236 c2.088-0.611,4.158-1.269,6.205-1.986c-1.206-1.899-2.459-4.072-3.767-6.531 C1347.19,1366.498,1345.204,1367.677,1343.166,1368.892z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1300.917,1398.75c4.671,0.57,9.667,1.205,15.022,1.909c0.575-2.165,1.181-4.346,1.834-6.546 c-5.446,0.031-10.518,0-15.396-0.135c-1.152,0.729-2.32,1.47-3.493,2.216C1299.552,1396.714,1300.239,1397.547,1300.917,1398.75z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1292.804,1397.789c0.76-1.289,1.527-2.661,2.3-4.106c-0.993-0.054-1.981-0.116-2.965-0.182 c-0.114,0.183-0.228,0.367-0.342,0.549c-0.034-0.193-0.065-0.385-0.1-0.579c-6.11-0.422-12.098-1.094-18.315-2.118 c0.054,0.791,0.105,1.595,0.154,2.415c-0.211-0.839-0.411-1.661-0.614-2.489c-0.672-0.112-1.349-0.231-2.027-0.351 c-0.331,1.712-0.86,3.296-1.574,4.606C1275.835,1395.986,1283.588,1396.735,1292.804,1397.789z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1246.252,981.407c-0.037,0.484-0.08,0.959-0.127,1.429c0.447-0.332,0.897-0.666,1.342-0.996 C1247.039,981.828,1246.634,981.68,1246.252,981.407z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1262.593,949.598c-0.012-0.587-0.025-1.167-0.036-1.762c-0.983,0.573-1.957,1.137-2.919,1.687 c0.365,0.448,0.735,0.904,1.109,1.37C1261.362,950.472,1261.977,950.039,1262.593,949.598z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1254.351,952.499c1.725-0.954,3.486-1.945,5.288-2.976c-0.388-0.476-0.77-0.942-1.147-1.397 c-0.821,0.201-1.646,0.396-2.475,0.588C1255.525,949.928,1254.969,951.189,1254.351,952.499z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1335.819,1006.048c-0.583,3.196-1.312,6.609-2.169,10.241c0.727,0.038,1.432,0.058,2.091,0.042 c-0.553-0.511-1.087-1.032-1.594-1.566c0.787,0.517,1.556,1.02,2.325,1.524c5.059-0.295,8.029-2.25,9.207-5.278 c-0.186-0.481-0.384-0.956-0.594-1.426C1342.163,1008.68,1339.083,1007.51,1335.819,1006.048z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1186.708,1026.797c0.234,1.497,0.462,3.07,0.684,4.707c0.863-1.117,1.655-2.416,2.377-3.87 C1188.75,1027.339,1187.73,1027.057,1186.708,1026.797z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1242.776,972.736c-3.477,5.485-7.469,11.531-11.923,18.207c0.691,0.534,1.328,1.096,1.913,1.684 c0.145-0.072,0.29-0.143,0.435-0.213c4.405-3.258,8.716-6.453,12.923-9.578c0.047-0.469,0.09-0.945,0.127-1.429 C1244.698,980.297,1243.535,977.129,1242.776,972.736z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M869.637,1412.052c-0.759-0.089-1.518-0.178-2.276-0.276c-0.346,0.828-0.707,1.637-1.082,2.428 C871.44,1415.219,873.079,1414.516,869.637,1412.052z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M903.803,1397.376c2.561-0.281,5.12-0.625,7.668-1.036c-0.063-0.065-0.126-0.129-0.189-0.194 C908.807,1396.525,906.312,1396.936,903.803,1397.376z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1015.589,1368.089c-1.015,0.831-2.154,1.683-3.397,2.577c-0.53,1.123-1.055,2.228-1.576,3.318 c0.661,0.856,1.374,1.769,2.142,2.753c5.164-0.538,10-1.114,14.512-1.725C1023.247,1372.648,1019.357,1370.343,1015.589,1368.089 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1010.427,1410.357c-1.867-0.907-3.655-1.793-5.362-2.657c0.46,1.415,0.957,2.776,1.489,4.086 C1007.845,1411.418,1009.141,1410.93,1010.427,1410.357z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1008.948,1441.281c-0.072-1.9-0.73-4.102-1.88-6.513c-0.186,0.212-0.373,0.43-0.56,0.644 C1007.261,1437.342,1008.075,1439.298,1008.948,1441.281z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M879.314,1344.269c-0.051,0.174-0.101,0.349-0.152,0.521c8.942,4.044,6.89,4.563-0.925,2.929 c-0.647,1.942-1.333,3.786-2.051,5.516c0.806-0.165,1.598-0.335,2.365-0.516c3.217-1.881,6.089-3.638,8.66-5.284 c-0.609-2.776-1.228-5.605-1.857-8.486C883.411,1340.714,881.397,1342.489,879.314,1344.269z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M936.302,1423.012c-0.723,1.05-1.431,2.032-2.128,2.951c1.649,0.799,3.266,1.575,4.852,2.326 c0.531-0.38,1.05-0.761,1.559-1.145C939.18,1425.86,937.755,1424.48,936.302,1423.012z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M891.676,1388.285c-4.459,3.605-8.957,6.231-13.421,7.999c1.23,0.697,2.445,1.382,3.654,2.063 c5.596,0.104,11.376-0.051,17.198-0.52c-0.98-3.584-1.966-7.394-2.964-11.42C894.679,1387.021,893.191,1387.647,891.676,1388.285 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M934.174,1425.963c-7.944-3.85-16.632-8.266-26.109-13.294c-1.468,0.115-2.925,0.216-4.368,0.3 C912.005,1437.134,920.699,1443.741,934.174,1425.963z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M976.787,1428.868c-2.933,2.842-5.731,4.891-8.438,6.241c8.547,4.852,16.238,7.501,21.991,7.849 C985.197,1438.089,980.7,1433.397,976.787,1428.868z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M945.649,1431.372c-0.027-0.02-0.054-0.041-0.081-0.061c-0.001,0.008-0.002,0.015-0.004,0.022 C945.592,1431.346,945.62,1431.359,945.649,1431.372z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M895.728,1384.728c-0.611,0.581-1.223,1.144-1.836,1.687c0.692-0.242,1.393-0.44,2.1-0.609 C895.905,1385.45,895.816,1385.088,895.728,1384.728z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1004.734,1430.611c0.086,0.246,0.171,0.492,0.258,0.739c0.029-0.063,0.058-0.126,0.087-0.189 C1004.966,1430.979,1004.852,1430.796,1004.734,1430.611z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M959.668,980.747c0.622-2.537,1.192-5.129,1.715-7.769c-0.494-0.603-0.989-1.197-1.484-1.783 c-0.516,0.326-1.042,0.654-1.573,0.985c-1.024,2.562-2.263,5.236-3.734,8.026C956.259,980.385,957.949,980.566,959.668,980.747z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M893.111,978.375c3.05-0.917,6.508-1.472,10.381-1.741c-4.138-1.528-8.17-3.026-12.09-4.491 c0.303,2.053,0.612,4.067,0.926,6.041C892.589,978.247,892.852,978.311,893.111,978.375z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M903.917,976.607c7.326-0.468,16.102,0.051,26.325,1.017c-14.5-5.613-27.756-9.431-39.753-11.898 c0.163,1.191,0.328,2.367,0.494,3.533C894.944,971.447,899.251,973.893,903.917,976.607z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M879.775,967.772c1.103,2.741,2.384,5.39,3.837,7.914c0.486-1.939,0.985-3.907,1.497-5.903 C883.309,969.107,881.527,968.435,879.775,967.772z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M938.782,973.153c-1.929-1.136-3.824-2.395-5.577-3.454c1.19,1.824,2.385,3.665,3.583,5.521 C937.443,974.521,938.108,973.832,938.782,973.153z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M886.364,964.923c-1.719-0.317-3.412-0.608-5.077-0.87c1.491,0.775,3.046,1.597,4.663,2.465 C886.087,965.988,886.225,965.457,886.364,964.923z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M919.775,1011.876c3.755-0.591,7.477-1.194,11.156-1.807c-2.386-0.802-4.796-1.653-7.22-2.548 c-1.913,0.946-3.761,1.81-5.551,2.6C918.704,1010.706,919.249,1011.293,919.775,1011.876z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M943.012,944.401c1.288,1.45,2.605,2.754,3.959,3.881c-0.329-1.412-0.7-2.79-1.096-4.146 C944.941,944.256,943.987,944.345,943.012,944.401z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M934.968,948.317c4.361,2.978,9.003,6.648,13.754,11.091c-0.3-3.521-0.823-6.878-1.526-10.091 C943.039,949.048,938.963,948.713,934.968,948.317z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M948.83,960.834c-3.626-1.148-6.99-2.279-10.09-3.385c2.542,1.392,5.041,2.933,7.513,4.704 c0.887,0.636,1.781,1.317,2.641,2.022c0.03-0.023,0.059-0.047,0.089-0.07C948.953,963,948.902,961.909,948.83,960.834z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M948.216,978.251c-0.601,0.35-1.213,0.704-1.829,1.059c0.549,0.06,1.101,0.12,1.657,0.181 C948.104,979.077,948.162,978.663,948.216,978.251z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M952.563,994.775c0.217-0.354,0.43-0.706,0.651-1.061c0.829,0.29,1.635,0.583,2.446,0.875 c0.731-2.184,1.434-4.408,2.095-6.684c-3.088,2.182-6.127,4.053-9.11,5.633C949.978,993.954,951.29,994.367,952.563,994.775z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M834.469,266.526c1.836,1.587,3.813,3.168,5.934,4.736c0.037-0.01,0.073-0.019,0.11-0.029 c-1.778-1.569-3.6-3.285-5.464-5.147C834.857,266.232,834.655,266.386,834.469,266.526z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M834.853,265.889c-0.707-0.709-1.42-1.439-2.139-2.191c-0.262,0.178-0.525,0.361-0.787,0.544 c0.742,0.69,1.502,1.379,2.293,2.067C834.425,266.171,834.637,266.031,834.853,265.889z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1014.219,212.492c-2.816,1.247-5.434,2.497-7.858,3.749c1.656,2.088,3.103,4.025,4.381,5.85 c1.751-1.88,3.472-3.7,5.16-5.453C1015.311,215.282,1014.754,213.897,1014.219,212.492z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M855.693,250.527c-4.985,2.729-9.553,4.794-13.718,6.306c0.49,0.171,0.987,0.348,1.472,0.513 c5.386-2.808,10.375-5.004,14.779-7.483C857.393,250.083,856.548,250.304,855.693,250.527z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M946.975,205.189c-3.894,1.604-7.933,3.26-12.101,4.961C941.247,226.582,954.244,231.192,946.975,205.189 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M934.576,209.361c4.517-2.124,8.46-4.086,11.899-5.902c-0.799-2.676-1.796-5.648-3.02-8.937 c-2.119,0.291-4.235,0.575-6.347,0.854c-0.502,4.152-1.589,7.992-3.378,11.448C933.993,207.696,934.276,208.542,934.576,209.361z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M858.215,227.922c1.766-3.46,3.21-6.888,4.345-10.258c-3.201,1.96-6.542,3.976-10.031,6.054 c0.671,1.299,1.322,2.644,1.958,4.031C855.767,227.759,857.009,227.817,858.215,227.922z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M868.545,230.22c1.899,0.719,3.667,1.578,5.303,2.557c0.892-2.334,1.629-4.968,2.197-7.964 c-0.262-0.686-0.537-1.464-0.826-2.329C873.709,225.037,871.411,227.644,868.545,230.22z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M859.05,248.624c0.679-0.165,1.379-0.331,2.072-0.496c0.339-0.218,0.672-0.439,1.002-0.664 c-0.066-0.19-0.132-0.378-0.198-0.567C860.953,247.498,859.996,248.071,859.05,248.624z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M906.391,199.001c-1.46,0.15-2.912,0.294-4.358,0.435c-2.439,2.194-4.966,4.365-7.569,6.524 c1.619,4.343,2.99,8.427,4.113,12.253c2.934-2.719,5.948-5.604,9.04-8.654C907.184,205.97,906.775,202.448,906.391,199.001z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M831.718,234.327c-0.277,0.68-0.558,1.349-0.839,2.018c1.258-0.721,2.503-1.436,3.731-2.144 C833.649,234.24,832.685,234.282,831.718,234.327z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M843.073,260.788c-1.969,1.156-3.765,2.252-5.377,3.269c-0.96,0.745-1.834,1.414-2.646,2.029 c1.864,1.861,3.686,3.578,5.464,5.147c0.482-0.127,0.966-0.254,1.459-0.379C842.308,267.577,842.674,264.223,843.073,260.788z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M834.853,265.889c0.873-0.575,1.819-1.186,2.844-1.832c1.62-1.257,3.447-2.699,5.501-4.349 c-0.043,0.364-0.082,0.718-0.124,1.081c1.246-0.732,2.564-1.488,3.945-2.262c-1.176-0.378-2.363-0.768-3.572-1.18 c-3.433,1.79-7.027,3.829-10.733,6.352C833.433,264.45,834.146,265.18,834.853,265.889z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1339.689,646.277c-0.645-4.19-2.742-8.45-6.635-12.76c-3.633,0.209-7.46,0.326-11.464,0.357 c-0.065,0.036-0.129,0.072-0.195,0.108c0.115,0.587,0.211,1.145,0.267,1.652c0.371,3.306,0.656,6.813,0.853,10.457 c4.007,0.808,9.277,1.568,16.078,2.284C1338.947,647.693,1339.313,646.992,1339.689,646.277z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1170.582,598.216c1.04,3.646,2.156,6.925,3.341,9.863c2.479-0.702,4.978-1.713,7.518-2.957 c-1.326-2.14-2.651-4.339-3.974-6.6c-1.424-0.408-2.849-0.833-4.274-1.275C1172.334,597.556,1171.464,597.879,1170.582,598.216z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1358.028,609.824c0.667,0.033,1.337,0.073,2.01,0.123c1.137-1.949,2.28-3.897,3.423-5.837 C1361.99,605.972,1360.166,607.878,1358.028,609.824z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1334.379,611.725c3.676-0.727,7.513-1.312,11.503-1.659c5.687-2.415,11.791-4.83,18.339-7.245 c0.894-1.513,1.787-3.019,2.676-4.513c-3.608-2.307-7.169-4.24-10.655-5.845c-3.504,0.523-7.252,0.946-11.255,1.299 c-2.229,2.118-4.31,4.495-6.474,6.531c-0.069,0.065-0.147,0.135-0.221,0.202c0.324,1.068,0.648,2.142,0.971,3.237 c-1.289-0.297-2.558-0.594-3.818-0.892c-0.759,0.589-1.581,1.213-2.441,1.863 C1334.675,607.588,1335.027,609.874,1334.379,611.725z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1248.087,637.976c2.194,4.063,4.506,8.208,7.032,12.351c2.267-8.957,3.491-15.97,4.037-21.354 c-2.954,2.332-6.009,4.64-9.147,6.916C1249.613,636.771,1248.962,637.455,1248.087,637.976z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1324.811,616.7c0.534,0.248,1.059,0.498,1.575,0.749c4.097-1.327,7.067-3.079,7.993-5.723 c-4.061,0.803-7.925,1.779-11.572,2.801C1323.624,615.263,1324.286,615.988,1324.811,616.7z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1315.497,745.277c-0.171-1.833-0.339-3.746-0.503-5.745c-0.38,0.434-0.767,0.875-1.149,1.311 C1314.412,742.317,1314.963,743.795,1315.497,745.277z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1311.352,729.592c-0.739-0.782-1.466-1.562-2.188-2.341c-0.179,0.366-0.369,0.721-0.552,1.082 c0.559,1.243,1.109,2.491,1.65,3.745C1310.626,731.245,1310.989,730.413,1311.352,729.592z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1324.271,797.432c-0.928,0.045-1.85,0.087-2.768,0.127c-0.523,5.773-0.883,11.707-1.045,17.825 C1322.547,809.651,1323.766,803.633,1324.271,797.432z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1272.683,673.529c1.591,1.645,3.257,3.26,5.004,4.839c0.498-0.316,0.994-0.629,1.487-0.939 c-0.569-0.742-1.168-1.576-1.827-2.496C1275.769,674.39,1274.215,673.926,1272.683,673.529z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1266.675,662.194c-2.492-2.457-5.477-5.112-9.095-7.943c2.012,3.113,4.165,6.209,6.497,9.254 C1264.942,663.068,1265.809,662.631,1266.675,662.194z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1248.164,625.859c1.684-0.983,3.216-1.956,4.603-2.916c0.988-0.874,1.985-1.777,2.99-2.7 c-1.13-6.308,2.101-9.135,3.318-3.107c0.99-0.946,1.99-1.921,2.996-2.916c3.857-5.492,3.526-10.236,2.12-13.717 c-1.803-0.526-3.633-1.052-5.513-1.578c1.784,0.313,3.524,0.627,5.241,0.942c-0.403-0.878-0.868-1.664-1.336-2.351 c-0.02-0.022-0.041-0.045-0.061-0.067c-2.555,0.139-5.157,0.289-7.802,0.45c-5.427,4.572-10.666,8.994-15.719,13.261 c-0.001,0.003-0.001,0.005-0.002,0.008C1243.346,617.241,1246.333,622.056,1248.164,625.859z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1246.744,598.412c-1.759,0.119-3.54,0.245-5.337,0.375c-0.318,1.896-0.648,3.737-0.988,5.518 C1242.526,602.379,1244.637,600.406,1246.744,598.412z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1358.751,650.062c-0.879,0.394-1.751,0.785-2.609,1.171c0.333,1.05,0.653,2.119,0.965,3.207 c2.031-0.877,4.15-1.732,6.322-2.551c0.556-0.481,1.112-0.955,1.667-1.418C1362.898,650.337,1360.785,650.2,1358.751,650.062z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1346.892,632.861c0.032-0.013,0.063-0.026,0.095-0.039c0.127-0.229,0.253-0.456,0.381-0.686 c-0.321,0.045-0.636,0.092-0.96,0.135C1346.571,632.466,1346.734,632.663,1346.892,632.861z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1295.461,683.878c2.785,1.766,5.613,3.731,8.479,5.9c0.358-0.23,0.715-0.46,1.072-0.692 c0.575-2.401,1.088-4.82,1.538-7.256C1302.994,682.263,1299.284,682.945,1295.461,683.878z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1284.429,612.381c-1.643-0.462-3.267-1.077-4.859-1.813c-5.789,6.137-12.648,12.259-20.187,18.225 c4.299,6.466,12.848,13.806,28.776,19.388c3.733-4.937,8.743-9.856,15.201-14.761c-6.373-0.347-13.109-0.883-20.271-1.655 c3.674-5.647,12.656-8.157,22.114-9.982c-0.128-0.638-0.265-1.276-0.4-1.914C1294.009,622.758,1286.898,622.746,1284.429,612.381 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1372.988,746.251c-0.048-0.071-0.094-0.139-0.142-0.21c-0.125,0.826-0.318,2.105-0.603,3.843 c0.19,0.205,0.378,0.415,0.567,0.623C1372.871,748.611,1372.94,747.188,1372.988,746.251z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1266.422,722.12c4.502,10.411,6.441,19.493,6.729,27.612c0.514,0.017,1.031,0.031,1.554,0.041 c2.688-3.326,5.246-6.753,7.662-10.275c-1.514-2.908-2.897-5.833-4.198-8.768C1274.252,727.71,1270.331,724.849,1266.422,722.12z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1315.555,745.893c-1.869,0.317-3.722,0.62-5.554,0.905c1.065,0.386,2.13,0.801,3.194,1.245 c0.792-0.464,1.605-0.925,2.434-1.383C1315.604,746.406,1315.579,746.15,1315.555,745.893z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1442.082,708.747c-0.628,0.493-1.241,1.005-1.842,1.532c0.302,0.376,0.585,0.75,0.856,1.123 C1441.425,710.543,1441.755,709.658,1442.082,708.747z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1361.146,799.545c0.9-3.391,1.733-6.615,2.505-9.68c-0.733-0.123-1.575-0.295-2.535-0.519 c-2.166,0.993-4.279,1.858-6.345,2.615c2.035,6.849,2.3,12.982-1.958,14.682c-3.574,1.426-7.644-1.395-11.801-6.087 c3.166,4.615,6.488,9.332,9.983,14.149C1354.475,809.458,1357.855,804.412,1361.146,799.545z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1240.498,711.908c-5.089,16.774-1.353,26.944,8.391,32.46c0.187-0.31,0.36-0.612,0.549-0.924 c-1.109-0.524-2.22-1.049-3.346-1.583c1.221,0.382,2.413,0.784,3.578,1.207c4.234-6.94,9.208-14.33,14.971-22.182 c-6.542-4.507-13.043-8.664-19.432-12.615C1243.629,709.445,1242.058,710.657,1240.498,711.908z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1283.216,702.421c-2.791-4.667-5.384-8.573-7.907-11.675c-3.689,1.605-7.413,3.417-11.141,5.431 c5.123,11.425,8.914,23.068,14.002,34.553c2.189,1.688,4.377,3.425,6.562,5.219c2.595-4.006,5.009-8.125,7.228-12.345 c-3.545-2.71-8.843-7.555-18.509-15.18C1276.422,706.521,1279.722,704.517,1283.216,702.421z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1432.487,718.691c-0.135,0.176-0.27,0.354-0.404,0.531c0.122-0.027,0.242-0.053,0.363-0.079 C1432.459,718.993,1432.474,718.84,1432.487,718.691z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1263.008,682.979c-0.493-0.267-0.982-0.509-1.469-0.739c-1.326,0.016-2.693,0.256-4.113,0.726 c1.235,2.108,2.386,4.229,3.471,6.36c2.586-1.712,5.111-3.381,7.575-4.998c-2.059-1.291-4.151-2.005-6.345-2.089 C1262.423,682.481,1262.72,682.724,1263.008,682.979z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1363.082,741.07c2.2,0.18,4.269,0.407,6.187,0.689c-1.961-1.999-3.724-4.03-5.297-6.092 c-1.955,0.467-3.909,0.929-5.861,1.387C1359.75,738.302,1361.413,739.641,1363.082,741.07z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1302.844,738.033c-1.432,2.042-2.945,3.989-4.561,5.801c2.131,0.273,4.315,0.727,6.523,1.319 c0.277-0.692,0.554-1.378,0.831-2.062C1304.681,741.37,1303.754,739.689,1302.844,738.033z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1116.96,271.546c0.718,1.123,1.388,2.228,2.002,3.31c1.618-2.339,3.244-4.669,4.885-6.979 C1121.504,269.052,1119.207,270.276,1116.96,271.546z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1127.303,266.196c-0.065-0.952-0.132-1.903-0.207-2.84c-1.09,1.497-2.173,3.005-3.25,4.522 C1124.989,267.305,1126.142,266.746,1127.303,266.196z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1245.034,566.209c1.425-1.466,2.832-2.896,4.219-4.287c-1.327-0.015-2.652-0.031-3.974-0.048 C1245.205,563.34,1245.123,564.783,1245.034,566.209z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1214.263,557.259c-3.283-1.297-7.126-2.978-11.553-5.09c-2.368,1.49-5.061,3.183-8.131,5.089 c1.459,1.661,2.875,3.279,4.268,4.875c4.865-0.331,10.293-0.479,16.1-0.524C1214.65,560.103,1214.425,558.654,1214.263,557.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1212.711,545.985c0.542,0.321,1.066,0.636,1.583,0.95c0.098-0.697,0.214-1.377,0.352-2.036 C1214.056,545.214,1213.413,545.576,1212.711,545.985z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1338.292,600.495c-0.751,0.684-1.727,1.476-2.847,2.345c1.26,0.298,2.529,0.595,3.818,0.892 C1338.94,602.637,1338.616,601.563,1338.292,600.495z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1138.809,589.648c-1.203-1.384-2.41-2.901-3.614-4.564c1.059,1.653,2.106,3.207,3.141,4.666 C1138.495,589.716,1138.65,589.682,1138.809,589.648z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1214.912,543.738c0.8-3.194,2.055-5.929,3.614-8.271c-2.043-0.722-4.181-1.462-6.396-2.216 c-0.281,3.745-1.766,7.067-4.214,10.006c0.266,0.146,0.541,0.294,0.802,0.439 C1210.799,543.607,1212.872,543.629,1214.912,543.738z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1145.137,527.734c-0.143-0.396-0.287-0.786-0.43-1.184c-0.008,0.421-0.02,0.841-0.032,1.262 C1144.83,527.786,1144.982,527.76,1145.137,527.734z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1144.234,513.587c0.125,1.334,0.222,2.664,0.3,3.99c3.772,1.141,7.429,2.303,10.972,3.48 c0.253-1.472,0.515-2.956,0.787-4.457C1152.296,515.565,1148.268,514.558,1144.234,513.587z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1142.273,548.08c1.334-0.152,2.69-0.352,4.061-0.581c-1.01-1.5-2.029-3.136-3.056-4.918 C1142.987,544.421,1142.648,546.253,1142.273,548.08z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1152.073,604.294c-0.238-1.542-0.452-3.116-0.648-4.716c-3.971-1.726-8.192-4.885-12.452-9.743 c-0.092,0.142-0.183,0.283-0.274,0.425C1143.346,596.725,1147.77,601.277,1152.073,604.294z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1161.537,523.11c1.111,0.388,2.205,0.778,3.29,1.168c3.986-0.737,7.831-1.47,11.52-2.199 c-4.887-1.402-9.89-2.789-14.96-4.139C1161.432,519.686,1161.482,521.411,1161.537,523.11z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1352.68,907.438c0.795-0.15,1.568-0.301,2.315-0.453c-1.967-0.915-3.978-1.976-6.034-3.22 c-0.263,0.216-0.526,0.432-0.791,0.649c0.22,0.63,0.423,1.233,0.613,1.818C1350.053,906.665,1351.352,907.067,1352.68,907.438z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1251.693,867.093c-0.586,0.284-1.148,0.585-1.713,0.886c-3.044,2.953-6.298,5.603-9.72,7.902 c13.825,5.24,29.502,10.396,47.111,14.818c0.849-0.606,1.697-1.213,2.543-1.822c-4.839-4.735-9.454-11.307-13.668-20.115 c-1.334-1.903-2.65-4.306-3.934-7.244C1265.297,862.568,1258.321,863.879,1251.693,867.093z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1284.508,939.831c-0.832-1.436-1.595-2.803-2.292-4.103c-1.913,1.239-3.794,2.44-5.645,3.606 c0.963,0.817,1.91,1.626,2.845,2.429C1281.147,941.134,1282.843,940.488,1284.508,939.831z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1271.645,942.399c-2.276,1.397-4.501,2.737-6.676,4.022c0.977-0.275,1.945-0.558,2.909-0.845 C1269.152,944.547,1270.411,943.486,1271.645,942.399z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1332.539,905.383c2.624,1.457,5.069,2.817,7.348,4.085c0.851-0.114,1.682-0.229,2.497-0.345 c1.365-1.103,2.706-2.192,4.02-3.264c-4.297-1.217-8.545-2.647-12.715-4.266C1333.379,902.754,1333.001,904.01,1332.539,905.383z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1276.219,898.453c3.45,0.956,6.89,3.276,10.209,7.435c1.267,1.212,2.18,2.537,2.769,3.954 c1.266,2.044,2.509,4.392,3.721,7.067c5.667,1.661,12.758,4.418,21.174,8.061c3.986-2.577,7.224-5.023,9.576-7.182 c2.327-4.539,3.419-9.23,2.495-13.781c-1.887-1.596-3.719-3.506-5.474-5.811c1.541,1.507,3.36,3.292,5.329,5.177 c-0.436-1.775-1.184-3.527-2.294-5.238c-0.65-0.104-1.296-0.21-1.942-0.315c-9.198,2.461-18.887,1.393-27.976-5.56 c-2.172-0.509-4.317-1.029-6.434-1.561C1283.681,893.332,1279.958,895.929,1276.219,898.453z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1334.236,899.254c3.829,2.452,8.01,4.563,12.575,6.273c0.457-0.373,0.908-0.743,1.359-1.112 c-0.166-0.476-0.344-0.97-0.527-1.473c-4.238-2.701-8.661-6.188-13.268-10.72c-0.028,0.018-0.057,0.035-0.086,0.052 C1334.843,893.834,1334.878,896.079,1334.236,899.254z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1282.157,935.619c-0.464-0.868-0.891-1.699-1.294-2.508c-1.331,1.565-2.768,3.116-4.279,4.639 C1278.386,937.159,1280.245,936.451,1282.157,935.619z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1275.909,860.993c-0.957,0.138-1.915,0.276-2.872,0.417c1.041,2.605,2.111,5.055,3.209,7.351 c3.969,5.663,8.093,6.954,11.994,5.147C1283.61,869.747,1279.463,865.41,1275.909,860.993z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1237.784,855.957c-0.367,0.579-0.737,1.169-1.107,1.759c-0.049,0.568-0.1,1.123-0.152,1.672 c2.444-1.311,4.999-2.48,7.651-3.51C1241.971,855.818,1239.842,855.845,1237.784,855.957z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1348.882,906.531c0.168,0.522,0.321,1.02,0.465,1.506c1.127-0.193,2.213-0.388,3.256-0.584 C1351.359,907.164,1350.119,906.856,1348.882,906.531z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1258.491,948.126c-0.528-0.638-1.045-1.255-1.552-1.854c-0.277,0.792-0.585,1.606-0.923,2.441 C1256.845,948.522,1257.67,948.327,1258.491,948.126z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1261.639,927.084c0.448,4.968-0.155,9.421-1.85,13.217c4.515,0.175,9.671-0.388,15.418-2.117 C1270.972,934.614,1266.461,930.916,1261.639,927.084z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1268.12,849.488c-0.36-1.271-0.716-2.593-1.067-3.974c-0.208-0.159-0.42-0.326-0.627-0.483 c-0.088,0.181-0.177,0.361-0.265,0.541C1266.756,846.876,1267.405,848.181,1268.12,849.488z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1293.477,801.406c-0.25,0.083-0.5,0.169-0.75,0.257c0.203,3.284,0.463,6.7,0.797,10.207 c0.289,0.038,0.572,0.07,0.852,0.1c0.292-0.713,0.605-1.447,0.933-2.194c-0.086-2.372-0.262-4.79-0.541-7.238 C1294.337,802.16,1293.906,801.783,1293.477,801.406z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1267.045,843.332c0.039,0.046,0.078,0.092,0.117,0.139c0.163-0.354,0.323-0.709,0.48-1.066 c-0.292-0.037-0.584-0.072-0.877-0.114C1266.859,842.636,1266.951,842.989,1267.045,843.332z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1271.33,832.451c0.177-0.587,0.347-1.177,0.511-1.769c-1.213-0.205-2.413-0.415-3.604-0.626 C1269.25,830.851,1270.278,831.649,1271.33,832.451z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1353.416,907.646c-0.248-0.067-0.49-0.14-0.736-0.209c-1.328-0.371-2.627-0.773-3.896-1.206 c0.032,0.099,0.067,0.201,0.098,0.299c1.237,0.325,2.477,0.634,3.721,0.922C1352.874,907.515,1353.144,907.585,1353.416,907.646z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1291.457,839.032c-3.194,8.892-7.528,11.779-9.804,3.481c-1.498,0.183-3.072,0.303-4.701,0.353 c-1.281,0.646-2.637,1.089-4.063,1.331c1.834,1.49,3.538,2.986,5.099,4.488c8.641-0.402,16.687,0.83,20.776,5.615 c-4.179-7.438-5.83-12.541-6.081-15.406C1292.274,838.94,1291.865,838.984,1291.457,839.032z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1273.621,822.785c0.643-3.669,1.04-7.403,1.172-11.173c-2.489,1.921-5.039,4.122-7.659,6.636 C1269.261,819.72,1271.424,821.233,1273.621,822.785z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1296.152,838.538c1.751,3.029,3.516,8.897,3.61,17.496c0.191,0.326,0.39,0.659,0.591,0.993 c0.459-1.166,0.9-2.375,1.323-3.618c-1.63-4.931-2.974-9.963-4.089-14.999C1297.107,838.451,1296.629,838.493,1296.152,838.538z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1289.748,811.229c-0.457,8.608-1.765,15.353-3.765,20.454c0.672,0.492,1.337,0.977,2.015,1.476 c-0.837-0.115-1.649-0.237-2.477-0.354c-1.227,2.831-2.683,5.111-4.343,6.872c0.325,0.229,0.648,0.459,0.976,0.689 c3.061-0.525,6.166-0.965,9.303-1.333c0.471-1.311,0.918-2.743,1.329-4.298c-2.967-3.964-3.087-10.608,0.915-21.065 c-0.061-0.602-0.121-1.202-0.177-1.799C1292.34,811.716,1291.077,811.498,1289.748,811.229z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1294.768,802.538c0.926,0.811,1.855,1.621,2.791,2.431c0.855-1.725,1.792-3.527,2.82-5.412 c-1.917,0.397-3.843,0.884-5.787,1.49C1294.657,801.545,1294.711,802.041,1294.768,802.538z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1270.202,844.421c-0.766,0.004-1.548-0.04-2.345-0.132c1.364,1.583,2.856,3.204,4.482,4.864 c0.768-0.089,1.537-0.169,2.305-0.238C1273.117,847.426,1271.638,845.927,1270.202,844.421z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1299.761,856.033c-0.182-0.31-0.355-0.613-0.529-0.915c-4.171,1.993-8.486,3.237-12.868,4.146 c0.044,0.083,0.094,0.165,0.137,0.248c-0.09-0.073-0.176-0.147-0.266-0.221c-0.687,0.141-1.376,0.273-2.065,0.4 c1.111,0.982,2.235,1.986,3.376,3.016c-1.257-1.003-2.469-1.992-3.639-2.968c-2.653,0.481-5.324,0.87-7.997,1.255 c3.554,4.417,7.7,8.754,12.331,12.915c4.265-1.976,8.263-7.658,11.504-15.389C1299.766,857.666,1299.77,856.839,1299.761,856.033 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1266.104,842.188c0.064,0.079,0.13,0.159,0.195,0.239c-0.017-0.073-0.034-0.143-0.052-0.216 C1266.2,842.203,1266.152,842.195,1266.104,842.188z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1268.881,849.616c0.96-0.145,1.926-0.279,2.896-0.398c-1.343-1.078-2.652-2.103-3.944-3.102 C1268.178,847.304,1268.527,848.474,1268.881,849.616z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1334.204,899.422c0.093,0.097,0.179,0.191,0.272,0.289c-0.107-0.014-0.212-0.03-0.319-0.044 c-0.131,0.607-0.29,1.252-0.469,1.927c4.17,1.619,8.418,3.049,12.715,4.266c0.135-0.11,0.274-0.223,0.409-0.333 c-4.566-1.71-8.747-3.821-12.575-6.273C1334.225,899.311,1334.216,899.364,1334.204,899.422z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1222.334,138.584c-0.737-0.553-1.467-1.099-2.19-1.634c-0.257,0.452-0.513,0.902-0.773,1.36 C1220.339,138.39,1221.326,138.48,1222.334,138.584z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1226.637,137.664c-0.081-0.049-0.161-0.1-0.242-0.15c0.006,0.109,0.013,0.214,0.019,0.323 C1226.488,137.78,1226.563,137.723,1226.637,137.664z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M883.855,626.285c0.059,0.133,0.12,0.27,0.179,0.403c0.139-0.098,0.278-0.193,0.417-0.291 C884.25,626.361,884.051,626.325,883.855,626.285z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M881.687,628.367c-0.004-0.874-0.009-1.746-0.016-2.605c-0.656-0.184-1.298-0.387-1.927-0.614 c-1.695,1.141-3.379,2.268-5.046,3.378c2.018,0.114,4.083,0.253,6.188,0.414C881.153,628.748,881.42,628.559,881.687,628.367z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M889.787,626.959c-0.475-0.019-0.939-0.046-1.398-0.079c-1.161,0.499-2.351,1.03-3.565,1.589 c0.123,0.277,0.243,0.548,0.367,0.827c1.737,0.153,3.5,0.319,5.287,0.499C890.291,628.902,890.06,627.956,889.787,626.959z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M949.451,846.277c-0.535,0.36-1.082,0.681-1.642,0.955c0.245,0.347,0.49,0.695,0.736,1.042 C948.886,847.611,949.189,846.946,949.451,846.277z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M962.001,852.979c-0.948-3.112-2.063-6.179-3.33-9.198c-0.385,1.956-0.745,3.858-1.076,5.7 C958.951,850.918,960.419,852.1,962.001,852.979z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M967.662,722.217c-2.612-1.957-5.143-3.787-7.596-5.497c-0.654,1.424-1.334,2.856-2.037,4.29 c-0.157,2.641-0.328,5.342-0.51,8.095c3.407,0.859,7.032,1.723,10.909,2.591c-2.323,1.293-4.599,2.53-6.84,3.725 c1.991,1.12,3.988,2.264,5.989,3.424C970.036,733.915,970.274,728.399,967.662,722.217z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M957.32,851.035c-0.454,2.606-0.853,5.095-1.198,7.472c0.789,1.024,1.581,2.045,2.38,3.058 c1.893,0.072,3.793,0.152,5.702,0.24c-0.573-2.955-1.307-5.874-2.182-8.755C960.515,852.434,958.952,851.767,957.32,851.035z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M862.137,713.452c0.889-0.491,1.818-0.897,2.78-1.213c-0.272-0.532-0.546-1.07-0.82-1.607 c-0.109-0.169-0.218-0.338-0.325-0.507c-3.242-0.054-6.356-0.119-9.322-0.188c0.092,0.689,0.17,1.393,0.233,2.112 c1.566-0.387,3.15-0.759,4.776-1.1C860.383,711.811,861.271,712.641,862.137,713.452z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M844.568,1444.31c0.911,0.63,1.827,1.245,2.749,1.844c-0.343-0.908-0.702-1.813-1.073-2.714 C845.682,1443.732,845.127,1444.019,844.568,1444.31z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M945.563,1431.333c0.001-0.008,0.002-0.015,0.004-0.022c-1.639-1.23-3.296-2.627-4.982-4.167 c-0.509,0.383-1.029,0.765-1.559,1.145c-6.624,4.742-14.891,9.216-24.312,13.079c9.194,5.966,9.32,3.775-8.007,3.028 c-2.054,0.719-4.144,1.411-6.278,2.067c7.395,4.127,13.209,10.318,17.335,17.478c0.28,0.235,0.56,0.469,0.838,0.709 c3.678,1.219,7.148,2.459,10.372,3.705c6.025-11.664,11.039-21.268,15.115-29.198 C944.658,1436.379,945.145,1433.763,945.563,1431.333z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M957.463,1475.632c0.283-0.075,0.573-0.145,0.861-0.217c2.076-1.951,4.205-3.957,6.4-6.036 c0.991,0.858,1.949,1.675,2.891,2.473c-0.222-2.488-0.444-5.047-0.666-7.68C957.354,1465.614,951.341,1468.625,957.463,1475.632z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1045.888,1463.74c1.711,1.602,3.42,3.115,4.784,4.178c0.087-1.074,0.169-2.139,0.237-3.18 C1049.233,1464.391,1047.558,1464.06,1045.888,1463.74z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M999.15,1462.011c-0.106,0.722-0.219,1.451-0.334,2.183c2.391-1.29,4.757-2.562,7.095-3.818 c0.52-0.887,1.188-1.604,2.042-2.106c-0.018-0.014-0.037-0.029-0.054-0.043c-1.272-0.135-2.525-0.265-3.759-0.389 C1007.358,1460.328,1004.644,1461.422,999.15,1462.011z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1000.011,1455.418c-0.076,0.662-0.152,1.324-0.236,1.994c1.423,0.134,2.881,0.276,4.365,0.426 C1003.246,1457.146,1001.888,1456.344,1000.011,1455.418z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M981.274,1463.338c-0.034-0.126-0.072-0.248-0.108-0.373c-0.115,0.005-0.229,0.011-0.343,0.016 C980.976,1463.103,981.122,1463.218,981.274,1463.338z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M975.974,1455.397c-1.605-0.874-3.558-1.216-5.908-0.941c0.168,0.134,0.328,0.26,0.495,0.393 C972.016,1455.031,973.834,1455.21,975.974,1455.397z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M998.641,1465.271c-0.455,2.807-0.971,5.678-1.562,8.619c1.139-0.923,2.33-1.804,3.568-2.633 c1.216-1.008,2.397-2.073,3.554-3.18c0.058-1.219,0.163-2.387,0.341-3.475C1002.672,1464.826,1000.707,1465.049,998.641,1465.271 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1050.06,681.543c0.019-0.018,0.039-0.037,0.058-0.055c-0.034,0.002-0.069,0.005-0.102,0.007 C1050.031,681.511,1050.046,681.527,1050.06,681.543z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1013.866,714.358c-1.708-0.617-3.432-1.224-5.178-1.817c-0.697,5.723-1.435,12.239-2.221,19.669 c1.431,1.834,3.086,3.356,5.226,4.254c1.338,0.564,3.091,0.819,5.016,0.895C1011.65,730.753,1008.236,722.401,1013.866,714.358z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1048.528,675.24c-0.973-1.304-1.938-2.552-2.897-3.746c-0.609,1.098-1.156,2.172-1.636,3.213 c0.923,1.096,1.86,2.178,2.805,3.247C1047.131,677.179,1047.695,676.277,1048.528,675.24z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1018.34,693.852c-1.952,1.651-4.517,2.963-7.715,4.023c-0.348,2.393-0.706,5.001-1.078,7.844 c4.764,0.002,9.341,0.166,13.743,0.471c4.386-2.599,10.146-5.076,17.559-7.351 C1032.585,697.534,1025.117,695.857,1018.34,693.852z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1048.189,696.79c-9.028-3.631-15.791-6.665-20.659-9.123c4.974,3.33,10.075,6.852,15.308,10.577 C1044.541,697.75,1046.317,697.264,1048.189,696.79z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1068.089,715.687c-0.037,0-0.076,0-0.113,0c0.046,0.018,0.093,0.035,0.138,0.053 C1068.105,715.722,1068.097,715.704,1068.089,715.687z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1054.942,686.577c-2.488,0.402-5.01,0.629-7.558,0.666c-6.763,1.333-7.057-4.582-3.39-12.537 c-1.13-1.342-2.237-2.703-3.319-4.075c-4.229-0.517-8.519-0.874-12.842-1.058c-1.559,2.585-3.388,5.011-5.47,7.284 c0.226,1.139,0.397,2.229,0.505,3.262c8.418,1.74,24.818,8.177,39.542,18.835c-0.231-1.19-0.416-2.357-0.561-3.505 c-1.114-1.855-2.219-3.661-3.315-5.416C1057.344,688.923,1056.145,687.77,1054.942,686.577z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1220.753,1455.436c0.448,0.378,0.912,0.771,1.385,1.172c1.096-2.28,1.925-4.276,2.515-6.01 C1223.477,1452.181,1222.182,1453.793,1220.753,1455.436z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1227.657,1446.209c-0.227,0.361-0.459,0.724-0.698,1.089c0.611-0.273,1.237-0.555,1.875-0.845 C1228.441,1446.366,1228.049,1446.284,1227.657,1446.209z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1178.613,1507.938c0.001-0.081,0.002-0.165,0.003-0.245c-6.422,2.641-12.407,1.081-17.872-6.224 c-3.741-18.336-6.832-32.209-9.582-42.424c-1.923-0.57-3.848-1.109-5.771-1.614c-5.042,2.331-9.903,4.594-14.554,6.785 c-2.117,3.198-4.253,6.266-6.398,9.179c-1.315,4.388-2.833,9.06-4.56,14.029c7.99,7.741,12.674,13.616,14.845,17.731 c2.647-2.104,6.594-4.194,12.102-6.261c3.99,4.816,12.899,10.603,15.99,22.255c4.401,0.405,8.811,0.665,13.218,0.771 c0.249-0.302,0.499-0.605,0.744-0.906C1176.623,1516.852,1177.162,1512.478,1178.613,1507.938z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1227.901,1445.82c-0.21,0.107-0.418,0.215-0.631,0.32c0.129,0.024,0.258,0.044,0.387,0.069 C1227.739,1446.079,1227.821,1445.949,1227.901,1445.82z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1130.414,1512.17c-2.294-0.562-5.154-1.794-8.376-3.676c-0.065,1.425-0.188,2.833-0.339,4.231 c3.125,1.024,6.285,1.957,9.475,2.81C1130.654,1514.413,1130.389,1513.291,1130.414,1512.17z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1150.593,1456.961c-0.522-0.402-1.03-0.812-1.518-1.232c-0.52,0.24-1.051,0.484-1.568,0.722 c1.076,0.305,2.148,0.634,3.217,0.985C1150.681,1457.278,1150.637,1457.118,1150.593,1456.961z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1118.604,1491.039c-1.373,3.842-2.86,7.846-4.472,12.031c2.783,2.177,5.448,3.988,7.906,5.424 C1122.288,1503.036,1121.689,1497.334,1118.604,1491.039z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1283.954,1476.235c0.013,0.009,0.026,0.018,0.039,0.028c2.66-2.449,5.727-4.345,8.534-5.257 c1.096-1.799,2.176-3.661,3.247-5.592c0.238-0.43,0.465-0.859,0.695-1.288c-2.83,0.667-5.611,1.025-8.347,1.129 C1286.27,1469.445,1285.173,1473.116,1283.954,1476.235z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1283.928,1476.323c-0.492,2.474-0.923,4.883-1.311,7.247c0.186,0.229,0.377,0.454,0.558,0.685 c1.465-1.765,2.884-3.608,4.266-5.536c-1.128-0.803-2.273-1.619-3.448-2.457 C1283.971,1476.282,1283.949,1476.303,1283.928,1476.323z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1268.536,1471.438c-2.058-2.465-4.881-4.688-8.576-6.605c0.161,0.882,0.338,1.767,0.529,2.653 C1263.34,1468.619,1266.024,1469.943,1268.536,1471.438z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1283.935,1476.282c-0.007,0.018-0.015,0.036-0.022,0.054c0.005-0.004,0.009-0.009,0.014-0.013 C1283.93,1476.309,1283.933,1476.296,1283.935,1476.282z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M902.234,150.649c-1.098-0.336-2.21-0.676-3.335-1.021c-0.612,1.059-1.223,2.142-1.833,3.244 c1.797,0.004,3.565,0.023,5.302,0.056C902.32,152.161,902.277,151.406,902.234,150.649z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M957.973,102.869c5.687,3.544,11.513,6.856,17.464,9.822c-0.883,0.582-1.753,1.152-2.612,1.715 c2.532,1.312,4.746,2.102,6.721,2.449c0.58-0.256,1.161-0.514,1.741-0.773c-0.447-3.784-1.113-7.653-1.994-11.543 C972.148,103.011,965.038,102.303,957.973,102.869z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1119.618,161.519c8.957,0.062,16.757,0.251,23.197,0.462c-0.029-1.025-0.05-2.056-0.064-3.092 c-4.739-0.812-10.335-1.781-16.844-2.937c-3.513,0.846-6.946,1.658-10.245,2.501 C1117.199,159.372,1118.514,160.403,1119.618,161.519z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M937.442,188.998c0.021,2.196-0.085,4.325-0.334,6.379c2.113-0.279,4.229-0.564,6.347-0.854 c6.928-0.95,13.877-1.961,20.779-3.016c0.829-0.96,1.339-1.818,1.562-2.583c-1.399-0.186-2.787-0.39-4.164-0.602 C953.422,190.178,945.118,190.477,937.442,188.998z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M902.798,199.015c-0.081-0.021-0.152-0.042-0.231-0.063c-0.178,0.161-0.354,0.323-0.533,0.484 c1.446-0.141,2.897-0.285,4.358-0.435c-0.058-0.519-0.112-1.029-0.169-1.545C905.091,197.972,903.952,198.49,902.798,199.015z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1191.604,134.812c0.259,0.585,0.526,1.178,0.805,1.786c2.027-0.054,4.122-0.224,6.282-0.525 c0.985-1.713,1.899-3.417,2.75-5.109c-3.055,0.817-6.119,1.605-9.189,2.362C1192.028,133.826,1191.812,134.321,1191.604,134.812z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1121.532,164.923c0.229,1.293,0.46,2.572,0.693,3.846c0.429-0.344,0.85-0.681,1.259-1.007 c-0.735-2.235-2.001-4.359-3.866-6.243c-1.104-1.116-2.419-2.147-3.957-3.067c-3.656,0.933-7.147,1.905-10.409,3.001 c5.789,5.596,9.775,9.267,10.746,11.17C1117.08,169.803,1118.83,167.187,1121.532,164.923z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1114.582,179.388c-0.769,0.409-1.537,0.759-2.304,1.053c0.827,1.686,1.635,3.311,2.425,4.875 C1114.513,183.322,1114.454,181.334,1114.582,179.388z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1124.177,170.986c-0.419,0.524-0.839,1.03-1.261,1.512c0.28,1.49,0.562,2.967,0.846,4.431 C1124.239,174.968,1124.39,172.96,1124.177,170.986z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1214.149,132.61c1.944,1.375,3.942,2.82,5.995,4.34c0.723,0.535,1.453,1.081,2.19,1.634 c0.87,0.089,1.755,0.188,2.656,0.296c0.491-0.338,0.964-0.686,1.423-1.042c-0.006-0.109-0.013-0.215-0.019-0.323 c-2.863-1.774-5.814-4.103-8.837-7.028c-1.223,0.549-2.433,1.055-3.629,1.523C1214.002,132.21,1214.075,132.41,1214.149,132.61z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1115.49,174.107c-1.032,0.237-3.185-0.063-6.682-0.877c0.776,1.643,1.536,3.232,2.283,4.775 c1.435-1.243,2.89-2.476,4.328-3.677C1115.441,174.253,1115.469,174.181,1115.49,174.107z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M877.99,121.036c0.938,0.42,0.048,1.591-2.299,3.277c-0.68,1.536-1.473,3.104-2.375,4.697 c5.555-1.122,11.294-2.916,17.195-5.514c-3.47-3.802-7.211-8.233-11.405-13.271c-0.097,3.622-0.861,7.515-2.414,11.638 C877.121,121.59,877.548,121.316,877.99,121.036z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M862.452,155.071c0.191-0.141,0.382-0.281,0.573-0.422c-0.085,0.009-0.17,0.018-0.255,0.027 C862.664,154.808,862.562,154.942,862.452,155.071z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M859.563,155.504c-0.031-0.149-0.062-0.299-0.093-0.449c-0.361,0.044-0.72,0.083-1.082,0.128 C858.777,155.294,859.169,155.4,859.563,155.504z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M847.842,243.842c-3.224,1.648-6.538,3.185-9.849,4.576c-2.016,1.545-4.034,3.11-6.053,4.7 c1.385,0.542,2.756,1.069,4.105,1.575c0.879-0.252,1.784-0.508,2.697-0.764C842.115,250.585,845.145,247.216,847.842,243.842z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M837.117,255.088c0.107,0.04,0.214,0.079,0.321,0.118c0.087-0.083,0.172-0.167,0.258-0.251 C837.504,254.999,837.311,255.043,837.117,255.088z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M873.439,164.283c-0.536,0.302-1.067,0.61-1.596,0.919c0.64,0.358,1.269,0.708,1.887,1.05 C873.635,165.602,873.538,164.945,873.439,164.283z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M859.871,173.692c-0.278,0.229-0.542,0.464-0.815,0.695c0.851,1.285,1.63,2.634,2.332,4.043 C860.934,176.917,860.43,175.339,859.871,173.692z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M863.589,174.632c0.445,2.075,0.877,4.079,1.298,6.013c3.627,0.987,7.456,2.393,11.186,4.163 c-0.366-3.546-0.809-7.303-1.333-11.279c-3.36-0.763-7.166-1.615-11.45-2.549c-0.025,0.019-0.051,0.038-0.076,0.057 C863.469,172.087,863.619,173.298,863.589,174.632z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M887.063,173.329c-4.075-4.11-7.862-7.473-11.261-10.349c-0.281,0.152-0.561,0.305-0.841,0.459 c0.861,1.643,1.696,3.26,2.515,4.86C881.198,170.308,884.42,171.976,887.063,173.329z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M874.51,220.268c-1.021-3.321-2.203-7.683-3.587-13.278c-1.5-0.898-3.29-1.741-5.394-2.52 c-0.472,4.255-1.445,8.673-2.969,13.195c-1.136,3.37-2.579,6.797-4.345,10.258c-0.631,1.237-1.305,2.477-2.02,3.721 c0.111,0.265,0.223,0.531,0.333,0.798C862.981,227.821,869.13,223.573,874.51,220.268z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M889.511,176.941c0-0.005-0.001-0.009-0.001-0.014c-2.21-0.5-5.093-1.175-8.704-2.009 c1.298,2.626,2.554,5.21,3.731,7.71C885.927,180.644,887.575,178.739,889.511,176.941z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M889.375,174.511c-0.71-0.362-1.485-0.758-2.312-1.181c0.782,0.789,1.576,1.61,2.379,2.457 C889.418,175.354,889.398,174.937,889.375,174.511z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M897.065,152.872c-0.636-0.001-1.276-0.001-1.92,0.002c2.854,2.766,5.457,5.677,7.798,8.757 c-0.212-2.968-0.405-5.872-0.577-8.702C900.631,152.894,898.862,152.876,897.065,152.872z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M902.567,198.952c-3.463-0.917-4.544-2.065-3.866-3.319c-2.108-0.132-4.401-0.17-6.905-0.116 c-0.005,0.057-0.01,0.111-0.016,0.167c-0.053-0.055-0.109-0.109-0.162-0.164c-0.194,0.004-0.388,0.009-0.585,0.014 c0.078,0.762,0.155,1.521,0.238,2.295c1.16,2.81,2.217,5.512,3.193,8.13c2.603-2.159,5.131-4.33,7.569-6.524 C902.213,199.275,902.389,199.113,902.567,198.952z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1191.374,833.89c0.616,1.869,1.17,3.647,1.661,5.325c4.859,3.511,9.495,7.085,13.893,10.698 c-0.49-8.69,1.054-16.758,5.794-21.416c-0.689-3.01-1.252-6.429-1.688-10.178C1201.788,829.78,1195.7,833.934,1191.374,833.89z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1245.503,844.326c7.697-2.188,10.147-3.411,6.797-6.078c-0.607-0.266-1.209-0.545-1.806-0.837 C1248.861,839.591,1247.198,841.894,1245.503,844.326z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1244.747,834.064c-0.392-0.272-0.776-0.556-1.159-0.842c-1.631-0.835-3.447-1.749-5.482-2.771 c-0.128,3.863-0.342,7.908-0.66,12.153c-0.03,1.367-0.071,2.684-0.117,3.978c0.869-0.241,1.704-0.471,2.506-0.69 C1241.639,841.633,1243.272,837.704,1244.747,834.064z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1152.423,833.116c2.466-2.47,4.863-4.903,7.162-7.286c-3.159,1.491-6.245,2.888-9.259,4.2 C1151.024,831.081,1151.723,832.11,1152.423,833.116z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1219.856,824.762c0.632-0.132,1.293-0.229,1.978-0.294c-0.962-0.635-1.986-1.385-3.068-2.251 C1219.148,823.039,1219.509,823.889,1219.856,824.762z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1174.037,846.689c-0.32-4.155-0.807-8.59-1.505-13.342c-0.956-1.385-1.945-2.838-2.968-4.36 c-3.936,0.468-6.723-0.163-7.874-2.168c-2.213,3.46-4.373,6.845-6.486,10.165c2.066,2.786,4.14,5.384,6.218,7.8 C1163.99,843.566,1168.168,844.421,1174.037,846.689z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1155.287,852.926c0.364-0.179,0.723-0.349,1.071-0.505c-1.3-1.869-2.583-3.834-3.852-5.88 c0.553,1.783,1.032,3.486,1.444,5.104C1154.394,852.069,1154.84,852.497,1155.287,852.926z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1058.182,673.754c0.517-0.503,1.033-1.005,1.548-1.508c-5.51-2.203-8.547-4.663-10-7.17 c-1.523,2.113-2.87,4.221-4.007,6.253C1049.962,671.982,1054.125,672.794,1058.182,673.754z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1033.752,651.177c3.067,0.55,6.156,1.191,9.243,1.906c-1.705-1.17-3.369-2.311-5.011-3.438 c-1.311,0.376-2.708,0.783-4.207,1.225C1033.769,650.972,1033.761,651.075,1033.752,651.177z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1046.758,647.274c1.504,2.043,3.033,4.092,4.577,6.145 C1055.004,647.64,1059.683,644.12,1046.758,647.274z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M917.614,713.435c1.427-1.551,2.824-3.052,4.183-4.493c-2.59,0.18-5.176,0.338-7.751,0.475 C914.807,710.741,915.983,712.08,917.614,713.435z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1040.676,670.631c-3.032-3.842-5.845-7.776-8.288-11.678c-1.037,3.813-2.577,7.344-4.554,10.621 C1032.156,669.757,1036.447,670.114,1040.676,670.631z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1154.936,706.914c0.856,0.765,1.661,1.48,2.416,2.151c0.008-0.769,0.018-1.526,0.031-2.27 C1156.566,706.834,1155.751,706.874,1154.936,706.914z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1159.066,726.645c-1.094-2.78-2.173-5.613-3.235-8.501c-2.843-0.044-6.48-0.2-11.004-0.415 c-0.535,0.578-1.068,1.153-1.598,1.725c-0.161,1.556-0.318,3.049-0.473,4.475 C1148.454,724.832,1153.896,725.738,1159.066,726.645z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1167.611,714.706c-1.319,0.174-2.674,0.306-4.062,0.397c1.646,2.295,0.077,3.045-6.108,3.053 c1.161,2.16,2.289,4.283,3.385,6.366C1162.814,721.151,1165.095,717.871,1167.611,714.706z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1120.815,744.378c-0.046,0.058-0.092,0.115-0.138,0.173c0.004,0.139,0.008,0.276,0.012,0.415 C1120.731,744.77,1120.771,744.576,1120.815,744.378z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1141.236,737.765c1.589,0.622,3.211,1.275,4.859,1.953c-1.429-2.324-2.871-4.623-4.325-6.887 C1141.573,734.605,1141.393,736.247,1141.236,737.765z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1140.637,745.067c-0.064,1.373-0.075,2.594-0.026,3.687c2.875-0.225,5.751-0.463,8.63-0.719 C1146.255,747.086,1143.386,746.078,1140.637,745.067z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1175.404,705.998c-0.515,0.025-1.03,0.049-1.547,0.073c0.221,0.275,0.442,0.55,0.664,0.826 C1174.814,706.597,1175.106,706.295,1175.404,705.998z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1286.364,859.264c-0.043,0.009-0.086,0.019-0.129,0.028c0.089,0.073,0.176,0.147,0.266,0.221 C1286.458,859.429,1286.408,859.347,1286.364,859.264z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1270.202,844.421c1.436,1.506,2.916,3.005,4.441,4.494c1.12-0.101,2.237-0.178,3.345-0.229 c-1.561-1.502-3.265-2.998-5.099-4.488C1272.018,844.345,1271.121,844.416,1270.202,844.421z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1198.215,678.477c-3.013-2.222-5.928-4.504-8.732-6.874c-0.978,0.469-1.95,0.928-2.916,1.382 c0.762,2.544,1.512,4.862,2.244,6.981c0.115,0.14,0.226,0.278,0.339,0.416C1192.318,679.869,1195.348,679.248,1198.215,678.477z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1220.321,645.65c0.67-0.344,1.347-0.702,2.028-1.068c-0.854,0.224-1.738,0.455-2.643,0.691 C1219.909,645.399,1220.119,645.524,1220.321,645.65z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1188.811,679.965c-1.49-1.806-3.175-3.704-5.062-5.673c-2.097,0.962-4.161,1.884-6.189,2.766 c-1.083,1.698-2.196,3.378-3.335,5.038c5.145-0.424,10.089-0.94,14.741-1.685 C1188.914,680.263,1188.862,680.114,1188.811,679.965z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1213.265,641.508c0.989,0.547,1.96,1.096,2.912,1.648c4.842-1.062,9.474-2.05,13.602-2.898 c0.186-0.415,0.373-0.84,0.562-1.281c-3.452-0.271-7.183-0.594-11.058-0.809c-0.683,0.225-1.378,0.45-2.08,0.675 C1216.071,639.868,1214.769,640.765,1213.265,641.508z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1144.071,819.924c4.692-5.258,8.709-9.067,12.173-11.7c-0.896-1.449-1.805-2.924-2.736-4.447 c-4.069,5.829-7.415,10.763-10.154,14.887C1143.592,819.084,1143.831,819.51,1144.071,819.924z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1114.049,902.831c-0.318,0.519-0.637,1.041-0.95,1.553c1.339-0.447,2.651-0.851,3.933-1.21 C1116.042,903.06,1115.05,902.947,1114.049,902.831z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1017.646,905.619c-1.245-3.634-2.382-6.998-3.424-10.122c-3.012,1.136-6.157,2.171-9.429,3.09 C1008.719,900.713,1012.977,903.046,1017.646,905.619z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1076.02,910.678c0.212-0.024,0.426-0.05,0.637-0.073c0.263-2.318,0.467-4.63,0.608-6.926 c-1.874,1.743-3.729,3.475-5.562,5.193C1073.707,909.029,1075.096,909.633,1076.02,910.678z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1022.141,923.25c4.589-9.933,9.384-17.611,14.188-23.461c0.027-0.364,0.054-0.729,0.086-1.097 c-2.558-2.564-5.201-5.66-7.964-9.21c-1.178,1.064-3.642,2.149-7.546,3.229c-0.944,0.434-1.905,0.856-2.881,1.268 C1021.699,906.217,1024.179,918.358,1022.141,923.25z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1118.245,908.472c0.334-0.147,0.666-0.295,0.992-0.445c-0.061-1.563-0.087-3.102-0.067-4.608 c-0.032-0.004-0.065-0.007-0.097-0.011C1118.795,905.132,1118.519,906.816,1118.245,908.472z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M972.743,871.719c-4.353-0.992-7.205-2.272-9.123-3.516C964.56,870.826,967.756,871.897,972.743,871.719z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M978.541,858.119c0.409,0.67,0.879,2.126,1.49,4.536c0.524,0.031,1.049,0.063,1.574,0.095 c-0.03-1.39-0.045-2.805-0.045-4.249C980.611,858.422,979.606,858.297,978.541,858.119z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M981.74,849.957c0.018-0.437,0.039-0.877,0.059-1.318c-0.867-2.729-1.606-5.228-2.221-7.497 c-4.827,5.305-8.495,9.825-11.111,13.629C972.399,854.889,976.825,853.419,981.74,849.957z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M968.078,855.341c-1.654,2.458-2.861,4.612-3.641,6.474c3.854,0.178,7.739,0.385,11.642,0.609 c0.623-2.259,1.084-3.856,1.534-4.471C974.833,857.43,971.669,856.578,968.078,855.341z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M938.901,978.5c2.425,0.258,4.92,0.529,7.486,0.81c0.616-0.355,1.228-0.709,1.829-1.059 c0.094-0.716,0.181-1.428,0.258-2.133c-0.209,0.025-0.409,0.053-0.63,0.074c-2.78,0.273-5.96-1.214-9.062-3.04 c-0.674,0.679-1.338,1.368-1.993,2.067C937.491,976.308,938.195,977.401,938.901,978.5z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M948.895,964.175c0.031,0.025,0.061,0.051,0.091,0.076c-0.001-0.049-0.001-0.098-0.002-0.147 C948.954,964.128,948.925,964.152,948.895,964.175z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M959.076,970.221c-0.236,0.646-0.485,1.298-0.749,1.959c0.531-0.33,1.056-0.659,1.573-0.985 C959.625,970.87,959.351,970.54,959.076,970.221z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1092.777,900.479c-0.755,0.445-1.377,0.915-1.814,1.414c-1.158,1.325-1.717,3.87-1.968,6.952 C1090.465,906.088,1091.917,903.408,1092.777,900.479z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1132.993,828.724c-1.623-5.185-3.298-10.924-5.012-17.24c-1.801,0.807-3.62,1.623-5.459,2.449 c2.852,3.875,4.282,8.043,4.31,12.819c1.913,1.688,3.804,3.368,5.68,5.049C1132.68,830.882,1132.847,829.851,1132.993,828.724z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1095.858,849.364c-0.373,0.121-0.743,0.242-1.11,0.362c0.039,0.704,0.08,1.419,0.12,2.131 c0.263,0.165,0.521,0.327,0.786,0.493C1095.562,851.406,1095.638,850.408,1095.858,849.364z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1089.479,867.31c1.815,0.45,3.548,0.746,5.193,0.874c-1.184-1.038-2.359-2.131-3.521-3.277 C1090.551,865.801,1089.995,866.599,1089.479,867.31z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1106.754,876.459c-3.927-1.917-7.828-4.603-11.632-7.883c-2.24,0.317-4.367,0.632-6.385,0.941 c1.262,5.216,2.082,10.55,2.41,15.959c0.475,1.015,0.871,1.99,1.195,2.93c0.656-0.156,1.309-0.315,1.959-0.479 C1098.436,884.12,1102.598,880.291,1106.754,876.459z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1085.482,858.811c0.365,0.986,0.704,1.981,1.037,2.979c0.157-0.405,0.321-0.817,0.49-1.235 C1086.496,859.984,1085.988,859.401,1085.482,858.811z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M855.162,644.458c-0.029-0.719-0.061-1.416-0.095-2.094c-1.27,0.496-2.502,1.003-3.694,1.519 c-3.693,2.435-6.822,4.525-9.158,6.161c-0.429,0.991-0.853,1.984-1.277,2.978c2.122-0.842,5.321-2.259,9.772-4.336 C852.17,647.298,853.653,645.889,855.162,644.458z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M868.662,719.541c-1.226-2.379-2.474-4.813-3.745-7.303c-0.963,0.316-1.891,0.722-2.78,1.213 c-2.522,1.393-4.73,3.45-6.52,5.939c2.079,0.644,4.257,1.352,6.517,2.113c-0.253-0.952-0.451-1.921-0.586-2.906 C863.994,718.879,866.357,719.198,868.662,719.541z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M881.475,650.497c-0.046,2.066-0.1,4.166-0.161,6.304c1.712-0.196,3.448-0.396,5.22-0.602 C884.825,654.263,883.138,652.362,881.475,650.497z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M867.324,711.659c3.03,1.825,5.963,3.628,8.803,5.41c0.659-1.142,1.313-2.274,1.963-3.394 C874.277,711.697,870.636,711.141,867.324,711.659z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M890.478,629.795c-1.787-0.179-3.55-0.346-5.287-0.499c3.35,7.524,7.058,15.688,11.157,24.477 c0.265-0.129,0.528-0.251,0.793-0.375c1.121-7.469,3.487-14.875,7.54-21.99C899.809,630.798,895.066,630.255,890.478,629.795z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M878.429,713.091c0.066-0.946,0.132-1.89,0.196-2.827c-1.21-0.002-2.409-0.006-3.597-0.013 c1.075,1.003,2.169,2.016,3.283,3.042C878.35,713.226,878.39,713.158,878.429,713.091z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M879.595,710.55c0.131-0.042,0.26-0.086,0.389-0.13c0.03-0.052,0.061-0.104,0.091-0.156 c-0.153,0-0.305,0-0.458,0C879.609,710.36,879.602,710.455,879.595,710.55z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M866.5,633.954c-3.759,2.474-7.331,4.811-10.601,6.955c0.023,0.13,0.048,0.262,0.072,0.394 c2.146-0.519,4.245-1.02,6.272-1.498c-2.146,0.697-4.192,1.419-6.151,2.163c0.082,0.445,0.165,0.899,0.252,1.368 c-0.4,0.379-0.785,0.745-1.182,1.122c0.028,0.68,0.053,1.38,0.076,2.095c2.266-1.077,4.776-2.283,7.543-3.622 c1.079-0.806,2.2-1.555,3.366-2.241c-1.343,1.984-2.471,3.807-3.438,5.512c-1.01,4.375-0.932,8.624-0.233,12.68 c4.903-0.518,10.114-1.089,15.656-1.717c-0.718-4.647-1.583-9.065-2.576-13.264C872.448,640.457,869.43,637.144,866.5,633.954z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M854.905,641.561c0.04-0.01,0.079-0.019,0.119-0.029c-0.001-0.016-0.002-0.032-0.002-0.047 C854.983,641.51,854.944,641.535,854.905,641.561z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M879.548,711.168c0.091-0.157,0.182-0.312,0.273-0.469c-0.081,0.011-0.159,0.021-0.24,0.031 C879.569,710.877,879.56,711.021,879.548,711.168z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M881.695,629.946c-2.235,1.086-4.553,2.271-6.963,3.565c2.043-1.555,4.095-3.078,6.155-4.57 c-2.105-0.161-4.17-0.3-6.188-0.414c-0.99,0.66-1.975,1.314-2.951,1.961c1.408,4.207,2.688,8.671,3.808,13.412 c1.938,2.148,3.912,4.348,5.919,6.597C881.638,643.21,881.709,636.361,881.695,629.946z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M957.519,729.105c-0.086,1.293-0.174,2.598-0.265,3.916c1.441,0.785,2.886,1.586,4.334,2.4 c2.241-1.195,4.517-2.432,6.84-3.725C964.551,730.828,960.926,729.964,957.519,729.105z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M917.614,713.435c-1.63-1.355-2.807-2.695-3.568-4.017c-2.621,0.14-5.231,0.26-7.824,0.362 c1.081,2.82,2.178,5.529,3.251,8.106c1.825-0.133,3.682-0.14,5.568-0.028c-0.173-0.346-0.347-0.689-0.517-1.041 C915.574,715.658,916.599,714.538,917.614,713.435z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1158.179,792.229c-4.529-0.659-8.916-1.37-13.015-2.318c0.871,1.468,1.728,2.907,2.574,4.32 C1151.142,793.601,1154.623,792.935,1158.179,792.229z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1153.508,803.777c0.931,1.523,1.839,2.998,2.736,4.447c3.55-2.698,6.52-4.163,9.038-4.678 c0.675-3.438,1.32-6.782,1.937-10.033c-1.965-0.284-3.921-0.557-5.859-0.83C1158.483,796.695,1155.871,800.39,1153.508,803.777z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1124.11,778.567c-1.066,0.441-2.131,0.885-3.197,1.33c-0.029,1.96-0.064,3.951-0.108,5.98 c2.741-0.884,5.414-1.788,8.012-2.71C1127.039,781.851,1125.461,780.33,1124.11,778.567z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1172.532,833.347c-0.226-1.537-0.478-3.112-0.748-4.713c-0.776,0.153-1.515,0.269-2.22,0.353 C1170.586,830.509,1171.575,831.962,1172.532,833.347z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1193.035,839.216c-0.491-1.679-1.045-3.457-1.661-5.325c-1.833-0.019-3.353-0.784-4.661-2.07 c-0.497,0.638-1,1.279-1.508,1.922C1187.877,835.546,1190.484,837.373,1193.035,839.216z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1175.787,827.638c1.655,1.031,3.292,2.071,4.906,3.119c0.084-1.637,0.183-3.265,0.309-4.875 C1179.172,826.569,1177.428,827.158,1175.787,827.638z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1159.066,726.645c-5.17-0.907-10.612-1.813-16.309-2.716c-0.356,3.295-0.691,6.247-0.987,8.903 c1.454,2.264,2.896,4.562,4.325,6.887c2.353,0.968,4.762,1.992,7.234,3.084c1.22-5.303,3.269-10.519,5.97-15.56 C1159.222,727.044,1159.144,726.844,1159.066,726.645z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M923.207,837.586c-10.684,1.444-18.248,1.334-24.587-0.401c0.647,1.762,1.289,3.522,1.921,5.277 c7.047-0.636,15.155-1.787,24.468-3.573C924.406,838.453,923.805,838.017,923.207,837.586z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M926.667,855.196c-0.227-3.649-0.453-7.151-0.677-10.528c-6.4,1.143-14.166,2.224-23.489,3.294 c1.803,5.098,3.55,10.146,5.253,15.112c3.549-0.49,7.207-0.871,10.96-1.158C920.87,859.75,923.492,857.519,926.667,855.196z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M950.149,961.248c-0.443-0.138-0.884-0.277-1.319-0.414c0.073,1.075,0.124,2.166,0.154,3.271 c0.001,0.049,0.001,0.098,0.002,0.147c0.036,0.03,0.072,0.06,0.107,0.09C949.456,963.302,949.811,962.269,950.149,961.248z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M945.876,944.136c0.396,1.356,0.767,2.734,1.096,4.146c0.469,0.39,0.941,0.765,1.419,1.115 c-0.401-0.025-0.796-0.054-1.195-0.08c0.703,3.213,1.226,6.57,1.526,10.091c0.515,0.481,1.03,0.972,1.547,1.471 c2.236-6.801,3.936-13.204,5.235-19.188C952.546,942.829,949.345,943.692,945.876,944.136z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M948.216,978.251c-0.054,0.411-0.112,0.825-0.172,1.24c2.135,0.234,4.319,0.473,6.549,0.714 c1.471-2.79,2.711-5.464,3.734-8.026c0.264-0.66,0.513-1.313,0.749-1.959c-0.206-0.239-0.411-0.469-0.617-0.705 c-1.52-0.017-3.038-0.047-4.555-0.085c1.962,3.131,1.318,5.877-5.431,6.688C948.397,976.824,948.31,977.535,948.216,978.251z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1287.599,1169.34c0.087,0.092,0.173,0.184,0.26,0.276c0.029-0.031,0.058-0.061,0.088-0.091 C1287.83,1169.463,1287.715,1169.401,1287.599,1169.34z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1168.903,1191.142c3.273-4.737,6.417-9.279,9.433-13.632c-1.216,0.026-2.419,0.051-3.606,0.075 c-2.155,4.33-4.248,8.584-6.27,12.743C1168.608,1190.6,1168.755,1190.871,1168.903,1191.142z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1342.145,1186.361c-0.573-0.139-1.142-0.277-1.731-0.421c-1.683,1.665-3.272,3.141-4.777,4.444 c4.319,1.735,8.723,3.505,13.197,5.326c0.329-0.308,0.662-0.617,0.998-0.925 C1339.186,1189.001,1338.354,1186.73,1342.145,1186.361z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1214.444,1185.153c-0.923-1.148-1.854-2.333-2.798-3.583 C1207.339,1181.632,1206.706,1183.892,1214.444,1185.153z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1187.436,1177.285c-4.931,4.787-10.764,9.99-17.57,15.635c2.926,5.412,5.828,10.891,8.582,16.189 c5.829-7.767,11.242-12.86,18.783-11.352c-1.727-4.92-4.077-10.742-7.501-17.73c8.5-0.116,15.246-0.272,20.547-0.301 c-0.771-1.049-1.546-2.12-2.331-3.237C1200.735,1176.853,1193.906,1177.101,1187.436,1177.285z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1162.119,1209.97c-1.455,1.504-3.165,3.066-5.147,4.686c-0.084,0.185-0.168,0.369-0.252,0.553 c2.829,1.926,5.728,3.922,8.695,5.986c0.4-0.134,0.797-0.267,1.193-0.401C1165.029,1217.013,1163.538,1213.417,1162.119,1209.97z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1332.769,1189.232c0.328,0.908,0.643,1.828,0.947,2.757c0.625-0.504,1.264-1.036,1.921-1.605 C1334.676,1189.999,1333.722,1189.615,1332.769,1189.232z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1342.145,1186.361c4.226,1.027,8.021,1.936,11.419,2.738c0.068-0.516,0.128-1.028,0.179-1.534 C1348.893,1186.667,1344.573,1186.125,1342.145,1186.361z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M833.036,347.201c2.406,0.747,4.738,1.422,7.001,2.031c-0.308-3.634-0.553-7.536-0.725-11.703 C837.286,340.493,835.194,343.714,833.036,347.201z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M840.038,349.232c0.283,3.344,0.619,6.462,0.996,9.373c4.972-2.088,10.288-4.033,15.878-5.855 C851.79,352.036,846.171,350.881,840.038,349.232z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M829.238,353.51c-0.946,1.612-1.903,3.272-2.873,4.987c2.118,1.199,4.315,2.465,6.581,3.79 c1.247-0.616,2.52-1.221,3.822-1.814C834.52,358.208,832.017,355.881,829.238,353.51z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M865.445,391.362c0.352,0.466,0.814,0.703,1.391,0.68c0.486-0.984,1.084-1.83,1.789-2.526 C867.578,390.017,866.519,390.621,865.445,391.362z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M899.59,323.766c0.107,0.036,0.216,0.073,0.323,0.109c0.193-0.422,0.388-0.83,0.582-1.224 c-1.038-4.76-2.21-9.668-3.508-14.71c-0.916,0.264-1.832,0.53-2.745,0.812c-0.607,0.188-1.248,0.387-1.917,0.596 C895.856,314.009,898.327,318.944,899.59,323.766z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M884.81,351.399c-2.516,0.852-5.357,1.482-8.529,1.858c-1.283,2.253-2.469,4.523-3.551,6.776 C876.795,357.426,880.828,354.555,884.81,351.399z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M995.505,334.889c-1.161-1.805-2.316-3.628-3.459-5.469c-3.224,1.271-6.723,2.542-10.509,3.813 c0.686,1.453,1.295,2.873,1.816,4.255C987.283,336.552,991.342,335.688,995.505,334.889z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1043.118,316.745c-1.984,4.446-4.272,8.551-7.029,12.185c4.875-0.567,9.762-1.104,14.629-1.623 C1048.743,323.461,1046.239,319.903,1043.118,316.745z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1067.659,315.006c-8.612-3.007-15.124-6.634-19.909-10.646c-1.245,3.894-2.585,7.651-4.106,11.199 c7.283,2.013,13.641,4.397,19.289,6.793C1064.417,319.751,1065.988,317.295,1067.659,315.006z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1138.894,395.446c-3.471,1.052-6.689,1.888-9.687,2.531c-1.286,0.779-2.575,1.534-3.868,2.261 c2.763,1.106,5.566,2.186,8.396,3.24C1135.585,400.817,1137.327,398.137,1138.894,395.446z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1013.144,331.92c5.969-0.884,12.051-1.683,18.176-2.425c-0.027-2.443-1.802-4.766-5.09-6.721 c-2.682,0.17-5.357,0.162-8.027-0.04c-3.141-0.231-6.272-0.697-9.395-1.327c-1.157,0.697-2.384,1.393-3.694,2.09 C1008.008,326.499,1010.684,329.306,1013.144,331.92z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1106.984,417.865c-0.137,1.048-0.282,2.115-0.43,3.195c0.918-0.454,1.791-0.901,2.626-1.34 C1108.463,419.091,1107.73,418.474,1106.984,417.865z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M941.348,1242.938c0.723,0.167,1.445,0.334,2.171,0.504c0.3-0.609,0.6-1.222,0.902-1.84 c-0.721-2.156-1.355-4.491-1.89-7.027c-0.094-0.046-0.19-0.09-0.283-0.135C941.958,1237.369,941.656,1240.201,941.348,1242.938z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M942.332,1233.573c0.066,0.334,0.129,0.674,0.199,1.002c1.41,0.683,2.856,1.345,4.337,1.985 c0.72-1.494,1.445-3.003,2.178-4.542c0.503,2.23,1.058,4.261,1.652,6.117c1.795,0.699,3.637,1.365,5.528,1.993 c1.111-3.618,2.145-7.343,3.072-11.178c-1.376-1.093-2.772-2.193-4.213-3.308c1.001-1.426,1.977-2.802,2.938-4.149 c-5.135,4.089-10.388,7.88-15.602,11.173C942.391,1232.971,942.361,1233.271,942.332,1233.573z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M891.401,1152.2c-0.609-0.243-1.217-0.486-1.835-0.728c-1.491,1.02-2.979,2.048-4.462,3.087 c0.784,0.978,1.574,1.985,2.368,3.02c0.91-0.376,1.825-0.7,2.746-0.972C890.597,1155.171,890.99,1153.704,891.401,1152.2z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M891.095,1156.364c2.947-0.757,5.942-0.965,8.95-0.532c-2.344-1.038-4.75-2.063-7.234-3.071 C892.237,1153.984,891.665,1155.181,891.095,1156.364z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M940.515,1249.496c0.029-0.058,0.059-0.118,0.088-0.176c0.249-2.066,0.499-4.195,0.745-6.382 c-1.954-0.452-3.896-0.893-5.827-1.324c-0.691,1.324-1.394,2.688-2.103,4.072c0.56,2.595,0.852,4.873,0.849,6.779 c2.111-0.834,4.19-1.618,6.239-2.358c0.025-0.206,0.05-0.411,0.075-0.618C940.56,1249.492,940.537,1249.494,940.515,1249.496z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M910.946,1247.465c-0.605-0.524-1.224-1.068-1.855-1.632c0.037,1.805,0.17,3.551,0.388,5.242 C909.969,1249.862,910.458,1248.658,910.946,1247.465z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M923.825,1256.882c-2.815-1.496-6.258-3.893-10.393-7.309c-1.221,1.036-2.459,2.08-3.714,3.132 c0.112,0.681,0.237,1.353,0.376,2.016c4.256,0.687,8.641,1.529,13.149,2.423C923.437,1257.056,923.631,1256.969,923.825,1256.882 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1015.447,1224.574c-1.9-1.807-3.777-3.597-5.63-5.369c-1.254,1.428-2.395,2.787-3.422,4.078 C1009.373,1223.699,1012.392,1224.129,1015.447,1224.574z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1401.557,1178.708c1.183-0.384,2.343-0.821,3.486-1.294c-0.187-0.143-0.371-0.279-0.56-0.427 c0.829-0.133,1.628-0.263,2.433-0.393c2.162-1.003,4.248-2.15,6.238-3.447c-2.382-0.351-4.678-0.691-6.882-1.018 C1404.685,1174.206,1403.112,1176.396,1401.557,1178.708z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1435.838,1224.399c-0.151-0.159-0.3-0.315-0.452-0.475c-0.042,0.123-0.084,0.249-0.126,0.373 C1435.456,1224.331,1435.645,1224.365,1435.838,1224.399z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1414.83,1189.838c-0.518,0.125-1.04,0.25-1.568,0.374c0.512,0.078,1.034,0.16,1.551,0.24 C1414.818,1190.246,1414.823,1190.041,1414.83,1189.838z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1441.661,1211.817c-0.06-0.04-0.117-0.078-0.177-0.117c-0.01,0.012-0.019,0.024-0.029,0.036 C1441.524,1211.764,1441.592,1211.788,1441.661,1211.817z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1303.557,1320.027c-3.005,0.866-5.889,1.582-8.661,2.163c0.72,0.673,1.458,1.365,2.199,2.062 C1299.116,1322.909,1301.264,1321.505,1303.557,1320.027z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1149.408,1178.098c0.649,1.706,1.336,3.493,2.061,5.359c0.35,0.087,0.697,0.177,1.039,0.269 c3.371-1.232,6.557-2.915,9.476-5.099c-0.151-0.267-0.302-0.536-0.452-0.802 C1157.281,1177.904,1153.245,1177.987,1149.408,1178.098z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1184.588,1234.832c2.325,1.688,4.688,3.42,7.079,5.182c0.553-0.242,1.122-0.468,1.693-0.693 c-0.727-1.62-1.566-3.432-2.5-5.404C1188.737,1234.326,1186.644,1234.633,1184.588,1234.832z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1167.669,1192.93c0.414-0.6,0.824-1.193,1.234-1.787c-0.148-0.272-0.295-0.543-0.443-0.814 c-1.972-3.624-3.946-7.199-5.883-10.648c-0.889,1.49-2.467,3.367-4.929,5.726 C1162.441,1187.306,1165.967,1189.816,1167.669,1192.93z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1157.658,1229.602c-2.004-1.186-3.925-2.567-5.751-4.164c4.719-1.39,9.214-2.806,13.507-4.242 c-2.967-2.064-5.866-4.06-8.695-5.986c-0.077-0.052-0.154-0.105-0.231-0.157c-2.843,2.286-6.231,4.686-10.199,7.197 c2.412,3.617,4.928,7.25,7.555,10.873C1154.406,1231.675,1155.624,1230.474,1157.658,1229.602z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1162.119,1209.97c1.419,3.447,2.91,7.043,4.489,10.823c1.592-0.539,3.151-1.08,4.686-1.624 c2.549-3.604,4.884-7.035,7.155-10.061c-2.754-5.298-5.656-10.777-8.582-16.189c-0.528,0.438-1.059,0.878-1.599,1.321 C1169.806,1198.479,1168.157,1203.728,1162.119,1209.97z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1313.525,1225.075c-0.65,0.114-1.296,0.226-1.938,0.336c-2.924,7.986-6.409,15.131-12.734,22.538 c0.502,0.137,1.004,0.275,1.499,0.41c9.059-1.269,18.72-2.293,27.836-3.399 C1323.377,1237.149,1318.46,1230.463,1313.525,1225.075z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1242.859,1219.42c-0.223-1.525-0.483-2.987-0.772-4.397c-1.323,1.747-2.567,3.672-3.699,5.763 C1240.112,1220.142,1241.614,1219.684,1242.859,1219.42z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1245.547,1238.355c0.106,0.436,0.216,0.881,0.328,1.333c3.088,1.007,6.166,2.179,9.209,3.537 c0.12-0.045,0.239-0.09,0.359-0.136c0.211-0.579,0.423-1.154,0.637-1.717C1252.291,1240.289,1248.791,1239.288,1245.547,1238.355 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1302.288,1270.441c-3.94,1.394-7.341,2.338-10.107,2.968c0.232,0.324,0.45,0.667,0.679,0.996 c1.103,0.052,2.318,0.124,3.646,0.22C1298.346,1273.214,1300.272,1271.82,1302.288,1270.441z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1233.647,1234.875c0.314,0.094,0.621,0.187,0.941,0.282c0.223-0.563,0.438-1.097,0.647-1.615 C1234.724,1233.976,1234.195,1234.42,1233.647,1234.875z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1263.465,1225.94c2.406-3.916,4.93-7.1,7.554-9.572c-3.523-0.373-7.014-1.046-10.411-2.072 c-0.684,0.26-1.373,0.523-2.071,0.791C1260.199,1218.586,1261.844,1222.199,1263.465,1225.94z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1243.369,1229.477c0.125-0.27,0.242-0.532,0.364-0.799c-0.047-0.994-0.109-1.963-0.181-2.918 c-0.305,0.334-0.633,0.682-0.983,1.044C1242.828,1227.551,1243.091,1228.443,1243.369,1229.477z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M895.544,471.701c0.184-0.469,0.37-0.943,0.552-1.402c-1.259-0.101-2.518-0.169-3.779-0.203 c-3.211,0.911-6.27,1.675-9.195,2.315c1.59,0.858,3.219,1.776,4.889,2.759C889.468,473.748,891.945,472.578,895.544,471.701z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M928.557,1152.492c0.035-2.283,0.019-4.509-0.044-6.682c-1.381-0.821-2.803-1.678-4.25-2.564 c-0.785,2.033-1.6,4.096-2.444,6.187C924.141,1150.367,926.391,1151.389,928.557,1152.492z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M963.303,1204.206c-0.327,4.092-0.815,8.078-1.436,11.961c3.245-4.438,6.241-8.385,9.009-11.882 C968.719,1205.068,966.179,1205.17,963.303,1204.206z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M907.573,1158.302c0.753-4.374,1.508-8.618,2.264-12.761c-1.63-0.415-3.276-0.794-4.94-1.13 c-1.694,0.537-3.397,1.094-5.111,1.676c0.723,3.002,1.363,6.347,1.913,10.051 C903.657,1156.574,905.618,1157.289,907.573,1158.302z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M942.42,1232.667c5.213-3.293,10.467-7.084,15.602-11.173c0.981-1.375,1.943-2.711,2.883-4.006 c-1.572-0.186-3.131-0.371-4.667-0.552c-1.683,2.456-3.711,4.78-6.174,6.927c-1.602,1.396-4.121,2.809-7.151,4.094 c-0.026,0.045-0.051,0.09-0.076,0.135C942.702,1229.641,942.563,1231.168,942.42,1232.667z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M829.942,1140.467c-2.34-15.121-5.319-26.173-8.183-33.659c-2.401-1.481-4.813-3.002-7.235-4.564 c-0.552,1.123-1.074,2.232-1.559,3.323c1.986,7.623,6.713,18.845,15.552,32.768c0.041,0.008,0.08,0.017,0.121,0.025 c-0.032,0.005-0.064,0.009-0.096,0.013c0.458,0.72,0.929,1.45,1.409,2.185C829.947,1140.527,829.944,1140.497,829.942,1140.467z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M806.642,1132.374c0.095-7.854,1.8-16.644,6.322-26.808c-0.491-1.884-0.814-3.548-0.991-4.978 c-0.375-0.246-0.752-0.496-1.127-0.744c-2.86,10.824-5.104,21.704-6.573,32.069c-0.042,0.296-0.077,0.589-0.118,0.884 c0.222,0.057,0.447,0.112,0.67,0.169C805.448,1132.746,806.053,1132.55,806.642,1132.374z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1144.275,434.632c-0.854,0.251-1.883,0.623-3.099,1.122c-0.42,0.714-0.842,1.438-1.267,2.176 c0.261,0.036,0.518,0.071,0.778,0.106C1141.84,436.912,1143.035,435.777,1144.275,434.632z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1110.914,1300.718c0.757,3.014,1.67,6.19,2.777,9.55c2.142,0.37,4.28,0.717,6.416,1.049 c-1.743-3.838-3.415-7.633-5.036-11.378c-0.154,0.235-0.302,0.461-0.458,0.698 C1113.331,1300.755,1112.1,1300.776,1110.914,1300.718z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1002.708,1204.436c-0.132,2.432-0.311,4.939-0.506,7.462c2.488,2.397,5.036,4.84,7.615,7.307 c1.853,1.772,3.73,3.562,5.63,5.369c5.948,0.866,12.036,1.788,18.265,2.779c2.295-3.528,5.6-7.301,9.975-11.338 c-3.088-4.665-5.514-9.231-4.784-12.382c0.197-0.853,0.425-1.598,0.68-2.25 C1024.734,1203.706,1012.574,1204.586,1002.708,1204.436z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1030.271,1098.856c5.51,1.566,11.319,3.393,17.452,5.517c-5.116-5.384-9.073-10.934-12.032-16.472 C1034.217,1091.026,1032.428,1094.66,1030.271,1098.856z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1049.782,1171.78c-1.106,0.12-2.212,0.236-3.32,0.339c-2.464,1.206-5.553,1.582-9.423,0.877 c2.185,3.107,4.272,6.338,6.245,9.66c1.089,0.177,2.184,0.346,3.286,0.506C1048.114,1179.205,1049.186,1175.415,1049.782,1171.78 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M957.23,1135.914c-0.883,0.13-1.763,0.257-2.641,0.382c1.892,1.334,3.885,2.654,5.979,3.953 c0.302-0.623,0.6-1.241,0.895-1.853c-0.284-0.604-0.567-1.197-0.849-1.787C959.49,1136.199,958.365,1135.962,957.23,1135.914z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1004.211,1127.049c0.377,2.716,0.593,5.282,0.659,7.706c5.176-3.419,10.364-6.471,15.506-9.167 c-2.296-0.213-4.533-0.501-6.713-0.86C1010.559,1125.527,1007.403,1126.3,1004.211,1127.049z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1071.883,1185.085c0.541,0.004,1.082,0.004,1.624,0.003c-0.133-0.189-0.266-0.377-0.397-0.563 C1072.696,1184.726,1072.287,1184.911,1071.883,1185.085z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1057.438,1184.413c0.045,0.004,0.09,0.007,0.135,0.011c-0.024-0.019-0.048-0.037-0.072-0.056 C1057.48,1184.383,1057.459,1184.398,1057.438,1184.413z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1047.878,1190.957c-2.445,1.621-4.969,3.26-7.592,4.922c1.984-3.349,3.645-6.576,5.028-9.703 c-0.662-1.184-1.339-2.357-2.03-3.521c-13.642-2.22-26.25-5.819-37.016-10.217c-3.533-0.269-7.05-0.611-10.542-1.03 c1.448,1.408,2.949,2.816,4.509,4.215c15.941-1.007,24.782,4.238,21.563,15.678c5.606,3.196,11.769,6.082,18.572,8.495 c0.985-1.555,2.226-2.183,3.604-2.183c2.428,0,5.267,1.949,7.844,4.178c0.37-0.008,0.74-0.017,1.103-0.023 C1051.391,1198.123,1049.704,1194.507,1047.878,1190.957z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1078.313,1181.357c0.67,1.175,1.334,2.374,1.99,3.595c1.59-0.063,3.183-0.151,4.78-0.258 c0.363-3.563,0.729-6.864,1.1-9.934c-0.018-0.113-0.039-0.224-0.057-0.337C1083.416,1177.26,1080.804,1179.553,1078.313,1181.357 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M876.139,527.516c-4.55-4.138-4.14-6.504,1.451-4.58c0.137-0.43,0.272-0.848,0.409-1.274 c-2.503-0.059-4.88-0.097-7.138-0.115c-1,0.234-1.987,0.459-2.952,0.67c0.07,0.704,0.146,1.411,0.235,2.125 c2.092,2.059,4.508,3.846,7.352,5.224C875.711,528.88,875.926,528.193,876.139,527.516z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M879.872,515.862c-0.972-1.033-1.442-2.156-1.483-3.363c-1.378-0.811-2.791-1.61-4.234-2.399 c-1.535,3.26-3.654,6.734-6.397,10.411c0.027,0.339,0.055,0.68,0.087,1.021c0.979,0,1.989,0.006,3.017,0.014 c2.498-0.585,5.104-1.245,7.812-1.986C879.076,518.311,879.475,517.079,879.872,515.862z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M865.956,473.243c-0.023,0.005-0.047,0.011-0.07,0.017c0.019,0.004,0.038,0.008,0.057,0.011 C865.947,473.262,865.952,473.251,865.956,473.243z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M879.677,508.256c-1.098-1.326-2.196-2.685-3.295-4.063c-0.274,0.976-0.602,1.974-0.991,2.995 c1.404,0.481,2.769,0.955,4.093,1.42C879.547,508.49,879.608,508.374,879.677,508.256z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M873.038,537.5c0.09-0.294,0.18-0.589,0.27-0.881c-0.836,0.381-1.662,0.768-2.479,1.158 C871.575,537.679,872.309,537.588,873.038,537.5z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M888.011,475.169c-1.67-0.983-3.299-1.901-4.889-2.759c-4.048,0.886-7.841,1.539-11.423,2.019 c5.072,1.06,10.001,2.192,14.792,3.382C886.683,476.855,887.187,475.972,888.011,475.169z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1262.421,420.302c-0.337,0.59-0.685,1.181-1.044,1.774c1.203,0.271,2.345,0.578,3.416,0.928 C1263.98,422.079,1263.194,421.183,1262.421,420.302z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1233.532,398.649c0.287-0.351,0.585-0.702,0.893-1.052c-0.833-0.977-1.713-1.98-2.645-3.006 c0.059,1.262,0.137,2.701,0.177,4.271C1232.49,398.788,1233.013,398.718,1233.532,398.649z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1154.896,465.11c1.935-1.695,3.897-3.426,5.886-5.195c-1.054,2.071-2.082,4.085-3.091,6.059 c0.683,0.219,1.381,0.456,2.082,0.696c9.268-4.227,20.206-8.441,33.076-12.56c0.258-0.292,0.52-0.58,0.78-0.869 c-20.835,1.153-34.088,0.738-41.496-0.701c-2.248,3.69-4.455,7.158-6.62,10.422 C1148.457,463.44,1151.572,464.145,1154.896,465.11z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1159.429,440.008c18.036,1.27,31.625,0.184,41.851-2.403c-3.592-2.749-7.367-5.875-11.311-9.417 c-10.934,2.674-21.043,5.79-28.933,8.914C1160.498,438.083,1159.963,439.051,1159.429,440.008z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1140.688,438.035c-0.26-0.035-0.517-0.07-0.778-0.106c-0.383,0.664-0.768,1.339-1.156,2.022 C1139.385,439.316,1140.029,438.678,1140.688,438.035z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1102.58,1118.996c1.231,1.723,2.068,3.674,2.469,5.844c1.274-1.306,2.573-2.733,3.867-4.273 c-2.08-1.323-4.165-2.759-6.257-4.309C1102.635,1117.169,1102.61,1118.08,1102.58,1118.996z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1267.716,1146.28c5.043,6.197,10.16,12.35,15.441,18.231c0.85-2.208,1.673-4.431,2.471-6.649 c-1.472-8.994-3.235-17.269-5.175-24.889C1277.313,1137.143,1273.108,1141.56,1267.716,1146.28z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1145.941,1175.187c-0.991,1.005-2.018,2.049-3.089,3.14c2.113-0.09,4.303-0.164,6.556-0.229 c3.837-0.111,7.873-0.194,12.125-0.272c0.5-0.009,1.011-0.018,1.517-0.027c0.139-0.113,0.278-0.228,0.416-0.344 C1164.19,1172.192,1150.814,1175.061,1145.941,1175.187z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1151.283,1145.383c-2.08-0.95-5.46-3.23-7.6-3.72c-2.58-4.91-5.16-5.63-7.77-2.15 c-2.58,2.05-5.14,4.16-7.65,6.31c-6.296,3.97-12.892,7.472-19.718,10.532c1.726,3,3.583,6.403,5.587,10.134 c11.003-11.748,26.199-17.428,52.787-12.518c-14.254,11.61-30.101,19.477-46.438,24.398c0.34,0.634,0.684,1.274,1.031,1.919 c5.258-0.899,11.207-1.443,17.898-1.795c27.65-24.006,27.563-24.49,11.267-8.089c4.879-2.588,12.893-6.49,25.283-12.302 c-2.779,8.554-7.132,14.875-12.495,19.353c-0.015,0.109-0.037,0.221-0.064,0.337c3.627-0.065,7.4-0.13,11.329-0.207 c1.188-0.023,2.39-0.048,3.606-0.075c4.369-6.304,8.472-12.214,12.319-17.756c-3.211-3.443-5.842-6.63-7.933-9.535 C1171.715,1150.546,1161.479,1150.089,1151.283,1145.383z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1112.292,1122.627c-0.075-0.043-0.15-0.09-0.224-0.134c-2.539,1.335-4.806,2.564-6.824,3.687 c0.283,2.862-0.151,6.073-1.39,9.616c1.872-0.925,3.784-1.885,5.736-2.88c1.704-1.189,3.39-2.412,5.033-3.712 c1.196-0.947,2.405-2.124,3.63-3.392c-1.315-0.641-2.631-1.331-3.948-2.054 C1112.974,1123.535,1112.26,1123.174,1112.292,1122.627z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1085.326,1106.517c0.34-0.025,0.677-0.049,1.016-0.073c0.042-1.378,0.138-2.789,0.295-4.26 c-0.139-0.142-0.277-0.273-0.416-0.416C1085.888,1103.367,1085.595,1104.947,1085.326,1106.517z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1084.746,1110.155c0.548,0.077,1.09,0.159,1.62,0.252c-0.047-1.091-0.061-2.19-0.041-3.308 c-0.368,0.002-0.732,0.005-1.103,0.006C1085.052,1108.128,1084.891,1109.145,1084.746,1110.155z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1216.58,1144.919c-0.736-0.153-1.469-0.311-2.195-0.478c-1.31,0.509-2.636,0.982-3.98,1.416 c4.276,3.88,8.781,8.521,13.409,13.961c-0.105-1.053-0.196-2.127-0.276-3.217 C1221.108,1152.67,1218.793,1148.776,1216.58,1144.919z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1217.718,1185.569c0.449-0.322,0.901-0.625,1.357-0.914c-1.182-0.89-2.339-1.772-3.465-2.644 c-1.51-0.328-2.857-0.457-3.963-0.441c0.944,1.25,1.875,2.434,2.798,3.583C1215.404,1185.309,1216.491,1185.45,1217.718,1185.569 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1187.436,1177.285c6.47-0.184,13.299-0.432,20.51-0.796c0.785,1.118,1.561,2.188,2.331,3.237 c0.842-0.005,1.646-0.005,2.416-0.003c-5.821-4.625-10.856-8.99-15.166-13.068 C1194.692,1169.951,1191.349,1173.487,1187.436,1177.285z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1296.055,494.323c-1.558-1.495-3.099-2.975-4.619-4.434c-0.86,1.389-1.7,2.77-2.463,4.155 c-1.023,1.851-2.012,3.707-3.023,5.543C1289.095,497.823,1292.453,496.061,1296.055,494.323z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1352.213,491.984c0.561-1.063,1.099-2.187,1.606-3.386c-1.727-1.289-3.32-2.409-4.791-3.374 c0.913,2.478,1.737,4.851,2.472,7.121C1351.739,492.224,1351.975,492.105,1352.213,491.984z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1243.553,443.959c0.173-0.615,0.35-1.235,0.529-1.857c-0.363,0.439-0.727,0.88-1.09,1.322 C1243.179,443.601,1243.365,443.78,1243.553,443.959z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1255.56,457.642c-4.507-2.895-9.01-5.651-13.468-8.272c-0.134,0.518-0.266,1.033-0.395,1.545 c5.213,2.286,4.417,5.165-1.239,5.157c-0.458,2.014-0.87,3.974-1.244,5.887c0.068,5.985,0.244,12.742,0.646,20.28 c15.811-0.403,30.326,6.274,13.884,16.562c0.535,0.596,1.067,1.195,1.597,1.795c6.383-9.752,12.648-18.654,18.793-26.764 C1267.316,468.191,1261.09,462.804,1255.56,457.642z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1255.407,500.67c1.068,1.211,2.126,2.43,3.162,3.664c1.026,0.074,2.041,0.143,3.046,0.205 c6.122-10.198,11.263-19.446,15.051-28.621c-0.09-0.074-0.181-0.148-0.271-0.222 C1269.593,482.195,1262.679,490.409,1255.407,500.67z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1304.226,490.619c8.136-5.35,15.262-10.289,21.467-14.82c0.513-0.908,1.022-1.837,1.524-2.799 c0.18-1.881,0.366-3.821,0.56-5.836c0.062,1.479,0.12,2.944,0.174,4.396c1.312-2.613,2.585-5.422,3.823-8.433 c-1.741-0.266-3.498-0.443-5.29-0.537c-2.875,3.981-5.615,8.41-8.077,13.279c-4.165-4.475-6.631-8.781-7.642-12.753 c-14.49,1.186-9.113,0.84-12.571,13.448c-0.94,3.411-2.666,6.612-4.542,9.728c2.221,1.987,4.407,4.018,6.555,6.092 C1301.517,491.791,1302.85,491.201,1304.226,490.619z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1339.646,465.07c-1.496-0.516-2.983-0.943-4.468-1.286c-0.377,1.949-0.746,3.854-1.105,5.715 C1336.048,467.968,1337.905,466.491,1339.646,465.07z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1349.029,485.223c-0.299-0.811-0.604-1.63-0.922-2.464c-0.635,0.23-1.28,0.463-1.931,0.698 C1347.073,483.975,1348.023,484.563,1349.029,485.223z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1240.503,505.155c0.438,0.921,0.917,1.793,1.43,2.626c-0.09-0.833-0.179-1.662-0.263-2.482 c-0.15-0.141-0.301-0.281-0.452-0.422C1240.986,504.969,1240.739,505.063,1240.503,505.155z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1235.136,398.439c-0.233-0.279-0.47-0.559-0.711-0.842c-0.309,0.35-0.606,0.7-0.893,1.052 C1234.072,398.577,1234.611,398.505,1235.136,398.439z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1414.003,462.966c0.085,0.355,0.169,0.711,0.253,1.063c0.236-0.313,0.468-0.634,0.702-0.951 C1414.641,463.041,1414.318,463.004,1414.003,462.966z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1362.022,495.13c-0.397-0.333-0.786-0.655-1.173-0.976c0.268,0.721,0.551,1.43,0.85,2.125 C1361.807,495.897,1361.909,495.516,1362.022,495.13z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1403.689,466.674c-2.742-2.207-5.483-4.254-8.215-6.152c-1.119-0.158-2.225-0.317-3.324-0.475 c-3.678,3.234-7.345,5.932-11.206,8.316c0.704,1.059,1.39,2.106,2.06,3.143c6.108,2.043,12.38,4.403,18.781,7.141 c0.934-0.966,1.865-1.954,2.792-2.965c-0.058-4.471-0.137-9.121-0.232-13.94c-0.578-0.077-1.153-0.154-1.726-0.231 C1402.963,463.186,1403.319,464.905,1403.689,466.674z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1439.68,667.562c-2.254-2.561-4.366-5.073-6.309-7.487 C1425.163,674.577,1428.032,677.857,1439.68,667.562z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1447.668,658.476c0.588-1.676,1.172-3.316,1.752-4.902c-0.591-1.119-1.203-2.22-1.844-3.291 c-1.161,0.515-2.419,0.846-3.751,1.019C1445.615,653.535,1446.869,655.961,1447.668,658.476z"
                      }
                    }),
                    _vm._v(" "),
                    _c("polygon", {
                      attrs: {
                        fill: "#662D91",
                        points:
                          "1368.167,400.392 1368.16,400.385 1368.167,400.393 "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1465.309,1057.539c0.124-1.001,0.238-2.015,0.339-3.044c-0.8,0.199-1.608,0.397-2.427,0.593 c-0.288,0.251-0.562,0.495-0.825,0.735c0.169,1.081,0.253,2.24,0.333,3.507 C1463.608,1058.727,1464.47,1058.129,1465.309,1057.539z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1464.677,1061.941c-0.081,0.494-0.165,0.986-0.252,1.472c2.222-0.469,4.883-1.286,7.818-2.419 c-1.587-0.088-3.198-0.144-4.832-0.169C1466.5,1061.2,1465.588,1061.572,1464.677,1061.941z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M1428.238,1151.908c0.526,1.344,1.008,2.713,1.445,4.109c0.198-0.323,0.379-0.657,0.57-0.984 c-0.372-1.054-0.724-2.115-1.053-3.184C1428.879,1151.87,1428.558,1151.89,1428.238,1151.908z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M1422.336,1191.646c0.071-1.317,0.132-2.593,0.182-3.83c-2.373,0.678-4.959,1.36-7.688,2.022 c-0.006,0.203-0.012,0.408-0.017,0.614C1417.268,1190.832,1419.775,1191.231,1422.336,1191.646z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1463.622,1067.426c0.108,0.559,0.233,1.135,0.374,1.727c0.65,0.276,1.293,0.544,1.923,0.797 c0.73-0.515,1.456-1.035,2.171-1.571c-1.374-0.694-2.783-1.405-4.209-2.125 C1463.798,1066.651,1463.708,1067.036,1463.622,1067.426z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1430.254,1155.033c0.654-1.121,1.269-2.263,1.844-3.428c-0.972,0.098-1.938,0.179-2.897,0.243 C1429.53,1152.917,1429.881,1153.979,1430.254,1155.033z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1269.172,403.956c2.149,0.864,4.424,1.552,6.806,2.055c0.332-0.64,0.664-1.279,0.996-1.917 c-0.17-0.435-0.347-0.865-0.526-1.293c-2.218-0.686-4.43-1.25-6.628-1.655C1269.629,402.076,1269.414,403.013,1269.172,403.956z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1286.586,339.594c0.345-0.448,0.696-0.899,1.05-1.35c-0.887-0.09-1.767-0.178-2.64-0.266 C1285.514,338.518,1286.041,339.057,1286.586,339.594z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1222.517,385.276c-0.151,0.031-0.302,0.063-0.452,0.093c0.096,0.561,0.184,1.126,0.275,1.689 c0.474-0.216,0.942-0.425,1.409-0.633C1223.346,386.045,1222.934,385.662,1222.517,385.276z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1294.989,325.009c-9.007-2.143-15.718-2.654-20.485-2.073c1.467,3.401,3.574,6.81,6.236,10.176 c2.796,0.817,5.758,1.689,8.896,2.616c1.414-1.751,2.895-3.528,4.444-5.331C1294.209,328.582,1294.508,326.783,1294.989,325.009z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1443.678,835.482c1.105-2.795,2.333-5.698,3.689-8.705c-1.879-1.143-3.827-2.315-5.861-3.521 c0.073,0.852,0.191,1.653,0.354,2.395C1440.134,829.539,1440.938,832.769,1443.678,835.482z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1450.764,798.971c0.992-1.779,2.201-3.626,3.642-5.535c-0.716-1.158-1.44-2.338-2.171-3.538 c-1.659,2.562-3.125,5.148-4.396,7.712C1448.784,798.062,1449.761,798.516,1450.764,798.971z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1450.293,1048.19c0.247-0.225,0.495-0.455,0.74-0.674c-0.536-0.168-1.074-0.341-1.606-0.503 c-0.016,0.406-0.033,0.811-0.039,1.226C1449.696,1048.225,1449.99,1048.206,1450.293,1048.19z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1501.938,973.444c0.324,0.591,0.643,1.181,0.958,1.771c2.929-0.311,5.681-0.534,8.267-0.678 c-0.176-2.636-0.474-5.253-0.875-7.849c-1.188,0.496-2.366,0.986-3.53,1.469C1505.461,970.98,1504.041,973.271,1501.938,973.444z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M806.471,1333.367c2.792,2.134,5.502,4.205,8.112,6.214c-1.497-3.786-3.155-7.729-4.998-11.847 C808.6,1329.502,807.562,1331.38,806.471,1333.367z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M901.206,1310.323c-0.309-0.358-0.614-0.718-0.92-1.077c-1.227,0.736-2.56,1.438-4.007,2.099 c0.752,1.177,1.447,2.342,2.08,3.494c1.867-0.585,3.804-1.145,5.774-1.694c2.462-1.348,5.927-2.939,10.674-4.862 C910.896,1308.959,906.39,1309.635,901.206,1310.323z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M931.869,1275.967c-6.398-2.451-9.891-2.224-12.044-0.293c1.706,2.335,3.48,4.486,5.215,6.475 C926.645,1279.953,928.937,1277.905,931.869,1275.967z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M902.219,1324.208c0.709-0.264,1.426-0.54,2.152-0.832c-1.004-0.847-2.147-1.578-3.134-2.283 C901.622,1322.146,901.953,1323.186,902.219,1324.208z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M885.353,1338.949c1.192-1.084,2.357-2.165,3.495-3.242c-2.442-0.371-4.835-0.734-7.178-1.087 c-0.676,3.388-1.469,6.616-2.356,9.649C881.397,1342.489,883.411,1340.714,885.353,1338.949z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M863.472,1331.933c5.65,0.806,11.731,1.71,18.198,2.686c0.594-2.979,1.096-6.08,1.495-9.27 C876.596,1327.912,870.005,1330.094,863.472,1331.933z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M855.558,1317.4c-2.228,3.121-4.778,6.428-7.678,9.912c0.966,0.962,1.939,1.928,2.917,2.898 c3.648,0.465,7.552,0.996,11.691,1.583c6.01-4.214,13.022-8.101,21.221-11.585c0.097-1.121,0.178-2.252,0.248-3.39 c-1.451-0.076-3.007-0.31-4.642-0.723C872.736,1317.105,864.907,1317.596,855.558,1317.4z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M910.093,1254.721c0.565,2.696,1.344,5.239,2.282,7.642c3.687-1.871,7.312-3.61,10.867-5.219 C918.734,1256.25,914.35,1255.408,910.093,1254.721z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1013.181,1304.401c-2.242,1.313-4.638,2.752-7.192,4.214c-0.006,0.09-0.012,0.181-0.018,0.271 c2.162-0.101,4.354-0.138,6.557-0.162C1012.841,1307.346,1013.063,1305.905,1013.181,1304.401z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1047.021,1291.708c-6.123,1.424-11.913,2.76-17.399,4.01c-0.054,0.978-0.131,1.991-0.227,3.035 c2.63,0.702,4.766,2.992,6.45,7.582c3.944-1.297,7.612-3.337,10.847-6.517C1046.92,1296.785,1047.018,1294.088,1047.021,1291.708 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M982.685,1332.963c0.257-2.844,0.422-5.615,0.768-8.2c-1.245,1.399-2.49,2.805-3.724,4.219 C980.622,1330.348,981.611,1331.674,982.685,1332.963z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1041.936,1329.36c-0.715,0.303-1.436,0.586-2.167,0.837c0.147,2.037,0.279,4.196,0.395,6.474 C1040.809,1334.144,1041.399,1331.707,1041.936,1329.36z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1038.832,1261.205c2.77,0.141,5.461,0.274,8.078,0.402c-1.24-2.314,0.543-1.504,4.531,0.219 c2.397,0.115,4.726,0.226,6.989,0.334c-6.519-2.063-12.03-4.34-16.432-6.864c-0.313,0.075-0.626,0.15-0.938,0.225 C1040.288,1257.481,1039.545,1259.376,1038.832,1261.205z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M979.729,1328.982c-1.824-2.788-3.255-5.736-4.231-8.85c-2.974,0.414-6.067,0.622-9.28,0.568 c-2.706,2.353-5.68,5.531-8.949,9.647c4.105,3.011,8.601,6.17,13.493,9.486C973.595,1336.137,976.631,1332.532,979.729,1328.982z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M941.699,1318.044c4.014,3.484,8.683,7.201,14.045,11.18c2.906-2.769,6.118-5.623,9.483-8.552 c-7.068-0.236-14.713-1.741-22.97-5.094C942.064,1316.452,941.879,1317.264,941.699,1318.044z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1032.555,1257.643c-3.416,0.884-6.73,1.781-9.947,2.694c2.891,0.163,5.713,0.318,8.462,0.465 C1031.556,1259.763,1032.05,1258.712,1032.555,1257.643z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1050.713,1294.893c0.378-0.573,0.741-1.159,1.089-1.76c-0.914-0.367-1.828-0.724-2.741-1.103 C1049.563,1292.948,1050.113,1293.903,1050.713,1294.893z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1032.794,1361.801c-2.877-0.103-5.932,0.396-9.236,1.429c-2.351,1.379-4.811,2.835-7.371,4.361 c-0.193,0.165-0.394,0.331-0.598,0.498c3.769,2.254,7.658,4.559,11.68,6.922c-4.511,0.611-9.348,1.187-14.512,1.725 c2.614,3.352,5.863,7.55,9.864,13.304C1026.599,1379.842,1029.961,1370.442,1032.794,1361.801z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1016.458,1361.463c1.349-1.723,2.402-3.449,2.989-5.222c-0.178-0.067-0.358-0.134-0.535-0.202 C1018.084,1357.885,1017.267,1359.691,1016.458,1361.463z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1017.657,1352.617c-2.659-3.549-7.129-7.895-13.85-13.505c-0.179,2.603-0.326,4.939-0.436,7.051 c0.111-0.678,0.22-1.352,0.336-2.039c-0.128,0.861-0.243,1.702-0.361,2.549c-0.039,0.781-0.072,1.533-0.1,2.254 c1.803,0.978,3.661,1.918,5.568,2.822C1011.748,1352.046,1014.696,1352.336,1017.657,1352.617z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1019.974,1356.439c1.49,3.404,0.89,6.034-1.185,8.57c1.648-0.704,3.236-1.299,4.77-1.778 c2.095-1.229,4.106-2.398,6.042-3.514C1026.334,1358.705,1023.116,1357.613,1019.974,1356.439z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1019.646,1350.825c2.622-2.28,5.438-4.36,8.416-6.239c-6.934-2.243-11.194-5.292-13.518-8.895 c-3.619,0.245-6.788,0.465-9.56,0.655C1014.27,1341.94,1018.524,1346.606,1019.646,1350.825z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M937.193,1278.299c-1.972-0.955-3.734-1.723-5.323-2.332c-2.933,1.938-5.225,3.986-6.828,6.182 c4.248,4.868,8.259,8.765,10.441,12.012c0.432-1.319,0.901-2.664,1.401-4.035 C936.674,1286.713,936.819,1282.779,937.193,1278.299z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M941.11,1302.615c-2.576,2.525-5.045,5.152-7.427,7.891c1.999,2.072,4.274,4.237,6.832,6.502 c0.924-3.52,2.145-7.598,3.674-11.937C942.999,1304.38,941.978,1303.563,941.11,1302.615z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1430.471,1266.171c3.6,0.185,7.11,0.443,10.533,0.773c0.422-1.436,0.821-2.875,1.195-4.317 c-3.842,0.759-7.697,1.395-11.571,1.875C1430.57,1265.059,1430.517,1265.615,1430.471,1266.171z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1400.817,1264.544c-3.147-0.43-6.313-1.013-9.499-1.768c-0.552,1.377-1.125,2.79-1.716,4.244 c3.5-0.295,6.936-0.535,10.307-0.719C1400.219,1265.724,1400.521,1265.138,1400.817,1264.544z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M1317.267,1338.715c-2.498-3.533-4.61-6.928-6.35-10.325c0.174,2.248,0.316,4.526,0.387,6.866 c0.34,0.289-0.074,0.815-1.05,1.497c0.757,0.726,1.512,1.451,2.287,2.196C1314.171,1338.865,1315.746,1338.787,1317.267,1338.715 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M1278.985,1368.645c1.367,0.554,3.383,1.111,5.849,1.6c5.282,1.047,12.614,1.781,19.999,1.503 c0.155-0.006,0.311-0.012,0.466-0.019c0.917-2.182,1.84-4.422,2.769-6.712c-0.505-0.988-1.012-1.978-1.523-2.979 C1297.439,1365.137,1288.226,1367.294,1278.985,1368.645z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M1271.276,1372.283c0.153,0.917,0.302,1.866,0.447,2.855c0.624,0.397,1.261,0.797,1.909,1.199 c0.01,0.002,0.021,0.004,0.031,0.006c4.243,0.79,8.49,1.418,12.732,1.91c-4.507-3.492-9.047-6.189-13.443-8.246 C1272.393,1370.759,1271.835,1371.516,1271.276,1372.283z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M1264.895,1341.924c0.076-0.005,0.151-0.01,0.227-0.016c-0.074-2.618-0.059-5.155,0.03-7.63 c-1.439,1.734-3.147,3.552-5.028,5.521C1261.64,1340.523,1263.228,1341.234,1264.895,1341.924z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1071.443,1286c-0.289,1.466-0.621,2.928-0.996,4.387c2.693-2.078,5.253-4.061,7.695-5.956 C1075.871,1284.963,1073.644,1285.485,1071.443,1286z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1243.794,1237.85c0.016-0.536,0.029-1.068,0.038-1.594c-0.169,0.486-0.339,0.972-0.508,1.458 C1243.478,1237.759,1243.64,1237.805,1243.794,1237.85z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1245.875,1239.688c-0.112-0.452-0.221-0.898-0.328-1.333c-0.595-0.171-1.175-0.339-1.753-0.505 c-0.012,0.392-0.022,0.781-0.037,1.178C1244.463,1239.24,1245.169,1239.458,1245.875,1239.688z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1242.568,1226.804c-1.812,1.871-4.234,4.109-7.333,6.738c-0.209,0.517-0.424,1.051-0.647,1.615 c1.661,0.495,3.414,1.011,5.266,1.551c1.279-2.518,2.453-4.932,3.515-7.231 C1243.091,1228.443,1242.828,1227.551,1242.568,1226.804z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1092.517,1289.232c-0.705-1.196-1.318-2.44-1.841-3.712c-2.639,1.878-4.832,4.433-6.537,7.502 C1086.839,1291.814,1089.632,1290.55,1092.517,1289.232z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1076.555,1279.3c-1.829-1.606-2.964-3.469-3.552-5.536c-0.1,1.5-0.229,2.993-0.391,4.482 C1073.925,1278.598,1075.239,1278.95,1076.555,1279.3z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1122.363,1331.546c1.345-3.674,2.794-5.663,4.291-6.357c-2.297-4.675-4.473-9.305-6.547-13.872 c-2.135-0.333-4.274-0.68-6.416-1.049C1115.795,1316.651,1118.602,1323.699,1122.363,1331.546z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1028.607,1266.116c0.79-1.724,1.612-3.495,2.463-5.315c-2.75-0.147-5.571-0.301-8.462-0.465 c-2.435,0.691-4.811,1.391-7.138,2.101C1019.817,1263.654,1024.197,1264.881,1028.607,1266.116z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1057.805,1274.227c0.13-0.952,0.246-1.91,0.341-2.875c-0.577,0.824-1.169,1.653-1.767,2.484 C1056.853,1273.967,1057.33,1274.097,1057.805,1274.227z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1049.061,1292.03c0.912,0.379,1.827,0.736,2.741,1.103c0.541-0.935,1.051-1.897,1.52-2.894 c-1.567,0.366-3.114,0.726-4.641,1.082C1048.804,1291.556,1048.93,1291.791,1049.061,1292.03z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1038.832,1261.205c-0.954,2.451-1.853,4.785-2.697,7.016c6.429,1.796,12.917,3.601,19.463,5.401 c-4.956-6.558-7.729-10.225-8.688-12.015C1044.294,1261.48,1041.603,1261.346,1038.832,1261.205z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1051.441,1261.827c1.896,0.819,4.287,1.843,7.091,2.836c0.016-0.821,0.022-1.643,0.017-2.465 c-0.04-0.012-0.08-0.025-0.12-0.037C1056.167,1262.053,1053.838,1261.942,1051.441,1261.827z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M866.989,521.534c0.285,0,0.566-0.002,0.855-0.001c-0.031-0.342-0.06-0.682-0.087-1.021 C867.504,520.851,867.254,521.19,866.989,521.534z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M820.671,499.273c1.887-1.511,3.659-2.839,5.323-3.991c-2.107-0.983-4.192-2.003-6.252-3.039 C820.049,494.634,820.359,496.979,820.671,499.273z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M866.443,522.531c0.543,0.623,1.109,1.228,1.702,1.811c-0.089-0.714-0.165-1.421-0.235-2.125 C867.416,522.325,866.927,522.429,866.443,522.531z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M815.56,490.106c-0.063,2.324-0.104,4.668-0.119,7.027c0.649-2.025,1.346-4.03,2.09-6.012 C816.872,490.784,816.214,490.445,815.56,490.106z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M906.086,1035.499c1.573,4.388,3.19,8.415,4.844,12.123c0.326-2.844,0.51-5.587,0.576-8.219 C909.873,1038.117,908.068,1036.815,906.086,1035.499z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M900.574,1017.792c0.802,2.966,1.622,5.8,2.456,8.509c1.655-1.187,3.358-2.31,5.093-3.37 C905.684,1021.267,903.162,1019.551,900.574,1017.792z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M920.729,1048.646c-1.059,1.425-2.12,3.578-3.218,6.558c0.49-0.17,0.99-0.35,1.502-0.542 c0.724-1.585,1.569-3.182,2.55-4.799C921.302,1049.46,921.025,1049.055,920.729,1048.646z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M934.348,1011.189c-2.921,0.961-6.036,2.073-9.237,3.355c5.227,1.907,10.227,3.996,14.978,6.245 c0.803-2.315,1.7-4.666,2.698-7.048C940.021,1012.957,937.204,1012.106,934.348,1011.189z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M910.347,1142.748c-0.17,0.921-0.34,1.861-0.51,2.794c-0.756,4.144-1.511,8.387-2.264,12.761 c1.157,0.6,2.311,1.301,3.461,2.117c1.724,0.133,3.461,0.263,5.21,0.386c0.36-0.216,0.726-0.434,1.091-0.652 c1.579-3.655,3.075-7.23,4.484-10.72c0.844-2.091,1.659-4.154,2.444-6.187c-1.568-0.961-3.163-1.954-4.764-2.975 C916.498,1141.017,913.445,1141.842,910.347,1142.748z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M835.398,978.659c-5.004-2.656-10.41-5.734-16.205-9.069c-0.851,3.015-1.513,5.926-1.96,8.595 c1.86,3.458,3.683,6.736,5.47,9.844C826.512,985.134,830.745,982.008,835.398,978.659z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M829.953,1078.18c-0.95-2.395-1.909-4.77-2.872-7.121c-2.504,0.615-5.095,1.262-7.772,1.941 c-0.539,1.458-1.068,2.924-1.586,4.401c2.552,2.628,4.489,5.782,5.975,9.326C825.588,1083.968,827.669,1081.12,829.953,1078.18z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M817.088,1097.355c1.505-2.705,3.202-5.501,5.11-8.396c-2.048-1.773-4.19-3.708-6.411-5.84 c-1.802,5.508-3.457,11.106-4.941,16.725c0.375,0.247,0.752,0.498,1.127,0.744 C811.143,1093.859,813.564,1092.306,817.088,1097.355z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M821.759,1106.807c-1.642-4.292-3.246-7.412-4.671-9.453c-0.925,1.663-1.781,3.293-2.565,4.888 C816.945,1103.805,819.358,1105.327,821.759,1106.807z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1007.215,1090.097c4.349-2.498,10.596-8.455,14.719-16.569c-0.121,0.005-0.24,0.01-0.361,0.016 c-2.571,0.11-5.195,0.259-7.843,0.379c-0.124,0.13-0.239,0.253-0.361,0.381 C1011.635,1079.374,1009.591,1084.638,1007.215,1090.097z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1002.261,1089.774c0.015,0.249,0.023,0.496,0.033,0.744c0.277,1.118,1.678,1.134,3.675,0.223 c-0.261-2.266-0.539-4.505-0.838-6.71C1003.264,1086.687,1002.388,1088.577,1002.261,1089.774z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1041.53,1029.876c-2.702-1.134-5.378-2.18-8.018-3.113c6.322-0.36,12.071-0.216,17.33,0.359 c-0.078-0.237-0.155-0.474-0.233-0.711c-6.437-1.028-13.534-2.48-21.313-4.369c-1.64,3.32-3.584,6.579-5.801,9.752 c-0.16,1.039-0.346,2.068-0.561,3.087c3.191,1.428,6.553,3.045,10.092,4.859 C1035.281,1035.408,1038.22,1032.008,1041.53,1029.876z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M942.787,1013.741c-0.998,2.382-1.894,4.733-2.698,7.048c1.153,0.546,2.286,1.103,3.411,1.667 c1.315-2.399,2.604-4.885,3.856-7.468C945.85,1014.593,944.327,1014.177,942.787,1013.741z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M953.213,993.714c-0.221,0.354-0.434,0.707-0.651,1.061c0.93,0.298,1.843,0.593,2.74,0.886 c0.121-0.354,0.237-0.715,0.357-1.072C954.848,994.297,954.042,994.004,953.213,993.714z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1177.62,312.189c-0.54-2.887-1.11-5.609-1.702-8.186c-0.262,0.012-0.531,0.003-0.811-0.037 c1.393,6.448,2.638,12.215,3.618,17.536c2.169,1.293,4.381,2.642,6.628,4.038c1.819,0.553,3.712,1.063,5.681,1.541 c0.442-1.873,2.774-2.583,6.266-2.655c0.752-1.561,1.546-3.102,2.38-4.622c-0.727-2.194-1.247-4.34-1.551-6.46 C1191.713,312.943,1184.898,312.552,1177.62,312.189z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1136.033,296.206c0.005,0.157,0.011,0.314,0.016,0.471c0.032-0.159,0.065-0.315,0.097-0.473 C1136.108,296.205,1136.071,296.206,1136.033,296.206z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1154.714,1025.922c1.057-0.695,2.055-1.392,2.992-2.065c-2.239,0.099-4.427,0.273-6.554,0.513 C1152.344,1024.875,1153.531,1025.393,1154.714,1025.922z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1113.996,989.212c-0.592,0.352-1.188,0.693-1.789,1.022c0.063,5.722-0.39,11.052-1.659,15.81 c0.073,0.234,0.147,0.47,0.221,0.707c2.478-0.382,5.03-0.841,7.668-1.396c-2.094,0.863-4.038,1.56-5.862,2.123 c7.168,0.259,15.124,0.712,23.9,1.368C1134.333,1003.68,1127.82,997.344,1113.996,989.212z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1087.481,1026.997c-1.163,0.255-2.368,0.483-3.634,0.67c-0.502,3.606-0.966,7.705-1.372,12.367 c1.639,1.479,3.149,3.069,4.549,4.756c4.313-2.06,8.297-4.466,12.15-7.423 C1094.279,1035.732,1090.628,1032.135,1087.481,1026.997z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1116.027,963.961c-2.019-3.637-4.141-7.536-6.363-11.698c-0.335,1.391-0.667,2.743-0.994,4.029 c0.415,3.021,0.841,6.03,1.248,9.01C1112.064,964.808,1114.099,964.365,1116.027,963.961z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1105.964,1100.045c-0.14-0.043-0.28-0.087-0.419-0.13c-0.261,0.51-0.519,1.012-0.781,1.525 C1105.165,1100.974,1105.569,1100.505,1105.964,1100.045z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1113.488,1114.553c0.848-1.239,1.678-2.53,2.479-3.874c-1.659,0.785-3.35,1.502-5.074,2.137 C1111.743,1113.397,1112.611,1113.975,1113.488,1114.553z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1081.503,1106.811c-0.02,0.098-0.04,0.197-0.06,0.295c1.279,0.004,2.54,0.004,3.78,0 c0.371-0.001,0.735-0.004,1.103-0.006c0.004-0.218,0.01-0.436,0.016-0.656c-0.339,0.025-0.676,0.048-1.016,0.073 C1084.057,1106.611,1082.784,1106.708,1081.503,1106.811z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1086.641,1088.234c-0.367,1.038-0.726,2.097-1.077,3.177c0.798,0.847,1.611,1.693,2.449,2.537 c0.236-1.078,0.498-2.192,0.79-3.352C1088.014,1089.826,1087.294,1089.038,1086.641,1088.234z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1050.842,1027.122c4.433,0.484,8.511,1.281,12.249,2.376c-0.595-0.57-1.151-1.133-1.671-1.688 c-3.388-0.327-6.982-0.787-10.811-1.399C1050.686,1026.648,1050.764,1026.885,1050.842,1027.122z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1071.559,1050.575c1.55-0.49,3.067-0.979,4.534-1.461c0.646-0.212,1.28-0.429,1.91-0.647 c-3.19-1.794-6.394-3.58-9.6-5.33C1069.511,1045.353,1070.567,1047.828,1071.559,1050.575z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1038.754,990.763c2.843-1.367,5.632-2.669,8.367-3.908c-0.458-1.801-0.185-3.207,0.77-3.924 c-4.854-0.443-9.356-0.233-13.384,0.455C1036.125,985.75,1037.555,988.224,1038.754,990.763z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1023.534,967.064c0.438,0.529,0.864,1.06,1.277,1.592c0.471-0.531,0.945-1.058,1.418-1.584 C1025.339,967.066,1024.441,967.064,1023.534,967.064z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1031.061,978.855c0.74,1.598,1.38,3.205,1.921,4.819c0.5-0.104,1.009-0.199,1.525-0.288 C1033.437,981.823,1032.285,980.308,1031.061,978.855z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1191.863,383.562c0.477,1.686,1.02,3.382,1.611,5.086c3.664,0.175,7.81-0.049,12.274-0.562 c-0.661-2.215-1.563-5.017-2.408-8.099C1199.479,381.672,1195.617,382.872,1191.863,383.562z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1195.34,393.579c0.572,1.396,1.182,2.797,1.834,4.203c3.393,0.572,7.272,1.501,11.598,2.799 c-0.614-3.317-1.369-6.572-2.222-9.688C1202.799,392.464,1199.041,393.439,1195.34,393.579z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1270.112,306.217c0.482,0.227,0.954,0.446,1.417,0.66c0.438-0.118,0.877-0.239,1.316-0.361 c0.246-0.909,0.556-1.811,0.928-2.704C1272.644,304.634,1271.424,305.436,1270.112,306.217z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1294.989,325.009c0.302-1.111,0.678-2.211,1.124-3.299c-1.169-0.764-2.321-1.547-3.455-2.348 c-4.274-0.643-8.339-1.24-12.197-1.791c-2.456,0.147-5.006,0.225-7.674,0.243c0.402,1.701,0.978,3.41,1.717,5.122 C1279.271,322.355,1285.982,322.866,1294.989,325.009z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1202.409,324.646c-0.29-0.025-0.576-0.049-0.859-0.07c0.075,0.168,0.147,0.335,0.225,0.504 C1201.988,324.938,1202.198,324.791,1202.409,324.646z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1201.551,324.576c-0.728-1.622-1.352-3.21-1.869-4.771c-0.834,1.52-1.629,3.061-2.38,4.622 C1198.576,324.4,1200.004,324.458,1201.551,324.576z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1363.428,651.889c1.181-0.445,2.378-0.88,3.585-1.302c-0.647-0.039-1.285-0.077-1.919-0.116 C1364.54,650.934,1363.984,651.408,1363.428,651.889z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1367.014,650.587c1.444,0.086,2.93,0.171,4.445,0.255c0.418-0.711,0.843-1.423,1.271-2.135 C1370.814,649.298,1368.902,649.927,1367.014,650.587z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1314.993,739.533c-0.176-2.132-0.349-4.359-0.52-6.678c-1.055-1.09-2.095-2.177-3.121-3.263 c-0.363,0.82-0.727,1.653-1.09,2.487c-1.544,3.545-3.086,7.213-4.625,11.011c-0.277,0.684-0.554,1.37-0.831,2.062 c1.373,0.368,2.755,0.804,4.14,1.281c1.651-1.884,3.283-3.745,4.898-5.589C1314.227,740.408,1314.613,739.967,1314.993,739.533z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1211.792,1050.418c0.05,0.442,0.109,0.888,0.165,1.333c5.476,3.285,10.869,6.42,16.099,9.443 c-1.523-5.054-3.298-10.111-5.078-15.16c-0.052-0.048-0.104-0.096-0.156-0.143 C1219.391,1047.357,1215.72,1048.866,1211.792,1050.418z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1409.161,1066.757c5.547-7.398,11.563-15.708,18.113-24.998c-0.052-0.009-0.105-0.018-0.157-0.026 c-3.57-0.449-7.212-0.908-10.895-1.387c-4.149-0.365-8.146-0.523-12.001-0.503c-5.913,5.598-12.602,10.521-19.711,14.494 c1.638,4.883,3.143,9.82,4.47,14.744C1394.692,1068.752,1401.587,1067.851,1409.161,1066.757z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1269.354,1014.895c-1.439-0.422-2.805-0.843-4.116-1.261c0.054,0.204,0.099,0.411,0.134,0.621 c2.729,3.124,5.479,6.834,8.12,11.203c0.041-0.087,0.082-0.174,0.122-0.261 C1269.379,1019.495,1267.365,1015.817,1269.354,1014.895z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1232.828,992.691c0.125-0.092,0.25-0.185,0.374-0.277c-0.146,0.069-0.291,0.141-0.435,0.213 C1232.787,992.648,1232.807,992.67,1232.828,992.691z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1242.523,1063.963c0.535,2.133,1.067,4.319,1.578,6.539c3.527,2.077,6.921,4.115,10.15,6.127 c1.248-1.047,2.583-2.057,4.002-3.033c-5.87-12.779-9.163-20.86-5.584-26.729c-0.813-0.812-1.613-1.621-2.403-2.427 c-5.493-1.536-9.57-2.851-12.503-3.989C1239.42,1048.547,1240.694,1056.664,1242.523,1063.963z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1480.314,761.691c0.072,3.668-0.06,7.295-0.368,10.847c0.917,0.745,1.809,1.474,2.679,2.187 c1.828-2.079,3.606-3.894,5.433-5.406c-0.925-1.916-1.752-3.804-2.428-5.643c-0.252-0.323-0.509-0.628-0.762-0.944 C1483.361,762.382,1481.842,762.035,1480.314,761.691z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1377.802,820.259c4.539-3.848,8.516-7.392,11.958-10.646c-1.165-1.473-2.355-2.94-3.57-4.402 C1383.106,810.128,1380.313,815.19,1377.802,820.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1483.032,760.531c-0.956-1.103-1.921-2.163-2.895-3.151c0.077,1.216,0.128,2.429,0.16,3.638 C1481.212,760.854,1482.124,760.691,1483.032,760.531z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1387.465,803.21c0.951,1.933,1.9,3.897,2.847,5.877c1.582-1.506,3.047-2.95,4.404-4.336 c-0.283-3.64-0.865-6.864-1.666-9.547C1391.096,797.805,1389.235,800.481,1387.465,803.21z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1411.981,841.522c6.948-14.023,12.103-20.097,16.264-20.047c0.032-1.989,0.016-4.048-0.044-6.169 c-1.971-0.582-4.167-1.516-6.585-2.817c-0.041,0.108-0.081,0.223-0.122,0.325c-3.23,7.95-7.02,12.57-11.62,19.31 c-1.12,1.641-2.254,3.37-3.41,5.137c0.913-0.238,1.793-0.494,2.607-0.786C1410.106,838.22,1411.075,839.901,1411.981,841.522z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1450.529,787.087c-2.367-3.922-4.82-8.052-7.368-12.358c-0.101,0.083-0.196,0.174-0.298,0.255 c-0.947,0.76-2.763,1.604-4.793,2.455c0.799,2.494,1.507,4.931,2.105,7.283C1443.708,785.764,1447.107,786.469,1450.529,787.087z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1448.256,733.399c-1.291,3.14-3.184,6.392-5.88,9.693c0.978,0.747,1.943,1.485,2.896,2.215 c2.12-2.912,3.997-6.038,5.638-9.319C1450.036,735.058,1449.151,734.197,1448.256,733.399z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1461.678,752.547c-0.722,1.026-1.507,2.222-2.429,3.552c1.982,1.545,3.889,3.038,5.736,4.491 C1463.939,757.712,1462.834,755.033,1461.678,752.547z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1448.256,733.399c0.014-0.034,0.026-0.067,0.039-0.101c-0.079-0.025-0.158-0.048-0.238-0.073 C1448.124,733.284,1448.19,733.341,1448.256,733.399z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1413.455,844.212c2.821,5.245,4.925,9.796,6.368,13.695c1.568-2.693,2.962-5.721,4.143-9.114 C1420.858,847.317,1417.362,845.788,1413.455,844.212z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1431.664,729.002c-0.137,1.921-0.264,3.813-0.377,5.668c2.281,1.724,4.5,3.406,6.663,5.05 c1.922-2.642,3.634-5.31,4.898-8.023C1438.953,730.616,1435.209,729.717,1431.664,729.002z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1403.847,794.151c0.099,0.309,0.191,0.607,0.295,0.922c-0.148-0.243-0.293-0.479-0.441-0.721 c-2.182,3.032-5.146,6.48-8.984,10.399c0.569,7.308-0.075,16.298-2.592,25.982c0.042-0.05,0.088-0.099,0.129-0.149 c12.856-15.715,19.35-35.339,19.724-55.116c-1.492,1.177-2.95,2.406-4.373,3.683 C1409.628,782.447,1408.8,787.201,1403.847,794.151z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1377.79,826.261c-0.22-1.584-0.431-3.146-0.633-4.686c-0.797,1.64-1.564,3.279-2.302,4.914 C1375.87,826.383,1376.849,826.307,1377.79,826.261z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1430.495,753.89c-0.028,1.421-0.047,2.818-0.059,4.19c0.128,0.276,0.256,0.551,0.382,0.827 c0.726-0.446,1.437-0.91,2.134-1.393c-0.744-1.245-1.497-2.501-2.257-3.766C1430.628,753.796,1430.562,753.843,1430.495,753.89z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M872.231,540.139c0.271-0.889,0.539-1.764,0.808-2.639c-0.729,0.089-1.463,0.18-2.209,0.277 c-0.869,0.415-1.726,0.835-2.573,1.259c0.011,0.55,0.024,1.095,0.037,1.636C869.626,540.493,870.939,540.315,872.231,540.139z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1356.57,722.578c-0.941-2.439-1.677-4.91-2.213-7.412c-0.382,0.942-0.76,1.875-1.134,2.792 C1354.315,719.455,1355.431,720.993,1356.57,722.578z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1390.423,772.366c0-0.001,0-0.002,0-0.003c-0.146-0.018-0.294-0.034-0.441-0.051 c0.094,0.148,0.189,0.299,0.283,0.447C1390.319,772.627,1390.37,772.497,1390.423,772.366z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1431.773,788.267c2.836,2.11,6.268,4.263,10.373,6.466c-0.41-3.113-1.071-6.468-1.971-10.011 c-0.598-2.353-1.306-4.789-2.105-7.283c-2.392,1.003-5.076,2.015-7.022,2.917C1431.245,783.141,1431.49,785.77,1431.773,788.267z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1402.692,768.101c-3.772,1.447-7.835,2.872-12.207,4.269c3.668,0.448,6.958,1.062,9.703,1.939 C1400.386,770.998,1401.329,768.996,1402.692,768.101z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1411.986,772.497c-0.033-2.695-0.175-5.39-0.434-8.074c-2.399,1.074-4.94,2.14-7.634,3.194 C1406.235,767.177,1409.268,769.018,1411.986,772.497z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1438.127,814.517c-2.797-5.933-5.027-14.525-6.354-26.251c-1.698-1.263-3.187-2.51-4.477-3.743 c-2.228,6.777-3.452,22.044-5.681,27.965c2.419,1.301,4.614,2.235,6.585,2.817 C1432.523,816.581,1435.802,816.217,1438.127,814.517z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1373.032,745.342c-0.024-0.021-0.046-0.042-0.07-0.063c-0.029,0.185-0.068,0.438-0.117,0.762 c0.047,0.071,0.094,0.139,0.142,0.21C1373.007,745.865,1373.023,745.563,1373.032,745.342z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1430.426,759.152c0.132-0.079,0.261-0.163,0.392-0.244c-0.126-0.276-0.254-0.551-0.382-0.827 C1430.433,758.437,1430.428,758.799,1430.426,759.152z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1404.141,795.073c-0.104-0.315-0.195-0.613-0.295-0.922c-0.047,0.066-0.099,0.135-0.147,0.201 C1403.848,794.594,1403.993,794.83,1404.141,795.073z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1401.756,1118.119c11.032-20.515,22.999-39.921,34.523-54.517c-0.025-0.223-0.051-0.45-0.076-0.673 c-9.392,1.165-18.634,2.614-27.042,3.828c-7.574,1.094-14.469,1.995-20.182,2.323c3.472,12.883,5.726,25.672,5.99,37.148 c2.009,4.043,3.477,7.963,4.475,11.77C1400.215,1118.051,1400.985,1118.091,1401.756,1118.119z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1462.961,1062.634c0.129,1.457,0.322,3.044,0.661,4.792c0.086-0.39,0.176-0.776,0.259-1.171 c0.194-0.931,0.373-1.881,0.545-2.841c0.087-0.487,0.171-0.978,0.252-1.472 C1464.105,1062.173,1463.533,1062.404,1462.961,1062.634z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1465.309,1057.539c1.219-0.857,2.388-1.698,3.521-2.526c-0.997-0.575-2.017-1.156-3.064-1.741 c-0.036,0.411-0.078,0.816-0.117,1.223C1465.547,1055.524,1465.433,1056.538,1465.309,1057.539z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1472.244,1060.995c0.48,0.026,0.958,0.054,1.433,0.087c-0.173-0.887-0.338-1.774-0.495-2.66 c-1.92,0.812-3.845,1.614-5.77,2.404C1469.046,1060.851,1470.657,1060.907,1472.244,1060.995z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1335.819,1006.048c3.264,1.462,6.344,2.632,9.267,3.536c0.313,0.097,0.624,0.191,0.934,0.282 c0.39-1.692,0.316-3.646-0.178-5.781c-2.943-2.397-5.816-4.904-8.691-7.535C1336.897,999.45,1336.445,1002.619,1335.819,1006.048 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1348.893,997.584c-0.094-1.573-0.151-3.091-0.177-4.555c-1.231-1.258-2.448-2.503-3.645-3.729 c-1.391,1.379-2.813,2.722-4.271,4.025c0.369,0.549,0.716,1.095,1.05,1.639C1344.203,995.741,1346.552,996.611,1348.893,997.584z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1373.249,1008.51c1.208-0.597,2.274-1.377,3.192-2.32c-1.59-4.393-3.424-9.241-5.369-14.328 c-6.612-1.178-13.295-2.442-19.995-3.82C1359.935,995.733,1367.229,1002.544,1373.249,1008.51z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1462.728,1059.33c0.065,1.025,0.128,2.121,0.233,3.304c0.572-0.23,1.144-0.461,1.717-0.693 c0.911-0.369,1.822-0.741,2.734-1.115c1.924-0.79,3.85-1.591,5.77-2.404c-0.056-0.314-0.111-0.628-0.165-0.942 c-1.344-0.808-2.74-1.631-4.187-2.467c-1.132,0.828-2.302,1.669-3.521,2.526 C1464.47,1058.129,1463.608,1058.727,1462.728,1059.33z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1453.272,907.869c0.086,0.396,0.174,0.795,0.261,1.193c2.368,0.33,4.49,0.653,6.384,0.981 c0.168-1.231,0.351-2.49,0.546-3.776C1457.862,906.817,1455.467,907.346,1453.272,907.869z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1475.991,913.201c-0.173-0.161-0.344-0.327-0.516-0.489c-0.151,0.43-0.305,0.87-0.458,1.305 C1475.342,913.743,1475.667,913.471,1475.991,913.201z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1470.986,908.214c-0.505-0.537-1.006-1.085-1.505-1.637c-1.126-0.478-2.258-0.971-3.395-1.478 c-1.14,0.233-2.246,0.46-3.321,0.684c0.567,1.294,1.125,2.563,1.675,3.812C1470.079,912.197,1471.611,911.312,1470.986,908.214z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1412.634,892.564c0.787,1.816,1.499,3.609,2.141,5.374c1.875,0.343,3.662,0.631,5.317,0.808 c0.153-0.179,0.304-0.359,0.462-0.537C1418.012,896.403,1415.379,894.527,1412.634,892.564z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1355.957,907.419c3.195-1.122,6.217-2.08,9.082-2.882c2.549-1.227,5.079-2.582,7.571-4.006 c4.231-9.57,10.313-18.945,15.716-25.481c-0.13-0.094-0.263-0.191-0.393-0.286c-2.012,0.156-4.12,0.302-6.326,0.436 c-8.233,7.947-19.008,17.369-32.646,28.564c2.056,1.244,4.067,2.305,6.034,3.22 C1355.318,907.134,1355.638,907.277,1355.957,907.419z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1422.293,882.706c-3.737-1.933-7.472-3.818-11.189-5.608c-2.373-0.28-5.077-0.927-8.062-1.898 c0.297,0.438,0.591,0.876,0.878,1.313C1410.218,878.924,1416.342,880.972,1422.293,882.706z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1341.113,887.395c-2.155,1.757-4.408,3.383-6.738,4.827c4.607,4.532,9.03,8.019,13.268,10.72 C1346.11,898.74,1343.968,893.605,1341.113,887.395z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1411.682,916.54c2.846,4.676,5.188,10.33,7.334,16.818c0.372-0.116,0.756-0.241,1.133-0.36 c0.293-5.941,0.051-13.163-1.535-21.281c-2.05,0.12-4.024,0.432-6.042,1.147C1412.225,914.069,1411.928,915.295,1411.682,916.54z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1351.695,492.944c0.622,1.945,1.178,3.813,1.672,5.609c2.257-0.104,4.833-0.111,7.737-0.009 c0.185-0.748,0.385-1.503,0.597-2.264c-0.3-0.694-0.583-1.404-0.85-2.125c-2.563-2.122-4.898-3.967-7.03-5.557 c-0.507,1.199-1.045,2.323-1.606,3.386C1352.042,492.308,1351.87,492.631,1351.695,492.944z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1356.313,517.1c0.954-0.411,1.865-0.807,2.753-1.197c-0.02-0.783-0.019-1.58-0.006-2.386 c-1.021-0.276-2.006-0.557-2.949-0.845C1356.254,514.23,1356.321,515.706,1356.313,517.1z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1014.364,288.123c-4.86-1.632-7.284-3.694-7.703-6.14c-2.889-2.03-6.114-4.069-9.625-6.116 c-2.697,5.358-6.275,10.42-10.881,14.975c-1.193,2.229-3.376,4.206-6.947,5.892c2.539-1.845,4.848-3.816,6.947-5.892 c2.603-4.866,0.48-10.938-2.281-17.826c-4.536,6.245-8.788,12.334-12.752,18.232c1.691,2.163,3.379,4.353,5.056,6.578 c-1.795-2.177-3.513-4.311-5.17-6.409c-0.653,0.972-1.294,1.937-1.931,2.898c0.302,0.829,0.535,1.586,0.686,2.263 c2.233,0.548,4.456,1.119,6.668,1.718c-0.651-1.873-1.25-3.763-1.783-5.673c2.483,2.476,4.873,4.866,7.185,7.186 c5.143,1.484,10.262,3.08,15.416,4.74c6.385-4.414,12.647-9.369,18.661-14.936 C1015.419,289.117,1014.901,288.62,1014.364,288.123z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M982.954,313.478c-0.053-0.019-0.106-0.038-0.159-0.058c0.032,0.031,0.063,0.063,0.095,0.094 C982.911,313.503,982.933,313.49,982.954,313.478z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1010.742,222.091c0.094,0.134,0.192,0.27,0.283,0.402c2.348,0.317,4.776,0.655,7.281,1.014 c0.218-0.18,0.438-0.363,0.657-0.545c-1.091-2.048-2.115-4.152-3.062-6.325C1014.214,218.391,1012.493,220.211,1010.742,222.091z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1031.32,329.495c1.587-0.192,3.177-0.38,4.769-0.566c2.756-3.634,5.045-7.739,7.029-12.185 c-0.624-0.631-1.273-1.247-1.947-1.845c0.836,0.215,1.66,0.435,2.473,0.66c1.521-3.548,2.861-7.305,4.106-11.199 c-2.527-2.119-4.576-4.344-6.196-6.644c-4.119,2.083-8.526,4.275-13.251,6.599c4.407-2.431,8.708-4.789,12.915-7.085 c-1.202-1.778-2.155-3.598-2.882-5.444c-9.448-0.604-16.535-1.6-21.591-2.951c-0.278,0.261-0.558,0.519-0.837,0.777 c7.147,7.224,9.353,14.356,4.744,21.443c6.201,2.548,11.027,6.067,10.679,11.167c-1.705,0.279-3.405,0.443-5.103,0.55 C1029.518,324.729,1031.294,327.052,1031.32,329.495z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1047.894,254.185c-0.794-0.52-1.573-1.05-2.342-1.585c-0.819,1.408-1.653,2.793-2.501,4.156 c0.914-0.012,1.852-0.022,2.811-0.03C1046.521,255.851,1047.2,255.004,1047.894,254.185z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M937.427,239.258c0.347-1.252,0.719-2.444,1.126-3.576c-0.765,0.389-1.545,0.783-2.319,1.174 C936.62,237.644,937.019,238.446,937.427,239.258z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M852.929,305.912c-0.469,0.466-0.94,0.933-1.406,1.396c11.73-9.073,20.889-13.35,27.944-14.69 c-1.294-2.68-2.515-5.365-3.673-8.046C867.902,292.953,860.251,299.999,852.929,305.912z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M899.722,307.186c-0.417,0.111-0.833,0.221-1.249,0.336c0.431,0.024,0.859,0.041,1.286,0.052 C899.747,307.445,899.733,307.314,899.722,307.186z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M934.766,279.816c1.344,0.616,2.722,1.286,4.129,2.008c0.71-1.531,1.365-3.115,1.955-4.758 C938.857,277.953,936.832,278.867,934.766,279.816z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M926.492,231.09c-7.452,1.031-14.667,2.48-21.577,4.22c1.563,0.619,3.124,1.237,4.681,1.853 c9.577,1.296,17.423,2.864,22.99,4.519C930.285,238.117,928.237,234.592,926.492,231.09z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M897.121,258.076c-2.007,2.172-4.573,3.77-7.646,4.848c-5.461,4.561-7.368,9.514-6.314,12.922 c1.137-1.132,2.272-2.262,3.423-3.409c-1.097,1.305-2.188,2.574-3.277,3.826c2.904,7.324,20.486,6.505,46.12-24.171 c-0.345-0.211-0.701-0.428-1.057-0.646C914.691,251.861,904.413,254.525,897.121,258.076z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M902.791,235.863c-0.178,0.047-0.359,0.093-0.537,0.14c0.009,0.089,0.014,0.174,0.022,0.262 c0.488,0.054,0.971,0.109,1.452,0.165C903.418,236.243,903.104,236.053,902.791,235.863z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M939.276,233.829c0.641-1.517,1.363-2.914,2.198-4.191c-2.82,0.156-5.612,0.382-8.378,0.665 c0.903,1.929,1.863,3.946,2.893,6.053C937.089,235.51,938.189,234.665,939.276,233.829z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M875.376,283.596c-2.435-5.709-4.594-11.388-6.589-16.939c-2.434,2.126-12.633,7.26-27.481,11.072 c-1.033,11.275-1.678,21.567-2.006,30.938c2.617,0.292,5.459,0.693,8.537,1.215c1.679-1.264,3.376-2.585,5.092-3.971 C860.049,298.842,867.527,291.407,875.376,283.596z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M841.973,270.853c7.517-1.914,16.311-3.643,26.477-5.138c-0.242-0.678-0.483-1.354-0.72-2.028 c-6.164-0.97-13.08-2.705-20.711-5.16c-1.382,0.774-2.699,1.53-3.945,2.262C842.674,264.223,842.308,267.577,841.973,270.853z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M843.197,259.708c-2.053,1.65-3.88,3.092-5.501,4.349c1.612-1.016,3.408-2.112,5.377-3.269 C843.116,260.426,843.154,260.072,843.197,259.708z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M837.697,264.057c-1.025,0.646-1.971,1.257-2.844,1.832c-0.216,0.142-0.427,0.282-0.634,0.42 c-8.025,5.347-8.826,7.045,0.25,0.217c0.185-0.139,0.387-0.293,0.581-0.44C835.863,265.471,836.737,264.802,837.697,264.057z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M836.767,360.473c1.393-0.635,2.814-1.258,4.267-1.868c-0.376-2.911-0.712-6.03-0.996-9.373 c-2.264-0.609-4.596-1.284-7.001-2.031c-1.566-0.486-3.159-0.999-4.786-1.546c-0.927,1.75-1.593,3.552-1.967,5.401 c1.019,0.823,2.001,1.64,2.954,2.453C832.017,355.881,834.52,358.208,836.767,360.473z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M880.796,346.047c0.249-0.362,0.501-0.722,0.755-1.08c-1.274-0.569-2.536-1.131-3.78-1.682 c-13.861-1.278-26.921-3.758-38.499-6.765c0.013,0.337,0.026,0.675,0.039,1.009c0.172,4.168,0.417,8.069,0.725,11.703 c6.133,1.649,11.752,2.804,16.874,3.519C864.427,350.302,872.439,348.08,880.796,346.047z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M882.856,345.549c-0.69,0.164-1.375,0.331-2.06,0.498c-1.619,2.35-3.125,4.769-4.515,7.209 c3.172-0.376,6.013-1.006,8.529-1.858c1.067-0.846,2.129-1.717,3.188-2.603c-4.605-2.121-3.881-3.417,0.716-4.771 c-2.089-0.089-4.162-0.21-6.222-0.356c-0.317,0.43-0.631,0.863-0.94,1.299C881.989,345.163,882.416,345.352,882.856,345.549z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M882.492,343.669c2.609-3.538,5.479-6.877,8.596-9.844c-14.459-2.117-27.62-4.988-39.039-8.373 c-2.381,1.278-4.695,2.614-6.896,4.008c9.457,3.791,20.294,8.364,32.619,13.825C879.335,343.429,880.909,343.556,882.492,343.669 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M892.327,309.349c-4.976,1.558-11.573,3.714-18.68,6.425c7.734,2.127,16.352,4.763,25.944,7.992 C898.327,318.944,895.856,314.009,892.327,309.349z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1040.657,1572.985c0.475,0.327,0.954,0.661,1.432,0.995c1.76-1.497,3.492-3.025,5.205-4.578 c-2.433,0.528-4.793,1.04-7.08,1.536C1040.42,1571.556,1040.565,1572.242,1040.657,1572.985z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1040.214,1570.938c-0.801-2.406-2.412-3.88-4.423-4.669c-0.084,1.083-0.184,2.168-0.305,3.256 c0.919,0.598,1.846,1.211,2.778,1.837C1038.905,1571.223,1039.561,1571.08,1040.214,1570.938z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1031.364,82.13c0.246-0.341,0.491-0.681,0.739-1.025c-0.953-0.565-1.914-1.116-2.884-1.655 C1029.93,80.333,1030.645,81.227,1031.364,82.13z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M937.552,44.513c-1.513-0.687-3.063-1.299-4.649-1.833c-0.922,0.425-1.857,0.851-2.766,1.275 C932.446,44.033,934.915,44.218,937.552,44.513z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1000.249,67.466c-2.563-0.778-5.139-1.502-7.718-2.175c-1.729,2.161-3.982,5.022-7.597,7.851 c1.376,2.856,2.639,5.749,3.799,8.697c1.69,0.479,3.413,0.994,5.17,1.548C995.902,78.336,998.02,73.027,1000.249,67.466z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M984.36,63.321c-1.354-0.301-2.705-0.589-4.053-0.866c-0.258,0.22-0.515,0.44-0.771,0.658 c1.811,3.033,3.457,6.075,4.967,9.148C985.49,68.917,985.337,65.974,984.36,63.321z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M994.992,851.726c1.159-0.212,2.436-0.476,3.841-0.796c0.617-0.58,1.234-1.16,1.85-1.739 c-1.585-2.347-3.21-4.735-4.878-7.162c-0.37,0.25-0.729,0.496-1.08,0.739C995.507,846.007,995.699,849.124,994.992,851.726z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1152.452,760.094c-0.067-0.489-0.119-0.979-0.17-1.468c-0.592,0.29-1.189,0.581-1.772,0.87 C1151.124,759.692,1151.768,759.89,1152.452,760.094z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1122.09,775.419c-0.38,0.248-0.755,0.496-1.13,0.744c-0.013,1.231-0.028,2.475-0.047,3.734 c1.066-0.445,2.131-0.888,3.197-1.33C1123.365,777.594,1122.689,776.548,1122.09,775.419z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M965.97,828.803c-1.185,0.281-2.345,0.555-3.491,0.825c-0.015,0.022-0.031,0.043-0.046,0.066 c-0.063,0.093-0.128,0.192-0.193,0.287c1.12-0.312,2.249-0.629,3.391-0.954C965.745,828.952,965.857,828.877,965.97,828.803z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M931.677,843.56c-2.205-1.435-4.445-3.058-6.668-4.67c-9.313,1.786-17.421,2.936-24.468,3.573 c0.662,1.839,1.314,3.671,1.96,5.499c9.323-1.07,17.089-2.151,23.489-3.294C928.021,844.305,929.915,843.937,931.677,843.56z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M921.569,818.063c0.575,0.857,0.971,1.713,1.169,2.545c6.964,1.852,13.558,4.001,19.396,6.075 c0.824-2.093,1.696-4.071,2.606-5.96c-5.333-0.784-10.345-2.541-14.675-5.637C927.221,816.199,924.387,817.19,921.569,818.063z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M865.97,745.701c3.231-0.25,6.631-0.503,10.215-0.761c0.615-1.309,1.244-2.565,1.886-3.766 c-7.8-5.046-13.834-11.765-15.937-19.671c-2.26-0.762-4.438-1.47-6.517-2.113c-0.272-0.084-0.536-0.163-0.805-0.245 c-0.179,4.021-0.771,8.418-1.836,13.217C858.204,737.081,862.499,741.522,865.97,745.701z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M873.358,756.289c0.136-0.097,0.274-0.194,0.411-0.291c-0.164,0.049-0.329,0.097-0.493,0.148 C873.303,756.194,873.332,756.242,873.358,756.289z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M881.594,744.155c-0.323,0.15-0.65,0.306-0.983,0.472c0.394-0.028,0.795-0.055,1.193-0.083 C881.734,744.414,881.664,744.285,881.594,744.155z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M874.83,747.963c-1.524,0.987-3.087,2.078-4.656,3.24c0.768,1.106,1.481,2.194,2.126,3.259 C873.112,752.172,873.956,750.008,874.83,747.963z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M923.207,837.586c-4.279-3.08-8.441-5.91-12.103-7.023c-5.707-1.739-10.739-2.359-15.27-2.067 c-0.05,0.275-0.102,0.547-0.153,0.82c0.999,2.627,1.978,5.251,2.94,7.869C904.959,838.92,912.522,839.03,923.207,837.586z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M945.987,1563.881c2.11-1.191,4.294-2.214,6.552-3.045c-2.341-0.362-4.697-0.776-7.061-1.233 C945.652,1561.046,945.822,1562.473,945.987,1563.881z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M914.126,1569.29c-8.791,6.302-16.427,11.736-23.95,12.881c-0.041,4.291-0.062,8.251-0.062,11.902 c0.159,0.124,0.317,0.25,0.478,0.372c8.841-8.888,16.729-17.245,23.596-25.029 C914.167,1569.374,914.146,1569.332,914.126,1569.29z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M935.097,1558.363c0.06-0.316,0.119-0.627,0.179-0.945c-0.768-0.178-1.535-0.358-2.302-0.54 c-6.765,3.77-12.803,8.078-18.371,12.07c-0.136,0.154-0.28,0.313-0.416,0.468c2.611,5.316,5.601,10.735,8.888,16.105 c2.73-3.681,5.663-7.227,8.812-10.472c0.955-4.882,1.935-9.968,2.941-15.265c-2.746,1.78-5.648,3.846-8.719,6.249 C929.296,1563.279,932.275,1560.741,935.097,1558.363z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M955.634,1559.836c-1.047,0.292-2.078,0.627-3.095,1c10.209,1.577,20.147,2.133,29.353,0.655 c-3.502-1.33-6.878-2.199-10.135-2.667C965.935,1562.331,961.009,1562.488,955.634,1559.836z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1283.992,1476.262c-0.013-0.009-0.026-0.018-0.039-0.028c-0.006,0.016-0.012,0.032-0.018,0.047 c-0.003,0.014-0.005,0.027-0.008,0.041C1283.949,1476.303,1283.971,1476.282,1283.992,1476.262z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1283.928,1476.323c-0.005,0.004-0.009,0.009-0.014,0.013c-0.805,2.045-1.671,3.85-2.846,5.409 c0.533,0.598,1.047,1.207,1.548,1.825C1283.005,1481.206,1283.435,1478.797,1283.928,1476.323z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1287.44,1478.719c1.744-2.433,3.433-4.999,5.086-7.714c-2.807,0.912-5.873,2.808-8.534,5.257 C1285.167,1477.1,1286.312,1477.916,1287.44,1478.719z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1146.827,1498.893c-5.509,2.067-9.455,4.157-12.102,6.261c3.2,6.065,0.932,8.3-4.311,7.016 c-0.026,1.121,0.24,2.244,0.76,3.365c10.325,2.761,20.946,4.628,31.643,5.613 C1159.726,1509.495,1150.818,1503.709,1146.827,1498.893z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1178.613,1507.938c0.03-0.094,0.063-0.188,0.094-0.282c-0.03,0.013-0.06,0.024-0.09,0.037 C1178.615,1507.773,1178.614,1507.857,1178.613,1507.938z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M838.636,1469.119c3.79,1.29,8.241,3.009,13.415,5.193c-0.048-2.186-0.077-4.345-0.086-6.472 c-3.095-1.906-6.143-3.9-9.187-5.955c-1.094-0.434-2.165-0.862-3.248-1.292C839.242,1463.476,838.946,1466.332,838.636,1469.119z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M850.808,1485.68c0.559,0.245,1.124,0.5,1.689,0.755c-0.03-0.591-0.059-1.182-0.086-1.771 C851.873,1485.006,851.336,1485.347,850.808,1485.68z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M949.389,1478.57c0.405-0.198,0.813-0.394,1.236-0.58c-1.215-0.364-2.435-0.724-3.66-1.079 C947.853,1477.472,948.663,1478.026,949.389,1478.57z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M889.689,1449.366c9.902,2.61,19.455,7.329,28.076,14.575c-4.126-7.16-9.939-13.351-17.335-17.478 c-1.293-0.722-2.636-1.377-4.025-1.966C893.885,1446.178,891.65,1447.801,889.689,1449.366z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M852.647,1446.936c4.235-0.473,8.248-0.875,12.032-1.209c-0.964-3.853-1.885-7.376-2.764-10.588 c-2.873,1.543-5.713,3.056-8.52,4.541C853.097,1441.963,852.849,1444.389,852.647,1446.936z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M855.428,1429.107c-0.515,1.847-0.967,3.907-1.361,6.149c2.452-0.032,5.005-0.283,7.662-0.787 c-0.054-0.195-0.108-0.392-0.161-0.585c-1.763-1.759-3.605-3.534-5.525-5.317 C855.839,1428.753,855.633,1428.931,855.428,1429.107z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M874.857,1428.12c-1.443-2.086-2.806-3.804-4.094-5.176c-2.771-0.644-5.542-1.296-8.31-1.956 c-1.081,1.62-2.209,3.107-3.363,4.444c0.787,2.522,1.613,5.334,2.478,8.452c0.173,0.173,0.347,0.346,0.519,0.518 c0.671-0.132,1.35-0.286,2.034-0.451C867.655,1432.047,871.231,1430.106,874.857,1428.12z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M882.47,1441.198c-2.344-4.594-4.528-8.408-6.563-11.519c-4.135,1.979-8.059,3.372-11.786,4.272 c-0.539,0.29-1.081,0.584-1.618,0.872c3.507,3.542,6.687,7.007,9.517,10.314c9.374-0.674,17.186-0.925,23.628-0.947 C891.637,1442.581,887.245,1441.531,882.47,1441.198z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1038.264,1571.362c-0.932-0.626-1.859-1.239-2.778-1.837c-0.3,2.713-0.711,5.438-1.229,8.16 c0.545,0.436,1.09,0.872,1.64,1.313c2.107-1.624,4.169-3.298,6.192-5.017c-0.479-0.334-0.957-0.668-1.432-0.995 C1039.854,1572.433,1039.058,1571.894,1038.264,1571.362z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M937.635,1544.813c-0.742-0.75-1.495-1.514-2.272-2.309c-5.235,7.864-12.191,16.702-20.76,26.444 c5.568-3.991,11.606-8.299,18.371-12.07c0.879-0.49,1.771-0.971,2.676-1.441C936.301,1551.983,936.963,1548.443,937.635,1544.813 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M906.251,1550.033c-2.828,3.61-4.795,4.615-6.747,3.733c-1.277,8.691-5.398,18.563-12.043,28.625 c0.904-0.007,1.809-0.083,2.715-0.22c7.523-1.145,15.159-6.579,23.95-12.881C910.849,1562.605,908.172,1556.086,906.251,1550.033 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M861.733,1478.557c-2.465,1.661-4.845,3.229-7.148,4.716c0.6,1.418,1.024,2.999,1.078,4.624 c0.405,0.193,0.814,0.395,1.221,0.592c0.368-0.342,0.731-0.68,1.102-1.024c0.292,0.627,0.548,1.22,0.795,1.805 c3.109-4.343,6.177-8.652,9.186-12.9c-5.624-2.486-10.886-5.379-16.002-8.53c0.009,2.126,0.038,4.286,0.086,6.472 C855.034,1475.57,858.249,1476.978,861.733,1478.557z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M852.497,1486.435c0.745,0.336,1.495,0.681,2.248,1.034c-0.78-1.103-1.455-2.099-2.036-2.996 c-0.099,0.063-0.199,0.128-0.298,0.19C852.438,1485.253,852.467,1485.844,852.497,1486.435z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M899.043,1515.447c0.539-0.546,1.085-1.09,1.633-1.632c-1.202,0.016-2.42,0.041-3.641,0.066 C897.702,1514.396,898.372,1514.92,899.043,1515.447z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M868.502,1520.569c1.476,1.089,2.875,2.18,4.198,3.267c4.318,0.164,8.099,0.806,11.353,1.875 c-3.872-2.126-7.666-4.091-11.381-5.92C871.253,1520.046,869.866,1520.306,868.502,1520.569z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M858.913,1489.49c-0.015-0.008-0.031-0.016-0.046-0.023c0.007,0.017,0.016,0.036,0.023,0.053 C858.898,1489.51,858.905,1489.5,858.913,1489.49z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M883.269,1503.896c7.836-1.672,14.908-2.903,21.232-3.703c4.114-4.163,8.538-7.425,13.211-9.893 c0.627-1.23,1.247-2.445,1.857-3.641c-11.231-1.993-20.952-4.458-28.135-7.558c-0.808,2.767-5.119,3.801-13.671,1.033 c-3.281-1.06-6.406-2.279-9.435-3.605c-3.25,4.626-6.392,8.943-9.416,12.962C866.618,1493.351,874.746,1498.113,883.269,1503.896 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M880.697,1518.443c2.45,2.677,5.08,5.512,7.904,8.514c3.09-3.696,6.364-7.334,9.833-10.885 C892.146,1516.776,886.236,1517.575,880.697,1518.443z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M978.14,1553.986c1.062-0.945,2.16-1.981,3.298-3.111c-1.347-0.839-2.714-1.722-4.101-2.654 C977.868,1551.239,978.16,1553.031,978.14,1553.986z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1030.905,1531.555c1.456,3.327,2.592,6.878,3.423,10.6c1.155-3.492,2.244-6.907,3.259-10.234 C1035.33,1531.786,1033.105,1531.666,1030.905,1531.555z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1042.761,1532.332c-0.037-0.031-0.075-0.062-0.112-0.094c-0.541-0.036-1.086-0.073-1.624-0.108 c-2.054,4.05-4.106,8.288-6.156,12.716c0.679,3.754,1.072,7.655,1.183,11.651c2.84-4.457,5.769-10.057,8.653-16.331 C1043.639,1537.481,1042.993,1534.879,1042.761,1532.332z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M946.599,1553.412c3.266,2.866,6.212,5.031,9.035,6.424c5.375,2.652,10.301,2.495,16.122-1.011 c1.729-1.042,3.54-2.384,5.463-4.03C974.584,1553.757,965.929,1545.212,946.599,1553.412z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M939.372,1493.057c1.092-1.009,2.215-2.048,3.358-3.106c-0.496-0.057-0.991-0.114-1.484-0.172 C940.611,1490.889,939.986,1491.982,939.372,1493.057z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M941.883,1532.387c0.916,6.334,1.738,12.434,2.486,18.284c7.113-5.797,12.836-10.206,17.432-13.57 c-2.82-1.946-5.526-3.746-8.116-5.398C949.487,1531.923,945.554,1532.156,941.883,1532.387z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M939.182,1536.411c-1.15,1.962-2.419,3.99-3.818,6.093c0.777,0.795,1.53,1.559,2.272,2.309 C938.145,1542.064,938.66,1539.263,939.182,1536.411z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M933.038,1488.745c-2.68-0.363-5.306-0.746-7.868-1.15c-3.482,3.558-7.163,7.441-11.055,11.669 c1.211-0.075,2.39-0.131,3.531-0.165C922.468,1495.447,927.587,1491.978,933.038,1488.745z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M917.712,1490.299c-4.673,2.469-9.097,5.73-13.211,9.893c3.047-0.385,5.917-0.67,8.621-0.858 C914.698,1496.223,916.227,1493.213,917.712,1490.299z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1054.551,1457.198c-1.221-1.409-2.297-2.769-3.241-4.085c-0.009,3.631-0.13,7.494-0.4,11.625 c-0.068,1.041-0.15,2.106-0.237,3.18c0.857,0.668,1.573,1.153,2.071,1.373C1053.24,1465.466,1053.84,1461.435,1054.551,1457.198z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1046.102,1439.413c-1.399,0.696-2.815,1.406-4.244,2.127c1.48,0.44,2.988,0.852,4.527,1.235 C1046.158,1441.615,1046.067,1440.496,1046.102,1439.413z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1016.961,1434.018c-2.499-0.66-4.954-1.353-7.364-2.077c-0.415,0.455-0.831,0.917-1.25,1.385 c3.734,4.801,8.265,6.907,12.961,7.01c0.142-0.448,0.282-0.897,0.415-1.349 C1019.977,1437.416,1018.337,1435.762,1016.961,1434.018z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1008.867,1416.735c-0.831-1.565-1.606-3.208-2.313-4.948c-0.533-1.31-1.029-2.672-1.489-4.086 c-1.737-0.879-3.398-1.738-4.974-2.573C1002.098,1408.688,1004.959,1412.54,1008.867,1416.735z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1150.724,1457.436c-1.069-0.352-2.141-0.681-3.217-0.985c-0.715,0.33-1.409,0.652-2.116,0.979 c1.924,0.505,3.848,1.044,5.771,1.614C1151.016,1458.497,1150.87,1457.962,1150.724,1457.436z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1003.372,1346.163c-0.009,0.173-0.017,0.34-0.026,0.51c0.119-0.846,0.234-1.687,0.361-2.549 C1003.592,1344.811,1003.483,1345.485,1003.372,1346.163z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1037.587,1531.92c-1.015,3.327-2.104,6.743-3.259,10.234c0.198,0.888,0.378,1.786,0.542,2.692 c2.05-4.428,4.102-8.665,6.156-12.716C1039.871,1532.057,1038.727,1531.988,1037.587,1531.92z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1152.091,1408.085c0.629-0.649,1.26-1.298,1.902-1.951c-1.267,0.088-2.43,0.159-3.468,0.21 C1151.047,1406.926,1151.572,1407.513,1152.091,1408.085z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1128.042,1424.29c1.905,0.998,3.816,2.409,5.708,4.424c1.195-1.48,2.42-2.969,3.686-4.471 c0.635-8.07,3.095-16.591,6.842-24.96c-0.802-0.921-1.606-1.848-2.414-2.788c-4.925-0.227-9.789-0.251-14.587-0.769 c-3.198,5.791-6.207,10.287-9.078,13.689c-0.753,2.336-1.377,4.723-1.93,7.141 C1121.622,1417.411,1125.587,1419.896,1128.042,1424.29z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1159.234,1394.655c-0.323,1.375-0.633,2.781-0.916,4.258c-4.324-1.302-8.607-1.889-12.845-2.204 c-0.412,0.856-0.811,1.715-1.196,2.575c1.457,1.674,2.907,3.326,4.343,4.938c2.264-0.441,5.173-0.914,8.656-1.386 c1.531-1.516,3.092-3.04,4.695-4.575c-0.45,1.4-0.913,2.773-1.376,4.146c4.713-0.578,10.262-1.14,16.508-1.624 c0.15-0.231,0.3-0.464,0.45-0.699C1171.149,1397.782,1164.975,1395.9,1159.234,1394.655z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1184.656,1388.622c4.414-7.304,8.857-14.881,12.777-21.254 C1174.958,1373.074,1174.984,1381.232,1184.656,1388.622z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1130.405,1431.286c0.08,0.45,0.152,0.911,0.216,1.383c0.207-0.267,0.404-0.531,0.614-0.8 C1130.956,1431.675,1130.68,1431.48,1130.405,1431.286z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1184.822,1402.829c-0.532,0.069-1.061,0.137-1.582,0.204c-5.724,4.217-11.258,8.308-16.262,11.486 c-1.923,1.991-3.519,3.031-4.653,2.758c1.488-0.807,3.043-1.736,4.653-2.758c2.272-2.351,5.001-6.032,7.972-10.462 c-6.089,0.721-11.231,1.259-15.487,1.639c-0.886,2.533-1.792,5.022-2.719,7.461c6.148,6.63,12.019,12.671,17.501,18.141 c16.925-3.357,13.75-2.763,1.174,1.171c0.37,0.368,0.733,0.725,1.1,1.088c4.588,0.096,8.598,0.39,10.525,0.367 c15.016-0.157,28.039-1.823,39.788-12.081C1213.461,1415.391,1198.796,1408.344,1184.822,1402.829z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1075.421,1444.944c-0.95-6.348-2.061-12.34-3.13-17.747c-0.219,0.093-0.438,0.186-0.658,0.281 C1072.488,1433.599,1073.781,1439.426,1075.421,1444.944z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1209.903,1399.326c-0.802,0.119-1.605,0.238-2.391,0.353c6.692,2.258,13.795,4.088,20.44,5.275 c0.189-1.904,0.412-3.76,0.673-5.561C1222.152,1399.259,1215.894,1399.246,1209.903,1399.326z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1183.825,1349.198c-0.208,0.867-0.418,1.738-0.635,2.62c0.588-0.396,1.177-0.783,1.766-1.155 C1184.563,1350.169,1184.189,1349.682,1183.825,1349.198z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1095.15,1481.786c-1.291-3.755-2.548-7.408-3.774-10.96c-1.114,0.846-2.198,1.702-3.248,2.57 c1.931,3.149,3.95,6.122,6.024,8.911C1094.478,1482.135,1094.82,1481.959,1095.15,1481.786z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1270.896,1370.12c0.13,0.697,0.256,1.421,0.381,2.164c0.558-0.767,1.117-1.525,1.676-2.276 c0.163-0.219,0.326-0.436,0.489-0.653c-0.195,0.022-0.39,0.045-0.584,0.066 C1272.206,1369.652,1271.552,1369.885,1270.896,1370.12z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1206.634,1399.379c1.08-0.021,2.17-0.038,3.269-0.053c5.955-0.883,12.341-1.859,19.204-2.944 c0.192-1.114,0.393-2.213,0.611-3.286c-2.613-3.077-5.355-6.916-8.213-11.496c-7.784,1.006-17.148,6.484-26.62,13.036 C1198.482,1396.345,1202.47,1397.943,1206.634,1399.379z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1046.102,1439.413c-0.036,1.083,0.056,2.202,0.283,3.362c0.613,3.126,2.203,6.545,4.924,10.339 c0.944,1.316,2.021,2.676,3.241,4.085c1.244-7.413,2.835-15.468,4.836-24.214 C1055.123,1434.982,1050.693,1437.129,1046.102,1439.413z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1202.884,1452.115c-2.05,0.237-4.184,0.451-6.366,0.633c0.952,0.897,1.865,1.757,2.751,2.594 C1200.473,1454.14,1201.678,1453.071,1202.884,1452.115z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1268.611,1371.585c-0.038-0.202-0.076-0.405-0.113-0.606c-0.045,0.016-0.09,0.032-0.135,0.048 C1268.445,1371.214,1268.528,1371.397,1268.611,1371.585z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1112.888,1457.392c0.54-0.285,1.083-0.568,1.626-0.849c2.639-4.622,5.644-9.383,9.051-14.282 c-4.39-1.438-8.315-3.102-11.833-4.941c-0.076,0.266-0.154,0.532-0.233,0.797 C1112.066,1444.052,1112.533,1450.47,1112.888,1457.392z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1151.163,1459.044c2.75,10.215,5.841,24.089,9.582,42.424c5.464,7.305,11.449,8.865,17.872,6.224 c0.03-0.012,0.06-0.024,0.09-0.037c2.875-8.781,9.164-18.177,20.423-27.845c0.641-2.21,1.175-4.334,1.621-6.368 c-5.953,4.402-12.9,8.965-21.016,13.683c3.05-7.044,6.078-12.99,9.093-17.995c-8.663-2.236-19.759-5.294-33.667-9.126 c-1.65-0.945-3.166-1.964-4.567-3.044c0.044,0.156,0.087,0.317,0.131,0.475 C1150.87,1457.962,1151.016,1458.497,1151.163,1459.044z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M853.395,1439.681c2.808-1.485,5.647-2.999,8.52-4.541c-0.062-0.227-0.123-0.447-0.185-0.67 c-2.657,0.504-5.211,0.755-7.662,0.787c-4.243,0.055-8.183-0.546-11.842-1.62c-0.304,2.687-0.597,5.486-0.884,8.352 c1.067,0.8,2.143,1.573,3.227,2.322c0.559-0.291,1.114-0.578,1.676-0.871C848.601,1442.209,850.987,1440.954,853.395,1439.681z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M882.912,1423.686c0.674,0.309,1.338,0.615,2.018,0.927c3.68-2.36,7.507-5.158,11.491-8.46 C891.857,1418.717,887.354,1421.228,882.912,1423.686z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M862.087,1434.403c0.14,0.141,0.277,0.281,0.416,0.421c0.537-0.288,1.079-0.582,1.618-0.872 C863.437,1434.116,862.758,1434.27,862.087,1434.403z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M864.121,1433.951c3.726-0.9,7.651-2.293,11.786-4.272c2.325-1.113,4.718-2.414,7.178-3.913 c-0.931-0.21-1.862-0.422-2.794-0.633c-1.821,1.004-3.635,2.002-5.433,2.987C871.231,1430.106,867.655,1432.047,864.121,1433.951 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M906.708,1444.396c17.326,0.748,17.201,2.939,8.007-3.028c-1.719-1.116-3.751-2.513-6.049-4.263 c-4.468,2.47-8.383,4.827-11.794,7.081C900.638,1444.19,903.896,1444.274,906.708,1444.396z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M896.405,1444.497c0.155-0.103,0.309-0.207,0.467-0.311c-0.397,0-0.815,0.003-1.223,0.004 c-6.442,0.022-14.255,0.273-23.628,0.947c0.513,0.6,1.016,1.194,1.506,1.783c5.428,0.251,10.845,1.044,16.162,2.446 C891.65,1447.801,893.885,1446.178,896.405,1444.497z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M864.986,1446.96c-0.103-0.413-0.205-0.826-0.307-1.232c-3.785,0.334-7.798,0.735-12.032,1.209 c-1.148,0.128-2.309,0.261-3.491,0.401c0.77,0.482,1.545,0.954,2.321,1.42C855.918,1447.826,860.438,1447.212,864.986,1446.96z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M928.975,1468.354c-3.224-1.245-6.694-2.486-10.372-3.705c0.991,0.858,1.971,1.747,2.935,2.674 c-13.928-2.131-26.328-4.035-37.371-5.694c2.558,4.328,3.844,7.636,3.728,9.452c2.852,3.061,4.128,6.001,3.539,8.019 c7.183,3.1,16.904,5.564,28.135,7.558C922.945,1480.05,926.077,1473.963,928.975,1468.354z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M933.038,1488.745c4.054-2.405,8.289-4.681,12.716-6.809c-1.563,2.708-3.061,5.315-4.508,7.844 c0.493,0.058,0.988,0.115,1.484,0.172c4.761-4.407,9.959-9.24,15.594-14.536c-0.287,0.072-0.578,0.141-0.861,0.217 c-2.462,0.656-4.76,1.439-6.839,2.357c-0.423,0.187-0.831,0.383-1.236,0.58c-0.726-0.543-1.536-1.097-2.424-1.66 c-1.921-1.216-4.207-2.471-6.823-3.746c-4.525,4.056-9.5,8.84-14.971,14.431C927.732,1487.999,930.358,1488.382,933.038,1488.745 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1274.447,1431.438c6.333-6.329,13.563-13.342,21.596-20.944c-1.138-1.807-1.832-3.71-2.175-5.533 c-1.763-0.276-3.524-0.54-5.282-0.793c-4.159,5.457-8.068,7.909-11.66,6.168c3.373-2.2,6.666-4.334,9.895-6.417 c-10.323-1.442-20.541-2.493-30.486-3.226c-0.058,0.88-0.133,1.752-0.219,2.617 C1266.415,1416.687,1272.206,1425.721,1274.447,1431.438z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1301.772,1400.487c1.665-0.01,3.349-0.044,5.057-0.106c-1.286,1.196-2.555,2.378-3.808,3.55 c0.254,0.832,0.502,1.729,0.741,2.704c3.392,0.617,6.786,1.279,10.175,1.991c0.63-2.633,1.291-5.287,2.002-7.967 c-5.355-0.704-10.35-1.339-15.022-1.909C1301.205,1399.26,1301.49,1399.841,1301.772,1400.487z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1292.545,1400.24c0.397,0.025,0.794,0.05,1.194,0.071c0.048-0.33,0.109-0.648,0.182-0.952 C1293.466,1399.649,1293.003,1399.947,1292.545,1400.24z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1292.804,1397.789c-9.216-1.055-16.969-1.804-23.483-2.255c-0.08,0.148-0.163,0.292-0.248,0.432 c7.044,2.303,14.432,3.628,22.282,4.194C1291.835,1399.405,1292.318,1398.613,1292.804,1397.789z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1238.415,1449.454c4.333,1.683,8.738,3.733,13.24,5.794c0.293-0.178,0.589-0.356,0.884-0.534 c3.685-4.339,8.515-9.591,14.401-15.661c-5.18-1.209-12.408-4.182-20.898-8.075c-1.831,2.44-3.924,4.727-6.298,6.849 C1239.387,1441.485,1238.946,1445.358,1238.415,1449.454z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1228.834,1446.453c0.196,0.043,0.393,0.09,0.589,0.136c-0.07-0.482-0.143-0.967-0.21-1.444 c-0.429,0.23-0.872,0.452-1.312,0.676c-0.08,0.129-0.162,0.259-0.244,0.389 C1228.049,1446.284,1228.441,1446.366,1228.834,1446.453z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1288.121,1465.254c2.736-0.104,5.518-0.462,8.347-1.129c3.978-7.406,6.846-14.749,9.147-22.13 C1295.729,1450.943,1291.002,1458.731,1288.121,1465.254z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1306.643,1430.1c-0.048,0.035-0.096,0.071-0.144,0.106c0.049-0.016,0.098-0.031,0.147-0.046 C1306.646,1430.139,1306.644,1430.12,1306.643,1430.1z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1240.166,1403.314c0.207-0.521,0.403-1.044,0.583-1.568c-0.279-0.085-0.559-0.181-0.843-0.293 C1239.999,1402.058,1240.086,1402.677,1240.166,1403.314z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1220.753,1455.436c1.43-1.643,2.725-3.255,3.9-4.838c0.828-1.115,1.595-2.215,2.307-3.301 c0.239-0.365,0.471-0.727,0.698-1.089c-0.129-0.025-0.258-0.046-0.387-0.069c-1.761,0.871-3.603,1.693-5.547,2.453 c-1.357,0.531-3.862,1.157-7.131,1.778C1216.342,1451.751,1218.378,1453.433,1220.753,1455.436z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1199.268,1455.341c1.286,1.214,2.5,2.366,3.636,3.453c0.222-2.599,0.356-4.858,0.514-6.741 c-0.177,0.021-0.357,0.041-0.536,0.062C1201.678,1453.071,1200.473,1454.14,1199.268,1455.341z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1179.734,1487.126c8.116-4.718,15.063-9.28,21.016-13.683c0.101-0.46,0.196-0.914,0.289-1.365 c-3.351-0.72-7.403-1.705-12.212-2.947C1185.812,1474.136,1182.784,1480.082,1179.734,1487.126z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1144.462,1357.456c0.048,0.178,0.097,0.359,0.143,0.532c-4.372-4.409-9.238-8.258-14.459-11.559 c4.114,7.293,8.977,15.184,14.747,23.76c-9.764-5.186-18.822-9.768-27.221-13.861c-0.273,2.534-0.532,5.226-0.774,8.129 c0.3,0.597,0.293,1.149,0.026,1.658c6.847,3.524,14.039,5.724,21.869,7.399c5.54,1.19,11.52,2.51,17.22,2.55 c0.252,0.002,0.576-0.028,0.93-0.069C1152.441,1369.804,1148.298,1363.615,1144.462,1357.456z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1306.546,1362.037c-0.602-1.178-1.208-2.364-1.819-3.561c-9.688,3.241-20.442,6.885-31.869,10.944 c0.195-0.021,0.39-0.044,0.584-0.066c1.849-0.207,3.697-0.44,5.543-0.71C1288.226,1367.294,1297.439,1365.137,1306.546,1362.037z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1310.004,1360.198c0.527-1.324,1.055-2.661,1.585-4.011c-1.127,0.375-2.272,0.757-3.434,1.144 C1308.776,1358.299,1309.391,1359.252,1310.004,1360.198z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1257.606,1342.428c2.485-0.173,4.914-0.341,7.289-0.505c-1.667-0.69-3.255-1.401-4.772-2.125 C1259.314,1340.645,1258.473,1341.52,1257.606,1342.428z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1158.319,1398.913c0.283-1.476,0.593-2.883,0.916-4.258c-0.589-0.128-1.173-0.248-1.753-0.362 c-3.574,0.323-7.383,0.201-10.809-0.007c-0.412,0.805-0.809,1.613-1.198,2.423 C1149.712,1397.023,1153.994,1397.611,1158.319,1398.913z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1127.276,1395.727c4.799,0.517,9.663,0.542,14.587,0.769c-0.679-0.79-1.359-1.584-2.042-2.387 c-2.594,0.019-5.177-0.193-7.759-0.645c-0.993-0.695-1.896-1.215-2.729-1.599 C1128.64,1393.208,1127.954,1394.5,1127.276,1395.727z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1268.611,1371.585c-0.083-0.188-0.166-0.371-0.249-0.557c-2.056,0.739-4.132,1.492-6.224,2.257 c0.181,0.062,0.361,0.126,0.542,0.187c1.523,0.015,2.83,0.455,3.932,1.211c0.912,0.258,1.826,0.502,2.742,0.727 C1269.095,1374.12,1268.847,1372.845,1268.611,1371.585z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1269.073,1395.967c0.085-0.14,0.167-0.285,0.248-0.432c0.714-1.31,1.243-2.893,1.574-4.606 c-4.67-0.832-9.491-1.86-14.631-3.146c0.065,0.927,0.116,1.848,0.157,2.762 C1260.528,1392.754,1264.735,1394.549,1269.073,1395.967z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1312.541,1338.949c1.359,1.308,2.749,2.65,4.164,4.018c0.417-1.09,0.835-2.184,1.254-3.282 c-0.235-0.325-0.463-0.648-0.691-0.971C1315.746,1338.787,1314.171,1338.865,1312.541,1338.949z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1308.156,1357.331c1.161-0.387,2.307-0.769,3.434-1.144c1.503-3.826,3.019-7.75,4.547-11.735 c-3.697-1.675-7.241-3.379-10.649-5.105c-1.945,0.916-4.252,1.902-6.742,2.883 C1301.968,1347.533,1305.105,1352.568,1308.156,1357.331z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1266.142,1354.876c1.73,3.071,3.391,7.925,4.753,15.244c0.656-0.234,1.31-0.467,1.962-0.699 c11.427-4.06,22.182-7.703,31.869-10.944c-2.557-5.006-5.19-10.173-7.9-15.507c-8.981,3.397-19.628,6.476-24.261,5.928 C1270.138,1351.37,1268.005,1353.337,1266.142,1354.876z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1266.612,1374.682c-1.102-0.756-2.41-1.196-3.932-1.211 C1263.984,1373.908,1265.295,1374.31,1266.612,1374.682z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1268.362,1371.027c0.045-0.016,0.09-0.032,0.135-0.048c-1.041-5.618-1.859-10.962-2.43-16.041 c-19.769,16.27-9.027-15.837-0.024-0.231c-0.495-4.456-0.807-8.719-0.922-12.798c-0.075,0.005-0.151,0.01-0.227,0.016 c-2.375,0.163-4.804,0.331-7.289,0.505c-1.905,1.997-3.929,4.155-5.993,6.528c-0.771,7.683-3.374,13.487-6.362,16.743 c5.457,3.029,11.108,5.61,16.886,7.585C1264.23,1372.519,1266.306,1371.766,1268.362,1371.027z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1361.845,1325.471c-3.84-13.19-8.063-25.629-12.565-37.107c-2.997-1.659-6.043-3.313-9.136-4.962 c-3.149,7.279-6.294,15.033-9.419,22.988c5.913,6.218,11.002,10.374,14.061,16.56 C1350.847,1324.016,1356.54,1324.834,1361.845,1325.471z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1371.853,1326.513c12.57,1.11,22.269,1.237,28.537,1.516c-6.869-7.327-14.877-14.689-24.291-21.912 C1374.491,1312.372,1373.038,1319.145,1371.853,1326.513z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1349.125,1365.354c1.308,2.459,2.561,4.632,3.767,6.531c5.433-1.902,10.712-4.186,15.811-6.855 c0.038-3.866,0.148-7.615,0.328-11.245C1363.118,1357.167,1356.49,1361.004,1349.125,1365.354z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1349.262,1288.316c-1.482-3.776-2.994-7.443-4.532-11.005c-0.386-0.525-0.774-1.054-1.171-1.6 c-1.126,2.466-2.253,5.007-3.379,7.609C1343.308,1284.967,1346.333,1286.633,1349.262,1288.316z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1430.604,1278.217c2.304-0.164,4.571-0.339,6.785-0.516c1.347-3.569,2.556-7.153,3.615-10.757 c-3.422-0.33-6.932-0.589-10.533-0.773C1430.133,1270.231,1430.096,1274.263,1430.604,1278.217z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1430.604,1278.217c-12.383,0.88-25.883,1.369-38.684-0.555c-2.933,3.135-6.042,5.485-9.126,6.854 c-2.156,5.982-4.295,12.549-6.232,19.833c12.277,7.606,23.625,15.215,34.093,22.7c4.994-7.332,9.612-14.645,13.752-21.977 c-22.739,8.628-24.331-2.245,2.833-5.354c0.013-0.067,0.026-0.132,0.039-0.2c0.038,0.033,0.075,0.068,0.113,0.101 c2.065-3.891,3.99-7.789,5.758-11.701C1431.829,1284.757,1431.027,1281.514,1430.604,1278.217z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1389.603,1267.02c-1.214,2.989-2.498,6.151-3.809,9.512c2.019,0.444,4.062,0.821,6.125,1.131 c2.903-3.102,5.628-6.965,7.99-11.361C1396.539,1266.485,1393.102,1266.725,1389.603,1267.02z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1369.192,1353.695c0.754,3.268,1.482,6.571,2.186,9.902c12.896-7.194,24.529-16.993,34.309-29.672 c-0.21-0.244-0.423-0.488-0.636-0.733C1399.687,1336.756,1388.073,1342.906,1369.192,1353.695z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M899.336,1316.711c0.703-0.988,2.194-2.143,4.797-3.568c-1.97,0.549-3.906,1.11-5.774,1.694 C898.704,1315.467,899.027,1316.09,899.336,1316.711z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M862.489,1331.793c0.326,0.046,0.654,0.093,0.983,0.14c6.533-1.839,13.124-4.021,19.692-6.583 c0.211-1.691,0.395-3.405,0.545-5.141C875.51,1323.692,868.499,1327.579,862.489,1331.793z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1006.507,1435.412c-1.766,2.03-3.568,4.18-5.406,6.457c-0.142,3.24-0.383,6.612-0.724,10.104 c2.4,2.055,4.897,4.137,7.521,6.254c0.018,0.014,0.037,0.029,0.054,0.043c0.908-0.534,2.027-0.824,3.406-0.812 c0.903-0.483,1.803-0.963,2.698-1.44c0.403-0.638,0.789-1.286,1.169-1.937c-2.369-4.383-4.451-8.648-6.279-12.801 C1008.075,1439.298,1007.261,1437.342,1006.507,1435.412z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M976.787,1428.868c3.913,4.529,8.409,9.221,13.553,14.09c8.638,0.522,12.888-4.15,9.102-14.329 c-5.799-2.039-11.329-4.234-16.606-6.518C980.751,1424.735,978.739,1426.977,976.787,1428.868z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1001.185,1439.518c1.304-2.763,2.573-5.486,3.807-8.167c-0.088-0.247-0.172-0.493-0.258-0.739 c-0.025-0.071-0.05-0.143-0.075-0.214c-1.168-0.38-2.324-0.767-3.471-1.161 C1001.296,1432.495,1001.294,1435.932,1001.185,1439.518z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M970.761,1339.833c-1.746,2.277-3.415,4.589-4.973,6.943c4.331,0.557,8.717,1.105,13.153,1.642 c0.6-1.42,1.16-2.846,1.651-4.275c1.265-3.683,1.758-7.492,2.092-11.18c-1.074-1.289-2.063-2.615-2.957-3.981 C976.631,1332.532,973.595,1336.137,970.761,1339.833z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M975.497,1320.132c0.976,3.114,2.407,6.062,4.231,8.85c1.235-1.415,2.479-2.82,3.724-4.219 c0.254-1.904,0.613-3.703,1.178-5.36c-0.272-0.357-0.555-0.687-0.844-1.002C981.132,1319.138,978.37,1319.732,975.497,1320.132z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1019.646,1350.825c0.181,0.68,0.281,1.349,0.307,2.008c0.126,0.012,0.25,0.024,0.376,0.035 c-0.129,0.291-0.256,0.571-0.385,0.86c-0.04,0.655-0.152,1.301-0.325,1.941c0.135,0.263,0.243,0.516,0.355,0.77 c3.143,1.174,6.361,2.266,9.626,3.277c1.634-0.941,3.213-1.843,4.737-2.706c1.114-3.531,2.134-6.923,3.071-10.189 c-3.547-0.614-6.651-1.363-9.347-2.235C1025.083,1346.465,1022.268,1348.545,1019.646,1350.825z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1018.912,1356.039c0.178,0.068,0.357,0.134,0.535,0.202c0.063-0.19,0.12-0.381,0.172-0.572 c-0.089-0.174-0.202-0.358-0.302-0.536C1019.182,1355.434,1019.046,1355.74,1018.912,1356.039z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1003.247,1348.927c-0.03,0.78-0.052,1.525-0.068,2.24c1.872,0.197,3.751,0.391,5.636,0.582 C1006.908,1350.845,1005.05,1349.905,1003.247,1348.927z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1122.363,1331.546c2.237,4.667,4.814,9.619,7.784,14.883c5.221,3.301,10.087,7.15,14.459,11.559 c-0.046-0.173-0.095-0.354-0.143-0.532c-6.786-10.898-12.618-21.703-17.808-32.267 C1125.158,1325.883,1123.708,1327.872,1122.363,1331.546z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1116.898,1364.457c0.242-2.903,0.501-5.595,0.774-8.129c-7.315-3.565-14.126-6.757-20.451-9.644 c-0.067,1.232-0.131,2.449-0.191,3.641c5.016,4.275,9.893,9.605,13.303,11.899c2.167,1.457,4.361,2.744,6.591,3.891 C1117.191,1365.606,1117.198,1365.054,1116.898,1364.457z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M899.959,1385.231c4.018,3.613,7.778,7.282,11.323,10.915c0.063,0.065,0.126,0.129,0.189,0.194 c4.254-0.687,8.471-1.562,12.596-2.645c-0.653-0.918-1.301-1.845-1.942-2.787 C913.841,1387.102,906.554,1384.851,899.959,1385.231z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M947.375,1344.322c-1.632,2.528-3.32,5.238-5.069,8.15c-0.739-2.695-0.174-5.591,1.366-8.663 c-6.988-0.974-13.79-1.953-20.378-2.92c-7.876,19.169-16.701,32.866-25.83,42.135c0.734,0.638,1.46,1.278,2.178,1.92 c5.401-2.248,10.425-4.281,15.089-6c-0.819-1.46-1.628-2.935-2.414-4.442c1.393,1.363,2.762,2.633,4.11,3.827 c17.652-6.322,29.931-7.715,37.462,1.944c0.153-0.111,0.313-0.217,0.465-0.329c10.442-7.711,19.444-19.352,24.589-31.525 c-4.436-0.537-8.822-1.086-13.153-1.642C959.53,1345.971,953.386,1345.15,947.375,1344.322z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1009.524,1372.554c0.347,0.461,0.71,0.936,1.091,1.429c0.521-1.09,1.046-2.195,1.576-3.318 C1011.347,1371.273,1010.457,1371.9,1009.524,1372.554z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1016.458,1361.463c0.808-1.772,1.626-3.578,2.453-5.423c0.134-0.3,0.27-0.605,0.405-0.907 c-0.445-0.794-0.997-1.631-1.66-2.516c-2.962-0.281-5.91-0.571-8.843-0.868c-1.885-0.191-3.764-0.385-5.636-0.582 c-0.213,9.853,0.968,13.781,4.772,19.23C1011.06,1367.282,1014.178,1364.376,1016.458,1361.463z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M878.237,1347.718c-3.36-0.702-7.778-1.801-12.851-3.189c3.344,3.25,6.758,6.546,10.234,9.881 c1.003-0.573,1.986-1.14,2.93-1.691c-0.767,0.181-1.559,0.351-2.365,0.516C876.904,1351.504,877.59,1349.66,878.237,1347.718z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M940.585,1427.144c1.686,1.54,3.343,2.937,4.982,4.167c0.027,0.02,0.054,0.041,0.081,0.061 c0.593,0.443,1.183,0.863,1.771,1.261c1.683-3.325,3.157-6.294,4.436-8.959c-5.317-4.357-10.695-9.433-15.926-15.208 c-3.231,0.918-6.501,1.647-9.797,2.138c-0.414,0.062-0.818,0.115-1.229,0.174c4.035,4.449,7.8,8.601,11.398,12.235 C937.755,1424.48,939.18,1425.86,940.585,1427.144z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M962.576,1412.445c-1.685-0.871-3.341-1.741-4.967-2.607c-0.978,3.368-2.863,7.817-5.752,13.836 c3.842,3.148,7.649,5.917,11.346,8.308C963.207,1424.679,962.999,1418.194,962.576,1412.445z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M856.387,1349.82c3.083,3.616,5.637,7.275,7.718,10.939c3.126-1.669,6.036-3.261,8.747-4.782 C866.719,1354.028,861.244,1351.975,856.387,1349.82z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M859.699,1243.459c-0.267,0.349-0.531,0.696-0.796,1.044c-0.805,2.409-1.613,4.699-2.425,6.875 c3.235,1.934,6.539,4.1,9.91,6.512C863.891,1252.912,861.667,1248.08,859.699,1243.459z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M896.279,1311.344c-0.81,0.37-1.653,0.729-2.537,1.072c-0.987,2.974-4.718,4.667-9.785,4.402 c-0.07,1.138-0.151,2.269-0.248,3.39c-0.15,1.737-0.334,3.451-0.545,5.141c-0.399,3.19-0.901,6.29-1.495,9.27 c2.343,0.354,4.736,0.716,7.178,1.087c3.841,0.583,7.8,1.186,11.872,1.804c0.554-0.501,1.063-0.985,1.533-1.454 c1.125-3.6,1.077-7.581-0.034-11.848c-0.266-1.022-0.597-2.061-0.982-3.115c-1.872-1.336-3.18-2.585-1.901-4.382 c-0.309-0.621-0.631-1.244-0.977-1.873C897.727,1313.686,897.031,1312.521,896.279,1311.344z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M862.489,1331.793c-4.139-0.587-8.042-1.118-11.691-1.583c1.847,1.831,3.712,3.674,5.603,5.534 c10.865,4.04,18.229,6.996,22.761,9.046c0.051-0.172,0.101-0.347,0.152-0.521c0.887-3.033,1.68-6.262,2.356-9.649 c-6.466-0.976-12.547-1.881-18.198-2.686C863.143,1331.886,862.815,1331.839,862.489,1331.793z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M994.78,1376.532c-0.25-5.106-0.527-10.681-0.933-16.324c-2.922,5.714-6.478,11.159-10.56,16.218 C986.83,1376.076,990.861,1376.142,994.78,1376.532z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M982.837,1422.112c-3.935-1.703-7.731-3.454-11.394-5.226c-2.17,4.953-4.155,10.458-5.892,16.573 c0.942,0.576,1.875,1.125,2.799,1.65c2.707-1.35,5.505-3.399,8.438-6.241C978.739,1426.977,980.751,1424.735,982.837,1422.112z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M977.37,1390.393c-1.527-1.41-2.673-2.7-3.471-3.873c-4.142,3.885-8.599,7.429-13.313,10.532 c0.257,1.264,0.497,2.582,0.715,3.963C967.047,1397.279,972.386,1393.726,977.37,1390.393z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M971.442,1416.886c3.518-8.029,7.507-14.636,11.658-20.152c-0.12-0.693-0.222-1.36-0.308-1.999 c-1.927-1.378-3.551-2.665-4.901-3.867c-5.242,3.222-10.765,6.624-16.58,10.209c0.538,3.414,0.958,7.199,1.265,11.368 C965.444,1413.928,968.396,1415.414,971.442,1416.886z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1019.953,1352.833c0.012,0.3,0.01,0.599-0.008,0.896c0.129-0.289,0.255-0.569,0.385-0.86 C1020.203,1352.857,1020.078,1352.845,1019.953,1352.833z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1435.26,1224.297c-0.133,0.392-0.265,0.792-0.398,1.202c0.864,7.545-0.467,15.665-1.923,23.945 c4.104-0.922,8.227-1.866,12.35-2.83c0.473-3.75,0.77-7.529,0.88-11.339c-3.302-3.484-6.749-7.113-10.331-10.876 C1435.645,1224.365,1435.456,1224.331,1435.26,1224.297z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1400.817,1264.544c1.068-2.141,2.048-4.393,2.919-6.739c-4.317,1.209-8.142,2.25-11.675,3.106 c-0.243,0.615-0.49,1.236-0.743,1.865C1394.504,1263.531,1397.67,1264.114,1400.817,1264.544z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1408.093,1233.048c-3.135-0.44-6.823-1.261-11.202-2.396c2.561,8.042,0.449,16.412-3.561,26.985 c3.666-0.681,7.413-1.402,11.225-2.161C1406.869,1248.515,1408.214,1240.857,1408.093,1233.048z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1430.627,1264.502c3.874-0.48,7.73-1.116,11.571-1.875c1.369-5.281,2.409-10.607,3.089-15.99 c-4.438,1.089-8.563,2.137-12.406,3.14C1432.021,1254.661,1431.129,1259.597,1430.627,1264.502z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1300.351,1248.36c10.653,2.916,19.698,5.378,27.516,7.418c0.386-0.19,0.785-0.381,1.175-0.571 c0.822-0.987,1.91-2.068,3.26-3.241c-1.361-2.425-2.733-4.761-4.115-7.005C1319.071,1246.067,1309.41,1247.091,1300.351,1248.36z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1314.867,1262.635c-5.745-2.666-12.533-5.917-20.521-9.852c-3.163,3.128-6.9,6.342-11.362,9.717 c3.268,3.313,6.358,6.934,9.196,10.909c2.765-0.63,6.166-1.574,10.107-2.968 C1306.154,1267.796,1310.338,1265.202,1314.867,1262.635z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1292.86,1274.405c0.461,0.664,0.922,1.329,1.369,2.011c0.744-0.6,1.503-1.198,2.277-1.791 C1295.178,1274.529,1293.963,1274.456,1292.86,1274.405z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1161.663,1231.658c-1.369-0.602-2.705-1.287-4.004-2.056c-2.035,0.872-3.252,2.073-3.813,3.52 c0.294,0.405,0.592,0.81,0.888,1.215c1.583-0.042,3.129-0.093,4.653-0.151C1160.167,1233.35,1160.924,1232.506,1161.663,1231.658 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1176.806,1241.389c1.49-2.015,3.043-4.127,4.658-6.336c-4.782,0.208-9.351-0.198-13.653-1.285 c-2.701,0.168-5.51,0.307-8.425,0.417c-0.875,0.936-1.777,1.863-2.709,2.777c0.439,0.587,0.883,1.173,1.328,1.759 C1163.586,1238.355,1169.857,1239.146,1176.806,1241.389z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1233.218,1234.746c0.141,0.042,0.286,0.086,0.429,0.129c0.548-0.455,1.077-0.899,1.589-1.332 c3.099-2.629,5.52-4.867,7.333-6.738c0.35-0.361,0.678-0.71,0.983-1.044c-0.167-2.216-0.398-4.331-0.692-6.34 c-1.245,0.264-2.747,0.722-4.472,1.366C1236.175,1224.867,1234.384,1229.57,1233.218,1234.746z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1110.914,1300.718c1.186,0.058,2.417,0.037,3.699-0.081c0.156-0.237,0.303-0.463,0.458-0.698 c-2.552-5.897-4.973-11.667-7.325-17.283C1108.302,1288.013,1109.215,1293.955,1110.914,1300.718z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1100.373,1285.616c-3.24-0.124-6.14-0.373-8.729-0.737c-0.328,0.205-0.651,0.417-0.967,0.642 c0.523,1.272,1.136,2.516,1.841,3.712C1095.064,1288.068,1097.678,1286.865,1100.373,1285.616z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1057.838,1327.066c0.734-5.586,2.087-11.227,4.215-16.841c-0.065,0.106-0.124,0.212-0.19,0.318 c-1.944,3.147-3.93,5.879-5.967,8.247C1056.563,1321.649,1057.21,1324.404,1057.838,1327.066z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1051.817,1201.791c0.61,0.528,1.204,1.069,1.776,1.607c-0.221-0.544-0.445-1.087-0.673-1.63 C1052.557,1201.774,1052.187,1201.783,1051.817,1201.791z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1031.07,1260.802c-0.851,1.819-1.673,3.591-2.463,5.315c2.5,0.7,5.01,1.402,7.529,2.106 c0.844-2.231,1.742-4.566,2.697-7.016c0.712-1.83,1.456-3.725,2.228-5.684c-2.902,0.699-5.739,1.405-8.505,2.121 C1032.05,1258.712,1031.556,1259.763,1031.07,1260.802z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1076.555,1279.3c1.803,0.48,3.609,0.958,5.418,1.435c1.716-1.653,3.53-3.29,5.463-4.905 c0.612-0.042,1.211-0.075,1.816-0.112c1.75-1.904,3.515-3.757,5.294-5.543c-4.011-0.644-7.867-1.318-11.557-2.025 c-3.396,0.305-6.653,0.239-9.729-0.073c-0.047,1.906-0.13,3.802-0.257,5.688 C1073.591,1275.831,1074.726,1277.694,1076.555,1279.3z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1098.845,1322.146c-0.683,8.969-1.22,17.117-1.624,24.537c6.325,2.887,13.136,6.079,20.451,9.644 c8.399,4.094,17.458,8.675,27.221,13.861c-5.77-8.576-10.633-16.467-14.747-23.76c-2.97-5.265-5.547-10.216-7.784-14.883 c-3.761-7.847-6.569-14.895-8.672-21.278c-1.107-3.36-2.02-6.536-2.777-9.55c-1.699-6.763-2.613-12.705-3.168-18.061 c-0.008-0.018-0.015-0.037-0.023-0.055c-6.328-1.4-11.749-0.428-16.08,2.277c2.589,0.364,5.489,0.613,8.729,0.737 c-2.694,1.249-5.308,2.452-7.855,3.616c-2.885,1.318-5.678,2.582-8.378,3.79c-6.139,11.052-5.915,28.777,2.865,45.615 C1090.072,1334.291,1093.97,1328.904,1098.845,1322.146z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1096.071,1270.418c-2.098,1.651-4.349,3.419-6.747,5.296c5.419-0.328,10.535-0.438,15.361-0.352 c-0.551-1.309-1.101-2.61-1.648-3.899C1100.667,1271.124,1098.345,1270.776,1096.071,1270.418z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M823.929,1314.761c-1.046-2.361-1.956-4.772-2.69-6.955c-1.066,1.672-2.293,3.668-3.71,6.052 C819.715,1314.185,821.842,1314.483,823.929,1314.761z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M859.9,1285.827c-0.521,0.631-1.037,1.247-1.548,1.844c2.285,0.133,4.533,0.368,6.735,0.679 c-0.979-0.396-1.975-0.791-3.012-1.187C861.338,1286.691,860.615,1286.251,859.9,1285.827z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M849.636,1287.719c-1.094-2.381-2.108-4.942-3.039-7.667c-1.78-0.451-3.463-0.733-5.046-0.859 c-1.359,1.58-2.734,2.967-4.127,4.167c-1.219,2.804-2.292,5.266-3.236,7.424c0.033,0.087,0.067,0.173,0.099,0.26 C839.456,1289.104,844.603,1288.09,849.636,1287.719z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M840.966,1303.307c4.263-2.094,9.092-3.871,14.542-5.259c-0.938-1.346-1.85-2.775-2.732-4.289 C848.38,1298.197,844.442,1301.287,840.966,1303.307z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M879.315,1316.095c-5.875-1.485-12.722-5.255-19.005-12.048c-2.448,4.806-4.945,9.214-7.459,13.28 c0.917,0.031,1.817,0.054,2.707,0.073C864.907,1317.596,872.736,1317.105,879.315,1316.095z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M872.27,1268.954c-2.108-3.748-4.068-7.445-5.882-11.064c-3.371-2.412-6.674-4.578-9.91-6.512 c-0.213,0.57-0.425,1.136-0.638,1.69c9.337,6.471,12.234,12.318,3.224,13.806c-2.359-2.046-4.325-4.474-5.933-7.204 c-2.67,6.085-5.386,11.051-8.163,15.075c0.506,1.839,1.05,3.607,1.63,5.306c3.945,0.999,8.377,2.849,13.303,5.775 C863.744,1281.171,867.868,1275.592,872.27,1268.954z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M931.869,1275.967c1.589,0.609,3.351,1.377,5.323,2.332c0.644-7.727,1.964-17.081,3.314-28.191 c-2.048,0.74-4.127,1.524-6.239,2.358c-0.008,6.104-3.083,8.329-10.443,4.416c-0.194,0.087-0.388,0.174-0.583,0.262 c-3.555,1.609-7.18,3.348-10.867,5.219c1.958,5.017,4.608,9.42,7.45,13.312C921.978,1273.743,925.471,1273.516,931.869,1275.967z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M900.286,1309.246c-4.403-5.166-8.489-10.402-12.273-15.645c-6.573-1.723-14.401-4.045-22.926-5.252 c23.501,9.498,30.407,18.79,28.656,24.067c0.884-0.343,1.727-0.702,2.537-1.072 C897.726,1310.683,899.059,1309.982,900.286,1309.246z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1430.018,1211.917c-0.285-0.422-0.586-0.839-0.9-1.254c-0.3,0.018-0.599,0.036-0.9,0.053 c-0.088,0.496-0.176,0.983-0.264,1.461c0.636,0.676,1.268,1.346,1.911,2.034 C1429.91,1213.452,1429.961,1212.687,1430.018,1211.917z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1399.909,1266.301c-2.362,4.397-5.087,8.259-7.99,11.361c12.802,1.924,26.302,1.435,38.684,0.555 c-0.508-3.955-0.471-7.986-0.133-12.047c0.046-0.556,0.099-1.112,0.156-1.669c0.502-4.905,1.394-9.842,2.254-14.725 c-12.077,3.151-21.403,5.859-29.145,8.028c-0.872,2.346-1.851,4.598-2.919,6.739 C1400.521,1265.138,1400.219,1265.724,1399.909,1266.301z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1433.148,1287.918c1.534-3.394,2.95-6.799,4.24-10.217c-2.214,0.177-4.481,0.353-6.785,0.516 C1431.027,1281.514,1431.829,1284.757,1433.148,1287.918z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1385.794,1276.531c-0.992,2.542-1.998,5.201-3.001,7.984c3.084-1.368,6.193-3.719,9.126-6.854 C1389.856,1277.352,1387.813,1276.975,1385.794,1276.531z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1408.093,1233.048c0.121,7.809-1.224,15.467-3.537,22.428c9.179-1.827,18.727-3.863,28.384-6.032 c1.456-8.28,2.787-16.4,1.923-23.945c-1.181,3.643-2.367,7.984-3.582,13.161c-1.416-4.354-1.882-11.3-1.647-19.364 c-1.006-0.308-1.994-0.61-2.961-0.905C1423.691,1231.032,1419.716,1234.679,1408.093,1233.048z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M884.392,1182.38c-0.017-0.165-0.032-0.328-0.05-0.494c-0.042,0.216-0.081,0.425-0.122,0.639 C884.276,1182.477,884.335,1182.428,884.392,1182.38z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M883.798,1205.712c0.034-0.134,0.068-0.271,0.102-0.415c-0.019-0.007-0.037-0.015-0.057-0.022 C883.828,1205.421,883.813,1205.567,883.798,1205.712z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M941.348,1242.938c-0.246,2.187-0.496,4.316-0.745,6.382c-0.007,0.057-0.014,0.113-0.021,0.17 c-0.025,0.207-0.05,0.412-0.075,0.618c-1.35,11.109-2.67,20.463-3.314,28.191c-0.374,4.481-0.518,8.414-0.31,11.828 c3.771-10.336,9.318-22.137,14.399-35.618c-2.346-2.855-4.391-6.36-6.052-10.663c-0.57-0.135-1.142-0.271-1.71-0.404 C942.793,1243.272,942.071,1243.105,941.348,1242.938z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M942.332,1233.573c0.029-0.302,0.059-0.601,0.088-0.906c0.143-1.499,0.281-3.026,0.416-4.574 c-0.368,0.654-0.74,1.321-1.114,1.995C941.906,1231.289,942.11,1232.448,942.332,1233.573z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M942.248,1234.44c-0.774-0.378-1.534-0.763-2.287-1.153c-1.436,2.635-2.915,5.407-4.439,8.328 c1.931,0.431,3.873,0.872,5.827,1.324C941.656,1240.201,941.958,1237.369,942.248,1234.44z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M944.189,1305.07c0.936-2.656,1.99-5.408,3.161-8.188c-2.151,1.851-4.229,3.76-6.24,5.732 C941.978,1303.563,942.999,1304.38,944.189,1305.07z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1078.88,1283.859c0.991-1.048,2.021-2.089,3.094-3.124c-1.81-0.477-3.616-0.955-5.418-1.435 c-1.316-0.35-2.63-0.702-3.943-1.054c-0.281,2.599-0.662,5.182-1.169,7.754c2.201-0.516,4.428-1.037,6.699-1.569 C1078.388,1284.24,1078.636,1284.048,1078.88,1283.859z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1056.079,1274.258c-0.164-0.217-0.321-0.424-0.48-0.636c-6.546-1.8-13.034-3.605-19.463-5.401 c-2.519-0.704-5.029-1.406-7.529-2.106c-4.41-1.235-8.79-2.463-13.137-3.678c-1.071,0.327-2.131,0.656-3.18,0.987 c0.042,0.102,0.086,0.203,0.124,0.307c25.441,0.613,24.179,11.29,17.208,24.886c0.14,2.151,0.144,4.512,0.001,7.101 c5.486-1.25,11.275-2.586,17.399-4.01c0.002-1.425-0.03-2.737-0.089-3.937c-5.738-12.759-0.746-15.149,0,0 c0.498,1.107,1.079,2.293,1.748,3.551c1.527-0.355,3.074-0.716,4.641-1.082c2.259-4.8,3.698-10.273,4.484-16.013 c-0.475-0.13-0.951-0.26-1.426-0.391C1056.278,1273.978,1056.181,1274.117,1056.079,1274.258z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M913.574,1162.415c0.874-0.53,1.764-1.067,2.669-1.61c-1.75-0.123-3.487-0.253-5.21-0.386 C911.883,1161.022,912.73,1161.69,913.574,1162.415z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M878.538,1159.264c0.287,1.036,0.562,2.061,0.826,3.075c0.376-0.287,0.754-0.564,1.133-0.835 c-0.268-1.005-0.553-2.024-0.85-3.052C879.276,1158.722,878.907,1158.993,878.538,1159.264z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1422.028,1165.187c0.279-0.074,0.565-0.156,0.857-0.244c0.805-0.86,1.584-1.744,2.332-2.655 c-1.238-0.274-2.49-0.545-3.75-0.816C1421.677,1162.593,1421.865,1163.825,1422.028,1165.187z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1422.057,1165.45c-0.01-0.086-0.019-0.177-0.029-0.263c-0.205,0.055-0.405,0.104-0.604,0.151 C1421.635,1165.376,1421.846,1165.413,1422.057,1165.45z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1312.21,1223.672c0.466-1.323,0.922-2.672,1.376-4.049c-0.886-0.469-1.745-0.964-2.577-1.483 c-0.572,0.88-1.151,1.754-1.739,2.62C1310.25,1221.678,1311.23,1222.649,1312.21,1223.672z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1314.992,1137.824c-2.13-0.938-4.309-1.932-6.543-2.99c-3.545,4.112-7.336,8.362-11.382,12.748 c-1.978,5.759-3.435,11.401-4.362,16.851C1300.543,1155.898,1308.033,1146.956,1314.992,1137.824z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1287.859,1169.616c0.484,0.512,0.969,1.023,1.457,1.529c0.88-0.432,1.76-0.874,2.64-1.322 c0.191-1.773,0.44-3.57,0.75-5.389c-1.573,1.714-3.159,3.412-4.759,5.091C1287.917,1169.555,1287.888,1169.585,1287.859,1169.616 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1165.415,1221.195c-4.293,1.436-8.788,2.853-13.507,4.242c1.826,1.598,3.747,2.979,5.751,4.164 c1.3,0.769,2.635,1.454,4.004,2.056c3.624-4.161,6.763-8.434,9.63-12.488c-1.534,0.544-3.094,1.086-4.686,1.624 C1166.212,1220.928,1165.814,1221.062,1165.415,1221.195z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1312.21,1223.672c-0.206,0.584-0.413,1.165-0.623,1.74c0.643-0.11,1.289-0.222,1.938-0.336 C1313.087,1224.597,1312.648,1224.13,1312.21,1223.672z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1181.465,1235.053c1.031-0.045,2.073-0.12,3.123-0.221c2.056-0.199,4.149-0.506,6.273-0.915 c1.5-0.288,3.015-0.626,4.545-1.014c0.138-0.821,0.275-1.643,0.421-2.442c-7.755,1.483-17.013,2.625-28.015,3.308 C1172.114,1234.856,1176.683,1235.261,1181.465,1235.053z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1121.98,1181.156c0.729,1.351,1.475,2.727,2.236,4.121c2.107,0.395,4.222,0.696,6.331,0.891 c2.003-1.73,3.901-3.373,5.695-4.928C1131.69,1180.95,1126.885,1180.921,1121.98,1181.156z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1156.972,1214.656c1.982-1.62,3.693-3.182,5.147-4.686c6.038-6.243,7.686-11.491,6.148-15.729 c-1.12,0.92-2.258,1.847-3.429,2.79c0.955-1.385,1.897-2.749,2.831-4.102c-1.701-3.114-5.228-5.624-10.02-7.523 c-1.832,1.754-4.15,3.773-7.035,6.095c-3.002,8.564-6.12,16.21-9.32,23.045c1.615,2.554,3.278,5.123,4.997,7.702 c3.967-2.512,7.355-4.912,10.199-7.197C1156.654,1214.919,1156.81,1214.788,1156.972,1214.656z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1139.731,1181.517c-1.525,1.563-3.113,3.195-4.768,4.905c6.104,0.128,12.068-0.693,17.546-2.695 c-0.342-0.092-0.689-0.182-1.039-0.269C1147.917,1182.572,1143.959,1181.925,1139.731,1181.517z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1178.448,1209.109c-2.271,3.026-4.606,6.456-7.155,10.061c-2.867,4.055-6.007,8.327-9.63,12.488 c-0.739,0.848-1.496,1.692-2.277,2.528c2.915-0.111,5.724-0.25,8.425-0.417c11.002-0.683,20.261-1.825,28.015-3.308 c1.398-7.657,3.17-14.308,5.241-20.037c-0.923-3.42-2.042-7.552-3.837-12.667 C1189.69,1196.249,1184.277,1201.342,1178.448,1209.109z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1078.313,1181.357c-1.802,1.305-3.54,2.355-5.204,3.167c0.132,0.187,0.264,0.375,0.397,0.563 c2.256-0.004,4.522-0.046,6.797-0.136C1079.647,1183.731,1078.983,1182.532,1078.313,1181.357z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1159.386,1234.186c-1.523,0.058-3.07,0.109-4.653,0.151c0.642,0.876,1.289,1.751,1.944,2.626 C1157.609,1236.049,1158.512,1235.122,1159.386,1234.186z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1036.313,1172.85c-10.048,0.498-20.114,0.345-30.044-0.412c10.766,4.398,23.375,7.997,37.016,10.217 c-1.973-3.322-4.06-6.553-6.245-9.66C1036.801,1172.953,1036.557,1172.902,1036.313,1172.85z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M991.732,1144.277c4.346-3.445,8.738-6.615,13.139-9.522c-0.067-2.424-0.282-4.99-0.659-7.706 c-0.208-1.495-0.465-3.036-0.773-4.624c-1.377-0.397-2.729-0.823-4.055-1.278c-1.324,0.266-2.601,0.544-3.826,0.837 c-1.746,11.461-5.116,21.762-8.312,30.8c0.016,0.101,0.027,0.204,0.041,0.306c3.697,1.35,7.581,2.62,11.657,3.792 c3.146,0.412,6.304,0.743,9.488,0.955C1003.406,1154.101,997.862,1149.616,991.732,1144.277z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1043.284,1182.656c0.691,1.163,1.368,2.337,2.03,3.521c0.45-1.016,0.868-2.021,1.256-3.015 C1045.469,1183.002,1044.374,1182.833,1043.284,1182.656z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1166.919,1153.971c-26.588-4.91-41.784,0.77-52.787,12.518c1.969,3.667,4.08,7.649,6.349,11.88 C1136.818,1173.448,1152.665,1165.582,1166.919,1153.971z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1084.792,1187.61c0.097-0.99,0.194-1.963,0.291-2.917c-1.596,0.107-3.19,0.195-4.78,0.258 c-2.275,0.091-4.541,0.132-6.797,0.136c-0.542,0.001-1.083,0.001-1.624-0.003c-5.96,2.551-10.893,1.999-14.31-0.661 c-0.045-0.004-0.09-0.007-0.135-0.011c-3.021,2.142-6.212,4.325-9.56,6.544c1.826,3.55,3.512,7.166,5.042,10.811 c0.228,0.543,0.452,1.086,0.673,1.63c0.935,0.879,1.809,1.74,2.578,2.488C1063.882,1200.253,1073.382,1194.175,1084.792,1187.61z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1421.336,1205.237c0.449-4.949,0.777-9.465,1-13.59c-2.561-0.415-5.068-0.815-7.523-1.195 c-0.517-0.08-1.039-0.162-1.551-0.24c-1.839,0.431-3.734,0.849-5.667,1.249 C1411.974,1195.702,1416.555,1200.291,1421.336,1205.237z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1348.834,1195.71c-1.792,1.679-3.469,3.354-4.976,4.994c2.482-1.287,5.22-2.758,8.227-4.418 c0.414-1.509,0.76-2.983,1.033-4.42c-1.123,0.968-2.222,1.943-3.285,2.918C1349.496,1195.094,1349.163,1195.402,1348.834,1195.71 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1428.218,1210.716c-0.52,0.03-1.028,0.063-1.552,0.091c0.426,0.45,0.859,0.914,1.288,1.369 C1428.041,1211.7,1428.129,1211.212,1428.218,1210.716z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1426.673,1218.391c-25.007-7.624-36.943-10.693-43.783-8.005c-0.396,0.568-0.781,1.111-1.167,1.657 c8.573,6.566,13.222,12.493,15.169,18.608c4.378,1.135,8.067,1.956,11.202,2.396 C1419.716,1234.679,1423.691,1231.032,1426.673,1218.391z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1426.206,1152c0.674-0.022,1.352-0.054,2.032-0.092c0.32-0.018,0.641-0.038,0.963-0.06 c0.959-0.065,1.925-0.146,2.897-0.243c0.8-1.623,1.526-3.281,2.162-4.976C1431.592,1148.188,1428.901,1149.971,1426.206,1152z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1473.017,1057.48c0.053,0.314,0.109,0.628,0.165,0.942c0.157,0.886,0.322,1.773,0.495,2.66 c0.155,0.791,0.316,1.582,0.482,2.372c1.164-1.029,2.308-2.085,3.426-3.17C1476.133,1059.375,1474.611,1058.439,1473.017,1057.48 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1172.424,1123.156c-6.893-6.489-11.133-13.428-11.829-19.619c-12.938,0.965-23.829,0.997-32.989,0.298 c-3.693,2.574-7.569,4.917-11.64,6.844c-0.802,1.344-1.631,2.635-2.479,3.874c-1.484,2.168-3.024,4.174-4.571,6.014 c-1.295,1.54-2.594,2.967-3.867,4.273c0.081,0.439,0.15,0.884,0.195,1.34c2.018-1.123,4.285-2.352,6.824-3.687 c0.1-0.053,0.196-0.104,0.297-0.157c-0.048,0.103-0.067,0.198-0.072,0.29c-0.032,0.547,0.682,0.908,2.013,1.13 c1.312,0.219,3.221,0.306,5.607,0.305c3.049-3.252,6.209-6.696,9.53-8.319c8.17-3.99,6.22-1.11,14.09,3.55 c2.268,1.341,4.686,2.569,7.214,3.679C1157.874,1122.794,1165.312,1122.775,1172.424,1123.156z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1168.903,1191.142c-0.41,0.594-0.82,1.187-1.234,1.787c-0.934,1.353-1.876,2.717-2.831,4.102 c1.172-0.943,2.309-1.871,3.429-2.79c0.54-0.444,1.071-0.883,1.599-1.321c6.806-5.645,12.638-10.848,17.57-15.635 c3.913-3.798,7.256-7.333,10.092-10.63c-2.538-2.401-4.824-4.703-6.872-6.9c-3.847,5.542-7.95,11.452-12.319,17.756 C1175.32,1181.864,1172.176,1186.405,1168.903,1191.142z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1181.471,1079.796c1.879,0.047,3.728,0.183,5.546,0.406c-1.805-5.305-3.391-10.417-4.774-15.312 c-1.994,2.333-4.112,4.75-6.36,7.251C1177.909,1073.51,1179.767,1075.978,1181.471,1079.796z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1146.742,1024.979c-1.292,2.104-2.597,4.254-3.926,6.481c4.564-1.157,8.533-3.327,11.898-5.538 c-1.182-0.529-2.37-1.047-3.562-1.551C1149.649,1024.54,1148.179,1024.745,1146.742,1024.979z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1190.823,1078.071c0.026,0.9,0.05,1.819,0.073,2.737c0.635,0.122,1.264,0.26,1.892,0.402 C1192.14,1080.2,1191.486,1079.155,1190.823,1078.071z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1155.342,1080.407c-0.008-0.11-0.018-0.22-0.025-0.33c-0.08,0.07-0.16,0.14-0.24,0.211 C1155.164,1080.327,1155.253,1080.367,1155.342,1080.407z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1167.877,1037.025c0.206,11.25-0.899,19.767-3.106,26.027c0.391,0.129,0.768,0.256,1.164,0.386 c-0.419-0.059-0.822-0.121-1.235-0.181c-2.195,6.112-5.455,10.042-9.583,12.242c0.026,1.5,0.09,3.028,0.199,4.578 c7.893-6.931,14.423-11.264,19.809-8.39c2.409-2.73,4.739-5.184,6.948-7.409c-0.257-0.919-0.507-1.829-0.75-2.732 c-0.039,0.013-0.077,0.026-0.116,0.04c0.005-0.137,0.012-0.272,0.017-0.409c-0.053-0.199-0.108-0.399-0.16-0.597 c-2.424-4.644-5.067-9.871-8.018-15.831C1171.224,1042.474,1169.494,1039.912,1167.877,1037.025z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1319.95,1153.537c-9.232,5.866-18.621,11.514-27.994,16.286c-0.88,0.448-1.76,0.89-2.64,1.322 c1.402,1.457,2.816,2.892,4.247,4.296c12.139-7.728,20.683-8.066,26.916-4.304c1.662-3.775,3.238-7.594,4.728-11.43 C1321.248,1158.173,1319.022,1156.022,1319.95,1153.537z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1317.735,1206.883c-1.46,2.644-2.972,5.251-4.544,7.808c0.479,0.563,0.963,1.134,1.446,1.703 C1315.608,1213.386,1316.61,1210.23,1317.735,1206.883z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1247.774,1096.014c1.039-0.765,2.092-1.563,3.157-2.393c-1.109-0.296-2.208-0.585-3.294-0.865 C1247.704,1093.844,1247.75,1094.93,1247.774,1096.014z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1325.387,1201.609c-0.318,0.267-0.657,0.535-1.006,0.804c-1.505,3.788-0.943,5.638,2.383,5.281 c0.07-1.196,0.14-2.383,0.212-3.563C1326.65,1203.183,1326.138,1202.333,1325.387,1201.609z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1210.554,1050.908c-5.742,2.251-12.029,4.595-18.874,7.03c0.112,0.292,0.224,0.583,0.335,0.87 c14.168,5.601,28.891,3.844,37.025,5.79c-0.313-1.135-0.643-2.27-0.985-3.405c-5.23-3.022-10.622-6.158-16.099-9.443 C1211.49,1051.471,1211.022,1051.19,1210.554,1050.908z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1249.981,1124.542c5.914,7.041,11.775,14.415,17.735,21.737c5.392-4.72,9.597-9.137,12.738-13.308 c-0.342-1.345-0.689-2.674-1.042-3.979c-0.391-0.141-0.788-0.283-1.175-0.423 C1271.313,1128.458,1262.044,1127.264,1249.981,1124.542z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1244.102,1070.502c1.255,5.45,2.373,11.117,3.042,16.799c3.836-0.795,7.804-0.996,11.926-0.391 c1.252-1.085,2.51-2.196,3.768-3.328c-0.304-0.673-0.605-1.335-0.903-1.987c-2.436-1.643-5.003-3.296-7.683-4.966 C1251.022,1074.617,1247.629,1072.579,1244.102,1070.502z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1245.674,1119.495c0.641-0.898,1.299-1.748,1.975-2.541c-0.931-0.382-1.838-0.759-2.729-1.133 c-0.236,0.654-0.487,1.303-0.756,1.945C1244.667,1118.339,1245.171,1118.916,1245.674,1119.495z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1190.823,1078.071c0.663,1.084,1.317,2.129,1.965,3.139c1.006,0.229,2.004,0.484,2.993,0.765 c2.092,0.211,4.141,0.683,6.154,1.391c-3.313-6.529-6.012-14.363-9.92-24.558c-0.429-0.17-0.858-0.347-1.287-0.53 c-0.259,0.092-0.52,0.184-0.781,0.276C1190.319,1064.543,1190.617,1071.036,1190.823,1078.071z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1173.045,1044.748c2.951,5.96,5.594,11.188,8.018,15.831c-0.911-3.433-1.723-6.751-2.438-9.943 C1176.695,1048.927,1174.828,1046.974,1173.045,1044.748z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1200.487,1044.701c-0.58-0.367-1.161-0.736-1.742-1.106c-2.344,3.445-5.083,7.192-8.265,11.254 c0.125,0.319,0.251,0.639,0.374,0.954C1195.343,1051.537,1198.751,1048.141,1200.487,1044.701z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1224.504,1098.115c1.645,1.38,3.271,2.821,4.882,4.312c0.457-1.217,0.874-2.475,1.236-3.784 c0.471-1.7,0.826-3.404,1.094-5.112C1229.268,1094.944,1226.866,1096.496,1224.504,1098.115z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1228.947,1088.442c1.069,0.214,2.15,0.436,3.248,0.668c0.15-2.318,0.157-4.642,0.015-6.971 C1231.324,1084.032,1230.24,1086.127,1228.947,1088.442z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1080.922,1109.761c-0.264,1.41-0.514,2.844-0.747,4.306c2.252,0.645,4.461,1.115,6.631,1.432 c-0.216-1.714-0.367-3.395-0.44-5.092c-0.53-0.093-1.072-0.175-1.62-0.252C1083.515,1109.983,1082.24,1109.851,1080.922,1109.761 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1076.514,1144.493c-0.051-0.109-0.102-0.215-0.153-0.323c-2.594,5.526-6.148,3.899-1.323-2.737 c-0.849-1.718-1.678-3.332-2.465-4.843c-6.854,5.559-11.783,11.521-15.056,17.325c1.296-0.266,2.589-0.542,3.878-0.833 c4.37-1.214,9.277-2.856,14.73-4.951C1076.1,1146.903,1076.227,1145.688,1076.514,1144.493z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1076.514,1144.493c0.45,0.958,0.902,1.947,1.352,2.962c4.313-1.697,8.957-3.671,13.944-5.938 c-0.733-3.888-1.442-7.325-2.094-10.438C1081.835,1134.771,1077.729,1139.44,1076.514,1144.493z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1046.462,1172.119c-1.489,0.139-2.977,0.275-4.469,0.385c-1.892,0.141-3.786,0.253-5.681,0.347 c0.245,0.052,0.488,0.103,0.727,0.146C1040.909,1173.701,1043.998,1173.325,1046.462,1172.119z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1054.914,1111.155c-2.617-2.221-5.009-4.486-7.191-6.782c-6.133-2.124-11.942-3.951-17.452-5.517 c-10.337-2.938-19.612-4.948-27.947-6.231c-0.033,1.735-0.204,3.43-0.503,5.08c10.257,8.718,21.531,18.096,33.918,28.163 c-5.397,0.283-10.509,0.169-15.363-0.28c-5.143,2.696-10.331,5.747-15.506,9.167c-4.401,2.907-8.793,6.077-13.139,9.522 c6.13,5.339,11.674,9.824,16.699,13.56c10.935,0.728,22.159,0.273,34.122-1.374c1.694-0.234,3.388-0.486,5.081-0.755 C1024.274,1157.421,1029.708,1137.518,1054.914,1111.155z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1052.349,1171.492c-0.855,0.103-1.711,0.195-2.567,0.287c-0.596,3.635-1.668,7.425-3.212,11.382 c-0.388,0.994-0.806,1.999-1.256,3.015c-1.384,3.127-3.044,6.353-5.028,9.703c2.624-1.661,5.147-3.301,7.592-4.922 c3.347-2.219,6.539-4.402,9.56-6.544c0.021-0.015,0.042-0.03,0.063-0.045C1054.198,1181.753,1052.33,1177.156,1052.349,1171.492z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1102.258,1126.638c0.146,0.039,0.285,0.076,0.432,0.115c-0.151,0.036-0.294,0.073-0.443,0.109 c-0.167,3.317-0.363,6.656-0.582,10.01c0.722-0.352,1.456-0.714,2.19-1.077c1.239-3.543,1.673-6.754,1.39-9.616 c-0.045-0.456-0.114-0.901-0.195-1.34c-0.402-2.17-1.239-4.121-2.469-5.844 C1102.495,1121.526,1102.386,1124.075,1102.258,1126.638z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1088.054,1123.004c-0.12-0.616-0.235-1.221-0.345-1.817c-0.412,0.475-0.832,0.959-1.249,1.439 C1086.979,1122.748,1087.51,1122.874,1088.054,1123.004z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M954.432,1136.187c-0.403,0.096-0.809,0.217-1.217,0.365c0.558,1.494,1.088,2.977,1.596,4.452 c1.197,1.317,2.35,2.636,3.46,3.951c0.788-1.605,1.553-3.173,2.296-4.706c-2.094-1.299-4.087-2.619-5.979-3.953 C954.537,1136.26,954.484,1136.223,954.432,1136.187z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M891.115,973.108c-1.775,1.223-3.476,2.401-5.117,3.544c2.148,0.515,4.254,1.025,6.33,1.532 c-0.314-1.974-0.623-3.988-0.926-6.041c-2.13-0.796-4.226-1.582-6.294-2.36c-0.511,1.996-1.01,3.964-1.497,5.903 c0.089,0.154,0.18,0.307,0.27,0.46c0.418,0.099,0.845,0.2,1.26,0.299C887.104,975.355,889.095,974.243,891.115,973.108z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M890.982,969.259c-0.166-1.165-0.331-2.342-0.494-3.533c-1.393-0.286-2.766-0.552-4.124-0.803 c-0.139,0.534-0.277,1.065-0.414,1.594C887.563,967.383,889.24,968.297,890.982,969.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M961.463,1138.396c0.189-0.394,0.381-0.79,0.567-1.179c-0.473-0.231-0.944-0.436-1.416-0.608 C960.896,1137.199,961.179,1137.792,961.463,1138.396z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M894.703,1046.25c5.601,2.341,10.729,4.625,15.435,6.861c0.324-1.869,0.587-3.7,0.792-5.489 c-1.654-3.708-3.271-7.735-4.844-12.123c-1.039-2.9-2.059-5.96-3.056-9.197c-0.835-2.71-1.654-5.543-2.456-8.509 c-0.719-0.488-1.435-0.975-2.166-1.471c-10.221,1.567-17.274-0.617-22.162-4.87c0.186,4.497,0.698,9.538,1.53,15.169 C886.629,1029.458,895.025,1035.54,894.703,1046.25z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M987.456,1154.932c3.822,0.802,7.646,1.446,11.487,1.949c-4.077-1.172-7.96-2.442-11.657-3.792 C987.368,1153.689,987.427,1154.302,987.456,1154.932z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1320.983,977.988c-0.526,0.442-1.053,0.881-1.58,1.318c2.174,2.17,4.277,4.268,6.334,6.302 c0.498-0.243,0.995-0.495,1.49-0.753C1325.198,982.724,1323.115,980.435,1320.983,977.988z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1324.493,975.003c-0.321,0.276-0.643,0.55-0.965,0.825c2.867,2.098,5.521,4.324,7.931,6.61 c1.151-0.722,2.291-1.502,3.421-2.327C1332.846,976.875,1329.483,975.128,1324.493,975.003z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1306.799,989.241c-2.039,1.516-4.078,2.986-6.111,4.398c4.944-1.168,9.882-2.362,14.743-3.933 C1312.517,989.458,1309.636,989.309,1306.799,989.241z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1333.65,1016.289c0.858-3.632,1.586-7.045,2.169-10.241c0.626-3.429,1.078-6.598,1.332-9.498 c-0.022-0.02-0.045-0.041-0.067-0.062c-7.222,5.858-15.342,10.723-24.883,14.101 C1321.307,1014.27,1328.37,1016.013,1333.65,1016.289z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1283.389,1018.539c-0.158-0.036-0.315-0.073-0.473-0.11c0.158,0.066,0.324,0.137,0.485,0.204 C1283.397,1018.603,1283.393,1018.571,1283.389,1018.539z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1252.669,1046.866c0.309-0.507,0.668-0.998,1.082-1.473c-1.221-0.327-2.381-0.645-3.485-0.954 C1251.056,1045.245,1251.856,1046.054,1252.669,1046.866z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1273.614,1025.196c-0.041,0.087-0.081,0.174-0.122,0.261c1.796,2.97,3.54,6.242,5.193,9.843 c0.785-0.17,1.593-0.339,2.418-0.508C1278.225,1031.178,1275.66,1027.95,1273.614,1025.196z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1174.102,1018.642c-0.204-5.846,0.125-10.379,0.817-13.402c-1.321-1.227-2.7-2.497-4.133-3.808 c-1.754,0.44-3.497,0.906-5.226,1.403C1168.729,1008.445,1171.56,1013.705,1174.102,1018.642z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1189.77,1027.634c0.144,0.042,0.288,0.082,0.432,0.124c0.912-1.589,1.859-3.057,2.823-4.404 c-2.382-2.734-5.298-5.788-8.796-9.239c0.862,3.487,1.701,7.697,2.481,12.682 C1187.73,1027.057,1188.75,1027.339,1189.77,1027.634z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1230.853,990.942c-0.447,0.67-0.898,1.345-1.354,2.028c-0.197,0.865-0.401,1.742-0.611,2.633 c1.325-0.979,2.632-1.946,3.939-2.912c-0.021-0.021-0.04-0.043-0.061-0.064C1232.181,992.038,1231.544,991.477,1230.853,990.942z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1158.07,1007.439c-0.687,1.002-1.383,2.033-2.082,3.077c0.902,0.086,1.796,0.17,2.713,0.259 C1158.48,1009.689,1158.271,1008.572,1158.07,1007.439z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1125.438,980.292c-3.425,3.472-7.328,6.476-11.442,8.92c13.824,8.132,20.336,14.468,22.479,19.633 c3.323,0.248,6.771,0.528,10.334,0.836c3.541-1.604,7.178-3.055,10.899-4.355c-0.123-0.752-0.242-1.511-0.357-2.283 c-2.932-1.613-6.283-5.198-9.754-10.196C1152.614,1012.789,1146.774,1015.704,1125.438,980.292z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1222.978,1046.033c-0.021-0.061-0.043-0.121-0.064-0.182c-0.03,0.013-0.061,0.026-0.091,0.039 C1222.874,1045.938,1222.926,1045.985,1222.978,1046.033z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1165.935,1063.438c-0.396-0.13-0.773-0.257-1.164-0.386c-0.024,0.068-0.047,0.138-0.071,0.205 C1165.114,1063.317,1165.516,1063.379,1165.935,1063.438z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1149.76,1020.124c-0.995,1.58-2.001,3.199-3.018,4.855c1.436-0.235,2.907-0.439,4.41-0.609 c2.127-0.24,4.316-0.414,6.554-0.513c1.328-0.953,2.533-1.849,3.617-2.609c-0.691-2.281-1.33-4.691-1.916-7.233 C1156.028,1016.216,1152.821,1018.244,1149.76,1020.124z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1328.313,971.676c2.109,2.344,4.588,4.996,7.332,7.874c0.572-0.432,1.142-0.874,1.708-1.336 c0.355-0.289,0.693-0.592,1.04-0.887c-2.745-2.261-5.603-4.581-8.591-6.969C1329.306,970.798,1328.81,971.238,1328.313,971.676z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1335.741,1016.331c0.253-0.006,0.488-0.028,0.731-0.042c-0.769-0.503-1.538-1.006-2.325-1.524 C1334.654,1015.299,1335.188,1015.819,1335.741,1016.331z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1427.116,1041.732c-3.741-0.618-7.373-1.078-10.895-1.387 C1419.904,1040.825,1423.546,1041.283,1427.116,1041.732z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1456.107,1043.432c0.664-0.477,1.324-0.933,1.978-1.352c2.329-4.894,5.173-9.183,8.286-12.668 c-4.196-4.132-8.755-8.958-13.691-14.564c1.577-2.356,3.005-4.55,4.323-6.626c-7.458-0.387-9.755-3.183-2.997-10.88 c2.474-3.1,4.782-6.094,6.936-8.982c-0.196-0.119-0.393-0.237-0.59-0.355c-16.773,4.578-15.139,4.022-1.705-0.995 c-0.869-0.497-1.752-0.984-2.644-1.464c-0.777,0.053-1.545,0.101-2.298,0.149c-0.851,0.054-1.727,0.079-2.612,0.094 c-5.177,1.43-10.602,3.014-16.282,4.763C1439.829,1006.973,1446.408,1024.844,1456.107,1043.432z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1362.139,1004.332c2.615,1.598,5.204,3.351,7.758,5.275c1.217-0.226,2.336-0.595,3.352-1.097 c-6.02-5.966-13.314-12.777-22.171-20.469c-0.539-0.468-1.096-0.947-1.647-1.421 C1353.16,990.371,1357.563,996.539,1362.139,1004.332z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1348.838,986.109c-0.123-0.106-0.241-0.208-0.364-0.314c-1.115,1.191-2.247,2.361-3.402,3.505 c1.196,1.226,2.413,2.471,3.645,3.729C1348.673,990.565,1348.722,988.26,1348.838,986.109z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1483.038,1005.768c1.809-0.257,3.655-0.521,5.53-0.786c-2.8-4.378-5.507-8.538-8.121-12.496 c-3.741-1.332-7.58-2.929-11.496-4.812c0.144,2.079,0.33,4.213,0.564,6.403 C1474.563,997.783,1479.076,1001.738,1483.038,1005.768z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1485.018,993.996c1.338,3.463,2.827,7.08,4.48,10.854c6.36-0.897,13.019-1.794,19.598-2.451 c0.293-1.401,0.558-2.804,0.795-4.21C1502.441,998.02,1494.051,996.767,1485.018,993.996z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1504.376,1018.749c0.445-1.198,0.862-2.405,1.267-3.615 C1505.012,1016.211,1504.601,1017.427,1504.376,1018.749z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1479.79,978.862c0.01,0.034,0.02,0.066,0.03,0.1c0.184-0.072,0.37-0.144,0.555-0.216 C1480.179,978.785,1479.987,978.822,1479.79,978.862z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1502.896,975.215c-0.315-0.59-0.633-1.18-0.958-1.771c-1.099,0.09-2.385-0.4-3.937-1.698 c-6.358,2.578-12.263,4.914-17.627,7C1488.806,977.064,1496.295,975.917,1502.896,975.215z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M835.398,978.659c-4.653,3.349-8.885,6.475-12.695,9.37c2.016,3.507,3.986,6.797,5.911,9.895 c2.831-1.059,5.892-2.016,9.196-2.859c2.85-3.074,5.981-6.644,9.444-10.665C843.593,982.857,839.639,980.91,835.398,978.659z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M885.142,976.446c0.289,0.069,0.569,0.137,0.856,0.206c1.642-1.143,3.342-2.321,5.117-3.544 C889.095,974.243,887.104,975.355,885.142,976.446z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M919.013,1054.662c-0.512,0.192-1.012,0.372-1.502,0.542c-0.155,0.42-0.31,0.854-0.466,1.307 c0.243,0.125,0.485,0.249,0.726,0.373c0.163-0.156,0.323-0.306,0.488-0.465C918.494,1055.835,918.744,1055.249,919.013,1054.662z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M823.645,1062.782c-0.104-0.01-0.204-0.019-0.307-0.029c-1.398,3.34-2.742,6.762-4.029,10.247 c2.677-0.679,5.269-1.327,7.772-1.941C825.937,1068.264,824.789,1065.502,823.645,1062.782z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1119.073,903.408c-0.675-0.077-1.36-0.156-2.04-0.234c-1.282,0.359-2.594,0.764-3.933,1.21 c-1.214,1.986-2.391,3.919-3.54,5.807c3.106,0.384,5.824,0.902,8.145,1.519c0.179-1.062,0.36-2.147,0.541-3.238 C1118.519,906.816,1118.795,905.132,1119.073,903.408z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1107.638,948.452c0.322,2.614,0.673,5.231,1.032,7.84c0.327-1.286,0.659-2.638,0.994-4.029 C1108.996,951.014,1108.323,949.75,1107.638,948.452z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1110.34,1006.819c0.142-0.021,0.287-0.047,0.429-0.069c-0.074-0.237-0.147-0.473-0.221-0.707 C1110.48,1006.302,1110.414,1006.564,1110.34,1006.819z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1069.199,977.684c0.301-0.113,0.606-0.231,0.905-0.343c-0.076-1.555-0.044-3.212,0.106-4.978 c-1.252,0.568-2.541,1.039-3.819,1.372C1067.357,975.114,1068.294,976.432,1069.199,977.684z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1026.229,967.072c-0.474,0.527-0.948,1.053-1.418,1.584c2.585,3.339,4.652,6.748,6.251,10.198 c1.224,1.452,2.376,2.968,3.446,4.531c4.027-0.688,8.529-0.898,13.384-0.455c1.131-0.85,3.214-0.723,6.159,0.866 c4.67-2.005,9.171-3.83,13.493-5.485c-0.635-1.446-1.293-2.907-1.976-4.381c-3.836,0.814-7.462,0.243-9.493-3.068 c-0.327-0.533-0.397-1.298-0.275-2.232C1047.322,967.761,1037.502,967.149,1026.229,967.072z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1038.754,990.763c-1.199-2.539-2.629-5.013-4.247-7.377c-0.516,0.088-1.025,0.184-1.525,0.288 c0.991,2.957,1.652,5.936,2.009,8.923C1036.255,991.973,1037.51,991.361,1038.754,990.763z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1506.758,968.157c1.164-0.482,2.342-0.972,3.53-1.469c-0.238-1.544-0.515-3.079-0.835-4.604 C1508.49,964.01,1507.653,966.209,1506.758,968.157z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1475.991,913.201c-0.325,0.27-0.649,0.542-0.974,0.816c-0.247,0.705-0.497,1.414-0.75,2.131 c1.655,3.093,0.664,7.623-0.05,14.973c0.622,1.322,1.229,2.602,1.826,3.849c0.652,0.524,1.068,0.904,1.217,1.109 c4.045-6.73,8.311-8.382,9.904-4.966c2.198-1.835,4.313-3.41,6.351-4.746C1487.45,922.759,1481.57,918.402,1475.991,913.201z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1476.884,936.72c0.093-0.162,0.186-0.321,0.279-0.478c-0.128-0.028-0.337-0.111-0.629-0.251 C1476.651,936.236,1476.768,936.478,1476.884,936.72z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1454.007,954.156c-3.075-4.33-5.821-8.2-8.219-11.671c-4.322,4.859-8.547,9.944-12.627,15.239 c1.323,1.025,2.813,1.934,4.522,2.69C1443.453,958.228,1448.89,956.143,1454.007,954.156z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1480.375,978.746c-0.185,0.072-0.371,0.144-0.555,0.216c1.411,4.665,3.125,9.667,5.198,15.035 c9.034,2.771,17.423,4.023,24.874,4.192c1.332-7.882,1.793-15.835,1.271-23.651c-2.586,0.144-5.338,0.367-8.267,0.678 C1496.295,975.917,1488.806,977.064,1480.375,978.746z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1458.646,987.009c-13.433,5.017-15.068,5.573,1.705,0.995 C1459.788,987.668,1459.219,987.337,1458.646,987.009z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1451.091,985.788c-6.054,0.105-12.698-0.45-17.331,1.279c0.342,1.154,0.692,2.315,1.049,3.484 C1440.489,988.802,1445.914,987.217,1451.091,985.788z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1468.752,984.359c0.053,1.087,0.121,2.195,0.198,3.315c3.916,1.883,7.755,3.48,11.496,4.812 c-2.425-3.672-4.769-7.17-7.027-10.501c-1.424,0.694-2.946,1.243-4.525,1.686 C1468.849,983.899,1468.806,984.125,1468.752,984.359z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1480.375,978.746c5.364-2.086,11.269-4.422,17.627-7c-2.509-2.098-5.713-6.305-9.952-13.588 c-2.035,0.706-3.967,1.298-5.788,1.749c0.976,4.547,0.829,9.765-0.018,12.276c-0.698,2.057-1.684,3.779-2.885,5.235 c0.14,0.477,0.285,0.96,0.431,1.443C1479.987,978.822,1480.179,978.785,1480.375,978.746z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1448.161,883.024c0.369,1.871,0.746,3.77,1.131,5.694c1.625,0.248,3.234,0.473,4.826,0.675 c0.647-0.312,1.287-0.63,1.927-0.947c-1.257-2.067-2.484-4.199-3.67-6.412C1450.924,882.341,1449.521,882.672,1448.161,883.024z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1438.983,912.67c-1.11-0.531-2.221-1.048-3.331-1.549c-0.436,0.069-0.873,0.152-1.309,0.203 c-6.452,0.753-11.273,0.131-15.729,0.393c1.586,8.118,1.828,15.34,1.535,21.281c-0.377,0.12-0.761,0.244-1.133,0.36 c0.633,1.913,1.249,3.896,1.856,5.951c0.839,1.474,1.62,2.991,2.396,4.514c2.771-3.838,6.869-9.461,12.82-17.123 C1432.893,919.777,1433.63,915.743,1438.983,912.67z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1411.339,891.637c-1.722,1.194-3.656,2.732-5.782,4.565c3.141,0.54,6.282,1.199,9.218,1.736 c-0.643-1.766-1.354-3.558-2.141-5.374C1412.208,892.26,1411.77,891.946,1411.339,891.637z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1372.61,900.531c10.39-5.935,20.127-13.03,27.822-16.727c-3.863-2.784-7.892-5.697-12.106-8.753 C1382.923,881.586,1376.841,890.961,1372.61,900.531z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1420.093,898.747c0.475,0.051,0.941,0.094,1.392,0.125c-0.306-0.217-0.622-0.442-0.931-0.662 C1420.397,898.387,1420.246,898.567,1420.093,898.747z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1412.572,912.864c-0.844,0.299-1.696,0.67-2.564,1.127c0.577,0.814,1.135,1.664,1.674,2.55 C1411.928,915.295,1412.225,914.069,1412.572,912.864z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1440.364,911.946c-0.229-0.567-0.453-1.127-0.671-1.68c-0.505,0.134-1.009,0.251-1.514,0.367 c0.679,0.474,1.35,0.942,2.009,1.401C1440.247,912.004,1440.304,911.975,1440.364,911.946z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1403.92,876.513c-0.287-0.437-0.582-0.875-0.878-1.313c-1.322-0.43-2.694-0.919-4.123-1.474 c-0.509,0.057-1.025,0.115-1.551,0.171C1399.572,874.811,1401.757,875.685,1403.92,876.513z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M987.582,925.784c-4.33,1.228-8.532,2.292-12.613,3.203c-1.894,1.641-3.983,3.419-6.294,5.164 c5.382,1.809,10.392,3.713,15.046,5.7C985.095,934.849,986.385,930.135,987.582,925.784z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1005.621,919.984c-4.245,1.522-8.371,2.886-12.405,4.129c39.149,8.673,8.641,4.451,52.877,9.482 c0.635-0.641,1.286-1.292,1.936-1.941c-3.386-2.28-5.949-5.103-7.807-8.389c-4.002-0.665-8.146-1.406-12.439-2.231 c0.803-0.281,1.569-0.547,2.348-0.818c-0.163,0.002-0.314-0.004-0.478-0.001c0.833-0.237,1.659-0.468,2.482-0.696 c1.975-0.686,3.854-1.333,5.668-1.953c-1.585-5.207-1.957-11.212-1.474-17.776c-4.805,5.85-9.599,13.528-14.188,23.461 c2.038-4.892-0.441-17.033-4.117-29.271c-1.242,0.524-2.509,1.03-3.802,1.518c1.042,3.123,2.18,6.487,3.424,10.122 c-4.669-2.573-8.927-4.906-12.853-7.032c-0.565,0.159-1.134,0.314-1.706,0.465c-2.487,3.361-5.703,8.492-8.499,14.344 c-0.136,0.818-0.278,1.663-0.427,2.543C998.361,918.98,1002.401,920.645,1005.621,919.984z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1062.893,909.888c-0.93-1.842-1.873-3.732-2.829-5.673c-0.469,0.335-0.937,0.634-1.404,0.91 c0.196,1.808,0.429,3.687,0.697,5.635C1060.612,910.428,1061.795,910.134,1062.893,909.888z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M962.782,964.956c1.34-8.85,2.088-18.225,2.077-28.115c-2.815,1.838-5.922,3.529-9.356,4.85 c-1.298,5.984-2.999,12.387-5.235,19.188c0.206,0.199,0.412,0.396,0.619,0.598C954.582,962.622,958.541,963.783,962.782,964.956z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M958.459,969.516c-2.53-2.903-5.062-5.581-7.572-8.039c-0.246-0.076-0.495-0.153-0.738-0.229 c-0.338,1.021-0.693,2.054-1.056,3.093c1.986,1.648,3.765,3.422,4.811,5.089C955.421,969.468,956.939,969.498,958.459,969.516z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1013.274,957.023c2.662,2.162,5.061,4.371,7.205,6.619c1.268-2.146,2.915-4.513,4.874-7.063 C1020.844,957.042,1016.828,957.179,1013.274,957.023z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M948.545,848.273c-2.34,4.552-6.345,8.934-9.517,12.908c2.188-0.005,4.395,0.008,6.62,0.04 c1.433-4.65,2.899-9.362,4.375-14.094c0.021-0.439,0.042-0.871,0.062-1.299c-0.209,0.156-0.42,0.306-0.633,0.449 C949.189,846.946,948.886,847.611,948.545,848.273z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M821.2,963.301c-0.325,0.909-0.63,1.815-0.924,2.719c0.728-0.556,1.487-1.148,2.272-1.771 C822.101,963.935,821.651,963.618,821.2,963.301z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M831.943,956.3c-1.662-1.412-3.406-2.897-5.252-4.472c-0.581,0.951-1.227,1.918-1.941,2.901 c-1.192,2.505-2.267,5.09-3.22,7.677c0.883,0.181,1.765,0.363,2.64,0.544C826.526,961.032,829.119,958.823,831.943,956.3z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M835.398,978.659c4.242,2.251,8.195,4.198,11.856,5.741c0.522-0.607,1.053-1.224,1.591-1.851 c-7.571-5.22-15.53-10.746-23.896-16.614c-1.686,1.224-3.598,2.382-5.703,3.471c-0.017,0.062-0.035,0.123-0.053,0.185 C824.988,972.925,830.393,976.003,835.398,978.659z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M841.496,966.594c-0.802-1.288-1.575-2.546-2.348-3.805c-3.213,0.38-6.189,0.864-8.936,1.416 C834.051,965.008,837.811,965.804,841.496,966.594z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M829.381,946.423c-0.169,0.443-0.348,0.888-0.546,1.338c0.58,0.239,1.15,0.475,1.739,0.717 C830.173,947.789,829.774,947.102,829.381,946.423z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1123.041,933.897c-0.009-0.036-0.017-0.072-0.026-0.109c-0.013-0.004-0.026-0.008-0.039-0.013 C1122.997,933.816,1123.019,933.856,1123.041,933.897z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1229.499,992.97c0.456-0.683,0.907-1.358,1.354-2.028c4.454-6.676,8.446-12.722,11.923-18.207 c-0.058-0.338-0.114-0.684-0.168-1.036c-3.254-0.013-6.312,0.018-9.172,0.084C1232.657,977.783,1231.361,984.809,1229.499,992.97 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1249.593,950.488c-8.635-9.212-16.572-17.655-23.918-25.438c-16.035,5.083-30.923,5.403-43.205-2.313 c-15.75,12.381-25.293,27.575-17.175,43.724c32.67-14.075,71.142-48.988,68.966-3.634c1.663-0.785,3.385-1.617,5.165-2.497 c-4.053-0.428-4.216-4.876,2.943-15.326c-0.469,4.772-0.681,9.625-0.643,14.176c3.943-1.988,8.154-4.208,12.624-6.681 c0.618-1.309,1.174-2.57,1.666-3.785c0.338-0.835,0.646-1.649,0.923-2.441c-0.202-0.239-0.404-0.477-0.603-0.71 C1254.545,947.511,1252.309,949.17,1249.593,950.488z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1117.032,903.174c0.681,0.078,1.365,0.157,2.04,0.234c0.032,0.004,0.065,0.007,0.097,0.011 c0.04-2.984,0.248-5.843,0.634-8.55c-0.304,0.024-0.609,0.049-0.916,0.075c-1.667,2.71-3.28,5.338-4.839,7.887 C1115.05,902.947,1116.042,903.06,1117.032,903.174z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M879.775,967.772c1.753,0.663,3.534,1.335,5.334,2.011c2.067,0.778,4.163,1.564,6.294,2.36 c3.92,1.465,7.952,2.962,12.09,4.491c0.14-0.01,0.284-0.017,0.425-0.026c-4.666-2.715-8.973-5.16-12.934-7.348 c-1.742-0.962-3.419-1.876-5.032-2.742c-1.617-0.868-3.171-1.69-4.663-2.465c-1.021-0.161-2.03-0.311-3.031-0.452 C878.716,965.012,879.224,966.403,879.775,967.772z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M830.574,948.478c-0.589-0.241-1.159-0.478-1.739-0.717c-0.582,1.323-1.297,2.679-2.145,4.067 c1.846,1.575,3.591,3.06,5.252,4.472c0.69-0.617,1.397-1.256,2.115-1.912C832.858,952.376,831.7,950.409,830.574,948.478z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1262.593,949.598c-0.616,0.441-1.231,0.874-1.845,1.295c2.682,3.336,5.613,7.148,8.803,11.493 c1.652-0.306,3.465-0.676,5.447-1.121c4.931-3.709,9.701-7.311,14.309-10.806c-3.12-2.808-6.412-5.707-9.891-8.695 c-0.935-0.803-1.881-1.612-2.845-2.429c-1.668,1.05-3.31,2.072-4.927,3.064c-1.234,1.088-2.493,2.149-3.767,3.177 C1266.132,946.985,1264.361,948.331,1262.593,949.598z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1256.473,963.776C1255.096,963.527,1254.966,963.721,1256.473,963.776L1256.473,963.776z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1242.608,971.7c0.053,0.352,0.109,0.698,0.168,1.036c0.759,4.393,1.922,7.562,3.476,8.672 c0.382,0.273,0.787,0.42,1.215,0.432c4.44-3.299,8.76-6.518,12.981-9.671C1253.947,971.863,1248.004,971.721,1242.608,971.7z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1286.428,905.888c0.933,1.17,1.857,2.482,2.769,3.954C1288.607,908.425,1287.695,907.1,1286.428,905.888 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1260.179,919.229c0.742,2.733,1.235,5.359,1.46,7.854c4.821,3.832,9.333,7.53,13.568,11.1 c0.455-0.137,0.914-0.282,1.376-0.434c1.511-1.523,2.948-3.074,4.279-4.639c-0.965-1.933-1.757-3.693-2.382-5.293 C1272.104,924.763,1266.007,921.904,1260.179,919.229z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1345.842,1004.085c-0.265-1.146-0.651-2.342-1.15-3.579c-2.042-1.484-4.164-3.161-6.365-5.044 c-0.411,0.345-0.825,0.687-1.243,1.026c0.022,0.021,0.045,0.041,0.067,0.062 C1340.026,999.181,1342.899,1001.688,1345.842,1004.085z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1341.851,994.964c1.171,1.903,2.122,3.762,2.841,5.542c1.629,1.183,3.205,2.242,4.73,3.185 c-0.237-2.117-0.413-4.155-0.53-6.106C1346.552,996.611,1344.203,995.741,1341.851,994.964z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1319.403,979.306c-4.192,3.48-8.401,6.811-12.604,9.935c2.837,0.069,5.718,0.218,8.632,0.465 c3.484-1.126,6.928-2.45,10.306-4.098C1323.68,983.574,1321.578,981.476,1319.403,979.306z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1365.22,1009.779c1.693,0.156,3.253,0.092,4.677-0.172c-2.554-1.924-5.143-3.677-7.758-5.275 C1363.159,1006.07,1364.188,1007.888,1365.22,1009.779z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1242.369,945.004c-7.16,10.45-6.996,14.899-2.943,15.326c0.755-0.374,1.524-0.759,2.301-1.15 C1241.689,954.628,1241.9,949.775,1242.369,945.004z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1174.855,878.319c2.468,0.476,4.964,0.969,7.484,1.479c-1.868-1.907-3.692-3.76-5.477-5.565 c-1.018-0.756-2.033-1.548-3.044-2.386c-0.223,2.001-0.49,3.878-0.792,5.638C1173.628,877.754,1174.24,878.034,1174.855,878.319z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1160.362,857.835c-0.632-0.806-1.261-1.63-1.887-2.475c0.023,0.233,0.051,0.476,0.078,0.717 C1159.152,856.658,1159.755,857.244,1160.362,857.835z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1193.192,890.961c-0.649,0.177-1.296,0.354-1.917,0.528c1.161,0.374,2.338,0.759,3.551,1.164 C1194.277,892.085,1193.733,891.521,1193.192,890.961z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1293.805,892.26c-1.311-1.003-2.609-2.128-3.891-3.383c-0.846,0.609-1.694,1.216-2.543,1.822 C1289.488,891.23,1291.633,891.751,1293.805,892.26z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1253.26,902.616c0.667,1.223,1.293,2.433,1.884,3.632c6.345-5.695,13.731-9.83,21.075-7.795 c3.739-2.524,7.462-5.12,11.153-7.754c-17.609-4.422-33.286-9.579-47.111-14.818c-1.015,0.682-2.044,1.334-3.088,1.952 c-0.246,0.265-0.485,0.537-0.726,0.807c4.202,4.948,7.915,9.841,11.115,14.617 C1261.226,890.636,1266.954,893.135,1253.26,902.616z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1323.225,897.402c-0.48,0.148-0.961,0.289-1.444,0.418c0.646,0.106,1.292,0.212,1.942,0.315 C1323.564,897.89,1323.399,897.646,1323.225,897.402z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1299.744,858.52c0.205-0.49,0.409-0.987,0.608-1.493c-0.2-0.334-0.4-0.667-0.591-0.993 C1299.77,856.839,1299.766,857.666,1299.744,858.52z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1296.152,838.538c-1.16,0.109-2.316,0.229-3.469,0.357c0.25,2.865,1.902,7.968,6.081,15.406 c0.209,0.245,0.421,0.488,0.61,0.752c-0.047,0.023-0.094,0.042-0.141,0.065c0.174,0.303,0.347,0.605,0.529,0.915 C1299.667,847.435,1297.903,841.567,1296.152,838.538z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1334.204,899.422c-0.017,0.084-0.028,0.159-0.047,0.245c0.107,0.014,0.212,0.03,0.319,0.044 C1334.383,899.613,1334.297,899.52,1334.204,899.422z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1161.422,844.783c4.357,5.065,8.731,9.33,13.087,12.88c-0.023-3.411-0.171-7.063-0.472-10.974 C1168.168,844.421,1163.99,843.566,1161.422,844.783z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1225.675,925.049c-2.79-2.956-5.494-5.815-8.119-8.587c-1.309,2.474-2.831,4.581-4.693,5.91 c-7.276,5.207-14.302-0.676-20.994-6.266c-3.3,2.104-6.458,4.318-9.399,6.63C1194.752,930.452,1209.641,930.133,1225.675,925.049 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M972.59,873.639c-1.912,0.704-2.849,2.285-3.017,4.452c0.063,0.002,0.126,0.004,0.189,0.006 c0.21-0.02,0.413-0.039,0.62-0.059c0.239-0.233,0.477-0.466,0.716-0.699C971.643,876.083,972.139,874.845,972.59,873.639z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M975.331,873.236c0.293-0.283,0.585-0.565,0.879-0.848c-1.056-0.171-2.045-0.358-2.967-0.558 c-0.207,0.593-0.425,1.197-0.654,1.808C973.345,873.36,974.259,873.224,975.331,873.236z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M977.614,857.953c-0.45,0.615-0.911,2.212-1.534,4.471c1.315,0.075,2.632,0.153,3.951,0.231 c-0.611-2.41-1.081-3.866-1.49-4.536C978.237,858.069,977.926,858.012,977.614,857.953z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M988.336,923.044c-1.33-0.288-2.725-0.589-4.191-0.902c-2.451,0.89-5.435,3.602-9.176,6.844 c4.081-0.912,8.283-1.976,12.613-3.203C987.838,924.853,988.089,923.941,988.336,923.044z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M994.161,915.939c-0.414,2.449-0.877,5.134-1.391,8.075c0.149,0.033,0.299,0.066,0.446,0.099 c4.033-1.243,8.159-2.607,12.405-4.129C1002.401,920.645,998.361,918.98,994.161,915.939z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1076.771,753.628c1.962-0.202,3.909-0.391,5.851-0.574c0.115-0.374,0.226-0.747,0.33-1.119 c-3.816-2.959-7.81-5.862-11.984-8.698c-0.766,0.337-1.535,0.668-2.312,0.983c-0.109,2.453-0.226,4.86-0.351,7.225 C1071.348,752.139,1074.173,752.867,1076.771,753.628z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1000.683,849.19c-0.616,0.579-1.232,1.159-1.85,1.739c-4.256,4.002-8.539,8.034-12.816,12.091 c5.316,0.33,10.648,0.673,15.969,1c1.24-1.86,2.481-3.771,3.72-5.734c-0.466,2.08-0.888,4.036-1.271,5.884 c2.182,0.132,4.361,0.26,6.536,0.384C1007.729,859.703,1004.31,854.559,1000.683,849.19z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M971.098,877.34c-0.239,0.233-0.478,0.466-0.716,0.699c11.618-1.1,19.062-1.951,23.074-2.056 c0.627-0.817,1.256-1.65,1.887-2.5c-8.122,0.136-14.345-0.317-19.133-1.093c-0.293,0.282-0.586,0.565-0.879,0.848 C973.916,874.602,972.504,875.97,971.098,877.34z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1014.222,895.497c1.293-0.487,2.56-0.994,3.802-1.518c0.976-0.412,1.938-0.834,2.881-1.268 c-3.432,0.95-7.972,1.896-13.734,2.822c0.323-1.579-1.481,0-4.084,3.519c0.572-0.152,1.141-0.307,1.706-0.465 C1008.065,897.669,1011.209,896.633,1014.222,895.497z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1002.707,873.219c-0.459,2.679-0.802,5.008-1.051,7.031c10.479,1.16,18.485,2.655,23.115,4.345 c-2.76-3.776-5.646-7.941-8.689-12.432C1011.208,872.657,1006.76,873.003,1002.707,873.219z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1094.672,868.184c-1.645-0.128-3.377-0.425-5.193-0.874c-0.339,0.467-0.66,0.896-0.963,1.287 c0.077,0.306,0.147,0.613,0.221,0.92c2.018-0.308,4.145-0.624,6.385-0.941C1094.972,868.447,1094.822,868.315,1094.672,868.184z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1431.002,871.592c-0.297-3.745-1.313-3.344-8.741-1.712c-0.023,0.365-0.058,0.717-0.109,1.053 C1425.36,871.38,1428.333,871.594,1431.002,871.592z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1438.765,879.98c-2.315,1.497-4.54,2.878-6.664,4.135c0.066,0.409,0.136,0.828,0.212,1.257 c5.846,1.406,11.51,2.51,16.979,3.345c-0.385-1.924-0.761-3.822-1.131-5.694c-0.1-0.507-0.199-1.012-0.299-1.515 C1443.957,882.904,1440.858,882.33,1438.765,879.98z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1435.799,871.319c-1.456,0.179-3.061,0.272-4.796,0.273c0.152,1.918,0.118,4.927,0.66,9.412 c1.794-1.403,3.543-2.805,5.254-4.207C1436.344,875.274,1435.968,873.441,1435.799,871.319z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1437.183,856.249c0.743-3.491,1.77-7.298,3.108-11.409c-3.507-14.477-7.065-23.306-12.046-23.366 c-4.161-0.05-9.316,6.024-16.264,20.047c0.513,0.918,1.001,1.812,1.474,2.691c3.907,1.576,7.403,3.105,10.511,4.581 C1429.588,851.464,1433.943,853.96,1437.183,856.249z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1446.889,916.676c3.683,2.539,6.992,4.796,9.936,6.783c-0.11-0.461-0.221-0.922-0.33-1.382 C1453.452,920.28,1450.217,918.45,1446.889,916.676z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1450.242,908.619c1.148,0.149,2.242,0.297,3.291,0.442c-0.087-0.398-0.175-0.796-0.261-1.193 C1452.216,908.12,1451.205,908.369,1450.242,908.619z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1384.553,872.311c-0.944,0.942-1.924,1.904-2.946,2.89c2.206-0.134,4.314-0.28,6.326-0.436 C1386.818,873.955,1385.694,873.139,1384.553,872.311z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1450.242,908.619c-1.268-0.165-2.602-0.333-3.997-0.505c-2.185,0.83-4.37,1.572-6.551,2.152 c0.218,0.553,0.441,1.113,0.671,1.68C1442.859,910.747,1446.137,909.681,1450.242,908.619z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1397.369,873.897c0.525-0.056,1.042-0.114,1.551-0.171c-3.375-1.312-7.041-2.968-10.934-4.917 c-0.216,0.226-0.427,0.449-0.648,0.678C1390.725,871.058,1394.07,872.528,1397.369,873.897z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1155.287,852.926c-0.447-0.429-0.893-0.857-1.337-1.282c5.086,20.012-0.429,26.742-10.807,4.377 c-0.952,1.51-1.896,3.009-2.824,4.485c1.463,0.593,2.95,1.186,4.473,1.777c-2.059,3.394-4.206,6.228-6.419,8.571 c8.261-1.841,19.573-0.079,34.653,6.632c0.302-1.761,0.57-3.638,0.792-5.638c-4.587-3.799-9.092-8.45-13.456-14.013 c-0.606-0.591-1.209-1.176-1.809-1.758C1157.454,855.012,1156.366,853.963,1155.287,852.926z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1095.653,852.351c5.12,3.216,10.609,6.669,16.501,10.399c0.735-1.18,1.447-2.338,2.128-3.469 c-2.372-4.974-4.718-9.475-7.013-13.535c-4.05,1.278-7.855,2.463-11.411,3.618 C1095.638,850.408,1095.562,851.406,1095.653,852.351z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1114.078,843.573c-1.808,0.585-3.573,1.149-5.294,1.694c2.096,1.222,4.309,2.458,6.644,3.704 C1115.027,846.914,1114.575,845.121,1114.078,843.573z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1117.417,866.088c-1.005-2.272-2.008-4.434-3.007-6.536c-0.714,1.063-1.44,2.152-2.171,3.252 C1113.935,863.878,1115.657,864.969,1117.417,866.088z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1135.398,836.12c-2.088,0.796-4.133,1.552-6.138,2.277c-2.897,3.913-5.975,8.217-9.246,12.941 c2.859,1.441,5.887,2.89,9.08,4.343c3.378-3.182,6.694-6.336,9.939-9.452C1137.861,843.187,1136.648,839.823,1135.398,836.12z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1131.893,834.877c0.167-0.788,0.392-1.828,0.62-3.076c-1.876-1.68-3.766-3.36-5.68-5.049 c0.023,4.012-0.944,8.459-2.862,13.515c1.73-0.599,3.492-1.22,5.29-1.87C1130.153,837.191,1131.034,836.01,1131.893,834.877z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1119.074,850.87c2.031-3.826,3.658-7.339,4.896-10.603c-2.048,0.709-4.049,1.385-6.003,2.032 c-0.19,2.518-0.392,5.079-0.604,7.679C1117.933,850.276,1118.489,850.572,1119.074,850.87z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1185.204,833.742c-1.542,1.952-3.124,3.922-4.767,5.92c0.014-3.013,0.105-5.978,0.256-8.905 c-1.614-1.048-3.25-2.088-4.906-3.119c-1.413,0.413-2.753,0.75-4.003,0.995c0.27,1.602,0.522,3.176,0.748,4.713 c0.699,4.752,1.186,9.186,1.505,13.342c0.301,3.911,0.449,7.563,0.472,10.974c13.007,10.599,25.853,14.788,37.573,14.536 c-2.756-6.674-4.727-14.714-5.154-22.285c-4.398-3.613-9.034-7.187-13.893-10.698 C1190.484,837.373,1187.877,835.546,1185.204,833.742z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1176.862,874.233c1.785,1.805,3.609,3.658,5.477,5.565c-2.519-0.51-5.016-1.003-7.484-1.479 c1.616,0.747,3.262,1.534,4.963,2.392c-1.47,2.398-3.058,4.409-4.717,6.092c4.736,1.188,10.107,2.729,16.174,4.686 c0.621-0.175,1.269-0.352,1.917-0.528c0.541,0.56,1.085,1.124,1.633,1.693c3.31,1.107,6.821,2.336,10.525,3.685 c1.29-3.712,2.852-7.249,4.674-10.592C1199.13,885.856,1187.806,882.362,1176.862,874.233z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1247.561,893.258c-3.2-4.776-6.913-9.67-11.115-14.617c-4.594,5.149-8.206,11.197-11.343,17.903 c-0.521,1.114-1.022,2.432-1.522,3.857C1232.558,896.971,1240.98,894.52,1247.561,893.258z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1225.675,925.049c7.346,7.783,15.283,16.227,23.918,25.438c2.716-1.318,4.951-2.977,6.743-4.925 c-2.311-2.706-4.391-4.995-6.25-6.922c-15.344-4.888-16.959-17.589,0,0c2.79,0.889,6.034,1.518,9.703,1.66 c1.695-3.796,2.298-8.249,1.85-13.217c-0.225-2.495-0.719-5.122-1.46-7.854c-4.216-1.935-8.294-3.775-12.232-5.52 c-10.453,12.197-15.144,23.086-5.804-2.547c-6.919-3.009-13.397-5.723-19.447-8.157c-1.45,4.402-3.007,9.427-5.14,13.458 C1220.181,919.234,1222.885,922.094,1225.675,925.049z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1255.144,906.248c-0.591-1.199-1.217-2.409-1.884-3.632c-2.673,1.851-6.081,3.966-10.32,6.363 c-0.277,0.759-0.541,1.48-0.797,2.183c1.902,0.827,3.834,1.674,5.804,2.547C1250.121,911.172,1252.545,908.58,1255.144,906.248z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1448.295,733.298c-0.014,0.034-0.025,0.067-0.039,0.101c0.895,0.797,1.781,1.659,2.654,2.588 c0.89-1.78,1.718-3.599,2.471-5.458c-1.505,0.104-2.888,0.169-4.154,0.196C1448.958,731.574,1448.648,732.432,1448.295,733.298z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1447.328,812.15c-0.413-3.738,0.652-8.188,3.436-13.179c-1.003-0.456-1.98-0.91-2.925-1.361 c-2.029-0.969-3.922-1.928-5.693-2.878c-4.105-2.203-7.537-4.356-10.373-6.466c1.328,11.725,3.557,20.318,6.354,26.251 c0.546,1.158,1.113,2.22,1.699,3.179C1442.491,815.844,1444.988,813.993,1447.328,812.15z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1431.913,725.637c1.683,0.2,3.367,0.565,5.045,1.106c-1.004-3.261,1.5-8.453,4.138-15.341 c-0.271-0.373-0.554-0.747-0.856-1.123c-2.855,2.503-5.412,5.361-7.753,8.412c-0.013,0.149-0.028,0.303-0.041,0.452 C1432.254,721.348,1432.077,723.512,1431.913,725.637z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1479.947,772.538c0.307-3.552,0.44-7.178,0.368-10.847c-0.556-0.125-1.106-0.253-1.665-0.377 c0.552-0.1,1.099-0.197,1.648-0.296c-0.032-1.209-0.083-2.422-0.16-3.638c-1.772-1.797-3.568-3.398-5.374-4.757 c-7.809-5.88-9.805-4.739-13.086-0.076c1.156,2.486,2.261,5.165,3.307,8.044C1470.557,764.973,1475.529,768.946,1479.947,772.538 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1437.949,739.72c1.505,1.144,2.977,2.266,4.426,3.372c2.696-3.301,4.589-6.553,5.88-9.693 c-0.066-0.059-0.132-0.116-0.198-0.174c-1.094-0.961-2.202-1.827-3.322-2.6c-0.478-0.037-0.93-0.084-1.358-0.139 c-0.167,0.404-0.343,0.808-0.531,1.21C1441.583,734.409,1439.871,737.077,1437.949,739.72z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1431.664,729.002c0.079-1.11,0.162-2.232,0.25-3.365c-1.387-0.165-2.773-0.216-4.151-0.164 c-0.946,1.478-1.861,2.971-2.75,4.465c2.14,1.61,4.231,3.186,6.275,4.731C1431.4,732.815,1431.527,730.923,1431.664,729.002z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1430.495,753.89c0.067-0.047,0.134-0.095,0.2-0.142c-2.828-4.704-5.772-9.543-8.847-14.494 c2.172,7.061,4.058,14.227,5.895,21.399c0.918-0.469,1.807-0.976,2.682-1.502c0.002-0.353,0.007-0.715,0.01-1.071 C1430.447,756.708,1430.467,755.311,1430.495,753.89z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1431.048,780.355c-1.269,0.588-2.226,1.129-2.564,1.588c-0.429,0.575-0.821,1.467-1.187,2.58 c1.29,1.233,2.779,2.481,4.477,3.743C1431.49,785.77,1431.245,783.141,1431.048,780.355z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1397.672,759.515c-0.794,1.623-2.308,1.611-4.478-0.588c0.288,4.16-0.883,8.744-2.77,13.435 c0.02,0.002,0.041,0.005,0.061,0.007c4.372-1.397,8.435-2.822,12.207-4.269c0.419-0.161,0.813-0.323,1.225-0.485 c2.694-1.054,5.234-2.12,7.634-3.194c-0.025-0.263-0.057-0.525-0.085-0.788c-1.944-2.221-3.813-4.412-5.602-6.569 C1403.402,758.704,1400.715,759.607,1397.672,759.515z"
                      }
                    }),
                    _vm._v(" "),
                    _c("polygon", {
                      attrs: {
                        fill: "#C7B299",
                        points:
                          "1390.423,772.366 1390.424,772.363 1390.423,772.363 "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M977.639,816.767c0.747,0.985,1.487,1.967,2.219,2.946c1.458-0.939,2.84-1.824,4.147-2.655 C981.783,817.682,979.586,817.612,977.639,816.767z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1149.242,748.036c-2.88,0.256-5.755,0.494-8.63,0.719c0.298,6.574,2.837,8.49,9.899,10.742 c0.582-0.289,1.18-0.58,1.772-0.87c-0.335-3.222-0.318-6.446,0.018-9.652C1151.267,748.669,1150.248,748.356,1149.242,748.036z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1042.741,868.569c-10.078,1.639-18.912,2.807-26.658,3.593c3.043,4.491,5.929,8.656,8.689,12.432 c4.137,1.509,5.579,3.173,3.679,4.889c2.763,3.55,5.406,6.646,7.964,9.21C1037.216,889.504,1039.631,879.259,1042.741,868.569z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1084.196,752.909c-0.525,0.048-1.049,0.096-1.575,0.146c-1.941,0.183-3.889,0.371-5.851,0.574 c8.177,2.397,14.144,5.128,17.918,8.172c0.005-0.037,0.01-0.074,0.015-0.111C1091.363,758.723,1087.862,755.792,1084.196,752.909 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M991.164,812.562c2.735-1.691,4.956-3.031,6.722-4.073c-1.528,0.763-3.335,1.625-5.369,2.534 C992.08,811.566,991.63,812.082,991.164,812.562z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1120.987,773.034c-0.007,1.033-0.016,2.076-0.027,3.129c0.374-0.248,0.75-0.496,1.13-0.744 C1121.688,774.661,1121.319,773.868,1120.987,773.034z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M895.382,828.535c0.099,0.26,0.199,0.521,0.298,0.781c0.051-0.273,0.104-0.546,0.153-0.82 C895.681,828.506,895.533,828.524,895.382,828.535z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1060.064,904.215c-0.609-1.235-1.222-2.49-1.841-3.765c0.117,1.506,0.263,3.064,0.438,4.675 C1059.127,904.849,1059.595,904.55,1060.064,904.215z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1025.362,823.209c9.769,7.277,18.208,13.84,25.49,19.786c0.89-2.704,1.779-5.406,2.652-8.096 c-7.062-8.463-15.331-15.66-24.322-20.625c-12.15,4.513-25.879,9.198-41.169,14.042c2.084,2.982,4.041,6.598,5.421,10.28 c0.8,1.152,1.59,2.296,2.371,3.432c1.668,2.427,3.292,4.815,4.878,7.162c3.627,5.368,7.046,10.512,10.288,15.364 c10.675,0.605,21.236,1.079,31.456,1.188C1036.98,853.018,1031.274,838.896,1025.362,823.209z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1055.876,803.533c-3.437,1.517-7.076,3.057-10.919,4.619c0.613,0.404,1.227,0.807,1.831,1.224 c2.423-0.875,5.814-1.607,10.155-2.301C1056.564,805.882,1056.208,804.701,1055.876,803.533z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1059.639,814.729c0.776-2.834,1.491-5.626,2.126-8.365c-1.717,0.235-3.327,0.471-4.821,0.71 C1057.743,809.586,1058.642,812.144,1059.639,814.729z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M817.98,831.55c-0.904,0.373-1.806,0.746-2.687,1.115c0,0.009,0,0.019,0,0.028 c0.001,1.073,0.03,2.125,0.057,3.18c0.222,0.257,0.437,0.514,0.663,0.771C816.535,835.483,817.189,833.798,817.98,831.55z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M832.052,783.043c1.482,0.228,2.99,0.449,4.521,0.666c0.278-0.306,0.561-0.619,0.837-0.919 c0.753-2.192,0.712-4.221,0.098-6.105c-0.796-0.075-1.625-0.142-2.477-0.202c-0.761,1.386-1.547,2.79-2.357,4.213 C832.464,781.486,832.257,782.272,832.052,783.043z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M825.526,781.982c0.318,0.055,0.641,0.108,0.961,0.163c0.088-0.605,0.17-1.21,0.245-1.815 C826.287,780.874,825.886,781.425,825.526,781.982z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M825.526,781.982c-2.895-0.498-5.683-1.017-8.372-1.552c1.6,2.816,3.556,5.921,5.934,9.341 C823.12,787.108,823.907,784.484,825.526,781.982z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M816.246,751.686c-0.439-0.096-0.884-0.192-1.315-0.289c-0.005,0.1-0.009,0.2-0.014,0.3 c0.26,0.046,0.53,0.097,0.792,0.143C815.885,751.789,816.061,751.738,816.246,751.686z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M837.409,782.79c-0.075,0.218-0.159,0.438-0.25,0.66c1.698-1.188,3.466-2.394,5.315-3.622 c-0.431-0.366-0.862-0.732-1.276-1.091C839.963,780.031,838.702,781.381,837.409,782.79z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M852.088,768.316c-3.074,2.605-6.211,5.599-9.519,9.002c1.029,0.166,1.992,0.349,2.904,0.545 c0.512-0.332,1.021-0.663,1.544-0.997C847.878,774.316,849.683,771.378,852.088,768.316z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M836.307,774.152c-0.015,0.028-0.029,0.055-0.044,0.083c0.07,0.067,0.144,0.137,0.215,0.204 C836.421,774.343,836.367,774.247,836.307,774.152z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M852.088,768.316c0.099-0.084,0.198-0.163,0.297-0.247c-0.017-0.023-0.034-0.047-0.051-0.07 C852.25,768.106,852.171,768.21,852.088,768.316z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M852.306,746.825c4.165-0.367,8.714-0.741,13.663-1.124c-3.47-4.18-7.766-8.62-12.994-13.339 c-0.791,3.565-1.833,7.343-3.172,11.363C850.647,744.747,851.482,745.78,852.306,746.825z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M871.521,756.729c-0.136,0.407-0.27,0.819-0.404,1.233c0.726-0.562,1.469-1.12,2.241-1.672 c-0.026-0.047-0.055-0.095-0.081-0.142C872.686,756.331,872.101,756.526,871.521,756.729z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M870.174,751.203c-3.105,2.299-6.236,4.892-9.164,7.601c0.472,0.703,0.943,1.408,1.408,2.118 c2.934-1.698,5.937-3.084,9.103-4.193c0.256-0.768,0.516-1.524,0.779-2.266C871.655,753.397,870.941,752.309,870.174,751.203z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1197.376,692.99c1.202-2.135,2.381-4.194,3.533-6.167c-1.731,0.963-3.448,1.975-5.145,3.038 C1196.415,691.007,1196.951,692.055,1197.376,692.99z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1198.397,695.649c0.869,0.171,1.743,0.35,2.625,0.542c-0.975-0.516-1.947-0.985-2.91-1.408 C1198.223,695.092,1198.318,695.381,1198.397,695.649z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1229.142,698.507c-0.295-0.178-0.589-0.356-0.883-0.534c0.082,0.562,0.166,1.136,0.25,1.717 C1228.718,699.291,1228.929,698.897,1229.142,698.507z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1233.816,822.31c-1.178-1.214-2.357-2.466-3.536-3.757c0.315,1.127,0.53,2.14,0.651,3.04 c0.972,0.279,1.956,0.555,2.949,0.828C1233.859,822.384,1233.837,822.347,1233.816,822.31z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1193.427,691.366c-0.603,0.397-1.202,0.801-1.798,1.21c0.923,0.221,1.871,0.489,2.839,0.807 C1194.135,692.775,1193.788,692.102,1193.427,691.366z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1263.008,682.979c-0.288-0.256-0.585-0.498-0.881-0.741c-2.411-1.971-5.111-3.5-8.044-4.621 c0.603,0.904,1.187,1.811,1.754,2.72c1.844,0.352,3.745,0.978,5.703,1.903C1262.026,682.47,1262.515,682.713,1263.008,682.979z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1271.841,830.683c0.718-2.591,1.312-5.228,1.78-7.898c-2.197-1.552-4.36-3.065-6.487-4.538 c-1.147,1.1-2.307,2.26-3.483,3.485c-0.12,1.395-0.31,2.796-0.559,4.198c1.655,1.361,3.372,2.737,5.145,4.127 C1269.428,830.268,1270.628,830.477,1271.841,830.683z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1285.983,831.683c-0.15,0.383-0.304,0.757-0.462,1.122c0.828,0.117,1.64,0.239,2.477,0.354 C1287.32,832.659,1286.655,832.175,1285.983,831.683z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1212.482,816.497c-0.491,0.627-0.974,1.235-1.448,1.823c0.436,3.75,0.999,7.168,1.688,10.178 c1.861-1.829,4.219-3.127,7.135-3.735c-0.347-0.873-0.708-1.723-1.089-2.544C1216.84,820.674,1214.733,818.765,1212.482,816.497z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1141.77,732.832c0.296-2.656,0.63-5.608,0.987-8.903c0.154-1.425,0.312-2.919,0.473-4.475 c-4.626,4.984-9.088,9.715-13.158,14.196c3.543,1.225,7.266,2.589,11.165,4.115 C1141.393,736.247,1141.573,734.605,1141.77,732.832z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1179.873,713.447c-0.378-0.455-0.755-0.911-1.132-1.367c-3.412,1.193-7.113,2.096-11.13,2.626 c-2.516,3.165-4.797,6.445-6.786,9.816c1.366,2.598,2.685,5.14,3.952,7.621C1167.214,726.067,1172.51,719.811,1179.873,713.447z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1186.581,708.036c-1.061-0.865-2.012-1.698-2.858-2.5c-2.721,0.176-5.5,0.326-8.319,0.462 c-0.298,0.297-0.59,0.599-0.884,0.899c1.392,1.729,2.8,3.46,4.221,5.183c1.977-0.691,3.857-1.48,5.646-2.35 C1185.104,709.166,1185.835,708.601,1186.581,708.036z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1120.987,773.034c0.332,0.834,0.701,1.627,1.103,2.385c0.599,1.13,1.275,2.176,2.02,3.148 c1.351,1.763,2.929,3.285,4.707,4.6c4.416,3.266,10.042,5.286,16.347,6.744c4.1,0.948,8.486,1.659,13.015,2.318 c1.359-0.269,2.711-0.536,4.092-0.817c-0.309,0.43-0.608,0.848-0.912,1.271c1.937,0.273,3.894,0.545,5.859,0.83 c2.485-13.101,4.518-24.664,6.277-34.61c-0.711-1.403-1.42-2.828-2.127-4.272c-0.735-0.643-1.417-1.289-2.046-1.94 c-6.032-0.815-11.707-2.15-17.023-3.718c-0.336,3.206-0.353,6.43-0.018,9.652c0.051,0.49,0.103,0.979,0.17,1.468 c-0.684-0.204-1.328-0.402-1.941-0.598c-7.062-2.252-9.6-4.168-9.899-10.742c-0.05-1.093-0.038-2.314,0.026-3.687 c-5.692-2.093-10.873-4.196-15.545-5.814c-1.514,1.75-2.945,3.458-4.278,5.125c-0.044,0.198-0.084,0.392-0.126,0.589 C1120.928,753.488,1121.055,762.778,1120.987,773.034z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1210.364,796.495c0.536-0.367,1.069-0.729,1.608-1.102c-0.188-0.271-0.376-0.542-0.563-0.814 C1211.068,795.213,1210.717,795.854,1210.364,796.495z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1173.891,756.67c-0.13,0.734-0.262,1.481-0.396,2.233c4.825,9.527,9.72,18.105,14.515,25.704 c-2.573-7.288-5.909-15.675-10.184-25.275C1176.407,758.453,1175.09,757.566,1173.891,756.67z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1202.14,737.817c-0.227,0.617-0.466,1.239-0.712,1.862c1.397,3.207,2.891,6.728,4.499,10.59 c1.25-1.948,2.53-3.859,3.845-5.724C1207.324,742.588,1204.767,740.322,1202.14,737.817z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1163.606,742.651c-0.505,0.189-1.01,0.38-1.517,0.566c0.473-0.393,0.938-0.785,1.406-1.177 c-0.261-1.582-0.285-3.181-0.081-4.794c-1.39-3.253-2.764-6.586-4.115-10.004c-2.702,5.041-4.75,10.257-5.97,15.56 c4.13,1.824,8.424,3.826,12.885,6.034C1164.895,746.805,1164.035,744.743,1163.606,742.651z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1229.829,750.584c3.137-0.002,5.972,0.12,8.521,0.356c-1.805-1.709-3.684-3.543-5.643-5.505 C1232.026,747.778,1231.053,749.469,1229.829,750.584z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1348.13,730.31c-0.43,1.028-0.855,2.04-1.274,3.03c0.818,0.383,1.66,0.773,2.554,1.177 c-0.87,0.174-1.714,0.361-2.56,0.547c1.335,1.812,2.672,3.664,4.009,5.558c4.498-0.006,8.562,0.147,12.222,0.446 c-1.669-1.429-3.332-2.768-4.971-4.016C1354.622,734.4,1351.243,732.158,1348.13,730.31z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1323.74,776.316c1.271,1.67,2.534,3.379,3.79,5.12c-1.109-1.711-2.187-3.361-3.226-4.894 C1324.116,776.467,1323.928,776.392,1323.74,776.316z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1303.594,767.948c-3.691-1.58-7.558-3.26-11.593-5.035c-1.821,1.35-3.571,2.597-5.287,3.693 c0.606,4.072,1.124,7.965,1.553,11.676c3.344,7.421,5.337,15.203,6.324,22.764c1.944-0.606,3.871-1.093,5.787-1.49 c1.137-2.085,2.381-4.268,3.739-6.556c0.611,1.812,1.132,3.708,1.572,5.666c5.231-0.687,10.447-0.874,15.813-1.107 c0.918-0.04,1.84-0.081,2.768-0.127c4.282-0.21,8.677-0.51,13.264-1.169c-1.926-2.561-3.845-5.38-5.719-8.226 C1320.108,781.658,1310.945,774.927,1303.594,767.948z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1375.903,780.978c3.789-2.543,7.733-5.486,11.855-8.906c-4.595-0.45-9.662-0.703-14.894-0.937 c0.049,1.509,0.108,3.083,0.179,4.717C1373.998,777.539,1374.951,779.247,1375.903,780.978z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1313.194,748.043c0.9,0.375,1.796,0.775,2.691,1.188c-0.087-0.836-0.173-1.694-0.258-2.571 C1314.8,747.118,1313.986,747.579,1313.194,748.043z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1365.449,782.569c-4.189-4.243-8.472-8.445-12.78-12.608c-3.374-0.311-6.65-0.712-9.744-1.251 c0.243,0.268,0.503,0.535,0.738,0.804c1.355,1.552,3.68,5.286,5.963,9.823c6.929,3.071,11.91,5.647,14.779,7.509 C1364.767,785.381,1365.115,783.955,1365.449,782.569z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1372.864,771.135c-0.301-9.328-0.198-16.244-0.055-20.627c-0.189-0.208-0.377-0.418-0.567-0.623 c-0.633,3.853-1.724,9.969-3.544,18.444c0.526,0.892,1.052,1.786,1.578,2.691 C1371.143,771.058,1372.005,771.096,1372.864,771.135z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1353.091,787.087c0.635,1.633,1.204,3.272,1.68,4.875c2.067-0.757,4.18-1.622,6.345-2.615 C1359.004,788.852,1356.332,788.106,1353.091,787.087z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1293.477,801.406c-1.229-1.083-2.446-2.166-3.654-3.249c0.054,1.569,0.086,3.092,0.098,4.572 c0.94-0.385,1.875-0.741,2.805-1.066C1292.978,801.575,1293.228,801.49,1293.477,801.406z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1244.747,834.064c-1.475,3.64-3.108,7.569-4.911,11.828c-0.885,2.091-1.811,4.262-2.778,6.514 c-0.109,1.854-0.236,3.624-0.381,5.309c0.37-0.591,0.74-1.181,1.107-1.759c2.647-4.175,5.217-8.042,7.719-11.631 c1.695-2.431,3.358-4.735,4.992-6.915C1248.505,836.439,1246.576,835.332,1244.747,834.064z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1267.134,818.247c2.62-2.513,5.17-4.715,7.659-6.636c0.275-7.875-0.608-15.909-2.859-23.847 c-0.826,2.934-6.571,5.72-11.513,6.543c-0.672,1.532-1.311,3.054-1.902,4.574c4.297,6.713,5.838,14.681,5.133,22.852 C1264.827,820.507,1265.987,819.348,1267.134,818.247z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M921.569,818.063c2.818-0.874,5.652-1.865,8.495-2.977c-2.999-2.144-5.67-4.929-7.893-8.479 c-9.232-9.009-20.21-25.417-35.448-53.033c-4.724,0.436-8.982,1.228-12.954,2.425c-0.137,0.097-0.276,0.193-0.411,0.291 c-0.772,0.552-1.515,1.111-2.241,1.672c-1.163,3.599-2.254,7.484-3.27,11.666c7.272,12.233,13.635,25.301,19.347,38.623 C904.574,806.047,917.539,812.061,921.569,818.063z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M826.117,791.719c0.186-0.151,0.377-0.303,0.566-0.455c0.166-0.431,0.332-0.861,0.5-1.288 C826.827,790.558,826.48,791.132,826.117,791.719z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M832.052,783.043c-0.464,1.75-0.917,3.449-1.361,5.104c1.736-1.312,3.565-2.649,5.495-4.013 c0.129-0.142,0.258-0.284,0.387-0.425C835.042,783.492,833.534,783.27,832.052,783.043z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M829.86,791.237c0.272-1.009,0.551-2.044,0.831-3.09c-1.396,1.055-2.733,2.095-4.008,3.118 c-0.293,0.763-0.583,1.534-0.869,2.308c0.796,1.079,1.63,2.186,2.506,3.322c0.38-1.385,0.769-2.815,1.167-4.281 c-0.775,0.629-1.604,1.267-2.502,1.917C827.965,793.402,828.918,792.311,829.86,791.237z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M826.487,782.145c-0.32-0.054-0.643-0.108-0.961-0.163c-1.619,2.502-2.406,5.126-2.438,7.788 c0.445,0.64,0.908,1.294,1.383,1.956C825.358,788.545,826.019,785.349,826.487,782.145z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M814.918,751.698c-0.006,0.132-0.012,0.265-0.018,0.397c0.256-0.085,0.527-0.17,0.811-0.254 C815.448,751.795,815.178,751.744,814.918,751.698z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M825.526,781.982c0.36-0.557,0.761-1.108,1.206-1.652c0.172-1.386,0.309-2.773,0.414-4.16 c-3.643-0.048-7.684,0.014-12.161,0.201c0.638,1.281,1.358,2.633,2.169,4.06C819.842,780.966,822.631,781.484,825.526,781.982z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M819.387,761.588c-1.767-0.959-3.4-1.854-4.752-2.696c-0.07,2.297-0.121,4.596-0.158,6.896 C816.182,764.445,817.818,763.043,819.387,761.588z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1496.739,846.721c0.47,0.034,0.94,0.068,1.42,0.107c2.64-5.083,4.892-5.328,9.097-3.549 c0.972-2.541,1.7-5.145,2.117-7.805c0.63-4.011,0.656-8.515,0.187-13.302c-3.218,3.181-6.594,6.405-10.08,9.635 C1498.069,838.025,1497.327,842.981,1496.739,846.721z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1498.159,846.828c-1.014,1.952-2.085,4.618-3.346,8.159c3.177-1.696,6.229-3.312,9.136-4.836 c0.495-0.852,0.966-1.712,1.407-2.583C1502.837,847.258,1500.443,847.014,1498.159,846.828z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1282.218,687.962c1.405,3.883,3.29,7.787,5.582,11.716c1.535-0.918,3.094-1.851,4.669-2.8 c-2.757-3.223-5.457-6.16-8.101-8.838c-0.39-0.144-0.785-0.289-1.184-0.434C1282.862,687.722,1282.54,687.843,1282.218,687.962z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1297.199,694.003c2.247-1.38,4.502-2.789,6.74-4.225c-2.866-2.169-5.694-4.135-8.479-5.9 c-3.809,0.929-7.728,2.104-11.72,3.529c0.208,0.209,0.418,0.422,0.627,0.634C1289.57,689.962,1293.914,691.765,1297.199,694.003z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1381.046,790.559c-0.385,0.686-0.766,1.367-1.136,2.037c0.37-0.765,0.746-1.445,1.126-2.058 c-1.707-3.261-3.418-6.443-5.133-9.561c-0.952-1.731-1.906-3.439-2.86-5.126c0.204,4.688,0.508,9.886,0.948,15.589 c4.25,4.54,8.343,9.129,12.198,13.769c1.215,1.462,2.405,2.93,3.57,4.402c0.187-0.177,0.369-0.351,0.553-0.526 c-0.947-1.979-1.896-3.943-2.847-5.877C1385.334,798.878,1383.194,794.662,1381.046,790.559z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1256.344,667.425c2.801,1.284,5.674,2.83,8.625,4.685c2.496,0.259,5.071,0.734,7.714,1.419 c1.532,0.398,3.086,0.861,4.664,1.405c-2.322-3.238-5.406-7.548-10.672-12.739c-0.866,0.437-1.732,0.874-2.599,1.311 C1261.495,664.809,1258.916,666.115,1256.344,667.425z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1321.376,633.874c0.007,0.037,0.013,0.071,0.02,0.107c0.065-0.036,0.129-0.072,0.195-0.108 C1321.52,633.874,1321.447,633.874,1321.376,633.874z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1358.028,609.824c2.138-1.946,3.962-3.852,5.433-5.715c0.253-0.43,0.507-0.86,0.76-1.289 c-6.549,2.415-12.652,4.83-18.339,7.245C1349.79,609.726,1353.843,609.618,1358.028,609.824z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1306.156,633.564c-0.921-0.042-1.858-0.093-2.796-0.144c-6.458,4.906-11.468,9.824-15.201,14.761 c0.847,0.297,1.71,0.59,2.599,0.877C1295.136,644.999,1300.625,639.98,1306.156,633.564z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1314.473,732.855c-0.314-4.236-0.624-8.782-0.94-13.626c-0.371,0.17-0.734,0.339-1.085,0.504 c-1.011,2.582-2.1,5.096-3.284,7.518c0.722,0.779,1.45,1.56,2.188,2.341C1312.378,730.678,1313.418,731.765,1314.473,732.855z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1192.514,704.841c-0.562,0.055-1.127,0.107-1.697,0.158c-0.279,0.525-0.557,1.048-0.838,1.581 C1190.85,706.018,1191.694,705.437,1192.514,704.841z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1184.387,709.73c0.891-0.433,1.76-0.887,2.607-1.359c-0.14-0.112-0.277-0.224-0.414-0.335 C1185.835,708.601,1185.104,709.166,1184.387,709.73z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1164.778,732.143c1.072,2.098,2.104,4.147,3.107,6.162c4.091-3.535,7.982-7.045,11.672-10.516 c1.203-4.829,2.387-8.295,3.674-10.344c-1.124-1.322-2.244-2.656-3.358-3.997C1172.51,719.811,1167.214,726.067,1164.778,732.143 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1199.441,735.186c0.639,1.417,1.302,2.92,1.988,4.493c0.245-0.624,0.485-1.245,0.712-1.862 C1201.248,736.966,1200.348,736.089,1199.441,735.186z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1174.658,752.363c1.028-5.749,1.966-10.859,2.858-15.31c-2.799,1.206-5.636,2.379-8.509,3.518 C1171.029,744.673,1172.913,748.606,1174.658,752.363z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1163.495,742.041c0.49-0.411,0.978-0.821,1.462-1.231c-0.517-1.176-1.031-2.364-1.543-3.563 C1163.21,738.86,1163.234,740.458,1163.495,742.041z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1169.323,752.692c0.63,0.65,1.311,1.297,2.046,1.94c-0.289-0.591-0.578-1.188-0.867-1.786 C1170.107,752.797,1169.715,752.745,1169.323,752.692z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1174.891,753.281c-0.131-0.01-0.261-0.022-0.391-0.033c-0.199,1.117-0.402,2.259-0.608,3.422 c1.199,0.895,2.516,1.782,3.936,2.662c-1.005-2.257-2.058-4.576-3.169-6.969c-0.043,0.243-0.086,0.483-0.13,0.728 C1174.65,753.156,1174.768,753.216,1174.891,753.281z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1165.461,741.951c-0.617,0.235-1.235,0.468-1.855,0.7c0.429,2.091,1.289,4.154,2.608,6.185 c1.031,0.51,2.072,1.033,3.12,1.566C1168.033,747.654,1166.741,744.838,1165.461,741.951z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1346.85,735.065c-0.153-0.208-0.307-0.416-0.46-0.623c-0.933,2.201-1.836,4.306-2.711,6.316 c2.509-0.087,4.901-0.132,7.18-0.135C1349.521,738.73,1348.185,736.877,1346.85,735.065z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1365.449,782.569c1.022-4.248,1.914-8.131,2.686-11.644c-5.182-0.233-10.431-0.5-15.466-0.964 C1356.977,774.124,1361.26,778.325,1365.449,782.569z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1368.699,768.329c-0.181,0.844-0.368,1.705-0.564,2.596c0.715,0.032,1.43,0.064,2.142,0.095 C1369.751,770.115,1369.225,769.221,1368.699,768.329z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1408.8,647.099c0.619,0.881,0.914,1.961,0.842,3.257c2.182,7.842,5.732,16.551,11.13,26.145 c-9.193-2.675-15.29-7.123-18.987-12.568c-2.532,2.861-5.737,6.082-9.687,9.689c-0.664,2.92-1.087,5.732-1.327,8.441 c7.448,7.742,13.936,18.426,17.497,24.637c7.753-4.076,13.631-1.592,11.667,19.428c1.719,1.288,3.418,2.563,5.078,3.811 c0.89-1.494,1.804-2.987,2.75-4.465c1.365-2.133,2.797-4.232,4.32-6.252c0.134-0.178,0.268-0.355,0.404-0.531 c2.341-3.051,4.898-5.909,7.753-8.412c0.601-0.526,1.214-1.038,1.842-1.532c2.668-7.446,5.03-16.621,3.518-27.274 c-0.53,0.24-1.051,0.478-1.585,0.718c-8.803,13.807-26.281,14.398-21.839-36.516c-4.164-2.117-8.034-4.52-11.115-6.679 c-0.862,1.117-1.683,2.081-2.448,2.747c-0.123,0.107-0.251,0.217-0.383,0.331c-0.128,0.161-0.248,0.319-0.374,0.479 C1408.121,644.033,1408.431,645.547,1408.8,647.099z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1439.68,667.562c1.08,1.227,2.192,2.463,3.333,3.706c-0.456-1.244-0.966-2.504-1.542-3.78 c1.067-0.557,2.196-0.781,3.382-0.715c0.948-2.882,1.886-5.646,2.816-8.296c-0.799-2.515-2.053-4.941-3.843-7.173 c-5.982,0.777-13.458-1.637-20.305-4.96c2.269,3.771,5.661,8.521,9.85,13.731C1435.313,662.489,1437.425,665.001,1439.68,667.562 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1372.73,648.708c-0.428,0.712-0.853,1.424-1.271,2.135c2.945,0.164,6.025,0.326,9.244,0.485 c-1.294-1.292-2.667-2.551-4.043-3.771C1375.352,647.92,1374.041,648.305,1372.73,648.708z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1363.88,680.495c0.572,2,1.187,4.05,1.856,6.151c0.637-1.616,1.282-3.251,1.937-4.914 c-0.203-0.246-0.398-0.489-0.588-0.731C1366.004,680.83,1364.936,680.662,1363.88,680.495z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1388.285,723.769c-0.994-1.884-2.064-3.785-3.216-5.69c-1.122,2.374-2,4.328-2.652,5.904 c0.666,1.138,1.354,2.287,2.063,3.448C1385.564,726.451,1386.852,725.191,1388.285,723.769z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1391.064,721.004c1.556-1.544,3.216-3.174,4.926-4.779c-1.237-2.351-2.549-4.655-3.932-6.904 C1392.317,713.55,1392.194,717.425,1391.064,721.004z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1373.221,702.022c-1.045-1.165-2.122-2.315-3.238-3.444c0.492,1.242,1.005,2.499,1.543,3.774 C1372.089,702.241,1372.65,702.131,1373.221,702.022z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1354.357,715.167c0.536,2.502,1.272,4.973,2.213,7.412c1.728,4.479,4.166,8.848,7.401,13.089 c1.573,2.062,3.336,4.093,5.297,6.092c7.321,1.075,12.628,2.871,16.366,5.201c-1.783-3.585-3.737-7.943-5.854-13.171 c2.392-1.403,4.336-2.861,5.927-4.376c-0.416-0.664-0.825-1.324-1.227-1.981c-3.536,3.197-4.905,3.413-2.063-3.448 c-4.506-7.702-8.042-14.898-10.889-21.633c-4.686,0.915-9.051,1.834-13.118,2.75 C1357.01,708.597,1355.661,711.949,1354.357,715.167z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1372.963,745.279c0.024,0.021,0.046,0.042,0.07,0.063 C1373.058,744.784,1373.046,744.759,1372.963,745.279z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1397.672,759.515c3.043,0.091,5.73-0.811,8.192-2.45c-3.242-3.91-6.237-7.715-9.005-11.419 C1398.508,752.294,1398.729,757.353,1397.672,759.515z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M987.994,735.139c-2.97-4.377-6.549-8.242-10.668-12.195c1.167,4.38,2.551,9.005,4.152,13.876 C983.597,736.273,985.771,735.712,987.994,735.139z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1054.942,686.577c1.203,1.193,2.402,2.346,3.591,3.457c1.027,0.96,2.045,1.888,3.051,2.778 c-0.197-2.691-0.165-5.27,0.063-7.755C1059.445,685.697,1057.208,686.211,1054.942,686.577z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M989.099,706.638c7.165-0.631,13.975-0.922,20.448-0.92c0.371-2.843,0.73-5.451,1.078-7.844 c-7.572,2.51-18.668,3.628-33.452,4.594c9.212,3.242,16.892,10.884,22.381,18.616c2.532,3.576,4.361,7.853,6.914,11.126 c0.786-7.43,1.524-13.946,2.221-19.669C1002.401,710.406,995.879,708.429,989.099,706.638z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1047.385,687.243c-1.103,0.016-2.21-0.002-3.321-0.06c2.011-1.878,4.01-3.758,5.997-5.641 c-0.015-0.016-0.029-0.032-0.044-0.048c-2.852,0.159-4.309-0.985-3.216-3.542c-0.945-1.069-1.883-2.151-2.805-3.247 C1040.327,682.661,1040.621,688.576,1047.385,687.243z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1033.752,651.177c-0.238,2.711-0.693,5.304-1.365,7.777c2.443,3.902,5.257,7.836,8.288,11.678 c1.083,1.372,2.189,2.733,3.319,4.075c0.48-1.04,1.027-2.115,1.636-3.213c0.031-0.055,0.061-0.11,0.092-0.165 c1.137-2.032,2.484-4.14,4.007-6.253c-1.497-2.583-1.318-5.214-0.432-7.663c-2.142-1.473-4.253-2.922-6.303-4.33 C1039.908,652.368,1036.819,651.727,1033.752,651.177z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1048.528,675.24c-0.833,1.037-1.397,1.94-1.728,2.713c-1.093,2.557,0.365,3.701,3.216,3.542 c0.033-0.002,0.068-0.005,0.102-0.007c1.478-1.401,2.947-2.803,4.41-4.206c-1.653-1.025-3.314-2.086-4.992-3.225 C1049.159,674.471,1048.832,674.861,1048.528,675.24z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1183.749,674.292c1.887,1.969,3.572,3.867,5.062,5.673c-0.732-2.119-1.482-4.437-2.244-6.981 C1185.622,673.427,1184.682,673.864,1183.749,674.292z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1216.177,643.157c1.207,0.701,2.381,1.407,3.529,2.117c0.905-0.236,1.789-0.467,2.643-0.691 c2.399-1.287,4.869-2.708,7.415-4.291c0.005-0.011,0.01-0.022,0.015-0.034C1225.651,641.107,1221.018,642.094,1216.177,643.157z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1196.7,694.192c-0.19,0.34-0.383,0.687-0.574,1.032c0.752,0.134,1.51,0.276,2.271,0.425 c-0.079-0.268-0.174-0.557-0.285-0.865C1197.639,694.576,1197.168,694.378,1196.7,694.192z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1196.7,694.192c0.227-0.405,0.451-0.803,0.676-1.203c-0.425-0.935-0.961-1.983-1.613-3.129 c-1.521-2.675-3.687-5.889-6.614-9.48c-0.113-0.139-0.224-0.276-0.339-0.416c0.051,0.149,0.103,0.299,0.154,0.445 c1.612,4.62,3.128,8.232,4.462,10.956c0.36,0.736,0.708,1.409,1.041,2.017C1195.202,693.625,1195.947,693.894,1196.7,694.192z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M863.839,710.126c-0.135-0.265-0.268-0.524-0.403-0.791c0.455,0.27,0.899,0.537,1.35,0.806 c3.295,0.052,6.716,0.091,10.242,0.111c1.188,0.007,2.386,0.011,3.597,0.013c0.584-8.526,1.079-16.658,1.488-24.401 c-2.458,2.049-4.934,3.817-7.244,4.834c-0.872,4.39-6.332,6.749-21.336,6.361c-0.11,0.573-0.225,1.146-0.341,1.72 c1.564,3.205,2.688,6.908,3.258,11.158c2.966,0.069,6.08,0.134,9.322,0.188C863.794,710.125,863.817,710.125,863.839,710.126z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M905.429,707.684c0.263,0.706,0.528,1.404,0.794,2.096c2.592-0.101,5.202-0.221,7.824-0.362 c2.575-0.138,5.16-0.295,7.751-0.475c0.821-0.87,1.628-1.718,2.424-2.549c-0.043-0.144-0.088-0.297-0.131-0.442 C918.148,706.445,911.933,707.014,905.429,707.684z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1032.387,658.953c0.672-2.472,1.127-5.065,1.365-7.777c0.009-0.102,0.017-0.204,0.025-0.307 c-5.032,1.485-11.163,3.355-18.58,5.651c3.698,8.234,6.089,14.897,7.166,20.337c2.081-2.273,3.91-4.7,5.47-7.284 C1029.81,666.297,1031.351,662.766,1032.387,658.953z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M873.229,671.194c-3.119,0.579-5.326,0.283-7.12-0.451c0.764,1.846,1.565,3.624,2.34,5.321 C869.894,674.455,871.515,672.816,873.229,671.194z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M862.708,646.202c0.967-1.705,2.095-3.528,3.438-5.512c-1.166,0.686-2.287,1.435-3.366,2.241 c0.356-0.172,0.709-0.343,1.074-0.52C863.376,643.683,862.998,644.948,862.708,646.202z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M879.616,710.265c0.153,0,0.305,0,0.458,0c6.351-10.878,12.268-20.672,17.77-29.382 c-0.54-3.073-0.957-6.185-1.214-9.318c-1.009,0.698-2.006,1.399-2.987,2.098c-3.17,2.262-8.126,7.64-13.203,11.925 C880.557,693.305,880.303,701.518,879.616,710.265z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M897.844,680.884c0.385,2.19,0.835,4.359,1.335,6.503c1.046-3.85,1.857-8.079,2.589-12.642 C900.485,676.727,899.176,678.775,897.844,680.884z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1346.935,632.916c0.017-0.031,0.035-0.063,0.052-0.094c-0.032,0.013-0.063,0.026-0.095,0.039 C1346.907,632.879,1346.921,632.897,1346.935,632.916z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1420.772,676.501c-5.399-9.594-8.948-18.303-11.13-26.145c-0.177,3.146-2.545,7.574-7.857,13.576 C1405.482,669.378,1411.579,673.826,1420.772,676.501z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1405.978,645.003c1.235,0.508,2.193,1.201,2.822,2.096c-0.369-1.552-0.68-3.066-0.944-4.546 C1407.207,643.376,1406.581,644.193,1405.978,645.003z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M916.974,606.138c1.752-4.374,3.746-8.819,6.033-13.325c-5.126,4.734-11.781,10.011-19.118,15.429 c2.286,0.396,4.655,0.812,7.111,1.249C912.992,608.348,914.984,607.23,916.974,606.138z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1044.425,699.373c-0.532-0.381-1.057-0.751-1.587-1.128c-5.233-3.725-10.335-7.247-15.308-10.577 c-1.542-1.032-3.071-2.046-4.588-3.042c-0.345,3.918-1.864,6.912-4.601,9.226c6.777,2.005,14.245,3.682,22.509,4.986 C1042.026,699.023,1043.216,699.202,1044.425,699.373z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M908.622,625.329c-2.549,0.412-4.925,0.753-7.144,1.016c1.694,0.587,3.423,1.183,5.192,1.795 C907.286,627.196,907.942,626.26,908.622,625.329z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M879.484,508.607c-1.324-0.465-2.689-0.938-4.093-1.42c-0.363,0.953-0.769,1.921-1.236,2.913 c1.443,0.789,2.856,1.588,4.234,2.399C878.347,511.284,878.737,509.984,879.484,508.607z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M819.741,492.243c-0.74-0.372-1.477-0.746-2.21-1.122c-0.744,1.982-1.441,3.987-2.09,6.012 c-0.013,2.161-0.002,4.334,0.034,6.513c1.824-1.604,3.553-3.059,5.195-4.374C820.359,496.979,820.049,494.634,819.741,492.243z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M870.097,547.205c0.719-2.401,1.431-4.759,2.134-7.066c-1.291,0.176-2.604,0.354-3.938,0.534 c0.038,1.543,0.083,3.052,0.128,4.522C868.986,545.753,869.546,546.421,870.097,547.205z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M931.863,577.453c-13.642-10.456-19.365-19.506-20.428-26.99c-8.625,3.466-18.203,6.462-28.895,8.937 c25.314,5.804,20.25,5.193,5.009,4.211c11.044,7.679,22.972,17.206,35.645,28.841 C925.713,587.517,928.584,582.512,931.863,577.453z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1388.143,582.879c9.146,9.028,11.067,22.472-0.054,33.297c0.451,0.481,0.902,0.965,1.353,1.46 c-0.662-0.305-1.321-0.596-1.979-0.88c-7.439,6.884-20.295,12.628-40.094,15.381c-0.128,0.23-0.254,0.457-0.381,0.686 c-0.017,0.031-0.035,0.063-0.052,0.094c1.018,1.276,1.944,2.585,2.795,3.927c3.435-2.362,8.54-2.963,15.759-0.643 c-1.925-4.788,5.184-7.637,35.422-7.464c9.064-11.466,13.988-24.855,19.103-38.872c0.593-1.625,1.154-3.265,1.696-4.911 C1411.29,584.291,1400.079,583.606,1388.143,582.879z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1254.678,652.045c1.012,0.747,1.975,1.482,2.901,2.206c3.619,2.831,6.603,5.486,9.095,7.943 c5.266,5.192,8.35,9.501,10.672,12.739c0.659,0.92,1.259,1.754,1.827,2.496c5.619-3.53,10.872-6.641,15.764-9.167 c-19.052-4.97-15.029-9.146-4.18-19.204c-0.889-0.287-1.752-0.58-2.599-0.877c-15.927-5.582-24.477-12.922-28.776-19.388 c-0.076,0.06-0.151,0.12-0.227,0.18c-0.546,5.383-1.77,12.397-4.037,21.354C1254.976,650.893,1254.83,651.464,1254.678,652.045z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1339.894,648.509c-0.025-0.742-0.09-1.486-0.205-2.233c-0.376,0.716-0.742,1.416-1.095,2.097 C1339.023,648.419,1339.453,648.464,1339.894,648.509z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1355.691,649.848c0.153,0.458,0.304,0.919,0.451,1.385c0.858-0.386,1.73-0.777,2.609-1.171 C1357.709,649.991,1356.691,649.92,1355.691,649.848z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1255.757,620.243c1.096-1.007,2.201-2.039,3.318-3.107 C1257.857,611.108,1254.627,613.935,1255.757,620.243z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1366.897,598.308c-0.889,1.494-1.782,2.999-2.676,4.513c-0.253,0.429-0.507,0.859-0.76,1.289 c-1.143,1.94-2.286,3.889-3.423,5.837c8.628,0.632,17.802,2.648,27.425,6.808c0.209-0.193,0.426-0.385,0.626-0.579 C1380.992,608.602,1373.859,602.759,1366.897,598.308z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1181.44,605.122c-2.54,1.243-5.039,2.255-7.518,2.957c2.784,6.903,5.952,11.92,9.435,15.353 c2.563-1.06,5.262-2.156,8.092-3.285C1188.112,615.494,1184.771,610.498,1181.44,605.122z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1135.195,585.084c-0.676-0.933-1.351-1.911-2.024-2.935c-0.232-0.094-0.463-0.188-0.695-0.282 c-0.992,0.766-1.976,1.505-2.948,2.203c-1.402,2.812-2.889,5.611-4.457,8.397c4.53-0.894,8.953-1.799,13.264-2.717 C1137.301,588.291,1136.254,586.737,1135.195,585.084z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1138.698,590.26c-3.851,5.986-7.11,11.667-9.942,15.761c1.347,1.495,2.619,2.991,3.809,4.476 c3.836,1.564,8.008,3.809,11.499,5.909c0.614,0.149,1.22,0.3,1.827,0.451c2.343-5.535,2.303-4.846,0.544,0.134 c3.022,0.752,5.971,1.514,8.834,2.289c-1.302-4.685-2.376-9.665-3.198-14.986C1147.77,601.277,1143.346,596.725,1138.698,590.26z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1211.576,640.585c0.57,0.307,1.132,0.615,1.689,0.923c1.504-0.743,2.806-1.64,3.938-2.664 C1215.392,639.424,1213.519,640.005,1211.576,640.585z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1198.501,629.481c-0.81-1.016-1.62-2.052-2.43-3.107c-0.08,1.023-0.174,2.042-0.289,3.056 C1196.677,629.507,1197.584,629.52,1198.501,629.481z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M868.421,545.195c-0.045-1.471-0.09-2.979-0.128-4.522c-0.014-0.542-0.026-1.087-0.037-1.636 c-4.166,2.087-8.071,4.28-11.72,6.537c0.346,0.158,0.702,0.33,1.051,0.492C860.989,542.52,864.825,541.648,868.421,545.195z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1173.192,597.247c1.425,0.442,2.85,0.867,4.274,1.275c-1.489-2.545-2.975-5.176-4.457-7.88 c-0.803,1.976-1.839,3.729-3.076,5.211c0.034,0.13,0.069,0.26,0.104,0.39C1171.088,596.586,1172.14,596.92,1173.192,597.247z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M978.732,567.682c-0.317-0.017-0.634-0.034-0.952-0.054c0.036,0.312,0.078,0.624,0.119,0.937 C978.163,568.272,978.443,567.977,978.732,567.682z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M981.536,578.502c-0.836-0.974-1.62-1.986-2.347-3.032c0.281,1.163,0.595,2.324,0.937,3.48 C980.598,578.798,981.066,578.651,981.536,578.502z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1132.818,581.603c-0.115,0.089-0.228,0.176-0.342,0.264c0.232,0.094,0.463,0.188,0.695,0.282 C1133.053,581.971,1132.936,581.785,1132.818,581.603z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1131.628,579.712c0.396,0.647,0.793,1.277,1.191,1.891c5.535-4.307,11.398-9.685,17.577-16.204 c0.028-0.602,0.061-1.211,0.094-1.82c-4.416,0.557-8.747,1.007-12.873,1.373C1135.899,569.915,1133.894,574.833,1131.628,579.712 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1394.536,570.173c1.711,0.419,3.438,0.877,5.197,1.411c-0.01,0.19-0.03,0.38-0.05,0.56 c-0.687,5.72-6.718,7.965-13.466,8.978c0.676,0.563,1.314,1.152,1.926,1.757c11.936,0.727,23.146,1.413,33.566,2.073 c1.351-4.099,2.552-8.26,3.594-12.469c0.681-2.757,1.288-5.537,1.84-8.33c-8.377-2.297-17.982-4.646-27.743-6.743 C1398.086,562.286,1396.483,566.513,1394.536,570.173z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1179.072,495.449c0.934,1.384,1.762,2.662,2.509,3.86c1.706-0.021,3.396-0.03,5.068-0.026 c1.216-4.02,3.283-9.652,6.389-17.245c-3.81-2.099-7.43-3.999-10.907-5.745c-2.138,2.001-4.349,4.056-6.649,6.175 C1173.727,488.706,1174.492,493.574,1179.072,495.449z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1323.579,510.62c-0.763-3.272-1.782-6.496-3.102-9.643c-1.855,2.15-3.805,4.396-5.902,6.722 c1.984,2.35,3.91,4.747,5.771,7.194c0.286-0.055,0.571-0.108,0.855-0.158C1322.098,513.398,1322.884,512.021,1323.579,510.62z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1237.961,449.674c0.429,0.108,0.84,0.22,1.229,0.336c0.003-0.65,0.007-1.282,0.011-1.905 C1238.785,448.627,1238.372,449.15,1237.961,449.674z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1197.745,499.478c0.385-1.719,0.756-3.451,1.117-5.191c-1.426,1.854-2.78,3.566-4.043,5.105 C1195.801,499.417,1196.775,499.447,1197.745,499.478z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1265.505,546.554c-4.963,2.775-10.354,5.555-16.225,8.327c0.386,1.915,0.788,3.854,1.204,5.813 C1255.746,555.459,1260.744,550.76,1265.505,546.554z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1242.562,513.286c2.502,3.394,4.365,6.827,5.336,10.223c2.4-1.21,4.796-2.607,7.25-4.145 c-4.294-4.97-8.799-9.664-13.477-14.065c0.085,0.82,0.173,1.649,0.263,2.482C1242.129,509.585,1242.338,511.42,1242.562,513.286z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1283.669,607.394c-0.763,0.397-1.519,0.794-2.265,1.188c-0.599,0.662-1.21,1.324-1.834,1.986 c1.592,0.735,3.216,1.35,4.859,1.813C1284.084,610.929,1283.83,609.272,1283.669,607.394z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1283.616,606.706c-0.001-0.013-0.002-0.026-0.003-0.039c-0.098-0.034-0.198-0.068-0.296-0.102 C1283.416,606.612,1283.516,606.659,1283.616,606.706z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1273.888,601.78c1.476-1.647,2.968-3.348,4.475-5.101c-4.307,0.186-8.757,0.395-13.353,0.637 c1.995,1.111,4.672,2.544,8.205,4.329C1273.44,601.69,1273.664,601.735,1273.888,601.78z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1262.536,597.447c-0.005,0-0.01,0.001-0.015,0.001c0.02,0.022,0.041,0.045,0.061,0.067 C1262.567,597.493,1262.551,597.47,1262.536,597.447z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1260.403,506.553c0.41-0.678,0.81-1.345,1.212-2.015c-1.005-0.062-2.021-0.13-3.046-0.205 C1259.187,505.069,1259.799,505.808,1260.403,506.553z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1239.215,461.96c-0.024-2.07-0.035-4.048-0.037-5.934c-1.518-0.104-3.313-0.393-5.361-0.906 c-2.787,3.792-5.357,7.6-7.532,11.368c0.736,1.124,1.529,2.271,2.379,3.465c3.069,4.296,6.451,8.363,9.964,12.333 c0.412-0.02,0.823-0.036,1.234-0.046C1239.459,474.702,1239.283,467.945,1239.215,461.96z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1327.777,467.164c-0.194,2.015-0.381,3.955-0.56,5.836c-0.502,0.962-1.01,1.891-1.524,2.799 c3.006-2.195,5.794-4.294,8.38-6.299c0.359-1.861,0.728-3.766,1.105-5.715c-1.132-0.262-2.265-0.483-3.404-0.657 c-1.238,3.012-2.511,5.82-3.823,8.433C1327.897,470.108,1327.839,468.644,1327.777,467.164z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1320.559,500.881c1.587,2.098,3.137,4.103,4.654,6.019c2.211-5.709,3.26-11.524,4.434-16.251 C1326.707,493.719,1323.772,497.156,1320.559,500.881z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1300.62,521.743c6.168-3.057,11.917-5.106,17.387-6.359c-1.883-1.806-3.736-3.582-5.572-5.343 C1308.979,513.775,1305.11,517.695,1300.62,521.743z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M818.947,479.008c-0.982,0.287-1.975,0.601-2.98,0.946c-0.031,0.606-0.063,1.213-0.092,1.823 c0.831-0.503,1.575-1.035,2.222-1.598C818.376,479.793,818.659,479.402,818.947,479.008z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M867.758,520.511c2.743-3.677,4.862-7.151,6.397-10.411c0.467-0.991,0.873-1.96,1.236-2.913 c0.389-1.021,0.717-2.018,0.991-2.995c-6.718-8.431-13.448-17.855-20.157-28.376c-2.824,0.817-5.644,1.681-8.458,2.571 c-3.049,3.577-6.18,7.152-9.228,10.804c14.966-2.942,15.902,18.555,27.071,32.347c0.452-0.002,0.917-0.003,1.38-0.004 C867.254,521.19,867.504,520.851,867.758,520.511z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M819.741,492.243c2.06,1.036,4.145,2.055,6.252,3.039c1.052-0.729,2.061-1.386,3.031-1.98 c2.7-3.629,5.837-7.568,9.439-11.84c-0.925,0.294-1.875,0.575-2.844,0.847c-6.735,2.179-13.414,4.27-20.005,5.916 c-0.02,0.625-0.038,1.253-0.055,1.881c0.654,0.339,1.311,0.678,1.971,1.016C818.265,491.497,819.001,491.871,819.741,492.243z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1404.626,479.884c-0.014-1.384-0.031-2.785-0.049-4.203c-0.927,1.01-1.857,1.999-2.792,2.965 C1402.729,479.05,1403.676,479.464,1404.626,479.884z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1414.256,464.03c2.048,8.606,3.873,16.313,5.475,23.182c2.705,1.431,5.425,2.928,8.159,4.511 c-1.8-9.92-4.621-19.292-8.407-28.118c-1.526-0.172-3.032-0.348-4.524-0.526C1414.724,463.396,1414.492,463.716,1414.256,464.03z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1356.308,517.489c0.956,0.259,1.915,0.527,2.878,0.803c-0.056-0.785-0.099-1.579-0.12-2.389 c-0.888,0.389-1.799,0.786-2.753,1.197C1356.312,517.23,1356.31,517.359,1356.308,517.489z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1185.728,507.26c-0.23-0.19-0.377-0.537-0.422-1.077c-0.782-1.85-2.011-4.123-3.725-6.873 c-0.746-1.198-1.575-2.476-2.509-3.86c-4.58-1.875-5.345-6.743-3.591-12.981c0.69-2.455,1.769-5.121,3.163-7.903 c-6.923-3.345-13.168-5.945-18.871-7.896c-0.7-0.24-1.398-0.476-2.082-0.696c-6.201,12.128-11.562,22.44-16.182,31.199 c0.323,1.355,0.618,2.706,0.891,4.054c5.651,1.693,10.983,3.467,15.856,5.117c0.876-4.358,1.818-8.818,2.846-13.409 c-0.008,4.971,0.023,9.757,0.084,14.403c10.795,3.666,18.98,6.424,22.803,5.692c-1.622-0.912-3.269-1.853-4.977-2.858 c2.461,0.466,4.833,0.909,7.131,1.334C1186.533,510.563,1186.414,509.175,1185.728,507.26z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1193.629,453.24c-0.26,0.289-0.523,0.577-0.78,0.869c-5.801,6.576-10.888,13.837-14.205,20.456 c1.138,0.55,2.312,1.138,3.486,1.728c3.478,1.745,7.098,3.646,10.907,5.745c-3.105,7.593-5.173,13.224-6.389,17.245 c-1.028,3.398-1.448,5.648-1.343,6.9c0.159,0.376,0.3,0.735,0.422,1.077c1.151,0.953,4.514-2.291,9.09-7.867 c1.263-1.539,2.617-3.251,4.043-5.105c0.636-3.068,1.234-6.163,1.793-9.267c-27.792-15.563-17.418-13.77,0.686-3.932 c0.101-0.596,0.2-1.192,0.298-1.789c-4.259-2.989-7.22-6.665-7.215-11.838c0.005-7.44,3.887-15.062,7.802-22.773 C1199.285,447.284,1196.385,450.179,1193.629,453.24z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1136.456,480.878c5.845-4.884,11.991-10.12,18.44-15.768c-3.324-0.965-6.439-1.67-9.383-2.149 c-3.587,5.407-7.054,10.245-10.387,14.578C1135.584,478.654,1136.031,479.768,1136.456,480.878z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M919.088,547.152c-2.465,1.146-5.015,2.25-7.653,3.311c1.062,7.484,6.786,16.534,20.428,26.99 c1.477-2.279,3.032-4.568,4.681-6.867c1.108-4.234,2.501-8.425,4.194-12.545c-5.881-2.686-11.869-5.987-17.938-9.98 C921.538,547.766,920.302,547.463,919.088,547.152z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M895.544,471.701c-3.599,0.877-6.076,2.048-7.533,3.468c-0.824,0.804-1.328,1.686-1.52,2.642 c2.058,0.511,4.095,1.031,6.102,1.562C893.607,476.683,894.59,474.128,895.544,471.701z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M870.861,521.547c2.258,0.018,4.635,0.056,7.138,0.115c0.225-0.703,0.451-1.408,0.674-2.101 C875.965,520.303,873.359,520.962,870.861,521.547z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M870.861,521.547c-1.028-0.008-2.038-0.014-3.017-0.014c-0.289,0-0.57,0.001-0.855,0.001 c-0.464,0.001-0.928,0.001-1.38,0.004c0.272,0.336,0.549,0.667,0.834,0.993c0.484-0.102,0.973-0.207,1.467-0.315 C868.874,522.006,869.861,521.781,870.861,521.547z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M977.78,567.628c-0.493-0.031-0.988-0.066-1.484-0.105c0.15,0.806,0.3,1.62,0.452,2.413 c0.354-0.454,0.736-0.91,1.15-1.37C977.858,568.252,977.817,567.94,977.78,567.628z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M979.189,575.47c-0.713-1.026-1.372-2.086-1.975-3.175c0.484,2.44,0.977,4.815,1.48,7.122 c0.477-0.156,0.956-0.314,1.431-0.467C979.784,577.794,979.47,576.633,979.189,575.47z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M978.695,579.417c-1.741,0.569-3.495,1.156-5.261,1.764c0.533,3.163,2.184,6.22,4.379,9.244 c1.096-0.042,2.242-0.082,3.444-0.123C980.379,586.85,979.525,583.221,978.695,579.417z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1002.423,458.315c0.344,2.043,0.668,4.214,0.974,6.536c9.267,9.618,20.693,21.473,34.739,35.833 c1.272-1.265,2.739-2.511,4.447-3.724c-0.943,1.914-1.918,3.661-2.921,5.284c3.833,3.915,7.85,8.006,12.075,12.291 c5.896,0.97,7.779,5.194,6.326,10.87c2.75,0.762,5.544,1.595,8.385,2.509c-8.373-8.949-16.007-18.122-22.115-30.382 c-0.41-0.82-0.82-1.65-1.24-2.48c-5.719-11.536-11.547-23.608-18.317-35.053c-0.366-0.204-0.715-0.403-1.084-0.607 c0.186-0.097,0.37-0.187,0.555-0.282c-1.624-2.717-3.3-5.397-5.045-8.023c-2.529,0.669-5.07,1.329-7.623,1.977 C1008.76,454.75,1005.721,456.497,1002.423,458.315z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1080.231,462.508c0.778,6.839,1.541,13.416,2.343,19.516c2.693,0.999,5.107,1.674,7.3,2.046 c-0.168-4.64-0.396-9.516-0.689-14.649C1086.28,466.892,1083.298,464.57,1080.231,462.508z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1079.132,452.829c0.743-2.982,1.529-5.994,2.353-9.029c-1.186-0.333-2.364-0.692-3.532-1.077 C1078.359,446.111,1078.75,449.488,1079.132,452.829z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1039.662,502.245c-0.512-0.523-1.021-1.043-1.526-1.56c-3.979,3.958-6.047,8.099-7.615,11.984 C1033.841,510.184,1036.873,506.759,1039.662,502.245z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1124.423,456.164c0.467-3.614,0.488-6.965,0.127-10.089c-1.151,1.708-2.275,3.378-3.373,5.009 c1.106,1.721,2.171,3.437,3.193,5.147C1124.387,456.208,1124.405,456.186,1124.423,456.164z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1082.575,482.024c-2.675-0.993-5.629-2.308-8.918-3.967c-0.74,4.033-1.397,7.995-1.976,11.884 c5.261,3.943,9.875,7.666,13.963,11.169C1084.508,495.638,1083.514,489.16,1082.575,482.024z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1109.181,419.719c-0.835,0.439-1.709,0.886-2.626,1.34c-0.373,2.716-0.781,5.532-1.23,8.456 c2.135,2.581,4.174,5.149,6.12,7.704c3.185,1.44,5.631,2.916,7.236,4.426c1.468-0.715,2.928-1.521,4.379-2.427 C1120.522,431.435,1115.429,425.193,1109.181,419.719z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1071.681,489.942c-6.779-5.08-14.626-10.519-23.847-16.325c6.602,12.33,13.287,24.586,21.573,35.571 C1069.936,503.009,1070.692,496.585,1071.681,489.942z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1180.05,418.729c-0.584-0.59-1.175-1.199-1.766-1.807c-2.023-0.971-3.869-1.875-5.519-2.715 c-0.319,0.664-0.638,1.322-0.956,1.977C1174.602,417.051,1177.354,417.898,1180.05,418.729z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1263.435,431.039c6.385,2.899,13.17,6.047,20.379,9.442c-0.015-1.224-0.064-2.468-0.13-3.722 c-5.502-3.375-10.857-6.528-16.045-9.462C1266.263,428.512,1264.861,429.76,1263.435,431.039z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1263.115,430.894c0.819-1.588,1.638-3.175,2.455-4.759c-1.687-0.943-3.355-1.862-5.005-2.758 c-0.521,0.825-1.056,1.652-1.621,2.484c-0.388-0.105-0.757-0.224-1.118-0.349c-0.578,0.727-1.171,1.463-1.776,2.208 C1258.351,428.743,1260.703,429.8,1263.115,430.894z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1168.846,415.263c0.852-0.577,1.713-1.155,2.592-1.735c-3.009-0.238-4.399-1.297-4.424-2.491 c-1.243-0.778-2.18-1.473-2.766-2.084c-1.694,0.954-3.315,2.058-4.879,3.315C1162.558,413.292,1165.724,414.289,1168.846,415.263 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1109.181,419.719c6.248,5.473,11.342,11.715,13.878,19.498c6.899-4.308,13.578-10.838,19.784-20.25 c-6.753,10-12.824,18.991-18.292,27.108c0.36,3.124,0.339,6.475-0.127,10.089c3.93-4.975,8.577-10.429,14.331-16.213 c0.388-0.683,0.773-1.358,1.156-2.022c0.425-0.737,0.847-1.462,1.267-2.176c6.083-10.347,11.659-18.233,18.193-23.486 c-8.514-2.732-17.19-5.647-25.634-8.791c-2.83-1.054-5.633-2.133-8.396-3.24c-5.706,3.209-11.472,5.92-17.212,8.248 c-0.335,2.977-0.712,6.098-1.143,9.379C1107.73,418.474,1108.463,419.091,1109.181,419.719z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1197.174,397.782c-1.203-0.203-2.343-0.359-3.421-0.472c3.076,2.736,6.476,5.822,10.242,9.291 c-0.308-0.972-0.647-1.833-1.021-2.558c2.124-0.442,4.18-0.858,6.183-1.254c-0.121-0.739-0.249-1.475-0.385-2.209 C1204.446,399.284,1200.567,398.354,1197.174,397.782z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M957.329,429.332c1.684,2.215,3.325,4.636,4.924,7.25c1.307-4.781,2.817-9.545,4.502-14.234 c-2.516-0.578-5.2-1.203-8.068-1.921C957.648,423.818,957.236,426.79,957.329,429.332z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M927.777,409.002c-0.094,0.009-0.188,0.018-0.282,0.027c0.079,0.016,0.159,0.029,0.239,0.046 C927.748,409.051,927.763,409.027,927.777,409.002z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M944.044,416.246c5.348,1.738,10.214,3.073,14.643,4.182c0.887-2.896,2.228-6.094,4.111-9.595 c-7.651-0.855-15.029-1.654-21.979-2.395c-3.211-0.025-6.292,0.064-9.25,0.256c-0.023,0.455-0.046,0.909-0.069,1.362 C935.796,411.377,939.992,413.404,944.044,416.246z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M968.796,416.927c-0.706,1.793-1.386,3.601-2.04,5.421c0.821,0.189,1.625,0.373,2.41,0.554 C969.054,420.755,968.926,418.763,968.796,416.927z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M896.096,470.298c-0.182,0.46-0.367,0.933-0.552,1.402c-0.954,2.427-1.937,4.982-2.95,7.671 c3.961,1.048,7.82,2.132,11.589,3.243c-0.137-3.775-0.041-7.497,0.265-11.119C901.671,470.909,898.886,470.521,896.096,470.298z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M890.519,520.531c-5.491-1.233-8.89-2.803-10.647-4.669c-0.396,1.217-0.796,2.449-1.199,3.699 c-0.223,0.693-0.449,1.398-0.674,2.101c-0.137,0.427-0.271,0.844-0.409,1.274c2.393,0.824,5.733,2.435,10.045,5.034 c2.707-0.602,5.472-1.223,8.313-1.871c-2.637,0.781-5.187,1.538-7.654,2.274c0.781,0.478,1.592,0.988,2.434,1.53 c2.284-0.73,4.628-1.42,7.026-2.071C895.348,525.515,892.936,523.088,890.519,520.531z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M881.658,531.704c0.44,0.29,0.891,0.582,1.364,0.879c0.373-0.141,0.749-0.279,1.125-0.418 C883.289,532.04,882.46,531.885,881.658,531.704z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M876.139,527.516c-0.213,0.677-0.428,1.364-0.643,2.05c0.518,0.251,1.049,0.489,1.596,0.712 c0.636-0.137,1.281-0.277,1.925-0.417C877.905,529.034,876.944,528.248,876.139,527.516z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M879.308,531.072c0.757,0.237,1.539,0.449,2.349,0.632c-0.476-0.314-0.932-0.623-1.369-0.929 C879.96,530.875,879.634,530.974,879.308,531.072z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M872.231,540.139c-0.703,2.307-1.415,4.665-2.134,7.066c1.29,1.834,2.532,4.306,3.693,7.501 c2.228,1.332,4.504,2.753,6.82,4.252c0.662,0.151,1.305,0.298,1.929,0.441c10.692-2.475,20.27-5.471,28.895-8.937 c2.639-1.06,5.189-2.164,7.653-3.311c-16.283-4.17-28.369-9.746-36.067-14.569c-3.374,1.271-6.61,2.622-9.713,4.036 c-0.09,0.292-0.18,0.587-0.27,0.881C872.77,538.375,872.501,539.25,872.231,540.139z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1115.683,442.976c1.002-0.403,2.001-0.846,2.996-1.331c-1.605-1.51-4.051-2.986-7.236-4.426 C1112.911,439.146,1114.322,441.064,1115.683,442.976z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1265.571,426.135c-0.817,1.585-1.636,3.171-2.455,4.759c-0.138,0.267-0.275,0.534-0.413,0.801 c0.247-0.222,0.487-0.435,0.733-0.656c1.426-1.28,2.828-2.527,4.203-3.742c2.734-2.414,5.37-4.701,7.911-6.868 c0.481-1.865,1.875-4.122,4.393-6.871c-0.863-3.358-1.812-6.495-2.97-9.465c-0.332,0.638-0.664,1.277-0.996,1.917 C1272.537,412.635,1269.063,419.366,1265.571,426.135z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1330.841,408.095c1.625-3.351,3.982-7.46,6.93-12.394c-2.382-0.78-4.907-1.661-7.575-2.642 c-4.265,2.195-8.837,4.416-12.689,5.282C1321.486,401.165,1325.923,404.406,1330.841,408.095z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1298.389,349.451c-1.748-3.476-3.007-6.99-3.718-10.487c-2.391-0.248-4.741-0.489-7.036-0.721 c-0.354,0.452-0.705,0.902-1.05,1.35C1290.026,342.98,1293.996,346.284,1298.389,349.451z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1270.53,396.827c-0.177,1.424-0.413,2.864-0.711,4.318c2.198,0.405,4.41,0.969,6.628,1.655 c-0.87-2.082-1.858-4.086-3.002-6.034C1272.487,396.866,1271.515,396.884,1270.53,396.827z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1327.073,324.441c1.818-2.378,3.609-4.988,5.317-8.054c-0.016-1.398-0.051-2.794-0.104-4.188 C1329.367,311.452,1326.572,317.008,1327.073,324.441z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1304.47,389.503c1.249,0.795,2.574,1.659,3.979,2.593c-0.021-0.336-0.034-0.686-0.035-1.053 c-0.004-0.727,0.823-3.136,1.934-6.034c-1.101-0.481-2.218-0.974-3.354-1.48C1306.17,385.428,1305.329,387.417,1304.47,389.503z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1304.368,382.35c-0.297-0.134-0.585-0.262-0.884-0.398c-1.559,2.075-2.811,3.592-3.796,4.615 c1.362,0.8,2.84,1.702,4.457,2.727C1304.189,386.87,1304.263,384.555,1304.368,382.35z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1287.161,389.747c2.466,2.842,4.642,5.736,6.422,8.507c0.27,0.42,0.54,0.84,0.79,1.26 c2.29,3.768,3.646,8.161,4.449,12.846c6.843,3.314,13.448,6.479,19.54,8.223c-1.737-3.218-3.537-6.515-5.405-9.899 c-10-7.545-19.549-17.096-23.685-23.118C1288.581,388.332,1287.878,389.063,1287.161,389.747z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1294.079,330.398c-1.549,1.802-3.03,3.58-4.444,5.331c1.531,0.453,3.098,0.917,4.713,1.396 C1294.015,334.866,1293.92,332.62,1294.079,330.398z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1292.918,383.002c1.15,0.504,2.493,1.173,4.031,2.011c0.8-4.629,3.929-13.946,7.838-25.589 c-0.061-0.078-0.12-0.156-0.18-0.234C1301.478,368.246,1297.538,376.525,1292.918,383.002z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1306.103,354.601c0.083,0.051,0.167,0.102,0.25,0.153c3.027-9.047,6.37-19.2,9.398-29.497 c-1.368,1.348-2.745,2.713-4.132,4.1C1310.486,337.774,1308.617,346.421,1306.103,354.601z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1326.503,442.244c0.164-0.045,0.333-0.085,0.499-0.128c0.308-1.118,0.628-2.224,0.957-3.32 c-2.307-4.502-4.764-9.192-7.377-14.081c-3.152,2.494-6.344,5.192-9.576,8.109 C1318.576,434.482,1324.811,437.103,1326.503,442.244z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1277.759,473.169c0.908-2.37,1.723-4.743,2.439-7.132c-1.464,1.833-2.935,3.711-4.413,5.635 C1276.444,472.168,1277.102,472.667,1277.759,473.169z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1299.998,443.453c0.039,1.276,0.096,2.521,0.185,3.72c5.664-0.163,10.886-0.161,15.972,0.109 c1.464-1.189,3.179-2.238,5.114-3.135c-3.623-2.82-7.637-6.022-12.095-9.652C1306.151,437.286,1303.091,440.272,1299.998,443.453 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1276.395,475.696c0.044-0.042,0.087-0.081,0.131-0.123c-0.719-0.691-1.438-1.381-2.148-2.062 c-0.081,0.106-0.162,0.215-0.243,0.322c-6.144,8.11-12.409,17.012-18.793,26.764c0.021,0.024,0.043,0.048,0.064,0.073 C1262.679,490.409,1269.593,482.195,1276.395,475.696z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1414.003,462.966c0.316,0.038,0.638,0.075,0.956,0.113c1.492,0.178,2.998,0.354,4.524,0.526 c-2.73-6.362-5.961-12.44-9.675-18.232C1411.296,451.613,1412.694,457.47,1414.003,462.966z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1395.473,460.521c-0.73-0.507-1.46-1-2.189-1.486c-0.379,0.344-0.757,0.678-1.135,1.011 C1393.248,460.205,1394.354,460.363,1395.473,460.521z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1402.618,461.51c0.573,0.077,1.148,0.154,1.726,0.231c-0.088-4.491-0.19-9.134-0.304-13.938 c-1.153,1.349-2.286,2.633-3.404,3.855C1401.244,454.751,1401.904,458.031,1402.618,461.51z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1352.554,416.732c-1.308,3.859-1.846,7.963-1.941,12.061c2.396,2.797,4.707,5.546,6.921,8.24 c4.157-0.928,6.103,0.715,4.085,5.04c0.664,0.831,1.328,1.661,1.975,2.482c9.396,2.95,19.457,7.66,29.689,14.481 c2.415-2.194,4.847-4.639,7.352-7.378c-1.892-9.638-3.277-17.458-4.227-23.736c-4.079-4.49-8.501-8.767-13.257-12.828 c-1.812-1.546-3.673-3.33-5.576-5.227C1367.554,412.722,1359.276,415.038,1352.554,416.732z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1372.788,405.009c-1.517-1.546-3.057-3.101-4.621-4.617c0,0-0.001,0-0.001,0 C1369.635,402.089,1371.173,403.64,1372.788,405.009z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M872.042,391.262c-0.581-0.816-1.166-1.642-1.752-2.47c-0.552,0.216-1.107,0.455-1.666,0.723 c-0.705,0.697-1.302,1.543-1.789,2.526c0.435-0.017,0.933-0.178,1.499-0.505c-0.017,0.831-0.06,1.637-0.108,2.438 c1.238-0.667,2.482-1.337,3.732-2.011C871.987,391.73,872.014,391.495,872.042,391.262z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M865.886,473.259c0.023-0.005,0.046-0.011,0.07-0.017c1.131-2.477,2.921-7.022,6.204-13.872 c10.411,3.604,11.943,7.173,10.804,9.718c4.232-2.185,11.499-5.446,23.421-10.042c1.44-6.236,3.509-11.92,6.037-16.742 c-6.214-6.665-12.863-14.553-19.953-23.589c-10.656,4.979-19.203,10.791-27.305,15.096c0.887,1.794,1.628,3.585,2.213,5.368 c16.277,2.115,13.849,5.244,1.484,6.757c0.886,8.023-1.505,15.626-7.375,22.051c0.654,1.937,1.135,3.518,1.521,4.723 C863.972,472.889,864.929,473.074,865.886,473.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M878.388,512.499c0.041,1.207,0.511,2.331,1.483,3.363c1.756,1.866,5.156,3.436,10.647,4.669 c-3.605-3.814-7.221-7.902-10.842-12.275c-0.068,0.118-0.13,0.234-0.193,0.351C878.737,509.984,878.347,511.284,878.388,512.499z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M818.098,480.179c0.481-0.419,0.907-0.855,1.295-1.302c-0.148,0.042-0.297,0.088-0.445,0.131 C818.659,479.402,818.376,479.793,818.098,480.179z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M856.224,475.817c-0.028-0.043-0.055-0.085-0.083-0.129c-1.563,0.055-3.091,0.093-4.591,0.121 c-0.94,0.544-1.919,1.071-2.936,1.581c-0.282,0.332-0.564,0.665-0.847,0.997C850.58,477.498,853.4,476.633,856.224,475.817z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M835.62,482.309c-5.841,1.64-12.478,2.866-19.923,3.608c-0.029,0.767-0.057,1.536-0.082,2.308 C822.207,486.579,828.885,484.488,835.62,482.309z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M961.703,438.643c0.179-0.687,0.362-1.375,0.55-2.061c-1.599-2.615-3.24-5.035-4.924-7.25 C957.49,433.75,959.168,436.871,961.703,438.643z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M927.495,409.029c-0.647,0.065-1.288,0.135-1.923,0.209c0.553,0.24,1.101,0.474,1.646,0.705 c0.174-0.29,0.344-0.579,0.516-0.868C927.654,409.058,927.574,409.046,927.495,409.029z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M960.24,501.46c0.198,0.13,0.399,0.26,0.599,0.391c-0.139-0.368-0.271-0.742-0.402-1.116 C960.372,500.975,960.304,501.219,960.24,501.46z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M931.421,411.676c4.484,1.791,8.683,3.29,12.623,4.57c-4.052-2.842-8.248-4.868-12.544-6.19 C931.473,410.597,931.447,411.138,931.421,411.676z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M892.317,470.095c1.261,0.034,2.521,0.103,3.779,0.203c2.791,0.223,5.575,0.611,8.351,1.197 c0.158-1.88,0.372-3.732,0.639-5.551C900.568,467.591,896.324,468.958,892.317,470.095z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M918.022,316.826c0.098-0.367,0.196-0.727,0.295-1.098c-0.244,0.341-0.491,0.675-0.736,1.013 c0.091,0.08,0.181,0.163,0.272,0.245C917.91,316.933,917.966,316.88,918.022,316.826z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M872.73,360.033c-2.452,5.104-4.376,10.112-5.737,14.596c2.42,1.77,4.795,3.469,7.129,5.103 c2.934-12.065,7.897-22.002,14.102-30.831c-0.079-0.036-0.15-0.07-0.226-0.105c-1.059,0.886-2.121,1.757-3.188,2.603 C880.828,354.555,876.795,357.426,872.73,360.033z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M865.105,382.359c0.411,0.271,0.821,0.541,1.235,0.815c-0.367-0.526-0.729-1.038-1.098-1.568 C865.194,381.861,865.148,382.112,865.105,382.359z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M870.29,388.792c-1.246-1.76-2.503-3.548-3.771-5.364c-0.496-0.233-0.984-0.46-1.478-0.691 c-0.696,4.215-0.582,7.318,0.404,8.624c1.074-0.741,2.133-1.345,3.18-1.847C869.183,389.248,869.738,389.008,870.29,388.792z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M867.375,439.179c0.746,2.274,1.239,4.531,1.484,6.757C881.224,444.423,883.652,441.294,867.375,439.179z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1294.079,330.398c-0.159,2.221-0.064,4.468,0.269,6.727c2.987,0.886,6.111,1.816,9.394,2.795 c-3.107-0.334-6.114-0.649-9.071-0.956c0.71,3.497,1.97,7.01,3.718,10.487c-4.393-3.167-8.363-6.47-11.803-9.857 c-0.545-0.536-1.072-1.075-1.59-1.616c-15.502-1.551-28.814-2.753-40.377-3.827c3.874,4.68,9.064,10.798,13.815,18.135 c2.983-0.469,4.737,1.824,4.877,8.392c2.158,4.204,4.032,8.708,5.385,13.484c0.117,0.067,0.233,0.139,0.35,0.206 c17.02-3.442,26.132-2.8,14.037,11.003c1.43,1.428,2.794,2.894,4.08,4.375c0.717-0.684,1.42-1.415,2.111-2.182 c-3.418-4.976-3.135-7.536,3.646-4.563c4.62-6.477,8.56-14.755,11.689-23.813c0.061,0.078,0.119,0.156,0.18,0.234 c0.51-1.519,1.033-3.077,1.566-4.67c-0.083-0.051-0.167-0.102-0.25-0.153c2.515-8.179,4.384-16.827,5.517-25.244 c-0.184,0.184-0.365,0.36-0.549,0.545c-5.242-2.326-10.237-5.105-14.957-8.192c-0.446,1.089-0.822,2.189-1.124,3.299 C1294.508,326.783,1294.209,328.582,1294.079,330.398z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1244.181,333.622c-0.054,0.158-0.106,0.316-0.161,0.474c0.197,0.018,0.4,0.037,0.598,0.055 C1244.47,333.972,1244.325,333.797,1244.181,333.622z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1250.005,324.768c6.613,1.451,16.521,4.191,30.734,8.344c-2.661-3.366-4.768-6.775-6.236-10.176 c-0.739-1.712-1.315-3.421-1.717-5.122c-2.604,0.018-5.325-0.022-8.175-0.107 C1258.405,320.493,1253.679,322.925,1250.005,324.768z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1273.773,303.812c-0.372,0.893-0.683,1.795-0.928,2.704c1.124-0.313,2.25-0.643,3.376-0.988 c-0.683-0.677-1.351-1.359-2.012-2.042C1274.063,303.595,1273.921,303.704,1273.773,303.812z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1266.714,308.08c1.597-0.37,3.203-0.771,4.814-1.203c-0.463-0.214-0.934-0.433-1.417-0.66 C1269.044,306.853,1267.909,307.473,1266.714,308.08z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1264.612,317.708c1.284-0.576,2.632-1.167,4.047-1.771c-6.265-0.839-11.875-1.541-16.869-2.125 c-1.108,0.322-2.246,0.636-3.418,0.94c-0.047,0.421-0.101,0.838-0.154,1.256c0.025,0.297,0.041,0.586,0.049,0.868 C1254.204,317.265,1259.615,317.558,1264.612,317.708z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1273.446,396.767c-0.778-1.324-1.627-2.623-2.565-3.902c-0.068,1.307-0.184,2.628-0.35,3.962 C1271.515,396.884,1272.487,396.866,1273.446,396.767z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1130.034,294.86c0.59-1.29,1.188-2.609,1.796-3.974c-1.676-1.9-2.84-2.298-3.613-1.553 c-0.05,0.292-0.099,0.575-0.149,0.87c-0.001-0.237-0.004-0.469-0.005-0.706c-0.331,0.413-0.58,1.064-0.76,1.917 C1128.352,292.531,1129.263,293.681,1130.034,294.86z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1009.647,356.845c-4.292-7.048-9.249-14.348-14.142-21.956c-4.164,0.8-8.223,1.663-12.152,2.6 c2.104,5.585,2.899,10.609,2.777,15.187c7.688,1.303,15.497,3.477,22.622,5.65 C1009.014,357.804,1009.319,357.315,1009.647,356.845z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1022.084,390.313c-0.002,0.721-0.028,1.44-0.08,2.158c0.73-0.124,1.465-0.245,2.208-0.361 C1023.477,391.511,1022.767,390.913,1022.084,390.313z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1031.669,352.971c7.213-3.211,14.292-5.749,21.235-7.749c0.701-2.018,1.422-3.994,2.165-5.927 c-1-4.201-2.422-8.232-4.351-11.988c-4.866,0.52-9.754,1.057-14.629,1.623c-1.592,0.185-3.181,0.373-4.769,0.566 c-6.125,0.742-12.207,1.541-18.176,2.425C1021.78,341.098,1027.801,347.949,1031.669,352.971z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1048.115,360.465c-1.218,0.259-2.444,0.513-3.686,0.76c0.93,0.719,1.871,1.487,2.821,2.295 C1047.537,362.495,1047.825,361.476,1048.115,360.465z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1128.426,298.327c0.529-1.125,1.064-2.279,1.608-3.467c-0.771-1.179-1.682-2.329-2.731-3.447 c-0.983-1.049-2.077-2.071-3.307-3.059c0.509,2.449,0.932,5.025,1.262,7.7c0.299,0.539,0.594,1.104,0.89,1.661 C1126.9,297.909,1127.659,298.112,1128.426,298.327z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1178.668,381.931c0.36,0.747,0.816,1.418,1.353,2.028c3.719,0.505,7.714,0.362,11.842-0.397 c3.754-0.69,7.615-1.89,11.477-3.575c-0.052-0.191-0.105-0.381-0.157-0.574C1194.383,379.02,1185.836,379.633,1178.668,381.931z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1197.024,369.958c1.522,0.599,3.021,1.188,4.479,1.758c-0.195-1.242-0.35-2.486-0.44-3.713 c-0.046-0.033-0.094-0.066-0.14-0.1C1199.608,368.601,1198.307,369.286,1197.024,369.958z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1204.076,329.625c10.631,1.67,23.519,2.945,39.944,4.471c0.055-0.157,0.107-0.316,0.161-0.474 c-1.654-2.005-3.043-3.733-4.016-5.163c-1.071-0.025-1.949-0.4-2.74-1.182c-10.01,1.389-24.819-1.743-35.016-2.632 c-0.211,0.145-0.422,0.292-0.634,0.434C1202.457,326.561,1203.224,328.074,1204.076,329.625z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1248.084,314.828c0.061,0.407,0.102,0.797,0.134,1.18c0.052-0.418,0.107-0.835,0.154-1.256 C1248.275,314.777,1248.182,314.803,1248.084,314.828z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1048.115,360.465c1.518-5.278,3.098-10.379,4.788-15.243c-6.943,2-14.023,4.538-21.235,7.749 c0.274,0.356,0.539,0.704,0.792,1.043c3.726,1.583,7.744,3.945,11.969,7.21C1045.671,360.977,1046.898,360.723,1048.115,360.465z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M942.59,283.795c-1.847,1.977-3.573,3.873-5.08,5.554c-0.444,0.522-0.854,1.004-1.241,1.457 c2.049,0.189,4.098,0.418,6.149,0.682c1.433-1.741,2.843-3.529,4.227-5.368C945.281,285.311,943.927,284.535,942.59,283.795z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M931.569,408.694c2.958-0.193,6.039-0.282,9.25-0.256c6.805,0.054,14.199,0.628,22.278,1.852 c0.289-0.527,0.591-1.061,0.905-1.602c-7.485-2.008-15.305-3.333-23.076-4.117c-2.972,0.698-6.058,1.43-9.255,2.194 C931.636,407.409,931.602,408.052,931.569,408.694z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M932.453,302.639c-2.381,0.016-4.758,0.102-7.132,0.258c1.354,1.059,2.615,2.112,3.793,3.16 C930.231,304.933,931.345,303.794,932.453,302.639z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M942.326,283.65c-1.158-0.637-2.303-1.248-3.431-1.827c-1.407-0.721-2.785-1.391-4.129-2.008 c-2.099,0.965-4.245,1.972-6.418,3.005c-0.644,2.403-1.351,4.877-2.133,7.426c3.331,0.049,6.665,0.247,10,0.554 c0.41-0.462,0.842-0.947,1.295-1.452C938.843,287.78,940.444,285.886,942.326,283.65z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M841.857,431.544c1.43,1.952,2.771,3.853,4.012,5.692c8.099-3.02,12.806-6.685,15.086-10.405 c-1.21-1.695-2.553-3.382-4.027-5.056C852.581,426.215,847.349,429.359,841.857,431.544z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M982.89,313.515c-0.032-0.032-0.063-0.063-0.095-0.094c-6.904-2.514-13.78-5.058-20.641-6.972 c4.117,4.377,7.601,8.511,10.532,12.425C976.083,317.213,979.49,315.428,982.89,313.515z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M892.468,418.715c-0.518-0.66-1.035-1.316-1.558-1.989c-6.022,1.493-12.319,3.061-18.913,4.706 c-1.102-11.026-1.041-20.754-0.038-29.467c-1.25,0.674-2.495,1.344-3.732,2.011c-0.542,9.166-3.016,16.411-6.721,22.107 c1.586,3.241,1.733,7.022-0.551,10.749c1.654,2.318,3.056,4.65,4.208,6.98C873.265,429.506,881.812,423.694,892.468,418.715z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M927.495,409.029c0.094-0.009,0.188-0.018,0.282-0.027c0.301-0.507,0.608-1.017,0.903-1.521 c-1.505,0.361-3.033,0.729-4.588,1.105c0.495,0.219,0.991,0.439,1.48,0.652C926.207,409.164,926.848,409.094,927.495,409.029z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1289.038,316.709c-2.748,0.401-5.591,0.684-8.576,0.863c3.858,0.551,7.923,1.147,12.197,1.791 C1291.431,318.496,1290.223,317.612,1289.038,316.709z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1268.659,315.937c3.854-1.646,8.203-3.388,13.136-5.187c-1.931-1.709-3.792-3.454-5.575-5.222 c-1.126,0.346-2.252,0.675-3.376,0.988c-0.439,0.122-0.878,0.243-1.316,0.361c-1.611,0.432-3.218,0.833-4.814,1.203 c-0.52,0.264-1.052,0.525-1.596,0.783c-0.684,2.462-1.885,4.332-3.904,5.05c-3.232,1.149-5.24,0.523-6.516-0.99 c-0.944,0.303-1.912,0.599-2.907,0.888C1256.785,314.395,1262.394,315.098,1268.659,315.937z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1133.513,262.218c-0.108,0.477-0.216,0.955-0.326,1.446c0.954,0.34,1.925,0.698,2.906,1.065 C1135.245,263.943,1134.386,263.103,1133.513,262.218z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1082.525,273.543c0.033-1.225,0.121-2.417,0.26-3.575c-1.314-0.408-2.609-0.826-3.885-1.252 c-1.646,1.788-3.964,3.911-7.022,6.424c1.131,1.337,2.238,2.605,3.323,3.809C1078.011,277.07,1080.443,275.278,1082.525,273.543z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1114.017,260.775c2.72-1.376,7.348-0.759,12.927,0.85c-0.2-2.271-0.431-4.499-0.696-6.679 c-1.546,0.093-3.077,0.181-4.594,0.264c-1.795,0.887-3.619,1.793-5.478,2.721 C1115.472,258.862,1114.757,259.806,1114.017,260.775z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1073.255,308.38c-8.411-5.787-15.835-10.925-22.307-15.487c-2.946,1.54-6.073,3.145-9.393,4.824 c1.62,2.299,3.668,4.525,6.196,6.644c4.785,4.012,11.296,7.639,19.909,10.646C1069.408,312.611,1071.269,310.396,1073.255,308.38 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1083.076,281.821c-0.352-2.324-0.538-4.549-0.562-6.674c-2.388,1.249-4.818,2.525-7.289,3.829 c1.834,2.035,3.604,3.89,5.312,5.578C1081.329,283.658,1082.177,282.747,1083.076,281.821z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1050.188,292.358c-0.293-0.207-0.581-0.411-0.87-0.615c-0.25,0.173-0.493,0.342-0.747,0.517 c-3.682-0.113-7.087-0.271-10.233-0.472c0.726,1.846,1.68,3.666,2.882,5.444C1044.26,295.572,1047.25,293.948,1050.188,292.358z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1047.894,254.185c-0.694,0.819-1.373,1.666-2.032,2.541c1.933-0.017,3.959-0.027,6.069-0.035 C1050.554,255.875,1049.204,255.042,1047.894,254.185z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M953.704,217.16c-1,1.677-1.994,3.315-2.98,4.911c0.448-0.188,0.914-0.365,1.392-0.535 C952.568,220.074,953.095,218.615,953.704,217.16z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M962.584,202.973c1.094-2.286,2.269-4.179,3.504-5.721c-0.524,0.219-1.057,0.442-1.588,0.664 c-1.491,2.816-2.97,5.544-4.436,8.185C960.849,205.051,961.693,204.009,962.584,202.973z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M854.64,233.799c0.632-0.456,1.262-0.908,1.888-1.357c-0.111-0.268-0.222-0.533-0.333-0.798 c-0.559-1.331-1.127-2.63-1.707-3.894c-0.636-1.386-1.288-2.732-1.958-4.031c-3.334-6.459-7.14-11.793-11.924-15.567 c-2.653,9.525-5.64,18.214-8.888,26.175c0.967-0.045,1.931-0.087,2.892-0.125C841.445,233.926,848.142,233.798,854.64,233.799z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M942.714,276.244c-3.441-3.419-7.231-5.861-11.096-7.302c-0.889,4.326-1.947,8.951-3.269,13.88 c2.173-1.033,4.319-2.041,6.418-3.005c2.065-0.949,4.091-1.863,6.084-2.75C941.478,276.787,942.094,276.517,942.714,276.244z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M858.598,237.685c1.121,2.957,2.221,6.035,3.329,9.212c0.066,0.189,0.132,0.377,0.198,0.567 c4.695-3.195,8.516-7.156,11.165-13.307c-3.014-0.117-6.092-0.207-9.227-0.267C862.351,235.177,860.521,236.446,858.598,237.685z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M969.788,193.301c0.274-0.432,0.548-0.865,0.821-1.293c0.163-0.821,0.333-1.647,0.511-2.479 c-0.185-0.017-0.369-0.037-0.553-0.055C970.417,190.692,970.156,191.966,969.788,193.301z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1011.025,222.493c-0.092-0.132-0.19-0.269-0.283-0.402c-1.278-1.825-2.726-3.762-4.381-5.85 c-0.756,0.39-1.487,0.781-2.207,1.172c-1.249,1.295-2.463,2.547-3.635,3.747C1003.838,221.551,1007.335,221.996,1011.025,222.493 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M932.585,241.682c-5.566-1.655-13.413-3.223-22.99-4.519c8.819,3.491,17.527,6.944,25.964,10.363 c0.071-0.369,0.142-0.734,0.213-1.095C934.666,244.839,933.601,243.257,932.585,241.682z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M903.728,236.43c-0.481-0.056-0.964-0.111-1.452-0.165c0.911,9.99-0.877,17.182-5.155,21.811 c7.292-3.552,17.571-6.215,31.249-6.629C922.065,247.595,913.996,242.643,903.728,236.43z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M931.617,268.941c1.038-5.049,1.85-9.691,2.594-13.938c-1.463-0.886-3.051-1.852-4.784-2.91 c-25.635,30.677-43.216,31.496-46.12,24.171c-2.526,2.906-5.031,5.673-7.512,8.308c1.158,2.68,2.378,5.365,3.673,8.046 c6.763-1.284,11.594,0.122,14.907,2.587c1.807-0.551,3.626-1.076,5.458-1.573C902.472,271.661,917.533,263.688,931.617,268.941z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M868.737,265.672c0.83-0.049,0.804,0.327,0.05,0.985c1.996,5.551,4.154,11.23,6.589,16.939 c2.556-2.543,5.15-5.125,7.784-7.749c-1.054-3.408,0.853-8.361,6.314-12.922c-5.582,1.958-12.878,2.158-21.745,0.762 c0.238,0.674,0.478,1.35,0.72,2.028C868.546,265.7,868.64,265.686,868.737,265.672z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M855.693,250.527c0.855-0.223,1.7-0.444,2.533-0.664c0.996-0.56,1.962-1.135,2.896-1.735 c-0.693,0.166-1.392,0.331-2.072,0.496c-7.561,1.833-14.297,3.614-20.308,5.304c-0.913,0.257-1.818,0.512-2.697,0.764 c0.361,0.135,0.714,0.262,1.072,0.395c0.193-0.044,0.387-0.088,0.579-0.132C844.009,253.506,850.08,251.989,855.693,250.527z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M945.724,279.604c-1.224,1.461-2.354,2.807-3.397,4.046c-1.882,2.236-3.483,4.129-4.817,5.698 c1.507-1.682,3.234-3.577,5.08-5.554c1.136-1.216,2.316-2.462,3.518-3.707C945.981,279.924,945.852,279.765,945.724,279.604z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1141.937,185.315c-5.626,1.045-10.9,2.063-15.849,3.059c0.93,4.38,1.879,8.633,2.844,12.757 c5.471-4.026,10.499-8.093,14.895-12.183C1143.207,187.746,1142.576,186.534,1141.937,185.315z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1014.364,288.123c-2.202-2.039-4.78-4.085-7.703-6.14 C1007.079,284.429,1009.503,286.491,1014.364,288.123z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M936.215,290.801c0.018,0.002,0.036,0.003,0.054,0.005c0.387-0.453,0.797-0.935,1.241-1.457 C937.057,289.854,936.625,290.338,936.215,290.801z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1078.9,268.715c-6.25-2.089-12.048-4.4-17.411-6.95c3.671,5.099,7.126,9.517,10.388,13.374 C1074.936,272.626,1077.254,270.503,1078.9,268.715z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1048.571,292.259c0.254-0.175,0.496-0.344,0.747-0.517c-8.645-6.115-15.511-11.161-20.69-15.325 c-3.816,4.443-7.788,8.576-11.881,12.419c5.056,1.351,12.143,2.347,21.591,2.951 C1041.485,291.988,1044.89,292.146,1048.571,292.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1129.995,205.593c0.89-0.584,1.792-1.172,2.705-1.763c-1.153-0.45-2.308-0.919-3.468-1.416 C1129.485,203.484,1129.74,204.541,1129.995,205.593z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1107.966,259.748c0.99-0.849,1.983-1.706,2.977-2.569c0.069-0.487,0.137-0.974,0.2-1.457 c-1.797,0.077-3.573,0.147-5.325,0.212c0.667,1.217,1.35,2.451,2.047,3.701C1107.898,259.673,1107.933,259.71,1107.966,259.748z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1110.376,260.838c1.969-0.991,3.9-1.959,5.8-2.907c1.859-0.928,3.683-1.833,5.478-2.721 c-3.046,0.167-6.036,0.315-8.965,0.446c-0.582,0.51-1.164,1.018-1.746,1.523C1110.772,258.384,1110.587,259.601,1110.376,260.838 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1082.515,275.147c1.566-0.819,3.109-1.623,4.639-2.419c-0.173-0.536-0.337-1.069-0.489-1.599 c-0.37-0.107-0.735-0.216-1.102-0.324c-0.918,0.9-1.927,1.81-3.038,2.736c-2.082,1.735-4.514,3.527-7.324,5.406 c0.008,0.009,0.016,0.018,0.025,0.027C1077.696,277.673,1080.127,276.396,1082.515,275.147z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1050.948,292.893c-0.255-0.18-0.508-0.358-0.76-0.536c-2.938,1.59-5.928,3.215-8.969,4.873 c-4.207,2.295-8.508,4.654-12.915,7.085c4.724-2.324,9.131-4.516,13.251-6.599 C1044.875,296.039,1048.002,294.434,1050.948,292.893z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1182.633,173.241c-1.452-3.565-2.501-6.985-3.071-10.201c-3.453,2.553-7.283,5.421-11.52,8.63 c0.669,3.024,1.274,6.123,1.815,9.295C1173.991,178.472,1178.251,175.901,1182.633,173.241z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1146.641,195.054c0.077-0.048,0.155-0.095,0.232-0.143c-0.15-0.298-0.304-0.6-0.456-0.899 C1146.49,194.362,1146.567,194.707,1146.641,195.054z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1142.75,158.889c0.014,1.036,0.035,2.067,0.064,3.092c0.203,7.163,0.759,14.044,1.656,20.63 c2.14,3.757,3.533,7.473,4.285,11.143c3.412-2.093,6.943-4.238,10.588-6.443c-0.38-7.229-0.691-14.817-0.918-22.8 c3.656,5.888,7.116,11.568,10.411,17.07c0.213-0.129,0.428-0.258,0.642-0.387c-0.958-2.862-1.906-5.68-2.843-8.456 c-0.188,0.143-0.369,0.279-0.559,0.424c0.186-0.151,0.364-0.302,0.549-0.453c-3.164-9.371-6.207-18.258-9.13-26.674 c-4.829,2.176-9.779,3.938-14.725,5.449C1142.722,153.984,1142.716,156.452,1142.75,158.889z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1176.483,153.31c-2.233-2.631-4.104-5.264-5.651-7.894c-2.968-0.367-6.061-0.811-9.275-1.331 c-0.561,0.286-1.125,0.566-1.69,0.839c3.259,8.182,6.021,17.04,8.151,26.635c4.108-3.425,7.857-6.875,11.272-10.334 c-0.033-0.27-0.061-0.538-0.087-0.805C1173.341,157.757,1172.316,154.772,1176.483,153.31z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1293.062,246.465c-1.412-0.536-2.876-1.028-4.378-1.488c-0.503,0.937-1.018,1.862-1.552,2.768 C1289.091,247.263,1291.069,246.836,1293.062,246.465z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1240.843,221.037c-2.102-0.754-4.136-1.501-6.108-2.242c2.334,1.295,4.254,2.404,5.648,3.255 C1240.532,221.713,1240.685,221.375,1240.843,221.037z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1194.789,227.544c9.227,17.517,16.154,32.259,21.453,44.593c3.774-4.481,8.142-9.319,13.131-14.63 c-10.439,0.826-12.17-11.845-15.87-24.834c-2.904-10.24-2.744-10.828-11.985-15.588 C1199.179,220.786,1196.938,224.27,1194.789,227.544z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1243.144,176.682c-0.429,4.935-3.313,3.815-5.257,2.76c-0.397,0.205-0.799,0.414-1.191,0.616 c1.347,2.339,5.146,7.995,13.293,20.388c2.64-9.781,4.148-19.395,3.188-29.254 C1249.698,173.145,1246.354,174.972,1243.144,176.682z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1224.99,138.88c1.682,0.201,3.419,0.434,5.209,0.699c-1.17-0.54-2.359-1.181-3.562-1.915 c-0.074,0.058-0.149,0.115-0.224,0.173C1225.954,138.194,1225.481,138.542,1224.99,138.88z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M836.942,158.888c-1.815-0.573-3.724-1.288-5.723-2.141c1.674,6.276,3.937,12.301,6.814,17.896 c2.779-2.476,5.6-4.877,8.456-7.223c-0.242-0.05-0.476-0.099-0.72-0.149C842.077,164.328,839.169,161.541,836.942,158.888z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M824.484,250.096c2.221-4.317,4.356-8.898,6.395-13.751c0.281-0.669,0.562-1.338,0.839-2.018 c3.248-7.961,6.234-16.65,8.888-26.175c0.265-0.95,0.519-1.923,0.777-2.889c-1.588-0.849-3.159-1.8-4.676-2.821 c-0.859,0.142-1.73,0.287-2.608,0.434c-2.022,2.97-4.013,6.037-6.016,9.208c-7.224,11.442-13.758,21.664-17.466,31.934 C815.404,246.208,820.026,248.234,824.484,250.096z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M877.99,121.036c-0.442,0.279-0.869,0.553-1.299,0.828c-0.304,0.808-0.635,1.624-1.001,2.449 C878.037,122.627,878.927,121.457,877.99,121.036z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M858.388,155.184c-2.128-0.601-4.146-1.3-5.769-2.2c-0.167,0.145-0.33,0.288-0.498,0.433 c2.346,1.493,4.625,2.91,6.83,4.253c0.307-0.23,0.61-0.464,0.918-0.693c-0.101-0.487-0.203-0.979-0.305-1.473 C859.169,155.4,858.777,155.294,858.388,155.184z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1168.219,140.294c-0.231-0.533-0.451-1.065-0.657-1.598c-3.209,0.601-6.408,1.161-9.59,1.677 c0.649,1.494,1.282,3.01,1.896,4.551c0.565-0.274,1.129-0.553,1.69-0.839C1163.818,142.932,1166.043,141.673,1168.219,140.294z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1096.62,144.58c-0.216-0.037-0.426-0.073-0.633-0.109c0.161,0.379,0.323,0.766,0.483,1.141 C1096.522,145.265,1096.571,144.924,1096.62,144.58z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1101.956,158.241c1.153,1.135,2.253,2.203,3.296,3.212c3.263-1.096,6.754-2.068,10.409-3.001 c3.3-0.842,6.732-1.654,10.245-2.501c5.487-1.322,11.172-2.73,16.864-4.468c4.947-1.511,9.897-3.273,14.725-5.449 c-0.621-1.787-1.235-3.549-1.845-5.294c-14.465,2.255-28.547,3.589-41.662,3.759c-3.942,0.648-7.854,0.939-10.385,0.864 c-0.861-0.027-1.668-0.082-2.436-0.153c-0.849,1.709-1.715,3.467-2.601,5.288 C1099.722,153.173,1100.852,155.754,1101.956,158.241z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1120.575,127.91c-0.577-1.392-2.031-5.395-3.452-12.47c-0.701,1.192-1.424,2.438-2.172,3.746 C1118.319,123.71,1119.986,126.725,1120.575,127.91z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1028.358,206.886c-5.199,1.859-9.901,3.729-14.14,5.606c0.535,1.405,1.093,2.791,1.683,4.146 c0.947,2.173,1.971,4.277,3.062,6.325c3.868-3.209,7.965-6.737,12.31-10.618C1030.313,210.565,1029.339,208.739,1028.358,206.886 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M936.233,236.857c0.774-0.392,1.554-0.785,2.319-1.174c0.229-0.637,0.47-1.254,0.724-1.854 c-1.087,0.836-2.187,1.681-3.287,2.526C936.071,236.523,936.151,236.688,936.233,236.857z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1051.932,256.691c1.921-0.007,3.914-0.011,5.978-0.015c-2.553-3.711-5.208-7.749-7.964-12.123 c-1.412,2.763-2.879,5.443-4.394,8.047c0.769,0.535,1.548,1.065,2.342,1.585C1049.204,255.042,1050.554,255.875,1051.932,256.691 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1061.489,261.765c5.362,2.55,11.16,4.861,17.411,6.95c1.276,0.427,2.571,0.844,3.885,1.252 c0.916,0.284,1.844,0.563,2.778,0.839c0.367,0.108,0.732,0.217,1.102,0.324c-1.092-3.78-1.667-7.386-1.735-10.853 c-1.152-1.229-2.304-2.472-3.447-3.745c-8.656,0.115-16.53,0.13-23.573,0.144 C1059.125,258.443,1060.318,260.138,1061.489,261.765z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1105.818,255.935c-0.465,0.017-0.933,0.035-1.395,0.051c1.181,1.188,2.331,2.407,3.442,3.65 C1107.168,258.386,1106.485,257.152,1105.818,255.935z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M902.957,233.259c-0.416-0.493-0.817-0.973-1.224-1.46c0.128,0.815,0.223,1.595,0.32,2.377 c0.177,0.07,0.354,0.14,0.531,0.21C902.717,234.033,902.843,233.66,902.957,233.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M863.214,171.036c-0.111,0.085-0.228,0.168-0.339,0.254c0.242,1.136,0.479,2.246,0.714,3.342 C863.619,173.298,863.469,172.087,863.214,171.036z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M890.963,194.859c-0.649-6.411-1.122-12.39-1.451-17.918c-1.937,1.798-3.584,3.704-4.974,5.687 c1.757,3.733,3.382,7.328,4.874,10.784C889.944,193.885,890.463,194.367,890.963,194.859z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M891.618,195.52c-0.215-0.222-0.433-0.443-0.655-0.662c0.022,0.223,0.047,0.452,0.07,0.676 C891.229,195.529,891.423,195.525,891.618,195.52z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M893.363,176.578c-0.026,0.386-0.051,0.764-0.078,1.155C895.962,178.236,895.806,177.901,893.363,176.578 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M898.701,195.633c0.536-0.991,2.164-2.046,4.586-3.105c-3.491-4.816-6.89-9.014-10.155-12.708 c-0.357,4.849-0.797,10.066-1.337,15.698C894.299,195.464,896.592,195.502,898.701,195.633z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M976.178,297.826c-1.676-2.225-3.365-4.415-5.056-6.578c-0.038,0.056-0.077,0.113-0.115,0.169 C972.665,293.516,974.383,295.649,976.178,297.826z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M935.773,246.431c0.51-2.58,1.043-4.971,1.654-7.173c-0.407-0.812-0.807-1.615-1.193-2.401 c-0.083-0.169-0.163-0.334-0.245-0.501c-1.03-2.107-1.99-4.124-2.893-6.053c-2.598-5.548-4.734-10.371-6.776-14.508 c-1.382,1.102-2.911,2.124-4.594,3.058c1.103,4.065,2.722,8.136,4.766,12.238c1.745,3.502,3.793,7.026,6.094,10.592 C933.601,243.257,934.666,244.839,935.773,246.431z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M835.151,201.356c-0.135,0.195-0.27,0.389-0.405,0.584c0.349-0.057,0.675-0.113,0.988-0.167 C835.539,201.635,835.345,201.496,835.151,201.356z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M835.928,201.907c-0.467,0.143-0.964,0.302-1.489,0.477c-0.113,0.165-0.227,0.326-0.34,0.492 c0.878-0.146,1.749-0.291,2.608-0.434C836.446,202.266,836.186,202.087,835.928,201.907z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M994.263,99.724c0.352,2.479,0.558,5.407,0.881,8.292c1.648-2.079,3.379-4.367,5.348-6.701 C998.366,100.797,996.287,100.267,994.263,99.724z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M981.394,117.059c-0.035-0.325-0.068-0.649-0.107-0.976c-0.581,0.258-1.161,0.517-1.741,0.773 C980.186,116.969,980.801,117.036,981.394,117.059z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1032.003,82.934c0.8-0.145,1.619-0.277,2.456-0.397c-0.778-0.488-1.565-0.963-2.356-1.432 c-0.248,0.344-0.493,0.684-0.739,1.025C1031.577,82.398,1031.79,82.665,1032.003,82.934z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1012.65,90.299c0.058-0.037,0.118-0.073,0.176-0.111c-3.83-6.84-6.753-14.054-8.898-21.566 c-1.223-0.399-2.45-0.782-3.679-1.156c-2.229,5.56-4.347,10.869-6.346,15.92C999.783,85.24,1006.03,87.522,1012.65,90.299z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M845.279,70.752c-0.04,0.045-0.08,0.091-0.12,0.136c0.16,0.173,0.316,0.343,0.474,0.516 C845.52,71.185,845.403,70.967,845.279,70.752z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M846.558,73.576c-0.202-0.597-0.441-1.176-0.711-1.737c0.07,0.989,0.147,2,0.23,3.03 C846.213,74.445,846.37,74.015,846.558,73.576z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1214.443,127.294c-1.328-1.442-2.669-3.005-4.02-4.678c0.668,1.746,1.33,3.507,1.988,5.278 C1213.09,127.696,1213.767,127.495,1214.443,127.294z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1203.025,113.6c0.805,2.495,1.672,5.087,2.609,7.783c0.432-1.156,0.835-2.303,1.21-3.443 c-1.142-1.569-2.291-3.219-3.446-4.957C1203.274,113.19,1203.149,113.396,1203.025,113.6z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1192.252,133.326c3.069-0.757,6.134-1.544,9.189-2.362c1.284-2.556,2.419-5.084,3.418-7.579 c-1.503-1.883-3.089-3.497-4.754-4.886C1196.938,123.902,1194.283,128.791,1192.252,133.326z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1096.636,109.663c0.349,0.114,0.697,0.226,1.044,0.337c-0.068-0.47-0.14-0.934-0.217-1.389 C1097.187,108.962,1096.91,109.315,1096.636,109.663z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1157.972,140.373c3.182-0.516,6.381-1.076,9.59-1.677c-3.693-9.553-3.412-18.991-0.755-28.031 c-6.604,0.217-13.77,0.758-21.513,1.023c1.462,4.015,2.964,8.182,4.5,12.479C1152.736,129.232,1155.477,134.629,1157.972,140.373 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1155.65,140.74c-2.01-5.748-3.961-11.269-5.857-16.573c-2.537-4.367-5.221-8.49-8.022-12.381 c-6.886,0.146-14.21,0.003-21.971-0.813c-0.852,1.394-1.743,2.88-2.677,4.467c1.42,7.075,2.874,11.078,3.452,12.47 c-0.589-1.185-2.256-4.199-5.623-8.724c-2.152,3.766-4.501,8.031-7.058,12.874c5.945-0.436,11.989-0.968,15.939,1.413 c9.526,5.748-0.249,9.449-9.845,11.026C1127.103,144.329,1141.184,142.996,1155.65,140.74z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1093.688,130.888c-0.004,0.019-0.007,0.038-0.011,0.057c0.443,0.151,0.93,0.319,1.467,0.509 c0.893,0.316,1.867,0.52,2.89,0.661c0.117-1.496,0.212-2.951,0.281-4.356C1096.454,129.084,1094.899,130.094,1093.688,130.888z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1203.399,112.984c1.155,1.738,2.303,3.388,3.446,4.957c0.271-0.822,0.529-1.64,0.771-2.453 c-0.768-1.885-1.549-3.743-2.347-5.572C1204.629,110.959,1204.009,111.977,1203.399,112.984z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1211.961,108.259c-1.003,2.19-2.008,4.389-3.002,6.592c-0.014,1.26-0.034,2.537-0.063,3.832 c0.514,1.302,1.023,2.613,1.528,3.933c1.351,1.673,2.692,3.236,4.02,4.678c1.047,1.136,2.084,2.196,3.115,3.193 c3.023,2.924,5.974,5.253,8.837,7.028c0.081,0.05,0.161,0.101,0.242,0.15c1.203,0.734,2.391,1.375,3.562,1.915 c1.513,0.224,3.053,0.464,4.644,0.735c1.721-1.14,3.453-2.292,5.196-3.46c-6.544-11.007-14.892-22.279-24.296-31.594 c-1.222,2.12-2.46,4.087-3.717,5.866C1212.002,110.16,1211.981,109.208,1211.961,108.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M921.725,218.852c1.684-0.934,3.212-1.955,4.594-3.058c1.456-1.162,2.754-2.412,3.897-3.747 c-6.728,2.736-13.807,5.592-21.214,8.557c0.123,0.947,0.244,1.888,0.37,2.845C914.198,222.315,918.281,220.763,921.725,218.852z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M906.391,199.001c0.383,3.448,0.793,6.97,1.226,10.557c0.434,3.594,0.894,7.263,1.38,10.999 c8.428-3.485,15.754-6.669,22.083-9.574c1.015-1.314,1.896-2.701,2.651-4.158c1.789-3.456,2.875-7.296,3.378-11.448 c0.248-2.053,0.354-4.183,0.334-6.379c-2.723-0.525-5.366-1.273-7.898-2.256c-4.428,2.055-9.073,4.196-13.939,6.427 c0.691,5.754,0.765,11.981,0.13,18.779c-3.076-5.408-6.121-10.269-9.113-14.673c-0.131,0.06-0.267,0.121-0.398,0.181 C906.279,197.972,906.334,198.481,906.391,199.001z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M927.932,186.08c-12.378-5.398-21.804-16.656-24.267-34.994c-0.474-0.145-0.952-0.291-1.432-0.437 c0.043,0.757,0.087,1.512,0.133,2.279c0.171,2.83,0.364,5.734,0.577,8.702c5.893,7.754,10.067,16.615,12.002,27.166 C918.944,187.791,923.384,186.862,927.932,186.08z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M923.157,69.411c3.439,3.682,6.686,7.107,9.758,10.292c1.275-0.467,2.668-0.899,4.174-1.287 c-0.136-1.509-0.248-3.121-0.338-4.829c-12.23-9.601-17.162-18.703-17.921-24.244c-6.454,3.145-12.551,6.241-18.332,9.272 c6.222,5.325,12.87,11.023,19.891,16.776C921.278,73.424,922.192,71.437,923.157,69.411z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M925.574,46.105c3.48,3.385,7.667,10.861,11.025,23.934c-0.001-0.028-0.002-0.055-0.003-0.083 c1.047-1.107,2.081-2.168,3.104-3.197c1.284-6.534,3.325-12.408,5.947-17.661c-2.568-1.762-5.267-3.301-8.095-4.584 c-2.637-0.295-5.107-0.479-7.415-0.559C928.594,44.673,927.082,45.389,925.574,46.105z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M846.488,79.566c0.26,0.075,0.508,0.148,0.764,0.222c0.219-2.268-0.057-4.329-0.694-6.213 c-0.188,0.439-0.345,0.869-0.481,1.292C846.2,76.39,846.336,77.955,846.488,79.566z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1457.509,875.409c-0.081,0.045-0.16,0.089-0.241,0.134c-2.129,1.839-4.136,3.293-6.002,4.367 c0.367,0.713,0.734,1.425,1.108,2.123c1.186,2.214,2.413,4.345,3.67,6.412c1.722-0.854,3.415-1.722,5.076-2.595 C1459.688,882.427,1458.403,878.892,1457.509,875.409z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1475.475,912.711c0.172,0.163,0.343,0.328,0.516,0.489c5.578,5.202,11.459,9.558,17.523,13.167 c1.126-0.738,2.228-1.404,3.307-2.001c-2.706-4.836-6.069-9.399-9.118-13.943c-2.796-4.178-4.147-6.892-5.558-8.588 c-1.059,0.218-2.104,0.433-3.125,0.641C1477.908,905.723,1476.729,909.13,1475.475,912.711z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1470.986,908.214c-0.211-1.047-0.667-2.345-1.295-3.848c-0.62,0.125-1.231,0.249-1.833,0.372 c0.538,0.622,1.079,1.236,1.624,1.839C1469.98,907.129,1470.481,907.677,1470.986,908.214z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1494.813,854.987c-1.054,2.961-2.242,6.534-3.64,10.81c5.005-4.693,9.471-9.957,12.776-15.647 C1501.042,851.675,1497.99,853.291,1494.813,854.987z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1478.65,761.314c0.559,0.125,1.109,0.252,1.665,0.377c1.528,0.344,3.046,0.691,4.554,1.041 c-0.607-0.756-1.219-1.489-1.836-2.201c-0.908,0.16-1.82,0.323-2.734,0.487C1479.748,761.117,1479.201,761.213,1478.65,761.314z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1436.856,1219.987c3.13,0.462,6.094,1.041,8.908,1.723c-0.274-3.077-0.671-6.176-1.202-9.301 c-1.298,0.127-2.615,0.269-3.951,0.427C1439.335,1214.628,1438.092,1216.963,1436.856,1219.987z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1424.405,1305.072c0.951-1.683,1.875-3.368,2.774-5.054c0.02-0.101,0.039-0.199,0.059-0.3 C1400.074,1302.827,1401.667,1313.7,1424.405,1305.072z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1435.902,1222.466c-0.172,0.472-0.343,0.958-0.515,1.458c0.152,0.16,0.3,0.316,0.452,0.475 c3.583,3.764,7.029,7.392,10.331,10.876c0.007-0.251,0.013-0.501,0.019-0.752 C1441.476,1230.379,1437.876,1226.346,1435.902,1222.466z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1489.128,768.476c-1.142-1.671-2.309-3.276-3.498-4.8c0.677,1.839,1.504,3.727,2.428,5.643 C1488.413,769.026,1488.77,768.745,1489.128,768.476z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1431.281,1238.661c1.215-5.177,2.401-9.518,3.582-13.161c0.133-0.409,0.265-0.81,0.398-1.202 c0.042-0.125,0.084-0.25,0.126-0.373c0.172-0.5,0.343-0.986,0.515-1.458c-0.247-0.485-0.469-0.968-0.664-1.449 c-1.934-0.595-3.801-1.169-5.604-1.721C1429.399,1227.36,1429.865,1234.307,1431.281,1238.661z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1440.612,1212.836c0.279-0.392,0.56-0.759,0.843-1.1c0.01-0.012,0.019-0.024,0.029-0.036 c0.719-0.865,1.451-1.572,2.2-2.147c-4.338,0.414-8.857,0.763-13.566,1.051c-0.035,0.439-0.069,0.877-0.1,1.313 c-0.056,0.771-0.107,1.535-0.153,2.294c1.673,1.791,3.376,3.636,5.096,5.512c0.64,0.083,1.27,0.172,1.896,0.265 C1438.092,1216.963,1439.335,1214.628,1440.612,1212.836z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1452.235,789.899c0.731,1.2,1.455,2.38,2.171,3.538c4.208-5.578,10.37-11.675,18.778-18.107 c3.088-1.275,5.462-0.382,7.24,1.98c0.746-0.9,1.478-1.763,2.202-2.586c-0.87-0.713-1.762-1.442-2.679-2.187 c-4.418-3.592-9.39-7.565-14.962-11.947c-1.848-1.453-3.754-2.947-5.736-4.491c-0.753,1.086-1.597,2.26-2.575,3.504 c-4.11,5.218-8.35,10.889-13.512,15.125c2.548,4.306,5,8.436,7.368,12.358C1451.103,788.037,1451.67,788.973,1452.235,789.899z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1468.426,788.503c-2.286,3.572-4.433,7.061-6.457,10.471c2.418-2.484,4.612-4.904,6.632-7.237 C1468.541,790.679,1468.482,789.606,1468.426,788.503z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1438.765,879.98c-0.747-0.839-1.368-1.9-1.849-3.182c-1.71,1.401-3.46,2.804-5.254,4.207 c-1.347,1.054-2.724,2.107-4.119,3.162c1.04,0.276,2.076,0.542,3.105,0.799c0.479-0.276,0.963-0.56,1.453-0.85 C1434.225,882.857,1436.451,881.477,1438.765,879.98z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1437.949,739.72c-2.163-1.644-4.382-3.326-6.663-5.05c-2.044-1.545-4.134-3.121-6.275-4.731 c-1.66-1.248-3.359-2.523-5.078-3.811c-0.156,1.668-0.364,3.459-0.622,5.366c0.892,2.569,1.735,5.157,2.536,7.76 c3.075,4.952,6.019,9.791,8.847,14.494c0.761,1.265,1.513,2.521,2.257,3.766c3.451-2.393,6.548-5.229,9.303-8.41 c-0.49,0.19-0.984,0.383-1.487,0.58c1.18-1.027,2.332-2.021,3.479-3.011c0.348-0.45,0.689-0.906,1.025-1.367 c-0.953-0.73-1.918-1.468-2.896-2.215C1440.927,741.986,1439.454,740.864,1437.949,739.72z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1499.481,831.807c3.485-3.23,6.862-6.454,10.08-9.635c-0.328-3.348-0.9-6.834-1.688-10.394 c-1.053,0.597-2.097,1.17-3.134,1.724C1502.314,820.512,1500.661,826.603,1499.481,831.807z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1475.475,912.711c1.254-3.581,2.433-6.988,3.545-10.235c-3.306,0.675-6.414,1.3-9.33,1.89 c0.628,1.503,1.084,2.801,1.295,3.848c0.625,3.098-0.907,3.983-6.546,1.38c0.221,0.5,0.442,1.003,0.661,1.496 c5.281,1.274,7.945,2.775,9.167,5.057c0.253-0.718,0.502-1.427,0.75-2.131C1475.17,913.581,1475.325,913.141,1475.475,912.711z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1487.164,931.114c0.853,1.83,0.938,5.113-0.189,9.849c5.473-2.266,10.325-4.318,14.617-6.164 c-0.999-2.597-2.064-5.1-3.199-7.445c-0.487-1.01-1.021-2.002-1.572-2.987c-1.079,0.596-2.181,1.262-3.307,2.001 C1491.477,927.704,1489.362,929.278,1487.164,931.114z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1488.049,958.158c-1.316-2.26-2.733-4.822-4.258-7.703c-0.757,1.824-1.633,3.765-2.639,5.826 c0.36,0.861,0.667,1.792,0.911,2.773c0.071,0.281,0.136,0.566,0.198,0.854C1484.082,959.456,1486.014,958.864,1488.049,958.158z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1498.159,846.828c-0.48-0.039-0.95-0.073-1.42-0.107c-1.852,11.785-2.195,11.551-17.265,1.073 c-8.136,12.934-15.605,21.988-21.98,27.556c0.005,0.019,0.01,0.039,0.015,0.058c0.894,3.483,2.179,7.018,3.611,10.442 c3.216-1.688,6.308-3.383,9.193-4.978c6.937-3.836,14.349-8.973,20.859-15.076c1.397-4.276,2.585-7.85,3.64-10.81 C1496.074,851.446,1497.145,848.781,1498.159,846.828z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1498.159,846.828c2.284,0.186,4.678,0.43,7.196,0.74c0.712-1.407,1.346-2.838,1.901-4.289 C1503.051,841.5,1500.799,841.746,1498.159,846.828z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1462.961,1062.634c-0.105-1.182-0.168-2.279-0.233-3.304c-0.08-1.267-0.163-2.426-0.333-3.507 c-0.309-1.97-0.907-3.68-2.295-5.309c-1.744,4.256-3.193,9.228-4.43,14.706c2.945,1.521,5.716,2.824,8.326,3.933 c-0.141-0.592-0.266-1.168-0.374-1.727C1463.283,1065.678,1463.09,1064.091,1462.961,1062.634z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1466.371,1029.411c-3.112,3.485-5.957,7.775-8.286,12.668c3.756-2.413,7.334-3.871,10.666-4.19 c-3.478,2.592-6.262,6.871-8.545,12.365c1.928,1.015,3.778,2.023,5.559,3.018c1.047,0.585,2.067,1.166,3.064,1.741 c1.448,0.836,2.843,1.659,4.187,2.467c1.595,0.959,3.116,1.895,4.568,2.804c4.109-3.988,7.892-8.353,11.337-12.995 C1483.156,1044.272,1475.663,1038.561,1466.371,1029.411z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1462.765,905.782c-0.786,0.163-1.551,0.324-2.302,0.483c-0.196,1.286-0.378,2.545-0.546,3.776 c1.96,0.34,3.678,0.685,5.184,1.048c-0.218-0.493-0.44-0.996-0.661-1.496C1463.89,908.345,1463.332,907.077,1462.765,905.782z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1478.177,1022.168c0.228-0.041,0.472-0.023,0.723,0.041c-1.814-1.842-3.707-3.765-5.681-5.773 c0.013,0.06,0.027,0.121,0.041,0.181C1475.254,1018.957,1476.874,1020.773,1478.177,1022.168z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1469.515,994.076c0.449,4.211,1.071,8.627,1.889,13.25c3.606-0.431,7.521-0.975,11.635-1.558 C1479.076,1001.738,1474.563,997.783,1469.515,994.076z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1437.683,960.414c0.511,0.226,1.038,0.442,1.59,0.64c5.497,1.976,11.79,0.059,17.81-2.562 c-1.059-1.494-2.085-2.939-3.076-4.335C1448.89,956.143,1443.453,958.228,1437.683,960.414z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1458.52,923.284c-0.03,0.428-0.054,0.842-0.08,1.262c7.541,5.067,12.54,8.254,15.49,10.003 c0.026-0.381,0.054-0.755,0.084-1.124C1470.704,931.003,1465.157,927.281,1458.52,923.284z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1474.218,931.121c-0.072,0.739-0.14,1.507-0.204,2.305c0.819,0.599,1.502,1.12,2.03,1.544 C1475.447,933.723,1474.839,932.443,1474.218,931.121z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1473.93,934.549c-0.187,2.693-0.296,5.713-0.227,9.106c0.997-2.693,2.077-5.005,3.181-6.935 c-0.116-0.241-0.233-0.484-0.351-0.728C1475.98,935.727,1475.123,935.256,1473.93,934.549z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1460.351,988.004c0.198,0.118,0.394,0.236,0.59,0.355c0.903-1.211,1.774-2.4,2.624-3.574 c-2.53,0.378-5.095,0.593-7.564,0.76c0.893,0.48,1.775,0.967,2.644,1.464C1459.219,987.337,1459.788,987.668,1460.351,988.004z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1468.752,984.359c0.054-0.234,0.097-0.46,0.143-0.688c-0.057,0.016-0.113,0.033-0.169,0.048 C1468.735,983.933,1468.742,984.144,1468.752,984.359z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1486.975,940.962c-0.641,2.694-1.676,5.859-3.183,9.493c1.525,2.881,2.942,5.443,4.258,7.703 c4.239,7.283,7.444,11.49,9.952,13.588c1.552,1.298,2.838,1.788,3.937,1.698c2.102-0.172,3.523-2.464,4.819-5.287 c0.895-1.948,1.732-4.147,2.695-6.073c-0.091-0.433-0.162-0.87-0.259-1.301c-0.15-0.68-0.31-1.36-0.47-2.06 c-1.816-7.741-4.179-16.247-7.131-23.925C1497.3,936.644,1492.448,938.697,1486.975,940.962z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1478.899,1022.208c1.354,1.375,2.67,2.71,3.938,3.994 C1483.146,1025.818,1480.801,1022.693,1478.899,1022.208z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1482.837,1026.202c-0.198,0.246-1.484-0.635-4.661-4.035c-1.406,0.251-2.245,2.719-0.85,10.3 c-1.602-5.506-2.946-10.787-4.068-15.852c-0.285-0.334-0.572-0.672-0.872-1.027c0.282,0.287,0.552,0.562,0.832,0.846 c-0.688-3.12-1.292-6.157-1.814-9.109c-5.751,0.688-10.709,1.086-14.401,0.895c-1.317,2.076-2.745,4.27-4.323,6.626 c4.937,5.606,9.495,10.431,13.691,14.564c9.292,9.151,16.786,14.861,22.55,17.878c2.13-2.87,4.129-5.845,5.983-8.915 C1491.396,1034.858,1487.389,1030.815,1482.837,1026.202z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1422.177,645.675c0.445,0.226,0.893,0.449,1.344,0.668c6.847,3.323,14.323,5.737,20.305,4.96 c1.333-0.173,2.591-0.504,3.751-1.019c-1.724-2.878-3.621-5.576-5.704-8.01c-2.36-2.76-14.81-15.95-19.36-15.36 c-1.219,0.156-2.472,0.987-3.727,2.19c0.406,0.013,0.802,0.025,1.213,0.039c-2.645,2.588-5.058,5.118-7.265,7.593 c-0.571,0.793-1.13,1.557-1.672,2.261C1414.142,641.156,1418.012,643.559,1422.177,645.675z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1381.963,1180.426c1.6-2.614,3.217-5.247,4.799-7.907c-1.721-1.452-3.406-2.844-5.05-4.17 c-1.391-0.228-2.71-0.448-3.975-0.663c-0.597,1.375-1.182,2.739-1.759,4.096 C1378.278,1174.982,1380.264,1177.853,1381.963,1180.426z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1441.67,1057.098c5.062,3.232,9.714,5.909,14,8.123c1.238-5.478,2.686-10.449,4.43-14.706 c0.036-0.087,0.07-0.175,0.106-0.26c2.282-5.494,5.067-9.772,8.545-12.365c-3.332,0.318-6.91,1.777-10.666,4.19 c-0.654,0.42-1.314,0.875-1.978,1.352c1.229,2.355,2.504,4.722,3.837,7.099c-3.031-1.103-5.996-2.098-8.911-3.014 c-0.246,0.219-0.493,0.449-0.74,0.674C1447.478,1050.759,1444.596,1053.748,1441.67,1057.098z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1405.043,1177.414c0.631-0.261,1.256-0.533,1.873-0.82c-0.806,0.131-1.605,0.261-2.433,0.393 C1404.672,1177.135,1404.856,1177.271,1405.043,1177.414z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1388.564,1169.443c-0.594,1.03-1.195,2.055-1.802,3.076c2.819,2.378,5.746,4.934,8.777,7.664 c1.916-0.327,3.817-0.766,5.694-1.36c0.11-0.035,0.215-0.08,0.324-0.115c1.555-2.312,3.128-4.501,4.715-6.579 C1399.597,1171.137,1393.724,1170.25,1388.564,1169.443z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1436.279,1063.602c-11.524,14.596-23.491,34.002-34.523,54.517c-0.533,0.991-1.063,1.984-1.591,2.98 c1.824,9.132,1.001,17.627-1.345,25.686c3.807,4.077,7.968,8.217,12.508,12.405c0.251-5.692,5.691-11.635,8.96-2.325 c1.971-1.76,3.946-3.379,5.918-4.864c2.696-2.03,5.386-3.813,8.054-5.372c0.7-1.865,1.315-3.762,1.804-5.695 c4.04-15.96-2.03-26.18-3.35-41.46c-0.904-10.366,0.251-13.254,5.519-15.819 C1437.716,1077.503,1437.079,1070.816,1436.279,1063.602z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1367.261,1202.487c0.747,0.44,1.479,0.876,2.194,1.309c0.224-0.575,0.457-1.149,0.698-1.723 C1369.171,1202.158,1368.203,1202.291,1367.261,1202.487z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1380.897,1211.422c0.277,0.208,0.556,0.415,0.826,0.622c0.386-0.547,0.771-1.09,1.167-1.657 C1382.173,1210.668,1381.511,1211.013,1380.897,1211.422z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1427.238,1299.718c-0.02,0.101-0.039,0.199-0.059,0.3c0.071-0.133,0.141-0.266,0.211-0.399 c-0.038-0.033-0.074-0.068-0.113-0.101C1427.264,1299.585,1427.252,1299.651,1427.238,1299.718z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1376.56,1304.349c-0.155,0.583-0.308,1.175-0.46,1.767c9.413,7.224,17.421,14.585,24.291,21.912 c5.739,0.255,8.603,0.64,8.157,2.027c0.336-0.474,0.684-0.93,1.016-1.412c0.366-0.532,0.728-1.063,1.09-1.595 C1400.185,1319.564,1388.837,1311.955,1376.56,1304.349z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1349.262,1288.316c-2.929-1.683-5.954-3.349-9.082-4.995c-0.012,0.027-0.023,0.054-0.035,0.081 c3.093,1.649,6.139,3.303,9.136,4.962C1349.274,1288.348,1349.268,1288.332,1349.262,1288.316z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1405.052,1333.193c0.212,0.244,0.426,0.489,0.636,0.733c0.716-0.927,1.418-1.874,2.114-2.833 C1407.217,1331.669,1406.304,1332.361,1405.052,1333.193z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1434.96,1219.722c0.516,0.563,1.026,1.115,1.547,1.686c-0.43-0.132-0.846-0.26-1.269-0.391 c0.195,0.48,0.417,0.964,0.664,1.449c1.974,3.88,5.575,7.912,10.287,12.057c0.094-4.229-0.04-8.498-0.424-12.813 c-2.814-0.682-5.778-1.262-8.908-1.723C1436.23,1219.895,1435.6,1219.805,1434.96,1219.722z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1422.057,1165.45c0.012,0.103,0.023,0.209,0.035,0.314c0.266-0.272,0.533-0.543,0.793-0.821 c-0.292,0.089-0.578,0.17-0.857,0.244C1422.038,1165.273,1422.047,1165.364,1422.057,1165.45z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1421.336,1205.237c1.751,1.811,3.524,3.661,5.33,5.571c0.525-0.028,1.032-0.062,1.552-0.091 c0.302-0.017,0.6-0.035,0.9-0.053c0.333-0.02,0.669-0.039,1-0.059c4.709-0.288,9.228-0.637,13.566-1.051 c0.117-0.011,0.232-0.023,0.349-0.034c-1.685-8.652-4.375-17.501-8.199-26.595c-1.878,1.21-6.796,3.031-13.315,4.893 c-0.05,1.237-0.111,2.513-0.182,3.83C1422.113,1195.771,1421.785,1200.288,1421.336,1205.237z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1418.731,1165.772c0.818-0.061,1.712-0.201,2.693-0.434c0.198-0.047,0.398-0.096,0.604-0.151 c-0.163-1.362-0.352-2.594-0.561-3.715c-0.343-1.835-0.741-3.359-1.18-4.608c-3.269-9.31-8.709-3.367-8.96,2.325 C1413.693,1161.372,1416.155,1163.566,1418.731,1165.772z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1455.67,1065.22c-4.286-2.214-8.938-4.891-14-8.123c-2.155-1.375-4.38-2.847-6.685-4.428 c0.444,3.532,0.848,6.948,1.218,10.26c0.025,0.224,0.051,0.451,0.076,0.673c0.801,7.214,1.437,13.901,1.953,20.052 c2.309-1.125,5.405-2.187,9.471-3.791c6.461-2.546,12.544-5.913,18.215-9.913c-0.63-0.253-1.273-0.521-1.923-0.797 C1461.386,1068.044,1458.615,1066.742,1455.67,1065.22z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1489.497,1004.851c0.78,1.782,1.594,3.596,2.449,5.449c-1.141-1.809-2.266-3.578-3.378-5.318 c-1.875,0.265-3.721,0.529-5.53,0.786c-4.113,0.583-8.029,1.127-11.635,1.558c0.522,2.952,1.126,5.989,1.814,9.109 c1.975,2.008,3.867,3.931,5.681,5.773c1.901,0.484,4.247,3.61,3.938,3.994c4.552,4.613,8.558,8.656,12.068,12.171 c3.759-6.222,6.939-12.814,9.471-19.624c0.225-1.323,0.636-2.538,1.267-3.615c1.401-4.188,2.554-8.443,3.453-12.735 C1502.516,1003.056,1495.857,1003.954,1489.497,1004.851z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1473.259,1016.616c-0.013-0.06-0.027-0.121-0.041-0.181c-0.279-0.284-0.549-0.558-0.832-0.846 C1472.686,1015.945,1472.974,1016.282,1473.259,1016.616z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1473.259,1016.616c1.122,5.065,2.466,10.345,4.068,15.852c-1.395-7.582-0.555-10.049,0.85-10.3 C1476.874,1020.773,1475.254,1018.957,1473.259,1016.616z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1460.942,988.358c-2.154,2.889-4.462,5.882-6.936,8.982c-6.758,7.697-4.462,10.493,2.997,10.88 c3.692,0.192,8.65-0.207,14.401-0.895c-0.818-4.623-1.439-9.039-1.889-13.25c-0.234-2.19-0.421-4.324-0.564-6.403 c-0.077-1.12-0.146-2.227-0.198-3.315c-0.01-0.215-0.017-0.425-0.027-0.639c-1.672,0.461-3.407,0.803-5.16,1.065 C1462.716,985.958,1461.845,987.147,1460.942,988.358z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1486.975,940.962c1.126-4.735,1.042-8.019,0.189-9.849c-1.593-3.417-5.858-1.764-9.904,4.966 c0.104,0.144,0.074,0.201-0.097,0.163c-0.093,0.157-0.186,0.315-0.279,0.478c-1.104,1.93-2.183,4.242-3.181,6.935 c0.05,2.437,0.191,5.064,0.464,7.905c1.437-0.164,2.714-0.023,3.776,0.574c1.381,0.779,2.432,2.287,3.21,4.147 c1.006-2.06,1.882-4.002,2.639-5.826C1485.299,946.821,1486.334,943.656,1486.975,940.962z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1478.177,1022.168c3.177,3.4,4.463,4.28,4.661,4.035c-1.268-1.284-2.584-2.62-3.938-3.994 C1478.648,1022.144,1478.405,1022.127,1478.177,1022.168z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1476.043,934.97c-0.528-0.425-1.211-0.945-2.03-1.544c-0.029,0.368-0.057,0.743-0.084,1.124 c1.193,0.707,2.05,1.178,2.603,1.442c0.292,0.139,0.502,0.222,0.629,0.251c0.171,0.038,0.202-0.019,0.097-0.163 C1477.112,935.874,1476.695,935.494,1476.043,934.97z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1480.447,992.485c2.614,3.959,5.322,8.118,8.121,12.496c1.112,1.74,2.237,3.509,3.378,5.318 c-0.855-1.854-1.669-3.667-2.449-5.449c-1.652-3.774-3.142-7.391-4.48-10.854c-2.073-5.367-3.787-10.369-5.198-15.035 c-0.01-0.034-0.02-0.067-0.03-0.1c-0.146-0.484-0.292-0.967-0.431-1.443c-1.629,1.976-3.658,3.456-5.939,4.567 C1475.678,985.315,1478.022,988.814,1480.447,992.485z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1432.313,885.372c-0.553-0.133-1.108-0.269-1.665-0.408c-1.029-0.256-2.065-0.523-3.105-0.799 c-1.735-0.459-3.485-0.946-5.25-1.46c-5.951-1.734-12.075-3.782-18.372-6.193c-2.163-0.828-4.348-1.702-6.552-2.616 c-3.299-1.369-6.644-2.839-10.032-4.41c-0.886,0.917-1.818,1.861-2.784,2.824c1.14,0.829,2.264,1.645,3.38,2.454 c0.13,0.094,0.264,0.191,0.393,0.286c4.214,3.057,8.242,5.969,12.106,8.753c8.165-3.923,14.03-4.02,15.934,5.161 c-1.381,0.397-3.069,1.315-5.027,2.673c0.431,0.308,0.869,0.622,1.295,0.927c2.745,1.963,5.378,3.839,7.92,5.646 c0.309,0.219,0.625,0.444,0.931,0.662c1.091,0.074,2.112,0.087,3.039,0.012c9.461-0.779,19.872-4.795,29.594-9.49 c-1.592-0.203-3.2-0.427-4.826-0.675C1443.822,887.883,1438.159,886.779,1432.313,885.372z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1450.242,908.619c0.964-0.25,1.975-0.499,3.03-0.75c2.195-0.522,4.591-1.052,7.191-1.603 c0.751-0.159,1.516-0.32,2.302-0.483c1.075-0.223,2.181-0.451,3.321-0.684c0.582-0.119,1.173-0.239,1.772-0.361 c0.602-0.122,1.214-0.246,1.833-0.372c2.916-0.59,6.024-1.216,9.33-1.89c1.021-0.208,2.066-0.423,3.125-0.641 c-1.773-2.133-3.641-2.658-8.592-2.452c-9.072,0.369-18.201,5.27-27.309,8.73C1447.64,908.285,1448.974,908.454,1450.242,908.619 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1473.703,943.655c-0.069-3.393,0.04-6.413,0.227-9.106c-2.95-1.748-7.949-4.936-15.49-10.003 c-0.526-0.353-1.065-0.716-1.616-1.088c-2.944-1.987-6.252-4.244-9.936-6.783c3.328,1.774,6.563,3.604,9.606,5.401 c0.685,0.405,1.361,0.807,2.025,1.208c6.637,3.996,12.184,7.718,15.494,10.141c0.063-0.797,0.132-1.566,0.204-2.305 c0.714-7.35,1.705-11.88,0.05-14.973c-1.221-2.283-3.885-3.784-9.167-5.057c-1.506-0.363-3.224-0.709-5.184-1.048 c-1.894-0.328-4.017-0.651-6.384-0.981c-1.048-0.146-2.143-0.293-3.291-0.442c-4.104,1.063-7.383,2.128-9.878,3.327 c-0.06,0.029-0.116,0.058-0.175,0.087c-0.659-0.459-1.33-0.926-2.009-1.401c-0.843,0.193-1.685,0.355-2.527,0.488 c1.109,0.501,2.221,1.018,3.331,1.549c-5.353,3.073-6.09,7.107-2.895,14.03c1.896,4.108,5.176,9.236,9.7,15.785 c2.398,3.471,5.144,7.341,8.219,11.671c0.991,1.396,2.018,2.841,3.076,4.335c6.451-2.81,12.582-6.417,17.084-6.931 C1473.894,948.719,1473.753,946.092,1473.703,943.655z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1443.678,835.482c-1.293,3.269-2.422,6.393-3.387,9.358c-1.338,4.111-2.365,7.917-3.108,11.409 c-1.276,6-1.704,11.058-1.384,15.07c0.17,2.122,0.546,3.956,1.118,5.479c0.482,1.282,1.102,2.343,1.849,3.182 c2.093,2.351,5.192,2.924,9.097,1.529c1.076-0.384,2.21-0.912,3.404-1.599c1.866-1.074,3.873-2.528,6.002-4.367 c0.076-0.065,0.15-0.126,0.226-0.192c6.375-5.568,13.843-14.622,21.98-27.556c-6.99-4.86-17.159-11.928-32.107-21.018 C1446.011,829.785,1444.783,832.687,1443.678,835.482z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1447.328,812.15c5.706-4.492,10.502-8.925,14.641-13.176c2.023-3.409,4.171-6.898,6.457-10.471 c0.057,1.102,0.115,2.175,0.175,3.233c4.658-5.381,8.397-10.296,11.823-14.426c-1.778-2.362-4.152-3.255-7.24-1.98 c-8.408,6.431-14.57,12.529-18.778,18.107c-1.44,1.909-2.65,3.756-3.642,5.535C1447.98,803.963,1446.916,808.412,1447.328,812.15 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1504.739,813.501c1.037-0.553,2.081-1.126,3.134-1.724c-0.303-1.369-0.639-2.748-1.003-4.135 C1506.099,809.663,1505.391,811.615,1504.739,813.501z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1455.292,677.034c-3.159,1.464-6.388,2.944-9.692,4.439c1.513,10.653-0.85,19.828-3.518,27.274 c-0.327,0.911-0.657,1.796-0.986,2.655c-2.638,6.888-5.142,12.08-4.138,15.341c0.607,1.971,2.499,3.237,6.42,3.744 c0.428,0.055,0.88,0.102,1.358,0.139c1.303,0.101,2.792,0.136,4.49,0.1c1.266-0.027,2.649-0.092,4.154-0.196 c2.31-5.703,3.979-11.73,5.045-17.784C1456.2,704.248,1454.791,692.736,1455.292,677.034z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1482.626,774.725c-0.724,0.823-1.456,1.686-2.202,2.586c-3.425,4.131-7.165,9.045-11.823,14.426 c-2.02,2.333-4.214,4.753-6.632,7.237c-4.138,4.251-8.935,8.685-14.641,13.176c-2.34,1.842-4.838,3.693-7.501,5.546 c-1.176,0.818-2.372,1.635-3.616,2.452c1.822,1.058,3.585,2.094,5.294,3.107c2.034,1.207,3.982,2.378,5.861,3.521 c14.948,9.09,25.117,16.158,32.107,21.018c15.071,10.478,15.413,10.712,17.265-1.073c0.588-3.74,1.33-8.696,2.742-14.915 c1.181-5.203,2.833-11.294,5.258-18.305c0.652-1.886,1.361-3.838,2.131-5.858c-3.587-13.638-10.064-27.928-17.741-39.167 c-0.359,0.269-0.715,0.55-1.069,0.843C1486.232,770.831,1484.454,772.646,1482.626,774.725z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1441.471,667.487c0.576,1.277,1.086,2.536,1.542,3.78c0.069,0.187,0.137,0.375,0.203,0.561 c0.549-1.73,1.094-3.406,1.637-5.057C1443.667,666.706,1442.537,666.93,1441.471,667.487z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1442.255,749.104c0.685-0.79,1.349-1.6,1.992-2.431c-1.147,0.99-2.299,1.984-3.479,3.011 C1441.272,749.487,1441.766,749.294,1442.255,749.104z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1458.425,712.746c1.342-7.625,1.729-15.291,1.228-22.402c-0.322-4.622-1.044-9.475-2.135-14.342 c-0.735,0.343-1.483,0.688-2.226,1.032C1454.791,692.736,1456.2,704.248,1458.425,712.746z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1444.853,666.772c-0.543,1.651-1.088,3.327-1.637,5.057c-1.249,3.933-2.513,8.071-3.792,12.422 c1.546-0.69,3.076-1.376,4.592-2.06c0.534-0.241,1.055-0.479,1.585-0.718c3.304-1.495,6.533-2.975,9.692-4.439 c0.743-0.344,1.491-0.69,2.226-1.032c-1.735-7.739-4.436-15.501-8.097-22.427c-0.58,1.586-1.165,3.225-1.752,4.902 C1446.739,661.126,1445.801,663.89,1444.853,666.772z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1353.366,498.553c1.465,5.331,2.369,10.017,2.745,14.119c0.943,0.288,1.928,0.569,2.949,0.845 c0.077-4.625,0.718-9.623,2.043-14.974C1358.2,498.441,1355.624,498.449,1353.366,498.553z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1404.427,512.919c-0.52-0.586-1.049-1.178-1.585-1.776c0.566,1.776,1.056,3.492,1.476,5.149 C1404.357,515.185,1404.393,514.058,1404.427,512.919z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1428.519,531.355c0.43,7.567-2.319,6.215-8.083-0.036c-4.968-0.16-9.666-0.566-14.143-1.149 c0.071,7.246-1.705,12.671-4.604,16.397c-0.639,3.936-1.398,7.538-2.289,10.843c9.761,2.097,19.366,4.446,27.743,6.743 c2.134-10.797,3.31-21.832,3.591-32.863C1429.99,531.317,1429.252,531.339,1428.519,531.355z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1320.559,500.881c-0.027,0.032-0.055,0.063-0.082,0.095c1.32,3.147,2.339,6.371,3.102,9.643 c0.609-1.227,1.15-2.471,1.634-3.72C1323.697,504.984,1322.146,502.979,1320.559,500.881z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1279.905,764.418c-0.502,0.695-0.999,1.397-1.489,2.097c0.661-0.472,1.326-0.946,2.018-1.432 C1280.263,764.859,1280.08,764.64,1279.905,764.418z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1315.388,837.485c-2.51-4.559-5.176-9.349-8.01-14.387c-0.275,4.972-0.871,9.95-1.736,14.745 C1308.883,837.67,1312.135,837.553,1315.388,837.485z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1245.18,750.756c0.801-1.432,1.636-2.885,2.503-4.358c-2.079-0.512-4.179-1.022-6.304-1.53 C1242.481,746.747,1243.755,748.714,1245.18,750.756z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1307.4,822.701c4.813,0.775,9.552,1.448,14.192,2.044c-4.746-3.717-9.465-7.52-14.107-11.37 C1307.594,816.447,1307.563,819.571,1307.4,822.701z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1363.651,789.865c0.258-1.025,0.509-2.031,0.754-3.019c-2.869-1.862-7.85-4.438-14.779-7.509 c1.219,2.424,2.424,5.074,3.465,7.75c3.241,1.02,5.912,1.766,8.025,2.259C1362.076,789.57,1362.918,789.742,1363.651,789.865z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1249.438,743.444c0.076-0.124,0.156-0.252,0.232-0.376c-1.165-0.423-2.357-0.826-3.578-1.207 C1247.218,742.395,1248.329,742.92,1249.438,743.444z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1292.683,838.895c1.153-0.128,2.308-0.248,3.469-0.357c0.477-0.045,0.956-0.087,1.434-0.128 c0.105-0.009,0.21-0.019,0.315-0.028c-2.139-0.804-3.876-1.992-5.115-3.648c-0.411,1.555-0.858,2.987-1.329,4.298 C1291.865,838.984,1292.274,838.94,1292.683,838.895z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1295.309,809.775c0.673-1.531,1.419-3.13,2.25-4.807c-0.936-0.81-1.865-1.62-2.791-2.431 C1295.047,804.985,1295.223,807.403,1295.309,809.775z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1284.585,842.057c-0.938,0.18-1.919,0.333-2.933,0.457c2.277,8.297,6.611,5.41,9.804-3.481 c-3.137,0.367-6.242,0.807-9.303,1.333C1282.956,840.927,1283.764,841.491,1284.585,842.057z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1387.985,868.809c3.894,1.949,7.559,3.605,10.934,4.917c1.428,0.555,2.801,1.044,4.123,1.474 c2.985,0.971,5.688,1.618,8.062,1.898c6.3,0.744,10.276-1.078,11.049-6.165c0.051-0.336,0.086-0.689,0.109-1.053 c0.187-2.987-0.576-6.937-2.439-11.972c-1.443-3.899-3.547-8.45-6.368-13.695c-0.473-0.879-0.96-1.772-1.474-2.691 c-0.906-1.62-1.875-3.302-2.911-5.048c-0.814,0.292-1.694,0.548-2.607,0.786c-1.101,1.684-2.224,3.402-3.377,5.127 C1404.4,848.026,1399.953,856.287,1387.985,868.809z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1303.594,767.948c-2.846-2.702-5.419-5.441-7.765-8.211c-3.062-0.951-6.211-1.908-9.448-2.868 c-0.811,0.686-1.638,1.52-2.469,2.455c2.771,1.24,5.465,2.435,8.089,3.589C1296.036,764.688,1299.903,766.368,1303.594,767.948z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1323.74,776.316c0.189,0.076,0.376,0.151,0.564,0.226c-0.668-0.986-1.319-1.922-1.951-2.796 c-0.901-0.461-1.699-1.504-2.415-3.115c-0.988-1.163-1.911-2.087-2.754-2.688c-0.088-0.063-0.19-0.134-0.289-0.202 C1319.198,770.496,1321.481,773.35,1323.74,776.316z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1293.477,801.406c0.428,0.377,0.86,0.754,1.29,1.131c-0.057-0.497-0.111-0.993-0.176-1.492 c-0.988-7.561-2.981-15.343-6.324-22.764c0.844,7.301,1.351,13.909,1.556,19.875 C1291.031,799.24,1292.249,800.323,1293.477,801.406z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1337.771,395.7c0.967-1.618,1.999-3.328,3.088-5.126c-1.408-0.244-2.879-0.486-4.389-0.727 c-1.908,0.93-4.048,2.065-6.273,3.211C1332.864,394.039,1335.389,394.92,1337.771,395.7z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1306.993,383.53c1.136,0.506,2.253,0.999,3.354,1.48c1.852-4.83,4.492-11.017,5.386-13.036 c3.57-8.07,3.75-3.85,10.69-8.85c6.335-4.57,7.231-7.888,6.926-13.555C1326.549,348.545,1318.435,357.167,1306.993,383.53z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M1306.353,354.754c-0.533,1.593-1.056,3.15-1.566,4.67c-3.909,11.643-7.038,20.96-7.838,25.589 c0.851,0.464,1.763,0.981,2.739,1.555c0.985-1.023,2.236-2.54,3.796-4.615c0.299,0.136,0.587,0.264,0.884,0.398 c1.831-38.565,12.664-44.778,22.705-57.908c-0.501-7.434,2.293-12.989,5.213-12.242c-0.033-0.88-0.072-1.76-0.125-2.639 c-5.308,4.92-10.783,10.151-16.41,15.696C1312.723,335.554,1309.38,345.707,1306.353,354.754z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1321.523,742.357c8.246-0.854,15.591-1.37,22.156-1.599c0.875-2.01,1.778-4.116,2.711-6.316 c0.155-0.365,0.31-0.731,0.467-1.102c0.418-0.99,0.843-2.002,1.274-3.03c1.612-3.852,3.307-7.963,5.093-12.351 c0.374-0.918,0.752-1.851,1.134-2.792c1.304-3.217,2.653-6.57,4.052-10.066c-5.162,1.163-9.845,2.321-14.101,3.462 c-0.046,0.237-0.086,0.471-0.138,0.711c-0.025-0.221-0.052-0.434-0.078-0.653c-14.502,3.901-24.016,7.603-30.559,10.608 c0.316,4.844,0.626,9.391,0.94,13.626c0.172,2.318,0.345,4.546,0.52,6.678c0.165,1.999,0.332,3.912,0.503,5.745 c0.019,0.206,0.038,0.412,0.058,0.616c0.024,0.257,0.049,0.513,0.073,0.767c0.085,0.876,0.171,1.735,0.258,2.571 c1.396,0.645,2.786,1.318,4.159,2.046C1319.948,748.68,1320.408,745.726,1321.523,742.357z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1380.702,651.327c3.699,0.183,7.572,0.362,11.649,0.538c-2.992-2.302-5.805-4.32-8.469-6.109 c-2.358,0.514-4.781,1.121-7.223,1.8C1378.035,648.776,1379.409,650.035,1380.702,651.327z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1392.098,673.622c-1.639,1.497-3.409,3.061-5.311,4.694c1.35,1.133,2.682,2.394,3.984,3.747 C1391.011,679.354,1391.435,676.541,1392.098,673.622z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1388.285,723.769c0.877-0.87,1.808-1.801,2.779-2.765c1.13-3.578,1.253-7.454,0.994-11.683 c-0.491-0.798-0.99-1.589-1.5-2.371c-2.258,4.454-4.07,8.129-5.489,11.13C1386.22,719.984,1387.29,721.885,1388.285,723.769z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1369.984,698.577c1.115,1.13,2.193,2.279,3.238,3.444c3.859-0.741,7.936-1.479,12.234-2.211 c-0.744-0.942-1.503-1.87-2.282-2.778c-2.348-2.724-10.716-9.517-15.5-15.302c-0.655,1.663-1.299,3.298-1.937,4.914 C1366.948,690.451,1368.339,694.423,1369.984,698.577z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1379.78,733.788c2.118,5.228,4.072,9.587,5.854,13.171c5.063,3.155,7.237,7.292,7.56,11.968 c2.17,2.198,3.684,2.211,4.478,0.588c1.057-2.162,0.836-7.222-0.813-13.869c-4.216-5.642-7.905-11.047-11.153-16.234 C1384.115,730.927,1382.172,732.385,1379.78,733.788z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1407.856,642.553c0.126-0.16,0.246-0.319,0.374-0.479c-0.887,0.763-1.973,1.671-3.178,2.601 c0.323,0.1,0.633,0.208,0.926,0.329C1406.581,644.193,1407.207,643.376,1407.856,642.553z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1365.489,636.2c5.043,1.62,11.121,4.673,18.392,9.557c0.938-0.204,1.865-0.393,2.78-0.568 c0.036-4.131,7.043-8.525,9.282-10.796c1.794-1.824,3.433-3.717,4.968-5.658C1370.673,628.563,1363.564,631.412,1365.489,636.2z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1419.999,629.143c-0.411-0.014-0.807-0.026-1.213-0.039c-2.062,1.976-4.127,4.959-6.052,7.632 C1414.94,634.26,1417.354,631.73,1419.999,629.143z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1322.352,773.746c-0.84-1.162-1.647-2.211-2.415-3.115 C1320.653,772.242,1321.451,773.285,1322.352,773.746z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1299.958,430.984c2.01,0.273,4.028,0.563,6.009,0.889c-1.931-1.584-3.942-3.246-6.029-4.979 C1299.955,428.262,1299.96,429.627,1299.958,430.984z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1282.857,428.117c-0.602-4.347-1.492-8.898-2.694-13.704c-0.072-0.289-0.147-0.57-0.22-0.855 c-2.518,2.749-3.912,5.006-4.393,6.871C1274.518,424.434,1277.663,426.652,1282.857,428.117z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1329.375,441.573c-0.466-0.917-0.937-1.843-1.416-2.776c-0.33,1.097-0.649,2.203-0.957,3.32 C1327.771,441.916,1328.563,441.735,1329.375,441.573z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1321.269,444.147c1.6-0.742,3.344-1.383,5.234-1.902c-1.692-5.141-7.926-7.762-15.496-9.42 c-1.629-0.357-3.32-0.668-5.04-0.952c1.091,0.895,2.165,1.774,3.208,2.623C1313.632,438.125,1317.646,441.327,1321.269,444.147z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1352.554,416.732c-4.025,1.014-7.491,1.803-10.442,2.351c2.959,3.306,5.783,6.538,8.501,9.71 C1350.708,424.694,1351.246,420.59,1352.554,416.732z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1340.859,390.575c0.586-0.967,1.188-1.96,1.807-2.98c-0.699,0.124-1.399,0.28-2.102,0.508 c-1.161,0.376-2.552,0.994-4.094,1.744C1337.98,390.089,1339.451,390.331,1340.859,390.575z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1322.808,614.525c-0.598,0.168-1.188,0.336-1.774,0.506c1.309,0.55,2.567,1.106,3.778,1.668 C1324.286,615.988,1323.624,615.263,1322.808,614.525z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1331.44,667.797c5.381-6.183,8.678-12.641,8.454-19.287c-0.441-0.045-0.871-0.09-1.299-0.135 c-6.801-0.716-12.071-1.476-16.078-2.284c0.273,5.067,0.368,10.41,0.248,15.915C1325.99,662.96,1328.88,664.841,1331.44,667.797z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1290.758,649.058c-10.849,10.058-14.872,14.234,4.18,19.204c4.969-2.566,9.565-4.528,13.796-5.718 c0.106-2.49,0.151-4.99,0.12-7.501c-0.087-7.028-0.657-14.196-1.651-21.426c-0.343-0.015-0.701-0.037-1.046-0.053 C1300.625,639.98,1295.136,644.999,1290.758,649.058z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1358.751,650.062c2.033,0.138,4.146,0.274,6.344,0.409c0.633,0.039,1.271,0.078,1.919,0.116 c1.888-0.66,3.8-1.29,5.716-1.879c1.311-0.403,2.623-0.788,3.929-1.151c2.442-0.679,4.865-1.286,7.223-1.8 c-7.271-4.884-13.349-7.936-18.392-9.557c-7.219-2.32-12.324-1.72-15.759,0.643c2.538,4.006,4.398,8.32,5.961,13.005 C1356.691,649.92,1357.709,649.991,1358.751,650.062z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1392.351,651.866c-4.076-0.176-7.949-0.356-11.649-0.538c-3.219-0.159-6.299-0.321-9.244-0.485 c-1.515-0.084-3.001-0.17-4.445-0.255c-1.207,0.422-2.404,0.856-3.585,1.302c-2.172,0.819-4.291,1.674-6.322,2.551 c2.197,7.66,3.976,16.266,6.774,26.055c1.056,0.167,2.124,0.335,3.205,0.506c-3.769-4.805-4.693-8.738,3.018-8.738 c1.65,0,3.69,0.18,6.18,0.57c3.507,0.546,7.066,2.597,10.504,5.482c1.903-1.633,3.673-3.197,5.311-4.694 c3.95-3.607,7.155-6.828,9.687-9.689c5.312-6.003,7.68-10.43,7.857-13.576c0.073-1.296-0.222-2.376-0.842-3.257 c-0.629-0.895-1.587-1.588-2.822-2.096c-0.292-0.12-0.603-0.229-0.926-0.329c-4.398,3.393-10.415,7.086-14.439,5.139 c-0.9-0.43-1.62-0.89-2.19-1.35c-1.267-1.04-1.772-2.147-1.762-3.274c-0.915,0.174-1.842,0.363-2.78,0.568 C1386.546,647.546,1389.359,649.564,1392.351,651.866z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1304.726,1358.477c0.611,1.197,1.217,2.383,1.819,3.561c0.511,1.001,1.018,1.991,1.523,2.979 c0.642-1.583,1.287-3.191,1.935-4.819c-0.613-0.946-1.228-1.899-1.848-2.867c-3.051-4.763-6.188-9.798-9.41-15.103 c-0.629,0.248-1.27,0.495-1.919,0.741C1299.536,1348.304,1302.17,1353.47,1304.726,1358.477z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1349.815,909.697c0.01,0.036,0.019,0.073,0.029,0.109c5.038-0.924,10.153-2.84,15.196-5.269 c-2.864,0.802-5.887,1.759-9.082,2.882C1353.977,908.114,1351.929,908.875,1349.815,909.697z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1317.643,926.523c0.996-1.157,1.936-2.341,2.807-3.544c-1.646,0.826-3.331,1.686-5.037,2.563 C1316.146,925.862,1316.891,926.191,1317.643,926.523z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1416.221,1040.345c3.521,0.309,7.154,0.77,10.895,1.387c0.052,0.009,0.105,0.018,0.157,0.026 c6.988,1.161,14.362,2.878,22.154,5.254c0.532,0.162,1.07,0.335,1.606,0.503c2.915,0.916,5.88,1.911,8.911,3.014 c-1.333-2.377-2.608-4.743-3.837-7.099c-9.699-18.588-16.279-36.458-21.298-52.88c-0.357-1.168-0.707-2.33-1.049-3.484 c-1.637,0.611-3.031,1.499-4.047,2.816c-3.46,4.5-3.73,17.91-6.53,24.06c-4.281,9.397-10.904,18.269-18.963,25.899 C1408.076,1039.822,1412.073,1039.98,1416.221,1040.345z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1358.56,1040.495c-1.298,1.319-2.559,2.651-3.777,3.996c0.165,0.77,0.289,1.595,0.378,2.464 c0.139-0.044,0.282-0.088,0.412-0.132c1.6-0.539,3.192-1.105,4.777-1.685C1359.721,1043.567,1359.129,1042.023,1358.56,1040.495z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1320.983,977.988c2.133,2.447,4.215,4.736,6.244,6.867c1.424-0.741,2.836-1.541,4.233-2.416 c-2.41-2.287-5.064-4.512-7.931-6.61C1322.681,976.553,1321.832,977.274,1320.983,977.988z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1328.05,1026.198c-18.185-2.293-32.892-4.943-44.661-7.658c0.004,0.031,0.008,0.063,0.012,0.095 c4.803,2.019,10.916,4.843,18.567,8.568c1.803,1.028,3.566,2.048,5.309,3.063c12.616-1.938,27.787-4.067,45.924-6.624 c-1.91-7.297-3.106-13.955-3.778-19.951c-1.525-0.943-3.102-2.001-4.73-3.185c0.499,1.236,0.885,2.433,1.15,3.579 c0.494,2.135,0.568,4.09,0.178,5.781c-0.091,0.394-0.198,0.78-0.34,1.144c-1.178,3.028-4.148,4.982-9.207,5.278 c-0.244,0.014-0.478,0.036-0.731,0.042c-0.659,0.017-1.365-0.004-2.091-0.042c-5.28-0.276-12.343-2.019-21.449-5.7 c-1.12,0.397-2.263,0.77-3.423,1.125C1319.766,1016.444,1326.834,1021.589,1328.05,1026.198z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1369.897,1009.607c-1.424,0.264-2.984,0.328-4.677,0.172c1.936,3.547,3.881,7.346,5.801,11.342 c0.652-0.093,1.296-0.184,1.954-0.278c1.234,1.412,2.32,2.579,3.275,3.526c1.599-1.366,3.195-2.723,4.779-4.072 c-0.94-3.659-2.563-8.511-4.588-14.107c-0.918,0.943-1.984,1.724-3.192,2.32 C1372.233,1009.012,1371.115,1009.381,1369.897,1009.607z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1419.016,933.358c-2.146-6.488-4.487-12.142-7.334-16.818c-0.539-0.886-1.097-1.736-1.674-2.55 c-1.596,0.839-3.248,1.966-5.014,3.493c-3.71,3.2-7.18,6.6-10.47,10.13c-1.83,1.961-3.602,3.964-5.333,5.997 c3.863,3.689,7.066,7.582,9.61,11.492c-0.627-6.45-0.311-13.418,2.613-16.499c2.05-2.15,5.36-2.4,10.5,0.74 c4.115,2.51,6.747,6.083,8.958,9.966C1420.265,937.254,1419.648,935.272,1419.016,933.358z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1381.03,1020.297c1.869,7.278,1.027,9.828-4.779,4.072c-0.884,0.755-1.768,1.514-2.651,2.275 c1.545,3.405,3.062,6.922,4.529,10.523c8.311-4.613,15.875-10.408,22.014-18.094c6.34-7.94,10.72-17.24,13.52-26.98 c1.598-5.559,0.89-10.022-0.865-14.143C1413.294,992.408,1397.914,1005.913,1381.03,1020.297z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1377.345,924.4c0.187-0.349,0.372-0.699,0.549-1.051c-0.28,0.287-0.561,0.575-0.843,0.864 C1377.15,924.275,1377.247,924.338,1377.345,924.4z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1341.851,994.964c-0.334-0.544-0.681-1.089-1.05-1.639c-0.812,0.726-1.638,1.437-2.474,2.137 c2.201,1.883,4.323,3.561,6.365,5.044C1343.973,998.726,1343.021,996.867,1341.851,994.964z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1273.382,1391.355c-0.154-0.025-0.306-0.049-0.46-0.075c0.204,0.828,0.403,1.65,0.614,2.489 C1273.487,1392.95,1273.436,1392.146,1273.382,1391.355z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1317.958,1339.686c-0.419,1.098-0.837,2.192-1.254,3.282c1.092,1.056,2.189,2.118,3.315,3.212 c-1.313-0.573-2.605-1.149-3.883-1.728c-1.528,3.985-3.044,7.909-4.547,11.735c-0.53,1.35-1.059,2.687-1.585,4.011 c-0.648,1.628-1.293,3.236-1.935,4.819c-0.929,2.29-1.852,4.53-2.769,6.712c-1.108,2.638-2.207,5.193-3.295,7.645 c8.904,0.23,17.708-0.261,26.301-1.515c5.031-3.071,9.794-5.942,14.314-8.641 C1332.163,1357.271,1323.993,1348.052,1317.958,1339.686z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1308.737,1270.096c7.181,19.115,15.137,29.089,21.989,36.293c3.125-7.955,6.27-15.709,9.419-22.988 c0.012-0.027,0.023-0.054,0.035-0.081c1.126-2.602,2.253-5.143,3.379-7.609c-0.474-0.653-0.953-1.315-1.442-1.998 c-0.102-0.088-0.197-0.17-0.296-0.256c-3.537-0.69-11.471-3.639-26.953-10.823c-4.529,2.567-8.714,5.161-12.579,7.806 c-2.016,1.379-3.942,2.773-5.781,4.183c-0.774,0.594-1.533,1.191-2.277,1.791c4.167,6.352,7.724,13.517,10.51,21.516 C1305.06,1290.115,1306.409,1281.099,1308.737,1270.096z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1271.276,1372.283c-0.124-0.743-0.251-1.467-0.381-2.164c-1.362-7.318-3.023-12.172-4.753-15.244 c1.863-1.539,3.995-3.506,6.423-5.979c-5.039-0.596-2.956-5.484,16.142-18.925c-3.133-1.935-6.103-3.893-8.933-5.867 c-3.572,0.123-6.899-0.025-10-0.404c0.286,3.569-1.557,6.881-4.623,10.576c-0.088,2.475-0.103,5.012-0.03,7.63 c0.115,4.079,0.427,8.342,0.922,12.798c-9.003-15.605-19.745,16.502,0.024,0.231c0.571,5.08,1.389,10.423,2.43,16.041 c0.037,0.201,0.075,0.404,0.113,0.606c0.237,1.26,0.484,2.535,0.743,3.824c0.827,0.203,1.657,0.39,2.488,0.566 c-0.039-0.281-0.079-0.562-0.119-0.837C1271.579,1374.15,1271.43,1373.201,1271.276,1372.283z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1276.925,1410.336c3.593,1.741,7.502-0.711,11.66-6.168c-0.589-0.085-1.177-0.168-1.765-0.25 C1283.59,1406.002,1280.297,1408.136,1276.925,1410.336z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1291.356,1400.161c0.395,0.028,0.792,0.054,1.189,0.079c0.458-0.293,0.921-0.591,1.376-0.882 c0.751-3.158,2.749-4.886,4.963-3.163c1.173-0.746,2.341-1.487,3.493-2.216c-2.468-0.068-4.886-0.166-7.272-0.295 c-0.773,1.444-1.541,2.817-2.3,4.106C1292.318,1398.613,1291.835,1399.405,1291.356,1400.161z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1361.845,1325.471c-5.305-0.637-10.999-1.455-17.059-2.521c4.113,8.319,4.551,20.317-1.621,45.942 c2.038-1.215,4.024-2.395,5.959-3.538c7.365-4.351,13.993-8.188,19.907-11.568c0.011-0.215,0.024-0.425,0.035-0.639 C1366.857,1343.619,1364.438,1334.375,1361.845,1325.471z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1328.475,1255.936c0.176-0.239,0.358-0.48,0.566-0.73c-0.39,0.19-0.789,0.381-1.175,0.571 C1328.07,1255.831,1328.273,1255.884,1328.475,1255.936z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1400.39,1328.028c-6.268-0.278-15.968-0.405-28.537-1.516c-1.306,8.121-2.284,16.966-2.787,26.634 c0.042,0.182,0.084,0.365,0.126,0.548c18.881-10.789,30.495-16.939,35.86-20.502c1.252-0.832,2.166-1.524,2.75-2.1 c0.25-0.344,0.499-0.689,0.746-1.037C1408.993,1328.668,1406.129,1328.283,1400.39,1328.028z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1313.586,1219.623c-0.455,1.377-0.911,2.725-1.376,4.049c0.438,0.458,0.877,0.925,1.315,1.404 c4.936,5.388,9.853,12.073,14.661,19.885c1.381,2.244,2.754,4.58,4.115,7.005c0.745-0.648,1.559-1.319,2.472-2.025 c-2.099-43.377,16.124-15.835,27.35,12.664c9.226-1.141,19.818-2.853,31.207-4.968c4.01-10.573,6.122-18.943,3.561-26.985 c-1.947-6.115-6.596-12.042-15.169-18.608c-0.269-0.206-0.548-0.414-0.826-0.622c-5.23,3.487-7.078,11.656-11.217,25.363 c-5.503-11.611-4.356-22.389-0.225-32.989c-0.715-0.433-1.447-0.869-2.194-1.309c-6.417,1.33-11.578,5.585-11.265,17.862 c-7.825,10.57-11.644,7.525-14.657-0.935c-2.224,3.505-4.779,7.152-7.701,10.949c-16.423,1.81-6.402-12.873-6.198-22.758 c-0.241,0.042-0.461,0.068-0.679,0.091c-3.325,0.358-3.887-1.493-2.383-5.281c-1.783,1.375-3.962,2.778-6.464,4.142 c-0.06,0.109-0.12,0.218-0.181,0.327c-1.126,3.347-2.127,6.503-3.098,9.511 C1314.285,1217.489,1313.935,1218.565,1313.586,1219.623z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1348.912,1163.997c-0.431-0.752-0.884-1.486-1.356-2.201c-2.862,0.33-5.774,0.432-8.584,0.338 c-2.964,6.848-6.078,13.589-9.127,20.198c0.96,1.913,1.826,3.953,2.617,6.069 C1336.824,1181.744,1342.512,1173.532,1348.912,1163.997z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1255.443,1243.089c0.931-0.356,1.856-0.73,2.78-1.104c-0.719-0.206-1.443-0.413-2.143-0.613 C1255.865,1241.935,1255.654,1242.51,1255.443,1243.089z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1311.586,1225.411c0.211-0.575,0.418-1.156,0.623-1.74c-0.98-1.023-1.96-1.994-2.94-2.912 c-6.16,9.072-13.246,17.319-21.758,24.084c3.971,1.087,7.743,2.121,11.34,3.106 C1305.178,1240.543,1308.662,1233.397,1311.586,1225.411z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1360.124,1262.844c0.748,0.102,1.482,0.195,2.203,0.279c-0.067-0.173-0.135-0.346-0.203-0.518 C1361.448,1262.688,1360.784,1262.767,1360.124,1262.844z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1282.985,1262.5c4.461-3.375,8.199-6.59,11.362-9.717c-3.285-1.618-6.773-3.352-10.475-5.209 c-3.317,2.358-6.842,4.496-10.598,6.385C1276.653,1256.519,1279.899,1259.372,1282.985,1262.5z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1271.019,1216.369c-2.624,2.471-5.148,5.655-7.554,9.572c1.606,3.707,3.188,7.538,4.745,11.487 c10.469-5.365,19.953-12.349,27.074-21.964c0.19-0.257,0.378-0.522,0.568-0.781 C1287.954,1216.454,1279.396,1217.257,1271.019,1216.369z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1352.085,1196.287c-3.007,1.66-5.745,3.131-8.227,4.418c-2.502,1.297-4.745,2.408-6.744,3.339 c1.466,5.78,2.749,11.225,4.226,15.37C1346.754,1210.881,1350.186,1203.202,1352.085,1196.287z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1349.28,1288.364c4.501,11.478,8.724,23.917,12.565,37.107c2.592,8.904,5.012,18.148,7.221,27.676 c0.503-9.668,1.481-18.513,2.787-26.634c1.185-7.368,2.638-14.141,4.247-20.397c0.152-0.593,0.305-1.184,0.46-1.767 c1.937-7.284,4.076-13.852,6.232-19.833c1.003-2.784,2.01-5.443,3.001-7.984c1.311-3.361,2.595-6.522,3.809-9.512 c0.59-1.454,1.164-2.867,1.716-4.244c0.253-0.63,0.5-1.251,0.743-1.865c-10.704,2.593-18.745,3.487-29.734,2.213 c11.403,29.177,15.297,58.9-17.597,14.188c1.538,3.561,3.051,7.228,4.532,11.005 C1349.268,1288.332,1349.274,1288.348,1349.28,1288.364z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1369.066,1353.147c-0.011,0.214-0.024,0.425-0.035,0.639c-0.18,3.63-0.291,7.378-0.328,11.245 c0.896-0.469,1.791-0.941,2.675-1.434c-0.704-3.331-1.432-6.634-2.186-9.902 C1369.15,1353.512,1369.108,1353.329,1369.066,1353.147z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1290.496,949.556c-0.397,0.302-0.79,0.6-1.189,0.903c-4.607,3.495-9.377,7.097-14.309,10.806 c5.292-1.189,11.79-2.921,19.649-5.426C1293.172,953.648,1291.785,951.551,1290.496,949.556z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1321.592,824.745c-4.64-0.596-9.379-1.269-14.192-2.044c-0.007,0.133-0.015,0.265-0.022,0.398 c2.833,5.038,5.5,9.828,8.01,14.387c0.293,0.532,0.583,1.06,0.872,1.586c10.914-1.47,23.881-5.028,35.928-8.03 c0.301-0.997,0.597-1.984,0.89-2.963C1343.425,827.176,1332.802,826.184,1321.592,824.745z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1326.163,904.007c-0.043-0.212-0.094-0.423-0.146-0.634c-1.969-1.885-3.788-3.67-5.329-5.177 C1322.444,900.501,1324.275,902.411,1326.163,904.007z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1378.722,832.732c-12.497,0.745-16.805,5.64-17.26,11.682c3.013,1.648,3.624,5.601,2.385,10.671 c2.969-5.029,9.704-9.792,16.117-14.358C1379.526,838.008,1379.112,835.342,1378.722,832.732z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1306.799,989.241c4.203-3.124,8.412-6.455,12.604-9.935c0.527-0.437,1.053-0.876,1.58-1.318 c0.85-0.714,1.698-1.435,2.546-2.159c0.322-0.275,0.644-0.549,0.965-0.825c1.276-1.098,2.549-2.208,3.82-3.327 c0.497-0.438,0.993-0.878,1.489-1.319c4.77-4.241,9.489-8.614,14.121-13.029c-4.818-4.094-9.916-8.764-15.295-14.065 c-13.419,5.542-24.658,9.605-33.98,12.576c4.15,6.16,9.034,13.091,14.704,20.878c-11.691-1.56-22.367-2.682-32.072-3.465 c1.97,2.85,4.017,5.87,6.147,9.076c3.139,3.637,6.383,7.975,9.643,13.146c2.534-0.637,5.077-1.234,7.618-1.834 C1302.721,992.227,1304.76,990.757,1306.799,989.241z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1283.427,982.327c-3.313-3.838-6.508-6.899-9.481-9.334c-4.741-0.353-9.24-0.624-13.497-0.824 c-4.222,3.153-8.541,6.372-12.981,9.671c-0.445,0.331-0.895,0.664-1.342,0.996c-4.207,3.125-8.518,6.32-12.923,9.578 c-0.125,0.092-0.25,0.185-0.374,0.277c-1.307,0.967-2.615,1.934-3.939,2.912c-0.022,0.093-0.044,0.186-0.066,0.279 c16.359,0.54,32.195,2.615,46.243,5.594c5.551-2.552,11.269-4.284,17.039-5.761 C1289.074,990.932,1286.184,986.478,1283.427,982.327z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1360.887,862.935c-4.002,8.158-11.085,17.379-19.773,24.46c2.854,6.21,4.997,11.345,6.53,15.546 c0.184,0.503,0.361,0.996,0.527,1.473c0.266-0.217,0.528-0.433,0.791-0.649c13.637-11.195,24.413-20.617,32.646-28.564 c1.022-0.986,2.002-1.948,2.946-2.89c0.966-0.963,1.898-1.907,2.784-2.824c0.221-0.229,0.432-0.452,0.648-0.678 c11.968-12.522,16.415-20.783,15.101-26.421c-4.856,7.268-10.25,14.593-16.883,19.335c-4,2.85-10.95,5.36-16.36,5.36 c-0.08,0-0.156-0.006-0.235-0.007C1372.445,872.108,1372.461,872.753,1360.887,862.935z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1416.366,888.964c-1.904-9.181-7.769-9.084-15.934-5.161c-7.695,3.697-17.432,10.792-27.822,16.727 c-2.493,1.424-5.023,2.779-7.571,4.006c-5.043,2.429-10.157,4.345-15.196,5.269c-0.009-0.036-0.019-0.072-0.029-0.109 c-0.14-0.529-0.296-1.082-0.468-1.66c-0.145-0.486-0.297-0.984-0.465-1.506c-0.031-0.098-0.066-0.2-0.098-0.299 c-0.19-0.585-0.393-1.188-0.613-1.818c-0.451,0.37-0.902,0.739-1.359,1.112c-0.135,0.11-0.273,0.223-0.409,0.333 c-1.313,1.072-2.655,2.161-4.02,3.264c-0.424,0.343-0.842,0.682-1.271,1.027c69.003,38.42-22.394-11.057,34.439,13.145 c0.507,0.302,1.005,0.609,1.499,0.918c0.282-0.289,0.563-0.577,0.843-0.864c0.496-0.983,0.957-1.974,1.369-2.976 c2.54-6.2,0.83-16.99,5.36-21.57c0.67-0.68,1.42-1.24,2.23-1.71c4.724-2.696,11.712-2.092,18.704-0.891 c2.126-1.833,4.06-3.371,5.782-4.565C1413.298,890.279,1414.985,889.361,1416.366,888.964z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1319.368,1145.723c1.59-1.271,3.652-2.341,6.282-2.939c-1.333-0.756-2.601-1.442-3.776-2.063 c-0.473-0.19-0.941-0.373-1.419-0.569C1320.098,1142.265,1319.733,1144.113,1319.368,1145.723z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1319.368,1145.723C1311.382,1152.11,1315.33,1163.56,1319.368,1145.723L1319.368,1145.723z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1370.153,1202.073c-0.241,0.574-0.474,1.148-0.698,1.723c-4.131,10.601-5.278,21.378,0.225,32.989 c4.139-13.707,5.986-21.876,11.217-25.363c0.614-0.41,1.276-0.754,1.993-1.036c6.84-2.688,18.776,0.381,43.783,8.005 c0.967,0.295,1.955,0.597,2.961,0.905c1.803,0.552,3.67,1.126,5.604,1.721c0.424,0.13,0.839,0.258,1.269,0.391 c-0.52-0.571-1.031-1.123-1.547-1.686c-1.72-1.876-3.423-3.721-5.096-5.512c-0.643-0.688-1.275-1.358-1.911-2.034 c-0.429-0.456-0.862-0.919-1.288-1.369c-1.806-1.91-3.579-3.76-5.33-5.571c-4.781-4.945-9.361-9.535-13.74-13.776 c-5.835,1.206-12.003,2.23-17.96,2.855C1393.828,1206.025,1381.133,1201.119,1370.153,1202.073z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1381.963,1180.426c0.159,0.241,0.318,0.482,0.472,0.717c4.398-0.057,8.792-0.223,13.104-0.96 c-3.031-2.731-5.959-5.286-8.777-7.664C1385.18,1175.179,1383.563,1177.812,1381.963,1180.426z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1386.762,1172.519c0.607-1.021,1.208-2.047,1.802-3.076c-2.439-0.382-4.722-0.746-6.851-1.094 C1383.356,1169.675,1385.041,1171.067,1386.762,1172.519z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1398.819,1146.785c2.346-8.059,3.169-16.554,1.345-25.686c-0.205-1.025-0.447-2.059-0.72-3.101 c-0.998-3.807-2.466-7.727-4.475-11.77c0.264,11.476-1.466,21.635-5.968,29.258 C1391.976,1139.188,1395.247,1142.96,1398.819,1146.785z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M1283.401,1018.634c-0.161-0.068-0.327-0.139-0.485-0.204c-5.053-1.175-9.562-2.361-13.563-3.535 c-1.988,0.922,0.026,4.6,4.26,10.301c2.046,2.754,4.61,5.982,7.488,9.595c7.145-1.467,15.797-2.932,26.174-4.525 c-1.743-1.016-3.506-2.035-5.309-3.063C1294.317,1023.477,1288.204,1020.653,1283.401,1018.634z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1320.455,1140.152c0.479,0.196,0.946,0.379,1.419,0.569c-9.627-5.091-12.892-5.851,7.573-5.566 c-4.629-4.66-8.323-8.677-11.203-12.097c-3.035,3.793-6.299,7.72-9.795,11.776c2.234,1.058,4.412,2.052,6.543,2.99 C1316.849,1138.642,1318.675,1139.424,1320.455,1140.152z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1348.877,985.361c-0.118,0.127-0.236,0.254-0.354,0.38c0.105,0.097,0.212,0.203,0.318,0.304 C1348.854,985.818,1348.864,985.585,1348.877,985.361z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1370.829,1107.451c4.289,8.683,10.196,18.11,18.172,28.035c4.502-7.623,6.232-17.782,5.968-29.258 c-0.264-11.477-2.518-24.266-5.99-37.148c-1.327-4.924-2.832-9.861-4.47-14.744c-4.12,2.303-8.379,4.289-12.712,5.894 C1374.33,1067.628,1375.177,1082.694,1370.829,1107.451z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1373.6,1026.644c-5.207,4.492-10.357,9.092-15.04,13.851c0.568,1.527,1.161,3.072,1.79,4.642 c6.137-2.248,12.13-4.835,17.779-7.971C1376.662,1033.567,1375.145,1030.049,1373.6,1026.644z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1365.22,1009.779c-1.032-1.891-2.061-3.709-3.081-5.447c-4.576-7.793-8.979-13.961-12.708-17.712 c-0.199-0.2-0.394-0.389-0.589-0.575c-0.001,0.021-0.002,0.043-0.003,0.064c-0.116,2.151-0.165,4.456-0.122,6.92 c0.025,1.464,0.083,2.982,0.177,4.555c0.116,1.951,0.292,3.989,0.53,6.106c0.672,5.996,1.867,12.654,3.778,19.951 c5.648-0.796,11.586-1.635,17.821-2.521C1369.101,1017.125,1367.156,1013.325,1365.22,1009.779z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1325.275,1113.974c3.518,2.743,7.28,6.21,10.888,10.253c0.622-2.762,1.185-5.496,1.671-8.184 c1.376-7.597,1.7-14.957,1.277-22.391C1335.316,1099.893,1330.738,1106.665,1325.275,1113.974z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1359.193,1149.625c3.12-6.186,5-15.378-3.111-30.063c4.174,4.615,7.251,8.78,9.412,12.535 c2.295-9.099,4.046-17.302,5.335-24.644c-9.585-19.403-11.07-35.069-9.374-44.164c-2.886,0.641-5.779,1.103-8.661,1.368 c-0.497,1.633-1.075,3.337-1.738,5.112c7.604,22.419,4.688,44.938-2.284,66.763 C1352.544,1141.217,1356.012,1145.576,1359.193,1149.625z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1331.482,488.785c-0.613,0.605-1.224,1.226-1.834,1.863c-1.174,4.728-2.223,10.542-4.434,16.251 c-0.484,1.249-1.025,2.493-1.634,3.72c-0.695,1.401-1.482,2.779-2.378,4.115c12.45-2.206,23.557-0.379,35.106,2.754 c0.002-0.129,0.004-0.258,0.005-0.389c0.008-1.394-0.059-2.869-0.202-4.428c-0.375-4.102-1.28-8.788-2.745-14.119 c-0.494-1.796-1.05-3.664-1.672-5.609c-0.064-0.199-0.128-0.399-0.193-0.599c-0.736-2.27-1.56-4.643-2.472-7.121 c-1.007-0.66-1.956-1.248-2.853-1.766C1341.695,485.075,1336.823,486.823,1331.482,488.785z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1361.895,477.591c-4.181,1.662-8.736,3.34-13.787,5.169c0.318,0.834,0.623,1.653,0.922,2.464 c1.471,0.965,3.064,2.086,4.791,3.374c2.132,1.591,4.467,3.435,7.03,5.557c0.387,0.32,0.776,0.643,1.173,0.976 c-0.114,0.386-0.216,0.766-0.322,1.149c-0.212,0.761-0.412,1.516-0.597,2.264c-1.325,5.351-1.967,10.348-2.043,14.974 c-0.013,0.806-0.014,1.603,0.006,2.386c0.021,0.81,0.064,1.604,0.12,2.389c13.177,3.772,27.113,8.927,44.402,11.502 c0.315-4.215,0.555-8.708,0.729-13.501c-0.419-1.656-0.91-3.373-1.476-5.149c-8.915-9.93-20.076-21.347-33.374-31.505 C1367.136,479.765,1364.5,478.886,1361.895,477.591z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1378.24,469.964c1.576,0.493,3.164,1.006,4.764,1.541c-0.67-1.037-1.356-2.085-2.06-3.143 C1380.054,468.911,1379.153,469.445,1378.24,469.964z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1304.123,390.342c0.005-0.358,0.016-0.695,0.022-1.047c-1.617-1.025-3.094-1.927-4.457-2.727 c-0.976-0.573-1.889-1.091-2.739-1.555c-1.538-0.839-2.88-1.507-4.031-2.011c-6.781-2.974-7.064-0.413-3.646,4.563 c4.137,6.022,13.685,15.573,23.685,23.118c1.867,3.384,3.667,6.682,5.405,9.899c0.753,1.394,1.492,2.771,2.22,4.133 c2.613,4.889,5.069,9.579,7.377,14.081c0.479,0.934,0.95,1.859,1.416,2.776c5.5-1.098,11.963-1.295,19.098-0.386 c3.532-2.227,6.664-3.617,9.062-4.153c-2.215-2.694-4.525-5.443-6.921-8.24c-2.718-3.172-5.542-6.404-8.501-9.71 c-14.199,2.636-16.438-0.338-11.271-10.988c-4.918-3.688-9.355-6.93-13.333-9.754c-3.13,0.703-5.786,0.516-7.404-1.327 c-0.923-1.054-1.512-2.648-1.655-4.917c-1.404-0.934-2.73-1.798-3.979-2.593C1304.354,389.785,1304.239,390.056,1304.123,390.342 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1363.595,444.555c-0.647-0.821-1.311-1.651-1.975-2.482c-0.237,0.508-0.53,1.053-0.879,1.635 C1361.686,443.973,1362.636,444.254,1363.595,444.555z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1401.69,546.567c2.898-3.725,4.674-9.151,4.604-16.397c-0.91-0.119-1.813-0.244-2.705-0.376 C1403.128,535.963,1402.506,541.536,1401.69,546.567z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1337.168,450.208c1.402,0.321,2.818,0.664,4.266,1.045c2.436,0.643,6.432,1.444,10.879,2.543 c4.138-4.121,6.863-7.479,8.429-10.089c-4.258-1.194-8.363-2.025-12.269-2.522 C1344.984,443.386,1341.108,446.398,1337.168,450.208z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1341.568,1375.261c1.719-0.427,3.424-0.893,5.119-1.389c-1.266-1.453-2.494-2.858-3.7-4.236 C1342.548,1371.441,1342.073,1373.319,1341.568,1375.261z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1298.884,1396.195c-2.214-1.723-4.211,0.005-4.963,3.163c-0.073,0.305-0.133,0.623-0.182,0.952 c2.624,0.137,5.3,0.194,8.032,0.177c-0.282-0.646-0.567-1.228-0.854-1.737 C1300.239,1397.547,1299.552,1396.714,1298.884,1396.195z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1317.267,1338.715c0.228,0.323,0.456,0.646,0.691,0.971c6.035,8.366,14.205,17.585,24.663,29.531 c0.121,0.138,0.245,0.28,0.366,0.419c0.061-0.251,0.119-0.495,0.179-0.744c6.172-25.625,5.734-37.624,1.621-45.942 c-3.059-6.187-8.147-10.343-14.061-16.56c-6.852-7.204-14.808-17.178-21.989-36.293c-2.327,11.002-3.677,20.018-3.997,27.835 c3.153,9.049,5.302,19.177,6.177,30.458C1312.657,1331.787,1314.77,1335.182,1317.267,1338.715z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1303.021,1403.931c-0.778,0.727-1.541,1.443-2.305,2.161c1.015,0.177,2.031,0.358,3.046,0.543 C1303.523,1405.659,1303.275,1404.762,1303.021,1403.931z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1293.867,1404.962c0.343,1.822,1.037,3.726,2.175,5.533c1.526-1.444,3.09-2.916,4.673-4.402 C1298.431,1405.695,1296.148,1405.319,1293.867,1404.962z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1306.646,1430.159c0.81-0.258,1.624-0.514,2.442-0.765c0.11-0.445,0.22-0.89,0.329-1.336 c-0.942,0.696-1.853,1.365-2.773,2.042C1306.644,1430.12,1306.646,1430.139,1306.646,1430.159z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1404.556,1255.476c-3.813,0.759-7.559,1.48-11.225,2.161c-11.389,2.115-21.981,3.827-31.207,4.968 c0.068,0.173,0.136,0.346,0.203,0.518c10.989,1.274,19.03,0.38,29.734-2.213c3.533-0.856,7.359-1.897,11.675-3.106 c7.742-2.168,17.068-4.876,29.145-8.028c3.843-1.003,7.969-2.051,12.406-3.14c0.001-0.008,0.002-0.015,0.003-0.023 c-4.123,0.964-8.246,1.908-12.35,2.83C1423.283,1251.613,1413.735,1253.65,1404.556,1255.476z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1294.346,1252.783c7.987,3.935,14.775,7.186,20.521,9.852c15.483,7.185,23.416,10.134,26.953,10.823 c0.099,0.086,0.194,0.168,0.296,0.256c0.489,0.683,0.968,1.345,1.442,1.998c0.397,0.546,0.785,1.074,1.171,1.6 c32.894,44.712,29,14.989,17.597-14.188c-0.721-0.084-1.455-0.176-2.203-0.279c0.66-0.077,1.325-0.156,2-0.24 c-11.227-28.499-29.45-56.041-27.35-12.664c-0.913,0.706-1.727,1.377-2.472,2.025c-1.349,1.172-2.438,2.253-3.26,3.241 c-0.208,0.25-0.391,0.491-0.566,0.73c-0.202-0.053-0.405-0.105-0.609-0.159c-7.817-2.04-16.863-4.502-27.516-7.418 c-0.495-0.135-0.997-0.273-1.499-0.41c-3.597-0.985-7.369-2.019-11.34-3.106c-1.184,0.941-2.4,1.849-3.641,2.731 C1287.573,1249.431,1291.062,1251.165,1294.346,1252.783z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1356.688,1162.75c0.357-1.118,0.702-2.219,1.045-3.318c-1.189,0.452-2.432,0.845-3.715,1.179 C1354.393,1161.367,1355.227,1162.065,1356.688,1162.75z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1260.608,1214.296c-0.979-0.296-1.951-0.621-2.913-0.977c0.282,0.584,0.562,1.177,0.842,1.768 C1259.235,1214.82,1259.924,1214.557,1260.608,1214.296z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1293.563,1175.44c5.586,5.479,11.403,10.519,17.548,14.878c3.337-6.179,6.476-12.615,9.368-19.182 C1314.245,1167.375,1305.702,1167.712,1293.563,1175.44z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1375.978,1171.781c-1.151-1.602-2.381-3.286-3.693-5.058c-8.049-1.483-12.896-2.708-15.597-3.973 c-0.966,3.03-1.979,6.13-3.045,9.306c0.583-3.864,0.627-7.68,0.233-11.41c-2.034,0.521-4.162,0.901-6.32,1.15 c0.472,0.715,0.925,1.448,1.356,2.201c3.663,6.389,5.772,14.15,4.83,23.568c-0.051,0.507-0.11,1.018-0.179,1.534 c-0.12,0.908-0.268,1.83-0.446,2.768c-0.272,1.437-0.618,2.911-1.033,4.42c-1.899,6.915-5.331,14.594-10.745,23.126 c3.013,8.46,6.831,11.505,14.657,0.935c-0.313-12.277,4.849-16.531,11.265-17.862c0.941-0.195,1.909-0.329,2.891-0.414 c10.98-0.954,23.676,3.952,19.483-7.757c-17.507,1.836-33.16,0.221-32.972-10.402c8.212-2.963,17.002-2.655,25.771-2.77 c-0.154-0.235-0.313-0.477-0.472-0.717C1380.264,1177.853,1378.278,1174.982,1375.978,1171.781z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1325.387,1201.609c0.751,0.723,1.263,1.574,1.588,2.522c0.36,1.052,0.492,2.223,0.467,3.472 c-0.204,9.885-10.226,24.569,6.198,22.758c2.922-3.797,5.476-7.444,7.701-10.949c-1.476-4.145-2.76-9.59-4.226-15.37 c-1.006-3.965-2.098-8.086-3.398-12.054c-0.304-0.928-0.619-1.849-0.947-2.757c-0.101-0.279-0.204-0.556-0.307-0.832 c-0.791-2.116-1.657-4.155-2.617-6.069c-0.077,0.167-0.155,0.335-0.231,0.502c-0.4,0.87-0.79,1.73-1.19,2.59 c-1.007,2.19-2.032,4.378-3.075,6.559C1331.57,1193.183,1330.683,1197.172,1325.387,1201.609z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1329.448,1135.155c-20.465-0.285-17.2,0.475-7.573,5.566c1.175,0.621,2.444,1.307,3.776,2.063 c1.474,0.836,3.025,1.76,4.61,2.777c0.8-2.454,1.56-4.903,2.273-7.341C1331.462,1137.169,1330.434,1136.147,1329.448,1135.155z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1353.876,1160.646c0.047-0.012,0.095-0.023,0.142-0.036c-1.222-2.471,2.448-5.58,5.174-10.986 c-3.18-4.049-6.649-8.407-10.421-13.094c-0.415,1.298-0.845,2.594-1.287,3.887 C1350.755,1146.668,1353.121,1153.499,1353.876,1160.646z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1319.95,1153.537c-0.928,2.485,1.299,4.636,5.257,6.17c1.678-4.32,3.24-8.662,4.673-12.994 C1323.759,1149.111,1320.732,1151.442,1319.95,1153.537z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1411.327,1159.19c-4.54-4.187-8.7-8.327-12.508-12.405c-3.572-3.826-6.843-7.597-9.818-11.299 c-7.977-9.925-13.883-19.352-18.172-28.035c-1.289,7.342-3.041,15.545-5.335,24.644c-2.161-3.755-5.238-7.919-9.412-12.535 c8.111,14.685,6.231,23.878,3.111,30.063c-2.726,5.406-6.396,8.515-5.174,10.986c1.283-0.334,2.526-0.727,3.715-1.179 c-0.343,1.099-0.688,2.199-1.045,3.318c2.701,1.266,7.548,2.49,15.597,3.973c1.675,0.309,3.489,0.629,5.452,0.963 c1.265,0.215,2.584,0.436,3.975,0.663c2.129,0.348,4.412,0.712,6.851,1.094c5.16,0.807,11.033,1.694,17.709,2.686 c2.204,0.328,4.5,0.667,6.882,1.018c2.634-1.716,5.098-3.684,7.384-5.845c-0.606-0.51-1.212-1.021-1.807-1.53 C1416.155,1163.566,1413.693,1161.372,1411.327,1159.19z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1347.556,1161.796c2.158-0.249,4.286-0.628,6.32-1.15c-0.755-7.147-3.122-13.978-6.392-20.229 c-2.506,7.333-5.426,14.582-8.513,21.717C1341.782,1162.228,1344.694,1162.126,1347.556,1161.796z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1370.829,1107.451c4.348-24.758,3.501-39.823,0.968-47.221c-3.414,1.265-6.872,2.286-10.342,3.057 C1359.759,1072.382,1361.244,1088.048,1370.829,1107.451z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1325.275,1113.974c-2.198,2.941-4.536,5.967-7.03,9.084c2.88,3.42,6.574,7.438,11.203,12.097 c0.986,0.992,2.014,2.014,3.086,3.065c1.383-4.722,2.594-9.4,3.629-13.993 C1332.555,1120.184,1328.793,1116.717,1325.275,1113.974z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1353.644,1172.056c1.065-3.176,2.079-6.277,3.045-9.306c-1.461-0.685-2.296-1.382-2.67-2.139 c-0.047,0.012-0.095,0.023-0.142,0.036C1354.27,1164.376,1354.227,1168.192,1353.644,1172.056z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1269.285,1049.291c-6.012-1.431-11.155-2.725-15.534-3.898c-0.414,0.475-0.773,0.966-1.082,1.473 c-3.579,5.869-0.286,13.95,5.584,26.729c1.141,2.483,2.378,5.144,3.681,8c0.298,0.652,0.598,1.314,0.903,1.987 c4.682-4.214,9.372-8.718,13.839-13.219C1271.868,1060.75,1268.363,1052.99,1269.285,1049.291z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1363.456,971.859c2.526,6.752,5.157,13.567,7.617,20.003c1.944,5.088,3.779,9.935,5.369,14.328 c2.025,5.596,3.649,10.448,4.588,14.107c16.884-14.383,32.264-27.888,31.768-42.347c-1.643-3.859-4.204-7.42-6.656-11.297 C1406.065,981.79,1391.882,989.625,1363.456,971.859z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1358.56,1040.495c4.683-4.759,9.833-9.359,15.04-13.851c0.883-0.761,1.767-1.52,2.651-2.275 c-0.955-0.947-2.042-2.114-3.275-3.526c-0.659,0.094-1.302,0.185-1.954,0.278c-6.235,0.886-12.173,1.725-17.821,2.521 c-18.137,2.557-33.308,4.686-45.924,6.624c-10.377,1.594-19.029,3.059-26.174,4.525c-0.825,0.169-1.632,0.339-2.418,0.508 c2.095,4.564,4.042,9.652,5.758,15.312c0.105,0.049,0.201,0.09,0.308,0.141c36.814-33.374,18.26-6.924-8.073,19.611 c10.047,20.086,25.746,48.234,18.46,64.218c-5.592-1.967-10.819-3.823-15.725-5.588c0.353,1.305,0.7,2.634,1.042,3.979 c1.94,7.62,3.702,15.895,5.175,24.889c0.083,0.508,0.168,1.011,0.249,1.524c3.937-4.042,7.655-7.972,11.19-11.803 c4.046-4.386,7.837-8.636,11.382-12.748c3.496-4.057,6.76-7.983,9.795-11.776c2.494-3.117,4.832-6.143,7.03-9.084 c5.463-7.309,10.041-14.081,13.836-20.322c-0.238-4.181-0.708-8.385-1.367-12.669c-0.7-4.52-8.16-19.43-7.78-21.51 c1.499-8.239,18.472-10.393,25.198-12.518c-0.089-0.869-0.213-1.693-0.378-2.464 C1356.001,1043.147,1357.262,1041.815,1358.56,1040.495z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1376.251,1024.369c5.806,5.756,6.648,3.206,4.779-4.072 C1379.446,1021.646,1377.849,1023.003,1376.251,1024.369z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C1272D",
                        d:
                          "M1349.253,1064.893c0.665,1.624,1.251,3.249,1.802,4.874c0.664-1.775,1.242-3.479,1.738-5.112 C1351.611,1064.764,1350.43,1064.852,1349.253,1064.893z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1288.921,947.09c-0.596-0.943-1.175-1.868-1.726-2.765C1285.298,947,1286.273,947.772,1288.921,947.09z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1389.191,933.61c-10.111,11.878-18.718,24.823-27.912,36.852c0.734,0.48,1.461,0.948,2.177,1.396 c28.426,17.767,42.609,9.932,42.686-5.205c-2.484-3.927-4.855-8.178-6.039-13.4c-0.526-2.32-1.014-5.181-1.303-8.151 C1396.257,941.192,1393.054,937.299,1389.191,933.61z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1375.552,923.295c-56.834-24.202,34.563,25.275-34.439-13.145c-0.405-0.226-0.81-0.451-1.226-0.683 c-2.279-1.268-4.724-2.628-7.348-4.085c0.462-1.374,0.84-2.629,1.149-3.79c0.18-0.674,0.338-1.32,0.469-1.927 c0.019-0.085,0.029-0.16,0.047-0.245c0.012-0.058,0.021-0.111,0.032-0.169c0.642-3.175,0.607-5.42,0.053-6.98 c-3.54,2.185-7.254,3.952-11.064,5.129c0.174,0.243,0.339,0.488,0.498,0.733c1.11,1.711,1.858,3.463,2.294,5.238 c0.052,0.211,0.103,0.422,0.146,0.634c0.924,4.551-0.168,9.242-2.495,13.781c-0.902,1.759-1.99,3.495-3.218,5.191 c-0.871,1.203-1.811,2.387-2.807,3.544c7.187,3.178,15.245,6.925,24.134,11.134c-4.601,2.021-8.977,3.882-13.149,5.605 c5.38,5.302,10.478,9.972,15.295,14.065c2.526,2.146,4.975,4.134,7.347,5.969c5.036-6.729,9.442-13.971,14.163-21.034 c3.828-5.717,8.571-11.612,11.912-17.863c-0.098-0.062-0.195-0.125-0.294-0.187 C1376.557,923.904,1376.059,923.597,1375.552,923.295z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1272.313,861.518c1.285,2.938,2.6,5.341,3.934,7.244c-1.098-2.296-2.169-4.746-3.209-7.351 C1272.796,861.446,1272.554,861.482,1272.313,861.518z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1267.053,845.515c0.351,1.38,0.707,2.703,1.067,3.974c0.022,0.079,0.045,0.155,0.067,0.233 c0.231-0.036,0.462-0.071,0.694-0.106c-0.355-1.141-0.703-2.311-1.048-3.5C1267.572,845.914,1267.312,845.713,1267.053,845.515z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1266.248,842.21c0.017,0.073,0.034,0.144,0.052,0.216c0.245,0.301,0.492,0.602,0.746,0.905 c-0.094-0.343-0.186-0.695-0.28-1.041C1266.593,842.266,1266.42,842.236,1266.248,842.21z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1307.378,823.098c0.007-0.133,0.015-0.265,0.022-0.398c0.162-3.129,0.194-6.253,0.085-9.327 c-0.182-5.118-0.758-10.093-1.795-14.708c-0.44-1.959-0.961-3.854-1.572-5.666c-1.358,2.288-2.602,4.471-3.739,6.556 c-1.029,1.886-1.966,3.687-2.82,5.412c-0.831,1.676-1.577,3.276-2.25,4.807c-0.328,0.747-0.642,1.481-0.933,2.194 c-0.236,0.577-0.462,1.144-0.674,1.699c-4.003,10.458-3.882,17.101-0.915,21.065c1.239,1.656,2.976,2.844,5.115,3.648 c2.102,0.79,4.594,1.208,7.387,1.334c0.122-0.621,0.241-1.244,0.354-1.871C1306.507,833.048,1307.104,828.07,1307.378,823.098z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1361.463,844.415c0.455-6.042,4.763-10.938,17.26-11.682c-0.328-2.196-0.638-4.352-0.932-6.471 c-0.941,0.046-1.92,0.122-2.936,0.227c-1.744,0.181-3.591,0.444-5.523,0.774c-6.152,4.973-13.12,10.391-21.005,16.31 c1.36-4.327,2.644-8.501,3.861-12.531c-12.047,3.002-25.014,6.56-35.928,8.03c-3.979,0.536-7.683,0.792-10.971,0.644 c-0.953,4.848-2.178,9.479-3.613,13.694c-0.423,1.243-0.865,2.452-1.323,3.618c-0.199,0.506-0.402,1.003-0.608,1.493 c-3.24,7.731-7.239,13.413-11.504,15.389c-3.901,1.807-8.024,0.516-11.994-5.147c4.214,8.808,8.829,15.381,13.668,20.115 c1.282,1.255,2.58,2.38,3.891,3.383c9.089,6.953,18.778,8.021,27.976,5.56c0.483-0.129,0.964-0.27,1.444-0.418 c3.81-1.177,7.524-2.943,11.064-5.129c0.029-0.018,0.057-0.034,0.086-0.052c2.33-1.444,4.583-3.07,6.738-4.827 c8.688-7.081,15.771-16.302,19.773-24.46c11.574,9.818,11.558,9.173,8.721,4.142c-5.106-0.071-8.758-2.445-7.044-9.013 c0.261-1.003,0.704-1.996,1.284-2.978C1365.087,850.016,1364.475,846.063,1361.463,844.415z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1394.716,804.751c-1.357,1.385-2.823,2.829-4.404,4.336c-0.184,0.175-0.366,0.349-0.553,0.526 c-3.441,3.254-7.419,6.798-11.958,10.646c-0.245,0.208-0.487,0.414-0.735,0.623c0.03,0.231,0.06,0.462,0.091,0.693 c0.202,1.54,0.413,3.102,0.633,4.686c0.294,2.118,0.605,4.275,0.932,6.471c0.389,2.61,0.803,5.276,1.242,7.995 c4.823-3.434,9.455-6.756,12.16-9.995C1394.641,821.049,1395.285,812.059,1394.716,804.751z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1390.265,772.758c-2.415,5.888-5.919,11.931-9.053,17.506c4.371-6.764,9.245-3.743,11.838,4.94 c0.801,2.683,1.383,5.907,1.666,9.547c3.838-3.918,6.802-7.367,8.984-10.399c0.048-0.067,0.1-0.135,0.147-0.201 c4.953-6.949,5.781-11.704,3.757-15.001c-1.341-2.184-3.933-3.728-7.416-4.841c-2.744-0.877-6.034-1.491-9.703-1.939 c-0.02-0.003-0.041-0.005-0.061-0.007c0,0.001-0.001,0.002-0.001,0.003C1390.37,772.497,1390.319,772.627,1390.265,772.758z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1373.043,775.852c-0.071-1.634-0.131-3.209-0.179-4.717c-0.859-0.038-1.721-0.076-2.587-0.115 c-0.712-0.031-1.427-0.063-2.142-0.095c-0.773,3.512-1.664,7.395-2.686,11.644c-0.334,1.386-0.682,2.812-1.044,4.277 c-0.245,0.988-0.496,1.995-0.754,3.019c-0.772,3.065-1.605,6.289-2.505,9.68c-2.25,8.478-4.916,17.981-8.069,28.533 c-0.292,0.979-0.589,1.966-0.89,2.963c-1.217,4.03-2.501,8.204-3.861,12.531c7.886-5.92,14.854-11.337,21.005-16.31 c2.739-2.214,5.318-4.341,7.734-6.38c-1.423-10.94-2.407-20.772-3.076-29.44C1373.551,785.738,1373.248,780.54,1373.043,775.852z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1379.91,792.597c0.371-0.671,0.751-1.351,1.136-2.037c0.055-0.099,0.11-0.196,0.166-0.295 c-0.059,0.091-0.118,0.18-0.176,0.275C1380.656,791.151,1380.28,791.831,1379.91,792.597z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1385.634,746.96c-3.738-2.329-9.045-4.125-16.366-5.201c-1.917-0.282-3.986-0.509-6.187-0.689 c-3.66-0.299-7.724-0.452-12.222-0.446c-2.28,0.003-4.672,0.048-7.18,0.135c-6.565,0.229-13.91,0.745-22.156,1.599 c-1.115,3.368-1.575,6.322-1.478,8.92c8.825,4.678,17.03,10.969,22.881,17.432c3.094,0.54,6.37,0.94,9.744,1.251 c5.035,0.464,10.284,0.731,15.466,0.964c0.196-0.891,0.383-1.752,0.564-2.596c1.82-8.475,2.911-14.591,3.544-18.444 c0.286-1.738,0.479-3.018,0.603-3.843c0.049-0.324,0.087-0.577,0.117-0.762c0.083-0.52,0.095-0.495,0.07,0.063 c-0.01,0.221-0.025,0.523-0.045,0.909c-0.047,0.937-0.116,2.359-0.178,4.256c-0.143,4.383-0.246,11.299,0.055,20.627 c5.232,0.234,10.299,0.487,14.894,0.937c0.755,0.074,1.496,0.154,2.224,0.24c0.147,0.017,0.295,0.033,0.441,0.051 c0,0,0.001,0,0.001,0c1.887-4.692,3.057-9.275,2.77-13.435C1392.871,754.252,1390.697,750.115,1385.634,746.96z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1326.386,617.448c-0.516-0.251-1.041-0.5-1.575-0.749c-1.21-0.562-2.469-1.118-3.778-1.668 c-0.057,0.016-0.114,0.033-0.17,0.049c-0.801,0.979-1.384,1.908-1.65,2.753c-0.143,0.452-0.229,0.948-0.289,1.463 C1321.643,618.755,1324.178,618.163,1326.386,617.448z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1258.678,598.924c1.88,0.526,3.71,1.052,5.513,1.578c-0.088-0.216-0.178-0.43-0.273-0.636 C1262.201,599.552,1260.462,599.237,1258.678,598.924z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1346.408,632.27c-4.15,0.55-8.592,0.973-13.354,1.247c3.893,4.309,5.99,8.57,6.635,12.76 c0.115,0.747,0.18,1.491,0.205,2.233c0.224,6.646-3.072,13.104-8.454,19.287c4.099,4.733,7.351,12.231,9.776,23.13 c3.292,4.389,4.526,10.27,3.092,17.636c4.256-1.142,8.94-2.3,14.101-3.462c4.067-0.916,8.432-1.835,13.118-2.75 c-0.539-1.275-1.052-2.532-1.543-3.774c-1.645-4.154-3.036-8.127-4.248-11.931c-0.669-2.101-1.284-4.151-1.856-6.151 c-2.798-9.789-4.577-18.395-6.774-26.055c-0.312-1.087-0.632-2.157-0.965-3.207c-0.148-0.466-0.298-0.926-0.451-1.385 c-1.563-4.686-3.423-9-5.961-13.005c-0.851-1.343-1.777-2.651-2.795-3.927c-0.015-0.018-0.028-0.037-0.043-0.055 C1346.734,632.663,1346.571,632.466,1346.408,632.27z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1297.199,694.003c2.145,1.46,3.84,3.106,5.024,5.093c1.047-3.298,1.979-6.635,2.788-10.01 c-0.357,0.231-0.714,0.462-1.072,0.692C1301.702,691.214,1299.446,692.623,1297.199,694.003z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1287.8,699.678c-1.557,0.931-3.088,1.845-4.584,2.743c-3.493,2.096-6.793,4.1-9.765,6.003 c9.666,7.625,14.964,12.47,18.509,15.18c2.993-5.692,5.636-11.564,7.884-17.592c-2.503-3.273-4.961-6.313-7.375-9.135 C1290.894,697.827,1289.335,698.761,1287.8,699.678z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1384.479,727.432c-0.709-1.16-1.397-2.31-2.063-3.448 C1379.575,730.845,1380.943,730.628,1384.479,727.432z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1371.527,702.351c2.847,6.735,6.383,13.931,10.889,21.633c0.653-1.577,1.53-3.531,2.652-5.904 c1.419-3,3.231-6.676,5.489-11.13c-1.604-2.463-3.298-4.853-5.102-7.139c-4.298,0.732-8.375,1.47-12.234,2.211 C1372.65,702.131,1372.089,702.241,1371.527,702.351z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1283.613,606.667c-0.013-0.183-0.025-0.368-0.036-0.555c-0.117,0.136-0.235,0.273-0.353,0.41 c0.031,0.014,0.062,0.029,0.093,0.044C1283.414,606.599,1283.515,606.633,1283.613,606.667z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1273.762,601.921c0.042-0.047,0.084-0.094,0.125-0.141c-0.224-0.045-0.448-0.09-0.673-0.135 C1273.394,601.736,1273.578,601.828,1273.762,601.921z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1419.934,726.128c1.965-21.02-3.913-23.504-11.667-19.428c0.034,0.06,0.072,0.124,0.105,0.183 c4.503,7.867,7.998,16.134,10.939,24.611C1419.57,729.587,1419.778,727.796,1419.934,726.128z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1344.092,708.621c-0.778-6.694-1.736-12.57-2.876-17.694c-3.969-5.29-10.919-8.415-19.779-9.357 c-1.52,13.177-4.385,26.408-8.989,38.164c0.352-0.166,0.715-0.334,1.085-0.504 C1320.076,716.224,1329.59,712.522,1344.092,708.621z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1388.285,723.769c-1.433,1.423-2.721,2.682-3.805,3.663c0.401,0.657,0.811,1.317,1.227,1.981 c3.248,5.186,6.937,10.592,11.153,16.234c2.768,3.704,5.763,7.509,9.005,11.419c1.789,2.157,3.658,4.348,5.602,6.569 c-0.643-6.136-1.866-12.215-3.683-18.121c-3.027-9.832-6.853-19.902-11.793-29.288c-1.71,1.605-3.37,3.234-4.926,4.779 C1390.092,721.968,1389.161,722.899,1388.285,723.769z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1283.088,631.766c7.162,0.771,13.898,1.308,20.271,1.655c0.938,0.051,1.875,0.102,2.796,0.144 c0.345,0.016,0.704,0.039,1.046,0.053c-0.541-3.93-1.206-7.877-2-11.834C1295.744,623.609,1286.763,626.118,1283.088,631.766z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1313.244,595.422c0.643,2.224,1.247,4.436,1.799,6.622c1.961-2.411,3.951-4.71,5.969-6.904 C1318.497,595.237,1315.908,595.33,1313.244,595.422z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1389.442,617.635c-0.451-0.495-0.902-0.979-1.353-1.46c-0.2,0.195-0.418,0.386-0.626,0.579 C1388.121,617.039,1388.78,617.33,1389.442,617.635z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1360.038,609.947c-0.673-0.049-1.343-0.09-2.01-0.123c-4.185-0.206-8.239-0.098-12.146,0.242 c-3.99,0.347-7.827,0.932-11.503,1.659c-0.926,2.644-3.896,4.397-7.993,5.723c-2.209,0.715-4.743,1.307-7.462,1.848 c-0.487,4.217,1.595,10.296,2.451,14.578c0.071,0,0.144,0,0.215-0.001c4.003-0.031,7.831-0.148,11.464-0.357 c4.762-0.274,9.204-0.697,13.354-1.247c0.324-0.043,0.64-0.09,0.96-0.135c19.799-2.753,32.655-8.497,40.094-15.381 C1377.84,612.595,1368.666,610.579,1360.038,609.947z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1356.242,592.463c3.486,1.606,7.047,3.538,10.655,5.845c6.961,4.451,14.094,10.294,21.192,17.867 c11.121-10.824,9.199-24.268,0.054-33.297c-0.613-0.605-1.25-1.194-1.926-1.757c-0.118,0.018-0.236,0.034-0.354,0.051 C1378.749,587.257,1369.131,590.537,1356.242,592.463z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1283.577,606.112c0.011,0.187,0.023,0.372,0.036,0.555c0.001,0.013,0.002,0.026,0.003,0.039 c0.24,0.113,0.475,0.224,0.719,0.339c-0.225,0.117-0.443,0.232-0.666,0.348c0.161,1.878,0.415,3.535,0.76,4.987 c2.469,10.365,9.58,10.377,20.373,7.49c-1.685-7.993-3.879-16.005-6.532-23.947c-2.363,0.08-4.773,0.164-7.239,0.254 C1288.93,599.468,1286.422,602.787,1283.577,606.112z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1322.808,614.525c3.647-1.022,7.51-1.998,11.572-2.801c0.648-1.85,0.296-4.137-1.375-7.021 c-4.278,3.233-9.456,7.093-12.141,10.377c0.057-0.016,0.114-0.033,0.17-0.049C1321.62,614.862,1322.21,614.693,1322.808,614.525z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1250.484,560.693c-0.409,0.407-0.818,0.815-1.231,1.228c-1.387,1.391-2.794,2.822-4.219,4.287 c-0.764,12.37-2.05,23.186-3.628,32.578c1.797-0.13,3.578-0.256,5.337-0.375c13.355-12.642,26.575-26.154,38.237-34.26 c-3.782-7.452-7.965-14.698-12.499-21.66c-2.228,1.351-4.551,2.706-6.977,4.062 C1260.744,550.76,1255.746,555.459,1250.484,560.693z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1254.719,597.898c2.646-0.161,5.247-0.311,7.802-0.45c0.005,0,0.01-0.001,0.015-0.001 c-2.667-3.879-5.384-4.507,2.473-0.131c4.597-0.242,9.047-0.451,13.353-0.637c4.457-5.185,9.052-10.844,13.787-17.02 c-1.352-3.22-2.763-6.42-4.26-9.586C1276.117,579.896,1265.072,589.175,1254.719,597.898z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1404.344,461.741c0.095,4.819,0.174,9.469,0.232,13.94c0.019,1.418,0.035,2.819,0.049,4.203 c-0.95-0.421-1.897-0.834-2.841-1.238c-6.4-2.737-12.673-5.098-18.781-7.141c-1.6-0.535-3.187-1.048-4.764-1.541 c-0.536,0.305-1.077,0.605-1.622,0.901c-1.042,6.274-3.77,8.591-7.15,8.774c13.298,10.157,24.458,21.574,33.374,31.505 c0.536,0.597,1.065,1.19,1.585,1.776c-0.033,1.139-0.069,2.266-0.11,3.373c-0.174,4.794-0.414,9.286-0.729,13.501 c0.892,0.133,1.794,0.258,2.705,0.376c4.476,0.583,9.175,0.989,14.143,1.149c5.765,6.251,8.513,7.603,8.083,0.036 c0.732-0.016,1.471-0.038,2.215-0.065c0.292-11.5-0.381-22.993-1.971-34.197c-0.256-1.809-0.552-3.597-0.873-5.371 c-2.734-1.583-5.454-3.08-8.159-4.511c-1.602-6.87-3.427-14.576-5.475-23.182c-0.084-0.352-0.169-0.708-0.253-1.063 c-1.308-5.497-2.706-11.353-4.195-17.594c-0.546-0.851-1.102-1.696-1.668-2.535c-1.399,1.751-2.762,3.4-4.099,4.965 C1404.154,452.607,1404.256,457.25,1404.344,461.741z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1359.186,518.292c-0.963-0.276-1.922-0.544-2.878-0.803c-11.549-3.133-22.656-4.96-35.106-2.754 c-0.284,0.05-0.57,0.104-0.855,0.158c2.141,2.814,4.199,5.692,6.159,8.636c-2.886-2.766-5.717-5.479-8.498-8.146 c-5.47,1.254-11.219,3.303-17.387,6.359c-5.383,4.854-11.66,9.891-19.197,15.012c5.357,6.181,11.865,12.152,15.34,18.368 c0.429,0.768,0.852,1.549,1.272,2.333c2.044-0.566,4.004-0.823,5.866-0.704c-1.46,1.211-2.908,2.413-4.348,3.609 c5.573,10.943,10.259,23.193,13.69,35.061c2.664-0.092,5.253-0.185,7.768-0.282c20.009-21.748,43.036-32.424,73.524-24.967 c1.947-3.66,3.55-7.887,4.864-12.763c0.891-3.305,1.65-6.907,2.289-10.843c0.816-5.031,1.438-10.604,1.899-16.773 C1386.299,527.219,1372.363,522.064,1359.186,518.292z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1385.863,581.172c-6.725,0.963-14.077,0.751-17.53,1.551c-6.51,1.52-14.35,4.25-19.95,8.19 c-1.188,0.837-2.308,1.814-3.396,2.849c4.003-0.353,7.751-0.776,11.255-1.299 C1369.131,590.537,1378.749,587.257,1385.863,581.172z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1291.032,596.177c2.466-0.09,4.876-0.174,7.239-0.254c-0.892-2.67-1.829-5.333-2.824-7.982 C1294.284,590.657,1292.802,593.407,1291.032,596.177z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1326.484,462.589c-4.801-0.251-9.859,0.045-15.58,0.514c-0.048,0.004-0.091,0.008-0.139,0.011 c1.011,3.973,3.477,8.278,7.642,12.753C1320.869,471,1323.609,466.571,1326.484,462.589z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1403.689,466.674c-0.37-1.769-0.726-3.487-1.07-5.164c-0.715-3.479-1.374-6.759-1.981-9.852 c-2.505,2.74-4.938,5.184-7.352,7.378c0.729,0.486,1.458,0.979,2.189,1.486C1398.205,462.419,1400.947,464.466,1403.689,466.674z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1325.693,475.798c-6.205,4.531-13.331,9.47-21.467,14.82c12.302-5.213,27.254-9.997,46.059-13.58 c-7.683,2.292-13.354,6.371-18.803,11.747c5.341-1.963,10.213-3.71,14.695-5.328c0.651-0.235,1.296-0.468,1.931-0.698 c5.051-1.828,9.606-3.506,13.787-5.169c-4.497-2.236-8.892-5.691-11.422-7.268c-3.788-2.364-7.34-4.051-10.827-5.253 c-1.741,1.421-3.598,2.898-5.573,4.429C1331.487,471.504,1328.699,473.603,1325.693,475.798z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1326.503,442.244c-1.89,0.519-3.634,1.161-5.234,1.902c-1.934,0.897-3.65,1.946-5.114,3.135 c6.997,0.371,13.741,1.259,21.012,2.926c3.94-3.809,7.816-6.822,11.305-9.022c-7.135-0.908-13.598-0.711-19.098,0.386 c-0.812,0.162-1.604,0.343-2.373,0.544C1326.836,442.159,1326.667,442.199,1326.503,442.244z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1404.041,447.803c1.337-1.564,2.699-3.214,4.099-4.965c-3.518-5.209-7.429-10.183-11.729-14.916 c0.949,6.277,2.335,14.098,4.227,23.736C1401.755,450.435,1402.888,449.152,1404.041,447.803z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1352.313,453.797c11.4,2.819,25.759,7.602,24.371,16.717c-0.019,0.124-0.045,0.23-0.065,0.351 c0.546-0.296,1.086-0.596,1.622-0.901c0.913-0.519,1.814-1.053,2.703-1.602c3.861-2.383,7.527-5.081,11.206-8.316 c0.378-0.333,0.757-0.667,1.135-1.011c-10.233-6.821-20.294-11.53-29.689-14.481c-0.959-0.301-1.91-0.582-2.854-0.847 C1359.175,446.318,1356.45,449.676,1352.313,453.797z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1360.741,443.708c0.349-0.582,0.642-1.127,0.879-1.635c2.018-4.325,0.072-5.968-4.085-5.04 c-2.398,0.535-5.53,1.926-9.062,4.153C1352.378,441.683,1356.484,442.514,1360.741,443.708z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1304.368,382.35c-0.105,2.205-0.179,4.52-0.223,6.945c-0.006,0.353-0.017,0.69-0.022,1.047 c0.117-0.285,0.231-0.557,0.347-0.839c0.859-2.085,1.7-4.074,2.524-5.973c11.441-26.363,19.556-34.985,26.355-33.962 c-0.159-2.939-0.64-6.509-0.855-11.215c-0.342-7.29-0.021-14.644-0.103-21.966c-1.708,3.066-3.499,5.676-5.317,8.054 C1317.032,337.572,1306.199,343.785,1304.368,382.35z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1340.859,390.575c-1.089,1.797-2.121,3.508-3.088,5.126c-2.948,4.935-5.305,9.044-6.93,12.394 c-5.167,10.65-2.928,13.624,11.271,10.988c2.951-0.548,6.417-1.337,10.442-2.351c6.722-1.693,14.999-4.01,25.023-6.865 c-1.567-1.563-3.165-3.202-4.789-4.857c-1.615-1.369-3.153-2.921-4.622-4.617c-0.002-0.002-0.004-0.005-0.006-0.007 c-7.987-7.743-16.559-14.375-25.494-12.791C1342.047,388.615,1341.445,389.608,1340.859,390.575z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1289.038,316.709c1.185,0.904,2.394,1.787,3.621,2.653c1.134,0.801,2.286,1.583,3.455,2.348 c4.72,3.087,9.716,5.866,14.957,8.192c0.185-0.185,0.365-0.361,0.549-0.545c1.387-1.387,2.763-2.752,4.132-4.1 c5.627-5.545,11.102-10.775,16.41-15.696c-0.068-1.11-0.141-2.22-0.248-3.328c-0.289-3.009-0.67-5.927-1.141-8.759 C1315.461,309.064,1303.626,314.581,1289.038,316.709z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1277.184,261.162c10.132,13.387,13.553,29.963-2.976,42.324c0.66,0.683,1.329,1.364,2.012,2.042 c1.783,1.768,3.644,3.513,5.575,5.222c12.297-4.483,28.197-9.308,48.888-13.824c-4.192-24.468-15.494-42.069-37.621-50.461 c-1.994,0.371-3.972,0.798-5.93,1.28C1284.174,252.761,1280.764,257.271,1277.184,261.162z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1216.58,1144.919c-0.211-0.368-0.426-0.738-0.636-1.105c-0.517,0.216-1.037,0.424-1.56,0.627 C1215.111,1144.608,1215.844,1144.766,1216.58,1144.919z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1254.117,1188.859c0.015-4.717-0.381-7.954,0.339-10.633c-7.378-8.087-14.287-17.373-19.264-26.036 c-0.64,6.313-0.871,13.411-0.599,21.393c-3.917-5.721-7.598-11.387-11.057-16.984c0.081,1.089,0.172,2.163,0.276,3.217 c5.267,6.192,10.691,13.423,16.12,21.765C1244.803,1182.861,1249.611,1185.374,1254.117,1188.859z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1194.283,1099.554c-2.446,0.379-4.838,0.732-7.182,1.062c1.371,7.725,2.597,17.2,3.692,28.704 c5.376-0.579,10.58-1.791,15.386-3.716C1201.656,1116.615,1197.71,1107.907,1194.283,1099.554z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1161.144,1103.494c-0.182,0.014-0.368,0.03-0.549,0.043c0.696,6.191,4.936,13.13,11.829,19.619 c2.387,2.247,5.092,4.44,8.078,6.529c1.781,0.06,3.558,0.056,5.326-0.008C1173.28,1122.266,1165.656,1113.07,1161.144,1103.494z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1185.722,1093.656c2.526,1.078,5.013,2.134,7.454,3.168c-2.291-5.721-4.338-11.27-6.159-16.621 c-1.818-0.223-3.667-0.358-5.546-0.406C1183.011,1083.245,1184.425,1087.802,1185.722,1093.656z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1190.897,1080.807c0.01,0.381,0.021,0.753,0.03,1.138c1.646-0.146,3.262-0.13,4.854,0.03 c-0.989-0.281-1.986-0.536-2.993-0.765C1192.161,1081.067,1191.531,1080.93,1190.897,1080.807z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1247.143,1087.301c0.214,1.819,0.383,3.639,0.494,5.454c1.086,0.281,2.185,0.569,3.294,0.865 c2.656-2.069,5.385-4.326,8.138-6.711C1254.947,1086.305,1250.979,1086.506,1247.143,1087.301z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1325.387,1201.609c5.297-4.438,6.184-8.427-0.038-9.627c-2.354,4.924-4.812,9.808-7.433,14.574 c2.502-1.365,4.681-2.767,6.464-4.142C1324.73,1202.145,1325.068,1201.876,1325.387,1201.609z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1244.163,1117.766c-0.699,1.666-1.52,3.287-2.461,4.863c0.557,0.098,1.143,0.223,1.737,0.353 c0.713-1.245,1.461-2.403,2.234-3.488C1245.171,1118.916,1244.667,1118.339,1244.163,1117.766z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1228.947,1088.442c-1.759,3.15-3.907,6.713-6.48,10.743c1.773,2.069,3.54,4.294,5.307,6.658 c0.051-0.001,0.103-0.003,0.154-0.005c0.527-1.095,1.015-2.231,1.459-3.411c-1.611-1.49-3.237-2.932-4.882-4.312 c2.361-1.619,4.763-3.171,7.213-4.584c0.231-1.471,0.383-2.945,0.478-4.421 C1231.098,1088.878,1230.017,1088.656,1228.947,1088.442z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FCEE21",
                        d:
                          "M1293.563,1175.44c-1.431-1.403-2.845-2.839-4.247-4.296c-0.487-0.506-0.973-1.017-1.457-1.529 c-0.087-0.092-0.173-0.184-0.26-0.276c-1.495-1.585-2.975-3.196-4.442-4.83c-5.281-5.88-10.398-12.034-15.441-18.231 c-5.96-7.322-11.821-14.696-17.735-21.737c-1.253-0.283-2.524-0.576-3.838-0.892c-0.946-0.263-1.838-0.477-2.703-0.668 c-0.654,1.142-1.277,2.361-1.874,3.644c7.71,12.644,15.743,27.04,24.621,41.934c2.666-1.219,5.909-2.562,9.852-4.104 c-2.194,3.188-4.283,6.545-6.283,10.037c5.213,8.584,10.723,17.274,16.633,25.838c-6.099-0.07-14.568-5.433-23.184-13.31 c-1.113,2.316-2.198,4.671-3.258,7.06c5.545,5.691,10.371,12.867,13.912,20.917c-4.22-9.692-11.265-12.504-18.397-10.292 c-0.305,0.758-0.609,1.517-0.911,2.279c1.054,2.067,2.103,4.175,3.145,6.335c0.962,0.356,1.933,0.681,2.913,0.977 c3.397,1.026,6.888,1.699,10.411,2.072c8.378,0.888,16.935,0.086,24.832-1.686c5.393-7.361,10.526-15.6,15.26-24.365 C1304.966,1185.959,1299.149,1180.919,1293.563,1175.44z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1257.521,1463.671c-1.734-0.762-3.621-1.47-5.687-2.111c-0.878,0.908-1.741,1.795-2.595,2.67 c1.756,0.333,3.459,0.74,5.121,1.201C1255.337,1464.91,1256.4,1464.315,1257.521,1463.671z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1153.993,1406.135c1.079-1.096,2.167-2.194,3.284-3.3c-3.483,0.472-6.391,0.945-8.656,1.386 c0.638,0.717,1.271,1.419,1.904,2.124C1151.563,1406.294,1152.726,1406.223,1153.993,1406.135z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1160.595,1402.407c-0.373,1.106-0.751,2.2-1.132,3.289c4.256-0.381,9.398-0.918,15.487-1.639 c0.705-1.052,1.424-2.146,2.153-3.274C1170.857,1401.267,1165.308,1401.828,1160.595,1402.407z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1239.906,1401.454c0.284,0.112,0.564,0.207,0.843,0.293c2.262-6.582,2.344-13.334-1.736-18.723 c-1.346-1.779-3.018-3.544-4.899-5.295c-0.757,2.004-1.466,4.097-2.122,6.284 C1235.748,1386.9,1238.519,1392.405,1239.906,1401.454z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1228.625,1399.394c0.148-1.022,0.311-2.022,0.481-3.011c-6.863,1.085-13.248,2.061-19.204,2.944 C1215.894,1399.246,1222.152,1399.259,1228.625,1399.394z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1231.993,1384.013c-2.954-2.271-6.515-2.926-10.489-2.412c2.858,4.58,5.6,8.418,8.213,11.496 C1230.367,1389.895,1231.134,1386.875,1231.993,1384.013z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1183.97,1402.495c-0.244,0.179-0.487,0.359-0.73,0.538c0.521-0.067,1.05-0.135,1.582-0.204 C1184.538,1402.717,1184.254,1402.606,1183.97,1402.495z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1209.903,1399.326c-1.098,0.015-2.189,0.032-3.269,0.053c0.292,0.101,0.584,0.201,0.878,0.301 C1208.297,1399.564,1209.101,1399.445,1209.903,1399.326z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1286.82,1403.919c0.588,0.082,1.176,0.165,1.765,0.25c1.758,0.253,3.519,0.517,5.282,0.793 c2.28,0.357,4.564,0.733,6.849,1.131c0.765-0.718,1.527-1.434,2.305-2.161c1.253-1.171,2.521-2.354,3.808-3.55 c-1.708,0.062-3.392,0.096-5.057,0.106c-2.732,0.016-5.409-0.04-8.032-0.177c-0.4-0.021-0.797-0.046-1.194-0.071 c-0.397-0.025-0.794-0.05-1.189-0.079c-7.851-0.566-15.238-1.891-22.282-4.194c-4.338-1.418-8.545-3.213-12.653-5.421 c0.155,3.48,0.13,6.866-0.087,10.148C1266.279,1401.426,1276.497,1402.477,1286.82,1403.919z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1300.716,1406.092c-1.583,1.486-3.148,2.958-4.673,4.402c-8.033,7.603-15.262,14.615-21.596,20.944 c2.955,7.539-0.27,9.304-7.507,7.614c-5.887,6.07-10.716,11.322-14.401,15.661c15.211-9.176,33.353-17.929,53.961-24.509 c0.048-0.035,0.096-0.071,0.144-0.106c0.92-0.677,1.831-1.346,2.773-2.042c1.55-6.383,2.943-12.84,4.52-19.431 c-3.389-0.712-6.783-1.374-10.175-1.991C1302.747,1406.45,1301.731,1406.269,1300.716,1406.092z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1176.036,1521.919c0.264,0.006,0.528,0.02,0.791,0.025c-0.019-0.309-0.036-0.619-0.048-0.931 C1176.535,1521.314,1176.285,1521.617,1176.036,1521.919z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1199.13,1479.811c2.53-2.172,5.313-4.357,8.361-6.552c-1.759-0.236-3.913-0.635-6.452-1.181 c-0.092,0.451-0.188,0.905-0.289,1.365C1200.304,1475.477,1199.771,1477.602,1199.13,1479.811z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1306.5,1430.205c-20.608,6.579-38.75,15.333-53.961,24.509c-0.295,0.178-0.591,0.356-0.884,0.534 c-4.282,2.607-8.324,5.244-12.121,7.873c3.373,0.155,6.615,0.523,9.706,1.109c0.854-0.875,1.717-1.762,2.595-2.67 c2.065,0.641,3.953,1.348,5.687,2.111c0.851,0.374,1.666,0.761,2.44,1.163c3.694,1.917,6.518,4.14,8.576,6.605 c4.826,2.874,9.018,6.366,12.531,10.307c1.175-1.559,2.041-3.364,2.846-5.409c0.007-0.018,0.015-0.036,0.022-0.054 c0.006-0.016,0.012-0.032,0.018-0.047c1.22-3.118,2.316-6.789,4.168-10.981c2.881-6.523,7.608-14.311,17.495-23.259 c1.304-4.182,2.429-8.377,3.472-12.601c-0.818,0.251-1.631,0.507-2.442,0.765 C1306.598,1430.175,1306.548,1430.19,1306.5,1430.205z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1202.905,1458.794c4.949,4.736,8.441,8.283,10.06,10.703c2.608-1.711,5.382-3.427,8.333-5.145 c2.953-0.519,5.827-0.875,8.624-1.09c-2.911-2.496-5.494-4.71-7.785-6.654c-0.473-0.401-0.937-0.794-1.385-1.172 c-2.375-2.003-4.411-3.685-6.161-5.065c-3.131,0.594-6.964,1.184-11.173,1.682 C1203.26,1453.936,1203.127,1456.195,1202.905,1458.794z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1167.562,138.696c0.206,0.532,0.427,1.065,0.657,1.598c0.738,1.705,1.608,3.413,2.613,5.123 c1.546,2.63,3.418,5.263,5.651,7.894c0.853-0.299,1.92-0.535,3.21-0.69c1.204-4.663,4.215-8.449,9.472-11.016 c0.461-1.615,1.028-3.268,1.695-4.969c-0.574-2.853-1.112-5.34-1.603-7.471c-4.797-12.416-3.671-15.927,0,0 c0.665,1.721,1.445,3.613,2.346,5.648c0.208-0.491,0.425-0.987,0.649-1.486c2.031-4.535,4.686-9.425,7.853-14.827 c-8.811-7.351-19.89-8.275-33.298-7.834C1164.15,119.705,1163.868,129.143,1167.562,138.696z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D9E021",
                        d:
                          "M1205.267,109.916c-2.364-5.417-4.878-10.563-7.643-15.293c1.329,5.548,3.106,11.86,5.401,18.977 c0.123-0.204,0.249-0.41,0.373-0.616C1204.009,111.977,1204.629,110.959,1205.267,109.916z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1192.015,1058.808c3.907,10.195,6.607,18.029,9.92,24.558c7.174,2.524,13.9,8.081,20.532,15.818 c2.573-4.03,4.722-7.592,6.48-10.743c1.292-2.315,2.377-4.41,3.263-6.302c-0.357-5.824-1.553-11.678-3.17-17.541 C1220.906,1062.653,1206.183,1064.41,1192.015,1058.808z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1190.854,1055.803c-0.123-0.315-0.248-0.635-0.374-0.954c-0.234,0.299-0.474,0.602-0.713,0.905 c0.023,0.338,0.046,0.675,0.068,1.016C1190.18,1056.443,1190.52,1056.12,1190.854,1055.803z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1191.681,1057.938c-0.32,0.114-0.63,0.226-0.952,0.34c0.428,0.184,0.857,0.361,1.287,0.53 C1191.905,1058.521,1191.793,1058.229,1191.681,1057.938z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1158.701,1010.775c1.609,0.157,3.24,0.32,4.893,0.488c-1.425,0.946-2.817,1.86-4.187,2.752 c0.586,2.541,1.225,4.951,1.916,7.233c6.077-4.261,8.328-4.16,6.549,15.452c0.002,0.11,0.002,0.215,0.004,0.324 c1.616,2.888,3.347,5.45,5.168,7.724c1.782,2.225,3.649,4.178,5.58,5.888c-2.889-12.892-4.236-23.746-4.524-31.994 c-2.542-4.938-5.373-10.197-8.542-15.807c-1.836,0.528-3.656,1.088-5.459,1.682c-0.671,0.953-1.348,1.927-2.031,2.922 C1158.271,1008.572,1158.48,1009.689,1158.701,1010.775z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1157.352,1003.043c0.114,0.772,0.234,1.531,0.357,2.283c0.794-0.277,1.592-0.545,2.393-0.809 c0.124-0.176,0.248-0.351,0.372-0.526C1159.502,1003.974,1158.458,1003.651,1157.352,1003.043z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1262.837,1083.582c-1.258,1.132-2.516,2.243-3.768,3.328c-2.753,2.385-5.482,4.643-8.138,6.711 c-1.065,0.83-2.118,1.628-3.157,2.393c0.15,6.867-0.612,13.593-2.854,19.807c0.892,0.374,1.799,0.751,2.729,1.133 c25.227-29.566,74.163,12.325,30.588,11.616c0.387,0.14,0.783,0.282,1.175,0.423c4.905,1.765,10.133,3.621,15.725,5.588 c7.286-15.984-8.413-44.132-18.46-64.218C1272.209,1074.864,1267.519,1079.367,1262.837,1083.582z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1269.285,1049.291c-0.922,3.699,2.582,11.458,7.391,21.071c26.334-26.535,44.888-52.985,8.073-19.611 c-0.107-0.05-0.202-0.091-0.308-0.141c0.231,0.763,0.46,1.534,0.682,2.318 C1279.272,1051.626,1274.014,1050.417,1269.285,1049.291z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1227.774,1105.843c0.031,0.041,0.061,0.081,0.092,0.123c0.021-0.042,0.041-0.085,0.062-0.127 C1227.877,1105.839,1227.825,1105.842,1227.774,1105.843z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1231.21,1234.138c0.654,0.199,1.322,0.402,2.008,0.608c1.166-5.176,2.958-9.879,5.17-13.96 c1.133-2.09,2.376-4.016,3.699-5.763c-2.859-13.94-8.796-22.377-14.898-27.288c-1.889,6.774-8.204,19.08-11.162,41.2 c0.626,0.261,1.29,0.525,1.982,0.792C1247.826,1196.226,1242.076,1211.387,1231.21,1234.138z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1220.589,1185.793c-0.513-0.382-1.012-0.759-1.515-1.138c-0.455,0.288-0.908,0.592-1.357,0.914 C1218.604,1185.656,1219.556,1185.732,1220.589,1185.793z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1251.614,1348.957c-3.524,4.053-7.162,8.736-10.518,14.329c1.372,0.832,2.757,1.638,4.156,2.414 C1248.239,1362.444,1250.843,1356.64,1251.614,1348.957z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1316.136,1344.451c1.278,0.579,2.569,1.156,3.883,1.728c-1.126-1.093-2.223-2.155-3.315-3.212 c-1.415-1.369-2.805-2.71-4.164-4.018c-0.775-0.745-1.53-1.47-2.287-2.196c-1.031,0.721-2.692,1.616-4.766,2.593 C1308.895,1341.073,1312.44,1342.776,1316.136,1344.451z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1195.827,1230.461c-0.146,0.799-0.284,1.621-0.421,2.442c-0.324,1.935-0.627,3.926-0.905,5.985 c5.543-2.029,11.877-3.284,18.678-3.665c0.83-0.955,1.632-1.872,2.417-2.765c0.134-1.201,0.279-2.375,0.432-3.523 c-11.223-4.678-12.299-8.648-14.959-18.511C1198.996,1216.153,1197.225,1222.804,1195.827,1230.461z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1288.707,1329.973c2.497-1.757,5.287-3.662,8.388-5.721c-0.741-0.696-1.479-1.389-2.199-2.062 c-5.474,1.147-10.501,1.757-15.122,1.916C1282.605,1326.08,1285.574,1328.037,1288.707,1329.973z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1255.462,1204.706c7.133-2.212,14.178,0.601,18.397,10.292c-3.541-8.05-8.367-15.226-13.912-20.917 C1258.403,1197.56,1256.911,1201.108,1255.462,1204.706z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1254.117,1188.859c-4.506-3.486-9.313-5.998-14.184-7.278c4.236,6.51,8.474,13.697,12.639,21.591 C1253.834,1197.183,1254.105,1192.562,1254.117,1188.859z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1264.656,1013.448c0.238,0.264,0.477,0.534,0.716,0.807c-0.034-0.21-0.08-0.416-0.134-0.621 C1265.044,1013.572,1264.847,1013.509,1264.656,1013.448z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1175.125,1071.687c0.255,0.136,0.508,0.285,0.758,0.454c2.249-2.502,4.366-4.918,6.36-7.251 c-0.058-0.205-0.113-0.407-0.17-0.612C1179.864,1066.503,1177.534,1068.957,1175.125,1071.687z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1181.323,1061.546c-0.033-0.123-0.066-0.246-0.099-0.369c-0.005,0.137-0.012,0.272-0.017,0.409 C1181.246,1061.572,1181.284,1061.559,1181.323,1061.546z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1236.169,1033.324c9.87-2.858,28.66-4.736-5.336-15.898 C1233.132,1022.417,1234.813,1027.803,1236.169,1033.324z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1229.499,992.97c1.862-8.161,3.158-15.187,3.937-21.186c-13.188,0.305-22.224,1.344-27.395,2.197 c-1.396,0.405-2.523,0.695-3.37,0.89c4.962,3.11,9.142,10.032,12.624,20.929c4.531-0.095,9.049-0.066,13.528,0.082 c0.022-0.093,0.044-0.186,0.066-0.279C1229.099,994.712,1229.302,993.835,1229.499,992.97z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1165.296,966.461c0.452,0.899,0.957,1.8,1.52,2.705c1.087,12.325,0.901,20.964-0.217,26.557 c14.892-19.115,26.644-26.446,35.775-21.038c0.868-0.199,2.084-0.442,3.667-0.704c5.43-1.575,14.962-4.893,28.221-11.154 C1236.438,917.474,1197.966,952.386,1165.296,966.461z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1170.786,1001.432c1.433,1.311,2.812,2.581,4.133,3.808c1.728-7.553,5.717-5.654,9.309,8.875 c3.499,3.451,6.415,6.505,8.796,9.239c-0.964,1.348-1.911,2.815-2.823,4.404c-0.915,1.593-1.794,3.308-2.622,5.138 c0.85,6.52,1.598,14.12,2.188,22.857c0.239-0.303,0.479-0.606,0.713-0.905c3.182-4.062,5.921-7.809,8.265-11.254 c1.082-1.59,2.082-3.116,2.999-4.577c0.111,2.001-0.332,3.85-1.257,5.683c-1.736,3.441-5.145,6.837-9.633,11.102 c-0.333,0.317-0.674,0.64-1.019,0.967c0.039,0.589,0.076,1.184,0.113,1.784c0.26-0.092,0.522-0.184,0.781-0.276 c0.322-0.114,0.632-0.226,0.952-0.34c6.845-2.435,13.132-4.778,18.874-7.03c0.419-0.164,0.824-0.326,1.238-0.49 c3.928-1.552,7.599-3.061,11.03-4.528c0.03-0.013,0.061-0.026,0.091-0.039c-4.282-12.146-8.539-24.24-9.15-36.098 c-0.01-0.11-0.02-0.23-0.02-0.37c-0.02-0.23-0.03-0.51-0.04-0.85c0-0.02,0-0.05,0-0.07c-0.01-0.14-0.01-0.28-0.01-0.43 c0-0.26-0.01-0.51-0.01-0.77c0.11-0.31,0.19-0.43,0.25-0.4c1.046-1.655,2.087-3.305,3.13-4.957 c-0.569-2.158-1.158-4.194-1.769-6.106C1200.283,996.116,1185.131,997.837,1170.786,1001.432z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1189.165,141.604c-5.257,2.566-8.268,6.352-9.472,11.016c1.977-0.239,4.474-0.288,7.496-0.096 c1.927-2.319,3.708-4.634,5.363-6.94c-0.316-1.771-0.625-3.451-0.926-5.03C1190.757,140.877,1189.937,141.228,1189.165,141.604z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1195.03,141.995c0.649-0.981,1.275-1.959,1.878-2.935c-1.043,0.216-2.039,0.459-2.981,0.731 C1194.281,140.514,1194.649,141.249,1195.03,141.995z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1200.896,154.476c0.251-0.279,0.498-0.554,0.738-0.824c-0.918-1.471-1.79-2.92-2.616-4.342 c-0.992,0.639-2.087,1.364-3.281,2.172c-0.135,0.666-0.259,1.328-0.375,1.988C1197.1,153.745,1198.941,154.078,1200.896,154.476z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1179.29,161.225c0.176-0.178,0.352-0.357,0.527-0.535c-0.21-0.09-0.414-0.18-0.613-0.27 C1179.229,160.687,1179.257,160.955,1179.29,161.225z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1193.791,152.81c-0.165,0.114-0.334,0.231-0.503,0.348c0.188,0.026,0.382,0.055,0.573,0.083 C1193.838,153.098,1193.814,152.951,1193.791,152.81z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1183.261,172.86c2.799-2.846,5.783-5.88,8.666-8.858c-4.08-0.705-7.483-1.593-10.192-2.563 c-0.707,0.519-1.431,1.053-2.173,1.601c0.569,3.216,1.618,6.636,3.071,10.201C1182.843,173.113,1183.051,172.988,1183.261,172.86 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1277.184,261.162c3.58-3.891,6.989-8.401,9.948-13.417c0.534-0.905,1.049-1.83,1.552-2.768 c-2.417-0.74-4.937-1.393-7.591-1.934c-1.26-0.257-3.773-0.856-6.756-1.483c-2.383,3.351-4.751,6.427-7.093,9.148 C1270.896,253.823,1274.31,257.364,1277.184,261.162z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1240.843,221.037c-0.158,0.338-0.311,0.676-0.46,1.013c1.002,0.611,1.739,1.091,2.15,1.403 c0.188-0.54,0.374-1.076,0.561-1.613C1242.333,221.572,1241.587,221.304,1240.843,221.037z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1224.99,138.88c-0.9-0.107-1.786-0.206-2.656-0.296c-1.008-0.104-1.995-0.194-2.963-0.274 c-1.101-0.091-2.178-0.167-3.227-0.228c1.413,3.879,2.834,7.769,4.292,11.628c4.709-3.026,9.513-6.156,14.406-9.396 c-1.591-0.271-3.131-0.511-4.644-0.735C1228.409,139.314,1226.672,139.081,1224.99,138.88z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1242.738,170.189c0.436,2.863,0.539,4.968,0.407,6.493c3.21-1.71,6.553-3.537,10.032-5.49 c-0.065-0.663-0.138-1.326-0.226-1.991C1249.284,169.799,1245.845,170.145,1242.738,170.189z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1233.442,163.976c0.306,0.11,0.611,0.221,0.919,0.333c5.368-0.61,11.073-1.456,17.111-2.577 c-0.907-3.421-2.137-6.884-3.768-10.408c-0.977-2.113-2.047-4.281-3.198-6.482 C1240.658,151.531,1236.972,157.908,1233.442,163.976z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1236.696,180.059c0.393-0.202,0.794-0.411,1.191-0.616 C1236.358,178.613,1235.41,177.825,1236.696,180.059z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1242.738,170.189c-0.137-0.896-0.304-1.862-0.509-2.912c-2.708-1.056-5.328-2.043-7.868-2.969 c-0.399,0.045-0.794,0.088-1.189,0.131c-0.704,1.21-1.396,2.395-2.088,3.581C1233.91,169.595,1237.921,170.258,1242.738,170.189z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1231.339,719.835c2.994-2.794,6.053-5.437,9.158-7.927c1.56-1.251,3.131-2.463,4.712-3.637 c-2.308-1.427-4.6-2.828-6.875-4.209c-2.762,1.756-5.579,3.522-8.453,5.291C1230.338,712.607,1230.823,716.098,1231.339,719.835z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1234.631,646.388c-2.255,1.454-4.53,2.886-6.818,4.295c2.233,1.613,4.338,3.245,6.326,4.894 C1235.85,650.587,1235.966,647.362,1234.631,646.388z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1180.692,830.758c-0.151,2.927-0.242,5.891-0.256,8.905c1.644-1.998,3.225-3.968,4.767-5.92 c0.508-0.643,1.011-1.284,1.508-1.922c-1.597-1.569-2.882-3.906-4.05-6.578c-0.561,0.223-1.114,0.435-1.661,0.641 C1180.875,827.492,1180.777,829.121,1180.692,830.758z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1209.772,744.545c-1.315,1.865-2.595,3.776-3.845,5.724c0.266,0.638,0.539,1.298,0.811,1.954 c4.721-0.581,9.07-1.005,13.048-1.273C1216.769,749.646,1213.39,747.435,1209.772,744.545z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1203.583,682.308c-0.876,1.457-1.766,2.959-2.674,4.514c-1.152,1.974-2.331,4.032-3.533,6.167 c-0.225,0.399-0.449,0.797-0.676,1.203c0.468,0.185,0.939,0.384,1.412,0.591c0.963,0.422,1.934,0.892,2.91,1.408 c0.282,0.062,0.567,0.129,0.851,0.193c3.019-3.324,5.562-6.765,7.728-10.029C1207.561,685.019,1205.554,683.672,1203.583,682.308 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1210.364,796.495c0.353-0.641,0.704-1.282,1.044-1.916c-0.432-0.628-0.863-1.261-1.292-1.896 c-4.297,2.969-7.72,5.957-10.425,8.867c0.304,0.401,0.606,0.795,0.908,1.186c0.562-0.293,1.127-0.574,1.689-0.845 C1204.944,800.162,1207.637,798.363,1210.364,796.495z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1162.089,743.218c0.508-0.187,1.012-0.377,1.517-0.566c0.62-0.232,1.238-0.465,1.855-0.7 c-0.168-0.379-0.336-0.76-0.504-1.142c-0.484,0.41-0.972,0.821-1.462,1.231C1163.027,742.433,1162.562,742.825,1162.089,743.218z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1283.184,687.606c-3.813-1.39-8.056-2.865-12.655-4.625c-0.68,0.444-1.366,0.894-2.056,1.346 c-2.464,1.617-4.988,3.286-7.575,4.998c1.157,2.273,2.242,4.557,3.27,6.851c3.728-2.014,7.452-3.826,11.141-5.431 c2.32-1.009,4.625-1.936,6.909-2.784C1282.54,687.843,1282.862,687.722,1283.184,687.606z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1186.994,708.371c1.027-0.572,2.022-1.169,2.985-1.791c0.281-0.533,0.559-1.056,0.838-1.581 c-2.308,0.206-4.678,0.382-7.094,0.537c0.846,0.802,1.796,1.635,2.858,2.5C1186.717,708.147,1186.854,708.258,1186.994,708.371z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1167.885,738.305c0.38,0.762,0.752,1.516,1.122,2.267c2.873-1.139,5.711-2.311,8.509-3.518 c0.701-3.498,1.375-6.591,2.041-9.265C1175.866,731.259,1171.976,734.77,1167.885,738.305z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1194.468,693.383c-0.968-0.318-1.916-0.586-2.839-0.807c-5.419-1.296-9.935-0.93-12.118,0.896 c5.271,0.159,10.807,0.719,16.616,1.751c0.192-0.344,0.384-0.691,0.574-1.032 C1195.947,693.894,1195.202,693.625,1194.468,693.383z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1279.174,677.429c-0.493,0.31-0.989,0.623-1.487,0.939c-0.738,0.468-1.482,0.942-2.232,1.423 c2.7,2.26,5.462,4.79,8.286,7.615c3.992-1.425,7.912-2.6,11.72-3.529c3.824-0.932,7.533-1.614,11.089-2.047 c1.169-6.328,1.907-12.766,2.184-19.286c-4.231,1.19-8.827,3.152-13.796,5.718 C1290.046,670.788,1284.793,673.899,1279.174,677.429z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1344.092,708.621c0.026,0.219,0.052,0.432,0.078,0.653c0.052-0.24,0.092-0.474,0.138-0.711 c1.435-7.366,0.201-13.248-3.092-17.636C1342.356,696.051,1343.314,701.927,1344.092,708.621z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1341.216,690.927c-2.426-10.899-5.677-18.397-9.776-23.13c-2.56-2.956-5.449-4.837-8.676-5.791 c-0.139,6.377-0.566,12.961-1.327,19.564C1330.297,682.512,1337.248,685.637,1341.216,690.927z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1217.811,571.954c1.389,3.981,3.183,8.273,5.451,12.911c-2.53-2.672-4.996-5.1-7.4-7.299 c-0.346,1.03-0.692,2.093-1.039,3.156c9.175,10.879,16.313,19.784,21.715,27.073c1.291-1.142,2.585-2.307,3.879-3.49 c0.34-1.781,0.67-3.623,0.988-5.518c1.578-9.392,2.864-20.209,3.628-32.578c0.088-1.426,0.17-2.868,0.244-4.335 c0.086-1.718,0.162-3.468,0.228-5.244c-6.235,2.839-12.993,5.663-20.329,8.459c-2.262,2.045-4.509,3.73-6.729,5.086 C1218.236,570.757,1218.024,571.358,1217.811,571.954z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1208.181,571.15c-0.391,0.131-0.787,0.261-1.181,0.391c0.745,0.867,1.479,1.722,2.202,2.567 c0.664-0.164,1.333-0.357,2.005-0.574C1210.187,572.698,1209.178,571.903,1208.181,571.15z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1208.181,571.15c2.886-0.964,5.692-1.933,8.426-2.906c-0.623-2.081-1.127-4.068-1.522-5.967 c-2.428,2.588-5.043,5.302-7.871,8.148C1207.534,570.66,1207.858,570.906,1208.181,571.15z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1218.448,570.174c0.371-1.02,0.74-2.01,1.109-2.992c-0.974,0.355-1.957,0.709-2.95,1.062 c0.249,0.832,0.516,1.677,0.803,2.539C1217.756,570.587,1218.102,570.386,1218.448,570.174z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1263.918,599.866c0.095,0.207,0.185,0.42,0.273,0.636c1.406,3.482,1.738,8.226-2.12,13.717 c3.783-3.74,7.679-7.826,11.691-12.299c-0.184-0.093-0.368-0.185-0.548-0.276c-3.533-1.785-6.21-3.218-8.205-4.329 c-7.858-4.375-5.14-3.747-2.473,0.131c0.016,0.022,0.031,0.046,0.046,0.068C1263.05,598.203,1263.515,598.989,1263.918,599.866z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1248.515,626.603c1.4-1.172,2.816-2.389,4.252-3.66c-1.387,0.961-2.919,1.933-4.603,2.916 C1248.285,626.11,1248.404,626.36,1248.515,626.603z"
                      }
                    }),
                    _vm._v(" "),
                    _c("polygon", {
                      attrs: {
                        fill: "#FF00FF",
                        points:
                          "1238.999,611.159 1238.995,611.163 1238.998,611.167 "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1229.764,640.292c0.632-0.393,1.271-0.799,1.912-1.212c-0.44-0.033-0.885-0.067-1.334-0.103 c-0.189,0.441-0.377,0.865-0.562,1.281C1229.774,640.269,1229.769,640.28,1229.764,640.292z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1211.576,640.585c1.943-0.581,3.817-1.161,5.627-1.741c0.703-0.225,1.397-0.45,2.08-0.675 c-3.954-0.219-8.056-0.322-12.164-0.138c-0.059,0.05-0.12,0.101-0.179,0.15C1208.528,638.976,1210.074,639.777,1211.576,640.585z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1284.335,607.046c-0.245-0.115-0.479-0.226-0.719-0.339c-0.1-0.047-0.2-0.094-0.299-0.141 c-0.031-0.014-0.062-0.029-0.093-0.044c-0.593,0.687-1.198,1.373-1.819,2.06c0.745-0.394,1.502-0.79,2.265-1.188 C1283.892,607.278,1284.11,607.162,1284.335,607.046z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1266.422,722.12c-0.594-0.415-1.187-0.825-1.781-1.234c-5.764,7.852-10.737,15.242-14.971,22.182 c-0.076,0.125-0.156,0.252-0.232,0.376c-0.19,0.312-0.363,0.614-0.549,0.924c-0.41,0.681-0.81,1.356-1.206,2.029 c-0.867,1.473-1.702,2.926-2.503,4.358c-0.203,0.363-0.421,0.735-0.62,1.096c12.705,2.691,15.024,9.428,11.085,17.869 c6.295-5.586,12.167-11.643,17.543-18.101c-0.003-0.624-0.015-1.253-0.038-1.889 C1272.863,741.613,1270.925,732.53,1266.422,722.12z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1267.162,843.47c-0.039-0.046-0.079-0.093-0.117-0.139c-0.254-0.303-0.501-0.604-0.746-0.905 c-0.065-0.079-0.131-0.159-0.195-0.239c0.048,0.007,0.096,0.015,0.143,0.022c0.173,0.026,0.346,0.056,0.518,0.08 c0.293,0.042,0.585,0.077,0.877,0.114c1.425-3.217,2.662-6.542,3.687-9.953c-1.052-0.803-2.081-1.6-3.093-2.394 c-1.773-1.39-3.49-2.766-5.145-4.127c-0.871,4.905-2.51,9.815-4.813,14.509c1.008,0.301,2.021,0.571,3.036,0.814 c1.084,0.778,2.192,1.591,3.316,2.43c0.75,0.193,1.489,0.346,2.216,0.464C1266.953,843.922,1267.058,843.696,1267.162,843.47z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1284.17,859.691c-0.088,0.016-0.176,0.032-0.264,0.048c1.171,0.976,2.382,1.965,3.639,2.968 C1286.405,861.677,1285.281,860.673,1284.17,859.691z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1266.848,844.147c-0.139,0.296-0.279,0.591-0.421,0.884c0.207,0.157,0.419,0.324,0.627,0.483 c0.259,0.198,0.519,0.4,0.78,0.601c1.292,0.999,2.601,2.024,3.944,3.102c0.187-0.023,0.374-0.043,0.561-0.064 c-1.626-1.661-3.117-3.281-4.482-4.864C1267.523,844.251,1267.186,844.202,1266.848,844.147z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1233.816,822.31c0.021,0.037,0.043,0.074,0.064,0.111c1.055,1.813,2.244,3.489,3.549,5.03 c0.251,0.1,0.497,0.192,0.752,0.298c-0.004,0.184-0.007,0.364-0.011,0.548c1.656,1.834,3.474,3.473,5.418,4.925 c0.383,0.286,0.767,0.57,1.159,0.842c1.829,1.268,3.758,2.375,5.747,3.346c0.597,0.291,1.198,0.571,1.806,0.837 c0.478,0.209,0.959,0.411,1.443,0.605C1247.392,835.007,1240.628,829.33,1233.816,822.31z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1260.42,794.307c-2.244,0.374-4.322,0.344-5.698-0.263c1.448,1.52,2.71,3.139,3.797,4.837 C1259.109,797.361,1259.748,795.839,1260.42,794.307z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1237.058,852.407c0.109-1.854,0.2-3.796,0.272-5.824c0.046-1.294,0.087-2.611,0.117-3.978 c0.318-4.245,0.532-8.29,0.66-12.153c0.024-0.724,0.046-1.444,0.064-2.154c-0.251-0.278-0.497-0.559-0.74-0.846 c-2.392-0.952-4.62-1.671-6.688-2.17c-0.977,2.618-4.188,2.3-8.906-0.813c-0.686,0.065-1.346,0.162-1.978,0.294 c-2.916,0.609-5.274,1.906-7.135,3.735c-4.74,4.658-6.284,12.725-5.794,21.416c0.427,7.571,2.398,15.612,5.154,22.285 c2.977-0.064,5.879-0.42,8.695-1.023c4.567-4.657,9.845-8.621,15.748-11.787c0.052-0.549,0.104-1.104,0.152-1.672 C1236.822,856.031,1236.948,854.261,1237.058,852.407z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1282.154,840.365c-0.328-0.23-0.651-0.459-0.976-0.689c-1.291,1.37-2.706,2.424-4.226,3.19 c1.629-0.05,3.203-0.169,4.701-0.353c1.014-0.124,1.994-0.276,2.933-0.457C1283.764,841.491,1282.956,840.927,1282.154,840.365z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1161.185,507.339c-0.061-4.646-0.092-9.433-0.084-14.403c-1.027,4.591-1.97,9.052-2.846,13.409 c-0.702,3.491-1.356,6.91-1.963,10.256c-0.272,1.5-0.534,2.985-0.787,4.457c2.048,0.68,4.061,1.364,6.031,2.052 c-0.055-1.698-0.104-3.423-0.149-5.171C1161.299,514.503,1161.232,510.968,1161.185,507.339z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1282.368,739.498c0.804-1.172,1.592-2.356,2.364-3.549c-2.185-1.794-4.373-3.532-6.562-5.219 C1279.47,733.665,1280.854,736.59,1282.368,739.498z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1257.426,682.966c-0.515-0.879-1.045-1.755-1.59-2.629c-0.567-0.909-1.151-1.816-1.754-2.72 c-0.618-0.927-1.255-1.851-1.913-2.771c-6.656-3.44-13.718-7.709-21.043-13.196c-9.392-0.228-17.836,1.329-25.581,1.813 c-5.442,2.907-10.826,5.631-16.062,8.14c2.804,2.37,5.719,4.652,8.732,6.874c1.757,1.296,3.547,2.571,5.368,3.831 c1.971,1.364,3.978,2.712,6.018,4.047c11.982-18.056,12.47-30.705,18.658,11.619c0.294,0.178,0.589,0.356,0.883,0.534 c3.025,1.827,6.092,3.673,9.193,5.555c2.275,1.381,4.568,2.782,6.875,4.209c6.389,3.951,12.89,8.108,19.432,12.615 c0.593,0.409,1.187,0.819,1.781,1.234c3.909,2.729,7.83,5.59,11.748,8.611c-5.088-11.485-8.879-23.128-14.002-34.553 c-1.028-2.294-2.113-4.578-3.27-6.851C1259.812,687.195,1258.661,685.074,1257.426,682.966z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1219.706,645.273c-1.149-0.71-2.322-1.416-3.529-2.117c-0.951-0.552-1.923-1.102-2.912-1.648 c-0.558-0.308-1.119-0.616-1.689-0.923c-1.501-0.808-3.048-1.609-4.635-2.404c0.059-0.05,0.12-0.101,0.179-0.15 c-0.457,0.02-0.914,0.045-1.371,0.073c3.201,3.602,6.385,6.924,9.54,9.987c1.64-0.75,3.315-1.559,5.031-2.441 C1220.119,645.524,1219.909,645.399,1219.706,645.273z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1133.871,680.738c-1.382-0.016-2.74-0.036-4.08-0.058c0.509,0.635,1.015,1.259,1.519,1.874 c0.735-0.372,1.437-0.735,2.118-1.094C1133.568,681.223,1133.711,680.985,1133.871,680.738z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1173.922,608.079c-1.185-2.938-2.3-6.217-3.341-9.863c-0.184-0.646-0.366-1.305-0.545-1.974 c-0.035-0.129-0.069-0.26-0.104-0.39c-4.277,5.125-10.936,7.017-18.508,3.725c0.196,1.6,0.41,3.174,0.648,4.716 c0.822,5.321,1.896,10.301,3.198,14.986c-2.864-0.775-5.812-1.537-8.834-2.289c-0.082,0.233-0.166,0.469-0.256,0.721 c5.955,3.775,8.718,6.405,1.453,2.325c-0.718-0.124-1.436-0.253-2.152-0.385c-0.74,2.037-1.652,4.495-2.711,7.307 c3.347,8.122,2.273,13.325-4.405,11.522c-0.314,0.812-0.635,1.639-0.962,2.479c1.104,1.454,2.271,2.967,3.506,4.543 c5.892-5.196,18.468-12.153,42.447-22.072C1179.874,619.999,1176.707,614.982,1173.922,608.079z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1144.065,616.406c0.553,0.333,1.089,0.661,1.603,0.983c0.075-0.178,0.154-0.366,0.224-0.533 C1145.284,616.706,1144.679,616.556,1144.065,616.406z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1142.246,625.741c0.984-2.44,1.829-4.516,2.535-6.223c-2.255-0.425-4.498-0.89-6.719-1.394 C1139.782,620.817,1141.186,623.386,1142.246,625.741z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1131.806,655.182c2.882,4.615,6.188,10.087,9.963,16.435c0.92-0.9,1.908-1.838,2.968-2.815 c-5.607-9.115-3.567-6.236,2.809,2.531c6.926-9.708-16.669-11.98-9.824-22.327c-0.849-0.803-1.693-1.601-2.529-2.389 C1134.113,649.367,1132.982,652.228,1131.806,655.182z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1152.321,563.341c-0.612,0.081-1.223,0.162-1.832,0.239c-0.032,0.608-0.066,1.218-0.094,1.82 C1151.034,564.726,1151.676,564.039,1152.321,563.341z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1303.594,767.948c7.351,6.979,16.514,13.71,28.222,20.089c-1.463-2.222-2.898-4.458-4.286-6.601 c-1.255-1.741-2.518-3.45-3.79-5.12c-2.258-2.966-4.541-5.82-6.845-8.575c-4.233-2.957-17.849-11.416-24.786-12.666 c1.174,1.563,2.412,3.117,3.721,4.662C1298.175,762.507,1300.748,765.246,1303.594,767.948z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1246.744,598.412c-2.107,1.995-4.217,3.967-6.325,5.893c-1.294,1.183-2.588,2.347-3.879,3.49 c0.863,1.164,1.681,2.286,2.456,3.368c0.001-0.001,0.003-0.003,0.004-0.004c5.053-4.267,10.293-8.689,15.719-13.261 c10.353-8.723,21.398-18.002,33.171-27.826c-0.94-1.987-1.913-3.96-2.909-5.921 C1273.319,572.257,1260.098,585.77,1246.744,598.412z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1303.902,556.752c-1.862-0.119-3.822,0.138-5.866,0.704c0.513,0.957,1.02,1.925,1.518,2.904 C1300.993,559.165,1302.442,557.963,1303.902,556.752z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1242.018,662.795c-2.405-2.439-5.021-4.846-7.88-7.218c-1.988-1.649-4.092-3.281-6.326-4.894 c-1.946,1.198-3.902,2.38-5.863,3.542c3.097,2.701,6.158,5.165,9.175,7.425C1234.621,661.735,1238.247,662.067,1242.018,662.795z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1205.749,638.103c-2.407-2.709-4.825-5.58-7.247-8.622c-0.917,0.039-1.824,0.026-2.719-0.051 c-0.401,3.535-1.017,7.011-1.818,10.429C1197.792,638.877,1201.765,638.346,1205.749,638.103z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1119.17,903.419c-0.02,1.506,0.006,3.045,0.067,4.608c0.054,1.381,0.139,2.782,0.252,4.201 c10.114,3.205,11.008,8.483,1.564,12.063c0.55,3.136,1.211,6.312,1.962,9.497c0.009,0.036,0.017,0.072,0.026,0.109 c4.847,9.047,9.131,17.928,12.758,26.217c0.537-0.128,1.024-0.255,1.46-0.383c0.324-1.39,0.574-2.805,0.734-4.246 c2.957,2.183,2.629,3.255-0.734,4.246c-0.182,0.781-0.389,1.554-0.62,2.318c5.197,12.085,8.95,22.807,10.96,30.798 c3.471,4.998,6.822,8.583,9.754,10.196c1.106,0.608,2.151,0.931,3.121,0.948c2.099-2.966,4.14-5.719,6.126-8.268 c1.118-5.592,1.304-14.232,0.217-26.557c-0.563-0.904-1.068-1.806-1.52-2.705c-8.118-16.149,1.425-31.343,17.175-43.724 c2.941-2.312,6.099-4.526,9.399-6.63c-2.497-2.086-4.947-4.131-7.346-5.544c-14.03-8.27-33.27-15-49.65-16.1 c-3.086-0.21-8.769-0.092-15.07,0.406C1119.418,897.576,1119.209,900.435,1119.17,903.419z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1255.144,906.248c-2.599,2.332-5.022,4.924-7.197,7.462c3.938,1.745,8.017,3.585,12.232,5.52 c5.828,2.674,11.925,5.534,18.302,8.589c-4.858-12.429,0.452-15.01,14.438-10.909c-1.213-2.675-2.455-5.023-3.721-7.067 c-0.912-1.472-1.836-2.784-2.769-3.954c-3.319-4.159-6.759-6.479-10.209-7.435 C1268.875,896.418,1261.489,900.552,1255.144,906.248z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1194.825,892.654c-1.212-0.405-2.39-0.79-3.551-1.164c-6.067-1.957-11.438-3.498-16.174-4.686 c1.659-1.683,3.247-3.695,4.717-6.092c-1.701-0.859-3.347-1.646-4.963-2.392c-0.615-0.284-1.227-0.564-1.83-0.833 c-15.081-6.711-26.392-8.473-34.653-6.632c-2.779,2.942-5.665,5.097-8.624,6.544c-0.899,1.444-1.783,2.866-2.656,4.273 c26.014,0.478,52.665,12.461,76.021,22.402c0.616-2.655,1.368-5.232,2.238-7.734 C1201.646,894.989,1198.135,893.76,1194.825,892.654z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1242.143,911.162c0.256-0.703,0.519-1.424,0.797-2.183c4.24-2.397,7.647-4.512,10.32-6.363 c13.694-9.481,7.966-11.98-5.699-9.358c-6.581,1.263-15.003,3.714-23.98,7.142c-0.293,0.835-0.587,1.701-0.885,2.605 C1228.746,905.439,1235.224,908.153,1242.143,911.162z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1242.143,911.162c-9.34,25.633-4.649,14.744,5.804,2.547 C1245.977,912.836,1244.045,911.989,1242.143,911.162z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1221.964,384.767c0.035,0.2,0.067,0.402,0.102,0.603c0.15-0.031,0.301-0.062,0.452-0.093 C1222.334,385.107,1222.15,384.937,1221.964,384.767z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1258.433,352.286c1.711,2.643,3.363,5.443,4.877,8.392 C1263.17,354.11,1261.416,351.817,1258.433,352.286z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1269.044,374.368c5.007,2.898,9.807,6.778,14.037,11.003 C1295.177,371.568,1286.064,370.926,1269.044,374.368z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1181.87,377.65c0.226,0.947,0.337,1.842,0.319,2.681c-0.694-0.614-1.373-1.218-2.059-1.827 c-2.094,1.018-4.124,1.982-6.12,2.918c3.639,2.321,8.34,5.983,14.649,11.422c2.196,0.592,4.427,0.82,6.68,0.734 c3.702-0.14,7.459-1.115,11.211-2.686c-0.22-0.806-0.445-1.605-0.677-2.391c-0.039-0.134-0.083-0.279-0.125-0.418 c-4.464,0.513-8.61,0.737-12.274,0.562c-6.064-0.29-10.801-1.681-13.453-4.689c-0.537-0.609-0.994-1.281-1.353-2.028 c7.168-2.298,15.715-2.911,24.515-2.518c-0.661-2.459-1.268-5.075-1.68-7.697c-1.457-0.57-2.956-1.159-4.479-1.758 C1191.703,372.744,1186.661,375.3,1181.87,377.65z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1216.951,1302.629c0.601-1.029,1.194-2.081,1.78-3.152c-0.061-0.354-0.12-0.705-0.179-1.057 c-5.089,1.089-9.818,2.507-14.162,3.96c-0.078,0.854-0.157,1.719-0.236,2.611c-0.73-0.605-1.448-1.192-2.174-1.79 c-4.01,1.39-7.667,2.758-10.943,3.848c-0.15,1.785-0.331,3.624-0.543,5.52 C1198.539,1308.238,1208.619,1305.269,1216.951,1302.629z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1239.854,1236.707c1.12,0.326,2.278,0.662,3.471,1.007c0.169-0.486,0.338-0.972,0.508-1.458 c0.047-2.646,0.013-5.173-0.1-7.578c-0.122,0.267-0.239,0.529-0.364,0.799C1242.307,1231.776,1241.133,1234.19,1239.854,1236.707 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1158.005,1238.721c4.963,6.526,10.297,12.974,16.036,19.197c1.598-5.467,5.165-10.07,10.166-13.68 c-2.542-1.121-5.015-2.08-7.401-2.85C1169.857,1239.146,1163.586,1238.355,1158.005,1238.721z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1254.456,1178.227c-0.721,2.679-0.325,5.915-0.339,10.633c-0.012,3.702-0.283,8.323-1.545,14.313 c0.661,1.253,1.321,2.523,1.978,3.812c0.302-0.762,0.606-1.521,0.911-2.279c1.449-3.598,2.941-7.146,4.485-10.625 c1.06-2.389,2.145-4.744,3.258-7.06C1260.276,1184.344,1257.332,1181.379,1254.456,1178.227z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1269.756,1174.494c2-3.492,4.088-6.849,6.283-10.037c-3.943,1.542-7.186,2.884-9.852,4.104 C1267.361,1170.531,1268.551,1172.509,1269.756,1174.494z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1213.178,1235.223c0.707-0.04,1.423-0.06,2.139-0.081c0.087-0.909,0.179-1.805,0.278-2.684 C1214.811,1233.351,1214.008,1234.268,1213.178,1235.223z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1218.009,1229.726c3.467,1.337,7.785,2.761,13.201,4.412 C1242.076,1211.387,1247.826,1196.226,1218.009,1229.726z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1192.409,136.599c-0.28-0.608-0.546-1.201-0.805-1.786c-0.902-2.035-1.681-3.927-2.346-5.648 c0.491,2.131,1.029,4.618,1.603,7.471c0.249,1.237,0.505,2.539,0.767,3.919c0.3,1.579,0.609,3.259,0.926,5.03 c0.86-1.199,1.687-2.395,2.477-3.589c-0.381-0.746-0.749-1.482-1.103-2.204C1193.391,138.698,1192.884,137.631,1192.409,136.599z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1208.528,128.811c-0.212-0.365-0.42-0.74-0.636-1.092c0.199,0.545,0.402,1.097,0.607,1.65 C1208.508,129.183,1208.519,128.995,1208.528,128.811z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1208.972,110.369c0.006,1.471,0.003,2.961-0.013,4.481c0.994-2.203,1.999-4.401,3.002-6.592 c-0.048-2.272-0.081-4.496-0.101-6.674c-0.401-0.362-0.801-0.724-1.204-1.078 C1210.315,103.676,1209.763,106.972,1208.972,110.369z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1189.257,129.164C1185.586,113.237,1184.46,116.748,1189.257,129.164L1189.257,129.164z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1205.267,109.916c0.798,1.829,1.58,3.688,2.347,5.572c0.515-1.73,0.966-3.437,1.357-5.12 c-0.016-4.035-0.115-7.885-0.294-11.554c-3.883-3.233-7.901-6.07-12.007-8.39c0.289,1.349,0.605,2.747,0.953,4.199 C1200.389,99.354,1202.904,104.5,1205.267,109.916z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1195.363,153.469c0.116-0.66,0.24-1.322,0.375-1.988c-0.622,0.421-1.267,0.86-1.947,1.329 c0.023,0.141,0.047,0.288,0.07,0.431C1194.352,153.312,1194.853,153.388,1195.363,153.469z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1207.348,146.026c-0.271,3.146-0.58,6.376-0.921,9.68c1.068,0.256,2.167,0.532,3.289,0.823 c3.516-2.214,7.09-4.485,10.72-6.818c-1.458-3.859-2.879-7.749-4.292-11.628c-0.666-1.828-1.33-3.654-1.995-5.472 c-0.073-0.2-0.147-0.4-0.22-0.6c-0.504-1.377-1.01-2.75-1.517-4.116c-0.658-1.771-1.32-3.532-1.988-5.278 c-0.505-1.32-1.014-2.632-1.528-3.933c-0.073,3.265-0.195,6.641-0.367,10.128c3.157,5.45,5.892,12.446,8.199,21.453 c-3.122-7.503-5.848-14.452-8.228-20.895c-0.261,5.151-0.63,10.545-1.112,16.193 C1207.414,145.683,1207.401,145.838,1207.348,146.026z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1201.635,153.651c3.157-3.55,5.349-6.337,5.713-7.625c0.014-0.156,0.025-0.309,0.039-0.465 c-0.202-0.891-2.637,0.056-8.368,3.748C1199.844,150.731,1200.716,152.181,1201.635,153.651z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1220.752,511.675c1.611,2.082,3.564,4.286,5.911,6.621c29.77,4.317,19.659,0.854,6.556,5.988 c1.241,1.054,2.547,2.127,3.934,3.226c3.722-0.856,7.238-2.234,10.744-4.002c-0.971-3.396-2.834-6.829-5.336-10.223 c-1.671-2.267-3.625-4.516-5.789-6.724c1.308-0.474,2.543-0.942,3.73-1.407c0.236-0.092,0.483-0.185,0.714-0.277 c-4.939-4.614-10.067-8.905-15.384-12.774c-2.65-1.93-5.94-3.58-9.39-5.18c-5.132-2.39-10.6-4.671-14.805-7.622 c-0.098,0.596-0.197,1.192-0.298,1.789c-18.104-9.838-28.478-11.631-0.686,3.932c-0.559,3.104-1.157,6.198-1.793,9.267 c-0.361,1.74-0.732,3.472-1.117,5.191c-1.034,4.62-2.157,9.149-3.361,13.527c2.778,0.497,5.418,0.96,7.931,1.394 c0.572-0.437,1.151-0.872,1.749-1.306c0.488,0.623,0.936,1.233,1.377,1.842c0.633,0.107,1.254,0.212,1.87,0.315 C1212.178,514.04,1216.648,512.848,1220.752,511.675z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1176.347,522.078c-3.69,0.729-7.534,1.463-11.52,2.199c6.564,2.359,12.671,4.748,18.296,7.119 c2.697-2.288,5.241-4.699,7.869-7.166c0.604-1.818,1.193-3.679,1.765-5.576C1187.638,519.784,1182.177,520.926,1176.347,522.078z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1194.03,518.371c-0.344-0.171-0.684-0.338-1.032-0.514c-0.079,0.267-0.161,0.531-0.241,0.797 C1193.186,518.56,1193.606,518.465,1194.03,518.371z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1269.026,404.505c-1.044,3.897-2.541,7.894-4.571,11.982 C1267.524,411.766,1269.323,407.683,1269.026,404.505z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1143.291,542.494c-0.005,0.029-0.009,0.058-0.013,0.088c1.027,1.782,2.046,3.418,3.056,4.918 c1.484-0.248,2.989-0.54,4.52-0.878c-1.166-1.245-2.339-2.57-3.521-3.965C1145.924,542.632,1144.575,542.579,1143.291,542.494z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1143.864,538.404c1.165,1.477,2.321,2.897,3.469,4.252c1.105,0.019,2.247,0.022,3.437,0.003 c-1.894-4.803-3.772-9.777-5.633-14.925c-0.155,0.026-0.307,0.052-0.462,0.078 C1144.565,531.366,1144.294,534.896,1143.864,538.404z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1239.861,482.24c-0.411,0.01-0.822,0.026-1.234,0.046c4.939,5.581,10.137,10.97,15.118,16.516 C1270.187,488.514,1255.672,481.837,1239.861,482.24z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1220.725,450.046c-0.003,0.102-0.011,0.206-0.012,0.308c-0.041,6.069,2.083,10.811,5.571,16.135 c2.175-3.768,4.746-7.577,7.532-11.368C1230.218,454.22,1225.824,452.612,1220.725,450.046z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1242.992,443.423c0.363-0.442,0.726-0.882,1.09-1.322c4.137-5.001,8.279-9.844,11.968-14.383 c0.605-0.744,1.197-1.48,1.776-2.208c-8.626-3.002-10.077-12-22.689-27.072c-0.525,0.066-1.065,0.138-1.604,0.21 c-0.519,0.069-1.042,0.139-1.574,0.213c-2.513,0.35-5.178,0.757-7.998,1.223c0.81,9.116,0.978,18.044,0.674,25.853 C1230.199,431.212,1236.3,437.026,1242.992,443.423z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1225.208,448.19c5.384,0.108,9.601,0.687,12.753,1.483c0.411-0.524,0.824-1.047,1.24-1.568 c0.076-0.096,0.152-0.192,0.228-0.287c-5.572-3.223-11.058-6.234-16.375-9.044c-0.377,1.452-0.785,2.91-1.157,4.353 C1222.995,444.754,1224.097,446.424,1225.208,448.19z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1202.974,404.044c0.374,0.725,0.713,1.585,1.021,2.558c1.984,1.828,4.072,3.764,6.266,5.81 c-0.195-3.203-0.581-6.432-1.104-9.622C1207.154,403.186,1205.099,403.602,1202.974,404.044z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1159.884,396.152c-1.666-2.048-3.353-4.176-5.054-6.359c-2.381,0.948-4.669,1.817-6.876,2.618 c1.705,4.264,3.579,8.555,5.641,12.861C1155.856,402.083,1157.948,399.051,1159.884,396.152z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1136.495,294.567c-0.12,0.539-0.237,1.084-0.35,1.637c-0.032,0.158-0.065,0.314-0.097,0.473 c0.041,1.373,0.069,2.735,0.08,4.083c1.38,0.482,2.786,1.001,4.213,1.546C1139.203,299.798,1137.916,297.212,1136.495,294.567z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1175.918,304.003c0.592,2.578,1.162,5.3,1.702,8.186c7.277,0.363,14.093,0.754,20.51,1.156 c-1.802-12.578,3.92-24.357,18.111-41.208c-5.299-12.334-12.226-27.076-21.453-44.593c-8.437,12.856-15.459,22.488-21.505,29.448 C1183.251,287.644,1182.354,303.703,1175.918,304.003z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1156.661,309.464c6.88,3.369,14.22,7.364,22.065,12.038c-0.981-5.321-2.226-11.088-3.618-17.536 c-5.379-0.77-14.015-11.218-23.362-31.898c-1.635,0.131-3.217-0.031-4.772-0.457c-3.756,3.675-7.05,10.115-9.413,18.667 C1144.727,298.179,1150.827,304.441,1156.661,309.464z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1250.005,324.768c3.674-1.843,8.4-4.275,14.607-7.06c-4.998-0.15-10.408-0.443-16.345-0.832 c0.086,3.128-0.856,5.416-2.563,7.053C1246.948,324.132,1248.377,324.411,1250.005,324.768z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1239.247,326.959c-0.587,0.124-1.194,0.231-1.821,0.318c0.79,0.782,1.668,1.157,2.74,1.182 C1239.795,327.916,1239.489,327.416,1239.247,326.959z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1159.344,187.311c3.083-1.865,6.25-3.774,9.493-5.73c-3.295-5.502-6.755-11.182-10.411-17.07 C1158.653,172.494,1158.964,180.081,1159.344,187.311z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1281.795,310.75c-4.932,1.798-9.281,3.541-13.136,5.187c-1.415,0.604-2.763,1.195-4.047,1.771 c2.85,0.085,5.571,0.125,8.175,0.107c2.668-0.019,5.218-0.097,7.674-0.243c2.985-0.178,5.829-0.462,8.576-0.863 c14.589-2.128,26.423-7.645,41.735-19.234c-0.03-0.182-0.059-0.367-0.09-0.549 C1309.992,301.442,1294.092,306.266,1281.795,310.75z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1211.961,108.259c0.02,0.95,0.041,1.902,0.066,2.868c1.256-1.779,2.494-3.747,3.717-5.866 c-1.276-1.264-2.571-2.49-3.883-3.676C1211.88,103.763,1211.913,105.987,1211.961,108.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1281.068,1481.745c-3.513-3.941-7.705-7.433-12.531-10.307c-2.512-1.496-5.197-2.819-8.047-3.952 c-1.965-0.781-4.008-1.469-6.129-2.057c-1.663-0.461-3.365-0.868-5.121-1.201c-3.091-0.586-6.333-0.953-9.706-1.109 c-1.015-0.047-2.041-0.076-3.081-0.081c-0.521,3.295-1.091,6.711-1.711,10.253c-0.863-3.483-1.638-6.866-2.339-10.166 c-0.823,0.038-1.643,0.071-2.48,0.135c-2.797,0.215-5.671,0.572-8.624,1.09c-2.951,1.718-5.726,3.434-8.333,5.145 c2.29,3.424,0.847,4.608-5.474,3.761c-3.049,2.195-5.832,4.381-8.361,6.552c-11.26,9.667-17.548,19.063-20.423,27.845 c-0.031,0.094-0.064,0.188-0.094,0.282c-1.451,4.54-1.99,8.914-1.834,13.075c0.012,0.312,0.028,0.622,0.048,0.931 c24.903,0.501,49.632-3.74,71.256-12.631c15.192-6.243,26.03-14.142,35.091-25.058c-0.181-0.231-0.373-0.456-0.558-0.685 C1282.115,1482.952,1281.601,1482.343,1281.068,1481.745z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1149.075,1455.729c0.489,0.42,0.996,0.83,1.518,1.232c1.401,1.079,2.917,2.099,4.567,3.044 c13.907,3.833,25.004,6.89,33.667,9.126c4.809,1.241,8.861,2.227,12.212,2.947c2.538,0.545,4.693,0.945,6.452,1.181 c6.321,0.847,7.764-0.337,5.474-3.761c-1.619-2.421-5.111-5.967-10.06-10.703c-1.136-1.087-2.351-2.239-3.636-3.453 c-0.885-0.836-1.798-1.697-2.751-2.594c-12.968,1.082-27.582,1.02-36.014-2.261 C1156.589,1452.275,1152.783,1454.021,1149.075,1455.729z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1177.553,1400.084c2.299-3.579,4.697-7.479,7.103-11.462c-9.673-7.39-9.698-15.548,12.777-21.254 c0.499-0.811,0.989-1.603,1.47-2.371c-5.906-5.231-10.496-9.993-13.947-14.334c-0.589,0.372-1.177,0.759-1.766,1.155 c-1.64,6.654-3.551,13.711-5.75,21.17c0.061,0.035,0.133,0.064,0.184,0.105c3.074,2.427-0.005,7.845-4.016,12.372 c-0.866,2.712-1.764,5.469-2.703,8.278c-0.9-1.057-1.786-2.115-2.661-3.174c-1.059,0.83-2.017,1.464-2.759,1.814 c-2.275,1.077-5.059,1.644-8.002,1.91c0.58,0.114,1.164,0.234,1.753,0.362C1164.975,1395.9,1171.149,1397.782,1177.553,1400.084z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1144.277,1399.283c0.385-0.86,0.784-1.719,1.196-2.575c0.389-0.81,0.787-1.618,1.198-2.423 c-1.454-0.088-2.84-0.192-4.108-0.282c-0.916,0.065-1.829,0.098-2.741,0.105c0.683,0.803,1.363,1.598,2.042,2.387 C1142.672,1397.435,1143.475,1398.362,1144.277,1399.283z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1227.952,1404.955c-6.645-1.187-13.748-3.017-20.44-5.275c-0.294-0.099-0.586-0.2-0.878-0.301 c-4.164-1.436-8.152-3.034-11.749-4.743c-3.651,2.525-7.317,5.209-10.914,7.858c0.284,0.111,0.567,0.222,0.852,0.334 c13.974,5.515,28.639,12.562,42.009,19.013c0.156-0.136,0.314-0.26,0.469-0.399 C1227.209,1415.54,1227.446,1410.059,1227.952,1404.955z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1142.923,1443.818c-0.458,0.865-0.916,1.725-1.378,2.574c4.437,0.655,9.207,1.13,14.335,1.402 c-2.213-2.017-3.033-4.679-1.891-8.138C1150.44,1440.935,1146.729,1442.323,1142.923,1443.818z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1150.525,1406.345c-0.634-0.705-1.266-1.407-1.904-2.124c-1.436-1.613-2.886-3.264-4.343-4.938 c-3.746,8.369-6.207,16.89-6.842,24.96c4.432-5.257,9.311-10.646,14.655-16.157 C1151.572,1407.513,1151.047,1406.926,1150.525,1406.345z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1146.545,1436.699c12.372-2.366,21.417-4.155,27.699-5.401c-5.482-5.47-11.354-11.511-17.501-18.141 C1153.552,1421.55,1150.13,1429.387,1146.545,1436.699z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1172.02,1433.543c1.527-0.027,3.041-0.016,4.499,0.014c-0.366-0.362-0.729-0.72-1.1-1.088 C1174.351,1432.803,1173.217,1433.161,1172.02,1433.543z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1266.94,1439.053c7.237,1.69,10.462-0.076,7.507-7.614c-2.241-5.717-8.031-14.751-18.332-28.128 c-1.052,10.512-4.222,19.868-10.073,27.667C1254.532,1434.87,1261.76,1437.844,1266.94,1439.053z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1166.978,1414.518c-1.609,1.022-3.165,1.951-4.653,2.758 C1163.459,1417.549,1165.055,1416.509,1166.978,1414.518z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1183.825,1349.198c0.364,0.483,0.738,0.97,1.13,1.464c3.451,4.341,8.041,9.103,13.947,14.334 c-0.481,0.769-0.971,1.561-1.47,2.371c-3.92,6.372-8.363,13.949-12.777,21.254c-2.407,3.983-4.804,7.883-7.103,11.462 c-0.151,0.234-0.301,0.467-0.45,0.699c-0.729,1.128-1.448,2.222-2.153,3.274c-2.971,4.431-5.7,8.111-7.972,10.462 c5.004-3.178,10.538-7.269,16.262-11.486c0.243-0.179,0.487-0.358,0.73-0.538c3.598-2.649,7.264-5.333,10.914-7.858 c9.472-6.552,18.835-12.03,26.62-13.036c3.974-0.514,7.535,0.141,10.489,2.412c0.656-2.187,1.365-4.28,2.122-6.284 c-8.418-7.831-21.144-15.349-28.851-22.345c-1.95-1.77-4.78-4.18-7.75-6.93c-4.009-3.711-8.239-8.028-10.83-12.143 C1185.85,1340.422,1184.898,1344.719,1183.825,1349.198z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1229.423,1446.589c0.766,5.248,1.751,10.755,2.979,16.538c0.701,3.3,1.476,6.684,2.339,10.166 c0.62-3.542,1.19-6.958,1.711-10.253c0.756-4.783,1.407-9.303,1.962-13.586c0.531-4.097,0.973-7.969,1.329-11.628 c-3.04,2.718-6.533,5.169-10.531,7.318C1229.28,1445.622,1229.353,1446.107,1229.423,1446.589z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1231.993,1384.013c-0.858,2.863-1.625,5.883-2.276,9.083c-0.218,1.074-0.419,2.173-0.611,3.286 c-0.17,0.989-0.333,1.99-0.481,3.011c-0.261,1.801-0.484,3.657-0.673,5.561c-0.506,5.104-0.743,10.585-0.651,16.488 c0.051-0.045,0.102-0.084,0.153-0.13c4.939-4.453,9.961-11.062,12.713-17.999c-0.08-0.637-0.167-1.255-0.26-1.86 C1238.519,1392.405,1235.748,1386.9,1231.993,1384.013z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1251.614,1348.957c2.064-2.373,4.088-4.532,5.993-6.528c0.866-0.908,1.708-1.783,2.517-2.63 c1.881-1.968,3.589-3.787,5.028-5.521c3.066-3.695,4.909-7.007,4.623-10.576c-20.699-2.527-31.32-15.356-37.023-26.994 c-2.527,8.302-5.544,17.185-9.108,26.689c-1.79-7.548-3.268-14.695-4.482-21.475c-0.721,0.234-1.457,0.469-2.21,0.708 c-8.332,2.64-18.412,5.609-26.458,9.941c-0.328,2.925-0.733,5.984-1.217,9.178c6.949,2.676,18.173,13.898,21.148,16.915 c8.847,8.983,19.283,17.715,30.672,24.622C1244.452,1357.692,1248.089,1353.009,1251.614,1348.957z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1232.751,1296.708c5.703,11.638,16.324,24.467,37.023,26.994c3.102,0.379,6.429,0.526,10,0.404 c4.621-0.159,9.648-0.769,15.122-1.916c2.772-0.581,5.656-1.296,8.661-2.163c-2.293,1.477-4.44,2.882-6.462,4.224 c-3.101,2.059-5.891,3.964-8.388,5.721c-19.098,13.44-21.181,18.329-16.142,18.925c4.633,0.548,15.28-2.53,24.261-5.928 c0.649-0.246,1.29-0.493,1.919-0.741c2.49-0.98,4.797-1.967,6.742-2.883c2.074-0.977,3.735-1.872,4.766-2.593 c0.977-0.682,1.391-1.209,1.05-1.497c-0.071-2.34-0.213-4.618-0.387-6.866c-0.875-11.281-3.025-21.409-6.177-30.458 c-2.786-7.998-6.343-15.163-10.51-21.516c-0.448-0.682-0.908-1.347-1.369-2.011c-0.228-0.329-0.447-0.671-0.679-0.996 c-2.839-3.975-5.928-7.595-9.196-10.909c-3.086-3.128-6.332-5.981-9.711-8.542c-1.26,0.634-2.537,1.249-3.85,1.825 c-9.155,4.011-18.827,7.029-28.77,9.316C1238.877,1274.564,1236.296,1285.064,1232.751,1296.708z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1243.757,1239.027c-0.101,2.629-0.286,5.379-0.555,8.245c3.977-1.222,7.957-2.556,11.882-4.047 c-3.044-1.357-6.121-2.53-9.209-3.537C1245.169,1239.458,1244.463,1239.24,1243.757,1239.027z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1197.878,1280.18c-2.445-0.153-4.871-0.307-7.281-0.464c0.682,4.242,1.047,9.243,1.018,15.032 c0.772,0.623,1.543,1.245,2.321,1.875c8.429-11.344,12.441-22.413,13.849-26.366c-6.4,0.621-12.803,1.062-19.151,1.383 c0.117,0.336,0.231,0.68,0.343,1.032C1191.856,1275.25,1194.821,1277.757,1197.878,1280.18z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1201.979,1303.203c-2.711-2.234-5.396-4.432-8.043-6.579c-0.775,1.043-1.586,2.089-2.438,3.132 c-0.095,2.32-0.248,4.752-0.462,7.296C1194.312,1305.961,1197.969,1304.593,1201.979,1303.203z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1204.389,1302.381c4.344-1.453,9.073-2.872,14.162-3.96c-1.78-10.551-2.901-20.175-3.506-28.946 c-2.274,0.273-4.551,0.517-6.829,0.741C1207.701,1273.637,1206.144,1283.298,1204.389,1302.381z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1215.318,1235.142c-0.716,0.021-1.433,0.041-2.139,0.081c-6.801,0.382-13.135,1.636-18.678,3.665 c-0.384,0.141-0.764,0.285-1.14,0.434c-0.571,0.225-1.141,0.451-1.693,0.693c-2.742,1.2-5.234,2.619-7.46,4.225 c-5,3.609-8.568,8.213-10.166,13.68c0.224,0.243,0.447,0.487,0.672,0.729c13.226-0.102,26.535-1.594,39.763-4.163 C1214.441,1247.39,1214.76,1240.966,1215.318,1235.142z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1258.537,1215.087c-0.281-0.59-0.561-1.184-0.842-1.768c-1.042-2.16-2.091-4.268-3.145-6.335 c-0.657-1.289-1.317-2.559-1.978-3.812c-4.166-7.894-8.403-15.081-12.639-21.591c-5.428-8.341-10.853-15.573-16.12-21.765 c-4.627-5.44-9.132-10.08-13.409-13.961c-8.7,2.807-18.057,4.07-27.441,4.357c-0.081,0.002-0.16,0.004-0.241,0.006 c2.09,2.905,4.722,6.092,7.933,9.535c2.049,2.197,4.335,4.498,6.872,6.9c4.31,4.078,9.345,8.444,15.166,13.068 c-0.77-0.003-1.574-0.002-2.416,0.003c-5.302,0.028-12.047,0.185-20.547,0.301c3.423,6.989,5.774,12.811,7.501,17.73 c1.795,5.115,2.914,9.247,3.837,12.667c2.661,9.863,3.737,13.833,14.959,18.511c2.958-22.119,9.273-34.426,11.162-41.2 c6.102,4.912,12.039,13.348,14.898,27.288c0.289,1.41,0.549,2.872,0.772,4.397c0.294,2.009,0.525,4.124,0.692,6.34 c0.072,0.954,0.135,1.924,0.181,2.918c0.113,2.405,0.147,4.933,0.1,7.578c-0.009,0.526-0.022,1.058-0.038,1.594 c0.578,0.167,1.158,0.334,1.753,0.505c3.244,0.933,6.744,1.934,10.532,3.017c0.7,0.2,1.424,0.407,2.143,0.613 c3.4-1.379,6.738-2.892,9.987-4.557c-1.556-3.949-3.138-7.781-4.745-11.487 C1261.844,1222.199,1260.199,1218.586,1258.537,1215.087z M1211.646,1181.57c1.106-0.016,2.453,0.113,3.963,0.441 c1.126,0.872,2.284,1.755,3.465,2.644c0.503,0.379,1.002,0.756,1.515,1.138c-1.033-0.062-1.986-0.137-2.872-0.224 c-1.226-0.12-2.314-0.26-3.274-0.417C1206.706,1183.892,1207.339,1181.632,1211.646,1181.57z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1243.794,1237.85c-0.155-0.045-0.316-0.091-0.469-0.135c-1.193-0.345-2.351-0.681-3.471-1.007 c-1.852-0.54-3.604-1.056-5.266-1.551c-0.32-0.095-0.628-0.188-0.941-0.282c-0.143-0.043-0.288-0.086-0.429-0.129 c-0.686-0.206-1.354-0.409-2.008-0.608c-5.416-1.651-9.734-3.075-13.201-4.412c-0.692-0.267-1.356-0.531-1.982-0.792 c-0.154,1.148-0.298,2.322-0.432,3.523c-0.098,0.879-0.19,1.775-0.278,2.684c-0.558,5.824-0.877,12.248-0.841,19.343 c8.457-1.642,16.88-3.72,25.227-6.162c1.165-0.34,2.332-0.693,3.499-1.051c0.268-2.865,0.453-5.615,0.555-8.245 C1243.772,1238.631,1243.782,1238.241,1243.794,1237.85z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1218.552,1298.421c0.059,0.352,0.118,0.703,0.179,1.057c0.139,0.809,0.283,1.625,0.43,2.444 c1.214,6.78,2.693,13.927,4.482,21.475c3.564-9.504,6.58-18.387,9.108-26.689c3.545-11.644,6.126-22.144,7.903-31.608 c-8.391,1.93-16.975,3.341-25.608,4.376C1215.651,1278.246,1216.772,1287.87,1218.552,1298.421z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1278.237,1128.57c43.575,0.709-5.361-41.182-30.588-11.616c-0.677,0.793-1.335,1.643-1.975,2.541 c-0.773,1.085-1.521,2.242-2.234,3.488c0.865,0.191,1.758,0.405,2.703,0.668c1.313,0.316,2.585,0.609,3.838,0.892 C1262.044,1127.264,1271.313,1128.458,1278.237,1128.57z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1241.703,1122.63c-0.819,1.372-1.721,2.711-2.739,4.004c-6.311,8.005-14.228,13.509-23.02,17.181 c0.209,0.367,0.424,0.737,0.636,1.105c2.214,3.857,4.528,7.751,6.957,11.682c3.459,5.597,7.14,11.263,11.057,16.984 c-0.272-7.983-0.042-15.08,0.599-21.393c4.977,8.663,11.886,17.948,19.264,26.036c2.875,3.152,5.819,6.117,8.748,8.795 c8.616,7.877,17.086,13.24,23.184,13.31c-5.911-8.563-11.421-17.254-16.633-25.838c-1.205-1.985-2.395-3.963-3.569-5.933 c-8.878-14.894-16.911-29.29-24.621-41.934c0.597-1.283,1.22-2.502,1.874-3.644 C1242.846,1122.852,1242.259,1122.728,1241.703,1122.63z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1222.467,1099.184c-6.632-7.737-13.357-13.294-20.532-15.818c-2.013-0.708-4.062-1.18-6.154-1.391 c-1.592-0.161-3.209-0.177-4.854-0.03c-0.009-0.384-0.021-0.756-0.03-1.138c-0.023-0.918-0.047-1.836-0.073-2.737 c-0.206-7.035-0.505-13.528-0.875-19.517c-0.037-0.599-0.075-1.194-0.113-1.784c-0.022-0.341-0.045-0.679-0.068-1.016 c-0.59-8.737-1.338-16.338-2.188-22.857c-0.061-0.471-0.124-0.932-0.186-1.392c-0.222-1.637-0.45-3.21-0.684-4.707 c-0.779-4.986-1.619-9.196-2.481-12.682c-3.592-14.529-7.581-16.428-9.309-8.875c-0.691,3.023-1.021,7.556-0.817,13.402 c0.288,8.249,1.635,19.102,4.524,31.994c0.715,3.192,1.527,6.511,2.438,9.943c0.053,0.198,0.107,0.398,0.16,0.597 c0.033,0.123,0.066,0.246,0.099,0.369c0.243,0.903,0.493,1.813,0.75,2.732c0.057,0.205,0.112,0.406,0.17,0.612 c1.383,4.895,2.969,10.007,4.774,15.312c1.821,5.351,3.868,10.9,6.159,16.621c1.692,0.716,3.363,1.422,5.007,2.114 c-1.316,0.213-2.613,0.417-3.9,0.617c3.426,8.353,7.373,17.061,11.896,26.05c9.263-3.71,17.037-10.069,21.687-19.639 c-0.031-0.041-0.061-0.082-0.092-0.123C1226.007,1103.479,1224.24,1101.253,1222.467,1099.184z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1105.545,1099.915c-1.01-0.32-1.985-0.653-2.918-1.002c0.057,1.61,0.096,3.234,0.12,4.87 c0.683-0.793,1.351-1.569,2.017-2.343C1105.026,1100.927,1105.284,1100.425,1105.545,1099.915z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1146.81,1009.681c2.974,0.257,6.033,0.535,9.178,0.835c0.699-1.044,1.395-2.075,2.082-3.077 c0.683-0.995,1.36-1.969,2.031-2.922c-0.801,0.264-1.599,0.532-2.393,0.809C1153.988,1006.625,1150.35,1008.077,1146.81,1009.681 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1149.76,1020.124c-7.754,4.761-14.517,8.509-20.453,11.337c4.962,1.244,9.469,1.024,13.509-0.001 c1.329-2.227,2.634-4.377,3.926-6.481C1147.759,1023.323,1148.765,1021.703,1149.76,1020.124z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1228.822,995.882c-4.479-0.148-8.997-0.177-13.528-0.082c0.611,1.912,1.2,3.948,1.769,6.106 c0.293-0.464,0.586-0.928,0.88-1.393c4.38,3.41,7.76,7.55,10.45,12.16c0.893,1.531,1.691,3.127,2.44,4.753 c33.996,11.162,15.205,13.039,5.336,15.898c0.58,2.36,1.106,4.741,1.594,7.126c2.933,1.138,7.01,2.453,12.503,3.989 c1.104,0.309,2.264,0.627,3.485,0.954c4.379,1.174,9.522,2.467,15.534,3.898c4.728,1.125,9.987,2.335,15.839,3.639 c-0.223-0.784-0.451-1.555-0.682-2.318c-1.715-5.66-3.662-10.748-5.758-15.312c-1.653-3.6-3.397-6.873-5.193-9.843 c-2.641-4.368-5.391-8.079-8.12-11.203c-0.239-0.273-0.477-0.542-0.716-0.807c0.192,0.062,0.388,0.124,0.582,0.186 c1.31,0.418,2.677,0.839,4.116,1.261c4,1.174,8.509,2.36,13.563,3.535c0.157,0.037,0.314,0.073,0.473,0.11 c11.769,2.715,26.475,5.365,44.661,7.658c-1.216-4.609-8.284-9.754-19.272-14.484c-4.806,1.469-9.957,2.579-15.524,3.26 c-6.57,0.8-27.57,1.43-30.13-3.15c-1.04-1.86,0.96-4.57,8.19-8.48c1.241-0.671,2.493-1.288,3.752-1.867 C1261.018,998.497,1245.181,996.422,1228.822,995.882z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1202.671,974.871c-2.422,0.556-2.569,0.336-0.297-0.187c-9.131-5.408-20.882,1.923-35.775,21.038 c-1.986,2.549-4.027,5.302-6.126,8.268c-0.124,0.175-0.248,0.349-0.372,0.526c1.803-0.594,3.623-1.154,5.459-1.682 c1.729-0.497,3.471-0.963,5.226-1.403c14.346-3.596,29.497-5.316,44.509-5.632 C1211.813,984.903,1207.632,977.981,1202.671,974.871z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1314.092,924.97c-8.415-3.642-15.507-6.399-21.174-8.061c-13.986-4.101-19.295-1.52-14.438,10.909 c0.625,1.6,1.416,3.36,2.382,5.293c0.404,0.808,0.83,1.639,1.294,2.508c-1.912,0.833-3.771,1.54-5.573,2.131 c-0.462,0.152-0.921,0.297-1.376,0.434c-5.746,1.729-10.903,2.292-15.418,2.117c-3.669-0.142-6.913-0.771-9.703-1.66 c1.859,1.928,3.939,4.217,6.25,6.922c0.199,0.233,0.401,0.471,0.603,0.71c0.507,0.599,1.023,1.215,1.552,1.854 c0.377,0.455,0.76,0.921,1.147,1.397c0.961-0.55,1.936-1.114,2.919-1.687c0.797-0.464,1.601-0.936,2.411-1.415 c2.175-1.285,4.4-2.625,6.676-4.022c1.617-0.992,3.26-2.014,4.927-3.064c1.851-1.166,3.732-2.367,5.645-3.606 c0.696,1.3,1.46,2.667,2.292,4.103c0.828,1.429,1.723,2.927,2.687,4.494c0.551,0.897,1.13,1.822,1.726,2.765 c0.509,0.805,1.034,1.626,1.576,2.466c1.289,1.995,2.675,4.092,4.151,6.283c9.322-2.972,20.561-7.034,33.98-12.576 c4.172-1.723,8.547-3.584,13.149-5.605c-8.889-4.209-16.947-7.956-24.134-11.134c-0.752-0.332-1.497-0.661-2.229-0.98 C1314.967,925.348,1314.531,925.16,1314.092,924.97z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1269.551,962.386c-3.19-4.345-6.121-8.157-8.803-11.493c-0.375-0.466-0.744-0.923-1.109-1.37 c-1.802,1.031-3.563,2.022-5.288,2.976c-4.47,2.473-8.681,4.693-12.624,6.681c-0.776,0.391-1.545,0.776-2.301,1.15 c-1.78,0.88-3.501,1.712-5.165,2.497c-13.259,6.261-22.79,9.579-28.221,11.154c5.171-0.853,14.207-1.892,27.395-2.197 c2.86-0.066,5.918-0.097,9.172-0.084c5.396,0.021,11.338,0.163,17.84,0.469c4.258,0.2,8.756,0.471,13.497,0.824 c2.973,2.435,6.168,5.496,9.481,9.334c-2.13-3.206-4.177-6.226-6.147-9.076c9.705,0.783,20.381,1.905,32.072,3.465 c-5.67-7.786-10.553-14.717-14.704-20.878c-7.859,2.505-14.358,4.237-19.649,5.426 C1273.016,961.711,1271.203,962.081,1269.551,962.386z M1256.473,963.776C1254.966,963.721,1255.096,963.527,1256.473,963.776 L1256.473,963.776z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1250.087,938.64C1233.127,921.052,1234.743,933.752,1250.087,938.64L1250.087,938.64z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1283.427,982.327c2.757,4.151,5.648,8.605,8.677,13.388c0.322-0.082,0.644-0.162,0.966-0.243 C1289.809,990.302,1286.566,985.964,1283.427,982.327z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1202.671,974.871c0.847-0.195,1.974-0.485,3.37-0.89c-1.583,0.261-2.8,0.504-3.667,0.704 C1200.102,975.207,1200.249,975.427,1202.671,974.871z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1131.101,797.137c0.423-0.07,0.836-0.135,1.262-0.205c-1.346-2.988-2.681-6.078-4.004-9.278 C1129.246,790.912,1130.163,794.065,1131.101,797.137z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1249.98,867.979c-5.02,2.671-9.215,5.991-12.807,9.854c1.044-0.618,2.073-1.27,3.088-1.952 C1243.682,873.582,1246.936,870.932,1249.98,867.979z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1266.426,845.032c0.142-0.294,0.282-0.589,0.421-0.884c-0.728-0.118-1.466-0.272-2.216-0.464 c-2.151-0.552-4.391-1.406-6.702-2.534c-2.357,4.648-5.363,9.069-8.91,13.042c0.112-0.035,0.222-0.073,0.334-0.107 c3.314-1.007,8.413-2.399,14.143-3.528c0.94-1.624,1.828-3.286,2.665-4.982C1266.25,845.392,1266.339,845.213,1266.426,845.032z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1146.825,831.535c0.759,1.718,1.468,3.398,2.124,5.037c1.174-1.16,2.332-2.312,3.474-3.456 c-0.7-1.006-1.399-2.035-2.096-3.085C1149.149,830.543,1147.98,831.047,1146.825,831.535z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1143.353,818.664c-0.556,0.837-1.084,1.637-1.592,2.408c0.163,0.31,0.327,0.621,0.486,0.93 c0.618-0.715,1.227-1.41,1.823-2.078C1143.831,819.51,1143.592,819.084,1143.353,818.664z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1174.509,857.663c-4.356-3.55-8.73-7.815-13.087-12.88c-2.078-2.416-4.152-5.015-6.218-7.8 c-1.3,2.042-2.583,4.061-3.846,6.05c0.413,1.2,0.795,2.37,1.148,3.507c1.268,2.046,2.552,4.011,3.852,5.88 c0.701,1.008,1.407,1.982,2.117,2.939c0.626,0.845,1.255,1.669,1.887,2.475c4.364,5.563,8.868,10.214,13.456,14.013 c1.011,0.837,2.026,1.629,3.044,2.386c10.944,8.129,22.268,11.623,33.163,11.514c2.937-5.39,6.54-10.277,10.752-14.572 c-2.816,0.604-5.718,0.959-8.695,1.023C1200.362,872.451,1187.516,868.261,1174.509,857.663z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1211.972,795.393c1.6-1.107,3.217-2.247,4.842-3.404c-0.53-0.834-1.071-1.679-1.635-2.544 c-1.808,1.073-3.494,2.154-5.062,3.237c0.429,0.635,0.859,1.268,1.292,1.896C1211.596,794.851,1211.784,795.122,1211.972,795.393 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M1230.28,818.553c1.179,1.291,2.358,2.544,3.536,3.757c6.812,7.019,13.576,12.697,19.927,16.542 c1.417,0.858,2.815,1.626,4.187,2.296c0.12-0.236,0.234-0.473,0.35-0.709c2.302-4.694,3.942-9.605,4.813-14.509 c0.249-1.402,0.438-2.802,0.559-4.198c0.705-8.171-0.836-16.138-5.133-22.852c-1.087-1.698-2.349-3.317-3.797-4.837 c1.376,0.607,3.454,0.637,5.698,0.263c4.942-0.823,10.687-3.609,11.513-6.543c2.252,7.938,3.134,15.972,2.859,23.847 c-0.132,3.771-0.529,7.504-1.172,11.173c-0.468,2.67-1.062,5.307-1.78,7.898c-0.164,0.592-0.334,1.182-0.511,1.769 c-1.026,3.41-2.262,6.735-3.687,9.953c-0.158,0.357-0.318,0.712-0.48,1.066c-0.104,0.226-0.209,0.452-0.315,0.677 c0.339,0.055,0.675,0.103,1.009,0.142c0.797,0.092,1.579,0.136,2.345,0.132c0.919-0.005,1.816-0.076,2.687-0.224 c1.425-0.243,2.781-0.686,4.063-1.331c1.521-0.766,2.935-1.82,4.226-3.19c1.66-1.761,3.117-4.04,4.343-6.872 c0.158-0.365,0.312-0.738,0.462-1.122c2-5.101,3.308-11.846,3.765-20.454c0.141-2.653,0.198-5.488,0.173-8.5 c-0.012-1.48-0.045-3.003-0.098-4.572c-0.205-5.966-0.712-12.574-1.556-19.875c-0.429-3.711-0.947-7.604-1.553-11.676 c-0.258-1.732-0.529-3.492-0.82-5.29c-1.922,1.302-3.738,2.557-5.46,3.767c-0.692,0.486-1.357,0.96-2.018,1.432 c-2.495,3.567-4.795,7.049-6.563,8.949c-12.747,13.692-28.175,25.886-45.248,33.78 C1228.37,812.927,1229.574,816.026,1230.28,818.553z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1163.536,823.934c-0.618,0.965-1.236,1.93-1.846,2.884c1.151,2.006,3.938,2.637,7.874,2.168 c0.705-0.084,1.444-0.2,2.22-0.353c1.249-0.246,2.589-0.582,4.003-0.995c1.642-0.48,3.386-1.069,5.214-1.755 c0.547-0.205,1.1-0.418,1.661-0.641c-1.271-2.908-2.405-6.21-3.648-9.357C1173.682,818.83,1168.521,821.501,1163.536,823.934z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1159.3,727.242c1.351,3.418,2.724,6.751,4.115,10.004c0.512,1.198,1.026,2.387,1.543,3.563 c0.168,0.382,0.336,0.762,0.504,1.142c1.28,2.887,2.572,5.703,3.873,8.451c1.709,0.868,3.438,1.761,5.193,2.69 c0.044-0.246,0.087-0.485,0.13-0.728c-1.745-3.758-3.629-7.69-5.651-11.792c-0.37-0.75-0.743-1.504-1.122-2.267 c-1.003-2.015-2.035-4.064-3.107-6.162c-1.267-2.48-2.586-5.022-3.952-7.621c-1.095-2.083-2.224-4.205-3.385-6.366 c-0.505,0.001-1.042-0.004-1.609-0.012c1.062,2.888,2.141,5.721,3.235,8.501C1159.144,726.844,1159.222,727.044,1159.3,727.242z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1212.482,816.497c2.251,2.268,4.358,4.178,6.285,5.721c1.081,0.866,2.105,1.616,3.068,2.251 c4.719,3.113,7.93,3.43,8.906,0.813c0.331-0.888,0.402-2.119,0.19-3.688c-0.121-0.9-0.337-1.913-0.651-3.04 c-0.706-2.527-1.91-5.625-3.674-9.309c-0.098,0.045-0.194,0.095-0.292,0.14c-2.299,1.056-7.019,3.24-12.264,5.083 C1213.518,815.165,1212.995,815.841,1212.482,816.497z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1173.891,756.67c0.206-1.163,0.409-2.305,0.608-3.422c-1.349-0.108-2.682-0.242-3.997-0.403 c0.289,0.598,0.577,1.195,0.867,1.786c0.707,1.444,1.416,2.869,2.127,4.272C1173.629,758.151,1173.761,757.404,1173.891,756.67z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1244.561,751.852c-1.848-0.391-3.91-0.699-6.211-0.912c-2.549-0.236-5.384-0.357-8.521-0.356 c-2.45,2.231-5.905,2.154-10.043,0.366c-3.978,0.268-8.327,0.692-13.048,1.273c-0.272-0.656-0.545-1.316-0.811-1.954 c-1.608-3.862-3.102-7.383-4.499-10.59c-0.685-1.573-1.349-3.076-1.988-4.493c-5.284-5.263-10.788-11.362-16.21-17.741 c-1.287,2.049-2.47,5.515-3.674,10.344c-0.666,2.674-1.34,5.767-2.041,9.265c-0.892,4.451-1.831,9.561-2.858,15.31 c1.111,2.393,2.165,4.712,3.169,6.969c4.275,9.6,7.611,17.987,10.184,25.275c-4.795-7.599-9.69-16.177-14.515-25.704 c-1.759,9.946-3.792,21.509-6.277,34.61c-0.616,3.251-1.261,6.595-1.937,10.033c3.99-0.816,6.85,0.742,9.096,3.524 c5.234-8.112,10.71-16.559,16.451-25.367c-0.224,6.229-6.06,15.531-15.45,26.744c1.402,2.122,2.56,4.719,3.635,7.439 c4.857-2.682,9.855-5.587,15-8.753c1.718-1.624,4.116-3.11,6.586-4.397c-0.302-0.391-0.604-0.786-0.908-1.186 c2.704-2.91,6.128-5.898,10.425-8.867c1.568-1.084,3.254-2.164,5.062-3.237c0.563,0.865,1.104,1.709,1.635,2.544 c7.786-5.547,15.849-11.671,24.194-18.468c-2.841,4.725-5.529,9.099-8.085,13.17c8.034-4.998,15.644-10.687,22.723-16.97 C1259.585,761.28,1257.266,754.543,1244.561,751.852z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1178.741,712.08c-1.421-1.722-2.829-3.453-4.221-5.183c-0.221-0.275-0.443-0.551-0.664-0.826 c-5.415,0.252-10.954,0.464-16.474,0.724c-0.013,0.744-0.023,1.501-0.031,2.27c3.032,2.696,5.202,4.65,6.197,6.038 c1.388-0.091,2.743-0.223,4.062-0.397C1171.628,714.175,1175.329,713.273,1178.741,712.08z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1232.707,745.434c0.601-2.068,0.977-4.636,1.096-7.769c-0.898-6.489-1.715-12.417-2.464-17.83 c-0.517-3.737-1.001-7.228-1.458-10.483c-0.489-3.489-0.944-6.698-1.373-9.662c-0.084-0.582-0.168-1.155-0.25-1.717 c-6.188-42.323-6.676-29.675-18.658-11.619c-2.166,3.264-4.709,6.705-7.728,10.029c4.414,0.994,8.975,2.252,13.692,3.816 c-6.063,2.404-14.05,3.768-23.051,4.641c-0.82,0.597-1.665,1.178-2.535,1.74c-0.963,0.622-1.959,1.219-2.985,1.791 c-0.847,0.472-1.715,0.925-2.607,1.359c-1.789,0.87-3.669,1.659-5.646,2.35c0.376,0.456,0.754,0.912,1.132,1.367 c1.114,1.341,2.234,2.675,3.358,3.997c5.422,6.379,10.926,12.479,16.21,17.741c0.907,0.903,1.807,1.78,2.699,2.631 c2.627,2.505,5.184,4.771,7.632,6.728c3.617,2.89,6.996,5.101,10.014,6.405c4.138,1.788,7.594,1.865,10.043-0.366 C1231.053,749.469,1232.026,747.778,1232.707,745.434z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1186.566,672.984c0.967-0.453,1.938-0.913,2.916-1.382c5.236-2.509,10.62-5.233,16.062-8.14 c-6.735,0.421-12.941,0.027-18.784-3.059c-2.668,5.74-5.782,11.292-9.201,16.654c2.028-0.882,4.093-1.804,6.189-2.766 C1184.682,673.864,1185.622,673.427,1186.566,672.984z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1278.363,596.679c-1.507,1.753-2.999,3.454-4.475,5.101c-0.042,0.047-0.084,0.094-0.125,0.141 c-4.012,4.473-7.909,8.56-11.691,12.299c-1.006,0.995-2.006,1.97-2.996,2.916c-1.117,1.067-2.222,2.099-3.318,3.107 c-1.005,0.923-2.002,1.826-2.99,2.7c-1.436,1.271-2.852,2.488-4.252,3.66c1.996,4.364,2.378,7.32,1.495,9.286 c3.138-2.275,6.193-4.583,9.147-6.916c0.076-0.06,0.151-0.12,0.227-0.18c7.539-5.966,14.398-12.089,20.187-18.225 c0.624-0.662,1.235-1.324,1.834-1.986c0.622-0.687,1.226-1.374,1.819-2.06c0.118-0.136,0.236-0.273,0.353-0.41 c2.846-3.325,5.353-6.645,7.455-9.935c1.77-2.771,3.253-5.521,4.415-8.236c-1.043-2.776-2.145-5.537-3.297-8.283 C1287.415,585.835,1282.82,591.494,1278.363,596.679z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1133.428,681.459c0.457-0.24,0.904-0.478,1.336-0.713c-0.297-0.003-0.598-0.006-0.893-0.009 C1133.711,680.985,1133.568,681.223,1133.428,681.459z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1144.736,668.801c-1.06,0.977-2.048,1.915-2.968,2.815c0.663,1.114,1.34,2.256,2.032,3.426 c1.726-1.354,2.939-2.582,3.745-3.711C1141.169,662.565,1139.129,659.686,1144.736,668.801z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1227.813,650.683c2.288-1.409,4.563-2.841,6.818-4.295c3.798-2.449,7.54-4.958,11.19-7.514 c-3.35,0.859-8.301,0.646-14.146,0.206c-0.641,0.413-1.28,0.819-1.912,1.212c-2.546,1.583-5.016,3.003-7.415,4.291 c-0.681,0.366-1.359,0.724-2.028,1.068c-1.716,0.881-3.392,1.69-5.031,2.441c2.235,2.17,4.457,4.212,6.661,6.135 C1223.911,653.063,1225.867,651.881,1227.813,650.683z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1214.263,557.259c-0.446-3.842-0.401-7.267,0.031-10.324c-0.516-0.314-1.04-0.63-1.583-0.95 c-1.263-0.746-2.59-1.509-3.992-2.289c-0.261-0.145-0.536-0.293-0.802-0.439c-2.232,2.68-5.259,5.043-8.862,7.133 c1.257,0.622,2.48,1.218,3.655,1.778C1207.137,554.281,1210.979,555.962,1214.263,557.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1204.249,568.351c-1.743-2.016-3.544-4.088-5.402-6.218c-1.393-1.596-2.808-3.214-4.268-4.875 c-0.946-1.077-1.906-2.168-2.88-3.273c-6.505,2.694-14.076,4.793-21.973,6.44c0.096,0.187,0.194,0.374,0.288,0.561 C1179.51,558.027,1190.775,559.356,1204.249,568.351z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1161.537,523.11c-1.97-0.688-3.983-1.372-6.031-2.052c-3.543-1.177-7.2-2.339-10.972-3.48 c0.176,3.008,0.232,5.999,0.173,8.973c0.143,0.398,0.286,0.788,0.43,1.184c1.86,5.148,3.739,10.121,5.633,14.925 c4.691-0.073,10.064-0.437,16.31-1.094c6.548-2.831,11.515-6.327,16.043-10.169c-5.625-2.37-11.731-4.76-18.296-7.119 C1163.741,523.887,1162.647,523.498,1161.537,523.11z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1256.344,667.425c-5.001-2.293-9.769-3.751-14.326-4.63c-3.771-0.727-7.397-1.06-10.893-1.145 c7.326,5.487,14.388,9.757,21.043,13.196c6.561,3.391,12.727,5.979,18.359,8.135c4.599,1.76,8.842,3.234,12.655,4.625 c0.399,0.146,0.794,0.29,1.184,0.434c-0.209-0.212-0.419-0.425-0.627-0.634c-2.824-2.825-5.586-5.355-8.286-7.615 c-3.601-3.015-7.094-5.55-10.485-7.682C1262.018,670.255,1259.145,668.709,1256.344,667.425z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1297.199,694.003c-3.286-2.237-7.63-4.041-12.832-5.962c2.644,2.678,5.344,5.615,8.101,8.838 c2.414,2.821,4.872,5.861,7.375,9.135c0.852-2.284,1.642-4.591,2.38-6.917C1301.039,697.109,1299.344,695.463,1297.199,694.003z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1205.749,638.103c0.457-0.028,0.914-0.052,1.371-0.073c4.107-0.184,8.21-0.08,12.164,0.138 c3.875,0.215,7.606,0.538,11.058,0.809c0.45,0.035,0.895,0.069,1.334,0.103c5.845,0.44,10.796,0.653,14.146-0.206 c0.867-0.222,1.626-0.517,2.266-0.898c0.875-0.521,1.526-1.205,1.922-2.087c0.884-1.966,0.502-4.922-1.495-9.286 c-0.111-0.243-0.23-0.492-0.351-0.744c-1.831-3.803-4.818-8.618-9.166-14.692c-0.001-0.001-0.002-0.003-0.003-0.004 c-0.775-1.082-1.593-2.205-2.456-3.368c-5.402-7.288-12.541-16.194-21.715-27.073c-1.793-2.126-3.672-4.335-5.621-6.613 c-0.723-0.845-1.457-1.701-2.202-2.567c-9.788,3.24-20.454,6.42-32.098,9.513c-0.095,3.554-0.759,6.794-1.894,9.588 c1.483,2.704,2.968,5.335,4.457,7.88c1.323,2.262,2.648,4.46,3.974,6.6c3.332,5.376,6.672,10.372,10.009,15.024 c1.585-0.633,3.197-1.272,4.868-1.927c0.05,2.752-0.038,5.469-0.247,8.155c0.811,1.055,1.621,2.091,2.43,3.107 C1200.924,632.523,1203.341,635.394,1205.749,638.103z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1205.545,663.462c7.745-0.484,16.189-2.041,25.581-1.813c-3.017-2.26-6.079-4.724-9.175-7.425 c-2.204-1.922-4.426-3.965-6.661-6.135c-3.156-3.063-6.339-6.385-9.54-9.987c-3.984,0.243-7.956,0.774-11.784,1.755 c-1.664,7.1-4.137,13.947-7.204,20.545C1192.604,663.489,1198.81,663.883,1205.545,663.462z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1233.219,524.284c13.103-5.134,23.213-1.671-6.556-5.988c-5.177-0.751-11.569-1.739-19.353-3.046 c-0.616-0.103-1.236-0.208-1.87-0.315c2.752,3.796,4.604,7.312,5.657,10.564c5.321,1.704,10.042,2.629,14.365,2.911 C1227.979,526.624,1230.656,525.289,1233.219,524.284z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1186.142,511.507c-2.298-0.425-4.671-0.868-7.131-1.334c1.707,1.005,3.355,1.946,4.977,2.858 c3.154,1.774,6.158,3.387,9.01,4.826c0.348,0.176,0.689,0.343,1.032,0.514c0.736,0.366,1.466,0.725,2.183,1.069 c1.901-1.681,3.912-3.368,6.102-5.04c-2.513-0.434-5.153-0.897-7.931-1.394C1191.758,512.536,1189.014,512.037,1186.142,511.507z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1128.756,606.021c2.832-4.094,6.092-9.775,9.942-15.761c0.091-0.142,0.182-0.283,0.274-0.425 c-0.054-0.062-0.109-0.124-0.163-0.186c-0.158,0.034-0.314,0.068-0.473,0.102c-4.311,0.917-8.735,1.823-13.264,2.717 c-1.165,2.072-2.375,4.137-3.627,6.195C1124.081,601.071,1126.523,603.543,1128.756,606.021z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1320.477,500.976c0.028-0.032,0.055-0.063,0.082-0.095c3.213-3.724,6.147-7.161,9.088-10.233 c0.61-0.637,1.221-1.258,1.834-1.863c5.448-5.375,11.12-9.455,18.803-11.747c-18.805,3.583-33.757,8.368-46.059,13.58 c-1.375,0.583-2.708,1.172-4.019,1.764c5.034,4.861,9.85,9.963,14.368,15.316 C1316.672,505.373,1318.622,503.126,1320.477,500.976z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1300.62,521.743c4.49-4.048,8.358-7.968,11.815-11.702c-5.682-5.45-11.141-10.689-16.38-15.718 c-3.602,1.738-6.96,3.5-10.105,5.264c-2.053,3.73-4.203,7.376-6.957,10.707c-7.31,8.85-8.27,4.92-5.4,14.04 c1.362,4.313,4.354,8.412,7.83,12.422C1288.961,531.634,1295.237,526.597,1300.62,521.743z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1211.208,573.534c1.526,1.251,3.076,2.587,4.655,4.031c2.404,2.199,4.87,4.627,7.4,7.299 c-2.268-4.638-4.062-8.93-5.451-12.911c-0.137-0.393-0.272-0.784-0.401-1.171c-0.288-0.862-0.554-1.707-0.803-2.539 c-2.734,0.973-5.54,1.942-8.426,2.906C1209.178,571.903,1210.187,572.698,1211.208,573.534z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1237.153,527.511c-3.638,0.837-7.475,1.173-11.69,0.899c-2.583,1.833-4.994,4.141-6.937,7.058 c-1.559,2.342-2.814,5.076-3.614,8.271c-0.095,0.381-0.184,0.767-0.267,1.161c-0.137,0.659-0.253,1.339-0.352,2.036 c-0.432,3.057-0.477,6.482-0.031,10.324c0.162,1.395,0.387,2.844,0.684,4.35c0.043,0.22,0.092,0.445,0.139,0.668 c0.395,1.899,0.899,3.886,1.522,5.967c0.993-0.354,1.976-0.708,2.95-1.062c1.911-0.696,3.783-1.394,5.62-2.094 c7.336-2.795,14.094-5.62,20.329-8.459c1.28-0.583,2.537-1.166,3.773-1.749c5.872-2.771,11.262-5.552,16.225-8.327 c2.426-1.356,4.748-2.711,6.977-4.062c-5.313-8.156-11.107-15.918-17.335-23.128c-2.453,1.538-4.85,2.934-7.25,4.145 C1244.391,525.277,1240.875,526.655,1237.153,527.511z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1207,571.542c0.394-0.13,0.79-0.26,1.181-0.391c-0.323-0.244-0.646-0.49-0.967-0.725 c-1.001-0.734-1.988-1.422-2.965-2.074c-13.473-8.995-24.739-10.324-34.235-7.365c3.584,7.157,5.05,14.06,4.889,20.068 C1186.546,577.961,1197.212,574.781,1207,571.542z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1262.861,462.457c3.693,3.543,7.53,7.226,11.517,11.054c0.71,0.681,1.428,1.371,2.148,2.062 c0.067,0.064,0.134,0.129,0.201,0.193c0.356-0.866,0.7-1.731,1.032-2.597c-0.657-0.502-1.315-1.001-1.974-1.497 C1271.519,468.466,1267.199,465.396,1262.861,462.457z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1203.995,406.602c-3.766-3.47-7.165-6.555-10.242-9.291c-1.806-1.607-3.501-3.093-5.094-4.466 c-6.309-5.439-11.01-9.102-14.649-11.422c-6.966,3.268-13.344,6.047-19.181,8.371c1.7,2.182,3.387,4.311,5.054,6.359 c2.733,3.359,5.415,6.524,8.051,9.534c-4.292,0.524-5.297,1.586-3.686,3.267c0.586,0.611,1.523,1.306,2.766,2.084 c0.025,1.194,1.415,2.253,4.424,2.491c0.791-0.521,1.59-1.043,2.403-1.566c-0.359,0.756-0.718,1.501-1.076,2.245 c1.651,0.84,3.496,1.744,5.519,2.715c0.591,0.608,1.181,1.217,1.766,1.807c3.414,3.446,6.72,6.585,9.919,9.458 c3.944,3.542,7.719,6.668,11.311,9.417c1.109,0.849,2.199,1.661,3.273,2.44c2.704-5.546,5.032-11.128,5.57-16.711 c0.341-3.532,0.364-7.208,0.138-10.921C1208.067,410.366,1205.979,408.43,1203.995,406.602z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1233.817,455.12c2.048,0.512,3.843,0.801,5.361,0.906c0.451,0.031,0.878,0.047,1.281,0.047 c5.656,0.007,6.452-2.872,1.239-5.157c-0.722-0.316-1.552-0.621-2.507-0.906c-0.39-0.116-0.8-0.228-1.229-0.336 c-3.152-0.796-7.37-1.375-12.753-1.483c-1.111-1.767-2.213-3.437-3.311-5.063c-0.616,2.39-1.117,4.732-1.172,6.918 C1225.824,452.612,1230.218,454.22,1233.817,455.12z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1239.429,447.818c0.886,0.512,1.773,1.03,2.663,1.552c4.458,2.62,8.961,5.377,13.468,8.272 c2.435,1.564,4.87,3.169,7.301,4.815c-6.93-6.648-13.353-12.804-19.308-18.498c-0.187-0.179-0.374-0.358-0.56-0.536 c-6.692-6.397-12.793-12.211-18.358-17.485c-0.089,2.281-0.216,4.469-0.38,6.535c-0.161,2.031-0.643,4.157-1.199,6.301 C1228.371,441.584,1233.857,444.595,1239.429,447.818z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1312.436,510.041c1.836,1.761,3.688,3.537,5.572,5.343c2.781,2.666,5.611,5.38,8.498,8.146 c-1.96-2.945-4.018-5.822-6.159-8.636c-1.862-2.447-3.788-4.844-5.771-7.194c-4.518-5.352-9.334-10.455-14.368-15.316 c-2.148-2.074-4.335-4.105-6.555-6.092c-0.728,1.209-1.478,2.407-2.215,3.597c1.52,1.459,3.061,2.939,4.619,4.434 C1301.295,499.352,1306.754,504.591,1312.436,510.041z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1136.495,294.567c1.421,2.645,2.708,5.231,3.846,7.739c5.131,1.963,10.562,4.339,16.319,7.158 c-5.833-5.023-11.934-11.284-19.099-19.186c-0.642-0.708-1.294-1.431-1.954-2.166c0.133,1.826,0.242,3.633,0.324,5.418 C1136.121,293.876,1136.31,294.222,1136.495,294.567z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1133.892,286.195c-1.381-1.549-2.803-3.154-4.27-4.82c-0.071,0.388-0.142,0.781-0.214,1.174 c1.234,1.935,2.425,3.861,3.555,5.768C1133.272,287.617,1133.58,286.914,1133.892,286.195z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1127.934,280.268c-0.007-0.278-0.013-0.558-0.02-0.835c-0.733-0.835-1.474-1.682-2.231-2.546 C1126.45,278.015,1127.197,279.142,1127.934,280.268z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1191.213,329.246c-0.268-0.852-0.318-1.567-0.177-2.165c-1.969-0.478-3.862-0.988-5.681-1.541 C1187.277,326.736,1189.231,327.972,1191.213,329.246z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1201.063,368.003c-0.004-0.057-0.005-0.112-0.009-0.169c-0.044,0.024-0.087,0.046-0.131,0.069 C1200.969,367.936,1201.017,367.97,1201.063,368.003z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1244.181,333.622c0.144,0.175,0.289,0.35,0.437,0.529c11.563,1.073,24.875,2.276,40.377,3.827 c0.873,0.087,1.753,0.176,2.64,0.266c2.295,0.232,4.645,0.473,7.036,0.721c2.956,0.307,5.963,0.622,9.071,0.956 c-3.282-0.979-6.407-1.908-9.394-2.795c-1.615-0.479-3.182-0.943-4.713-1.396c-3.137-0.927-6.1-1.799-8.896-2.616 c-14.213-4.154-24.121-6.894-30.734-8.344c-1.628-0.357-3.057-0.636-4.301-0.839c-1.575,1.511-3.801,2.468-6.457,3.03 c0.242,0.457,0.549,0.956,0.918,1.5C1241.138,329.889,1242.527,331.617,1244.181,333.622z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1226.523,353.81c-1.344,0.764-2.648,1.495-3.965,2.237c3.657,4.657,7.685,9.669,12.101,15.146 c-5.965-4.818-11.211-9.158-15.805-13.066c-1.284,0.717-2.554,1.423-3.812,2.118c1.771,4.131,3.269,8.633,4.511,13.368 c0.944,3.611,1.743,7.353,2.411,11.153c0.186,0.17,0.37,0.34,0.553,0.509c0.417,0.386,0.829,0.769,1.232,1.149 c3.05,2.877,5.704,5.599,8.032,8.166c0.931,1.027,1.812,2.029,2.645,3.006c0.241,0.283,0.478,0.563,0.711,0.842 c12.613,15.072,14.063,24.07,22.689,27.072c0.361,0.126,0.73,0.245,1.118,0.349c0.566-0.832,1.101-1.659,1.621-2.484 c0.274-0.434,0.549-0.868,0.811-1.301c0.359-0.593,0.708-1.185,1.044-1.774c0.731-1.28,1.407-2.551,2.034-3.814 c2.03-4.089,3.527-8.085,4.571-11.982c0.049-0.183,0.099-0.367,0.146-0.55c0.243-0.943,0.457-1.879,0.648-2.81 c0.298-1.454,0.533-2.894,0.711-4.318c0.166-1.334,0.282-2.655,0.35-3.962c-1.002-1.366-2.098-2.711-3.317-4.042 c-4.89-5.36-13.21-9.43-14.73-16.72c-0.19-0.9-0.27-1.86-0.23-2.87c5.295,0.027,10.802,1.922,16.091,4.929 c-1.353-4.776-3.227-9.281-5.385-13.484c-1.514-2.949-3.166-5.749-4.877-8.392c-4.75-7.337-9.94-13.455-13.815-18.135 c-0.198-0.018-0.401-0.037-0.598-0.055c-16.426-1.526-29.313-2.801-39.944-4.471c2.52,4.586,5.786,9.511,9.76,14.963 C1217.955,347.516,1222.182,350.588,1226.523,353.81z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1197.302,324.426c-3.492,0.072-5.825,0.782-6.266,2.655c-0.141,0.598-0.091,1.313,0.177,2.165 c7.154,4.597,14.683,9.696,22.623,15.342c-3.975-5.452-7.24-10.377-9.76-14.963c-0.852-1.55-1.619-3.063-2.3-4.545 c-0.078-0.169-0.149-0.336-0.225-0.504C1200.004,324.458,1198.576,324.4,1197.302,324.426z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1266.714,308.08c1.195-0.606,2.33-1.227,3.398-1.863c1.313-0.781,2.532-1.583,3.661-2.405 c0.148-0.108,0.29-0.217,0.436-0.326c16.529-12.361,13.108-28.937,2.976-42.324c-2.875-3.798-6.288-7.339-9.94-10.454 c2.341-2.721,4.71-5.796,7.093-9.148c-7.126-1.498-16.951-3.157-18.904-0.697c-1.22,1.54,6.64,19.46,7.62,24.03 c1.59,7.4,1.97,13.99,1.98,21.81c0,4.6,1.924,15.538,0.084,22.16C1265.662,308.605,1266.194,308.344,1266.714,308.08z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1216.242,272.137c-14.192,16.851-19.913,28.63-18.111,41.208c0.304,2.12,0.824,4.266,1.551,6.46 c0.517,1.561,1.141,3.149,1.869,4.771c0.282,0.021,0.569,0.045,0.859,0.07c10.197,0.889,25.006,4.02,35.016,2.632 c0.628-0.087,1.234-0.194,1.821-0.318c2.656-0.562,4.882-1.519,6.457-3.03c1.707-1.637,2.649-3.925,2.563-7.053 c-0.008-0.282-0.024-0.572-0.049-0.868c-0.032-0.383-0.073-0.773-0.134-1.18c0.098-0.025,0.191-0.052,0.288-0.077 c1.172-0.304,2.31-0.618,3.418-0.94c0.994-0.289,1.963-0.585,2.907-0.888c-2.21-2.621-2.217-7.912-2.534-11.31 c-1.71-18.07-2.75-31.79-9.81-49.43c-5.447,3.438-9.652,5.061-12.98,5.324C1224.385,262.817,1220.017,267.656,1216.242,272.137z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1234.659,371.193c-4.416-5.477-8.444-10.489-12.101-15.146c-1.243,0.7-2.484,1.399-3.704,2.08 C1223.448,362.035,1228.694,366.375,1234.659,371.193z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1236.696,180.059c-1.286-2.234-0.338-1.446,1.191-0.616c1.944,1.055,4.828,2.175,5.257-2.76 c0.133-1.525,0.03-3.63-0.407-6.493c-4.817,0.068-8.827-0.594-11.654-2.169c-8.304,14.225-15.738,26.706-22.435,37.61 c10.155,4.673,19.67,9.607,26.086,13.165c1.972,0.741,4.007,1.488,6.108,2.242c0.744,0.267,1.49,0.534,2.251,0.803 c2.545-7.317,5.007-14.399,6.895-21.393C1241.842,188.054,1238.043,182.398,1236.696,180.059z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1234.361,164.309c2.54,0.926,5.16,1.913,7.868,2.969c0.205,1.05,0.373,2.016,0.509,2.912 c3.107-0.044,6.546-0.39,10.213-0.988c-0.324-2.471-0.814-4.959-1.479-7.47C1245.434,162.853,1239.729,163.698,1234.361,164.309z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1233.442,163.976c-0.089,0.153-0.181,0.311-0.269,0.464c0.395-0.043,0.79-0.086,1.189-0.131 C1234.053,164.196,1233.748,164.086,1233.442,163.976z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1179.693,152.62c-1.29,0.156-2.358,0.391-3.21,0.69c-4.167,1.462-3.142,4.446,2.72,7.11 c0.199,0.09,0.403,0.181,0.613,0.27c2.658-2.721,5.112-5.446,7.373-8.166C1184.167,152.332,1181.67,152.381,1179.693,152.62z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1191.927,164.001c3.26-3.368,6.388-6.661,8.969-9.526c-1.955-0.398-3.796-0.73-5.533-1.007 c-0.51-0.081-1.01-0.157-1.502-0.228c-0.191-0.028-0.384-0.056-0.573-0.083c-3.202,2.218-7.03,4.958-11.553,8.281 C1184.444,162.409,1187.847,163.297,1191.927,164.001z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1206.427,155.706c-0.081,0.789-0.161,1.573-0.246,2.37c-1.068,0.899-2.097,1.764-3.109,2.614 c2.19-1.364,4.406-2.752,6.644-4.161C1208.594,156.238,1207.495,155.962,1206.427,155.706z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1166.077,173.16c0.19-0.144,0.37-0.281,0.559-0.424c-0.003-0.01-0.007-0.019-0.01-0.029 C1166.441,172.859,1166.263,173.01,1166.077,173.16z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1132.215,99.836c-4.2,5.516-8.216,8.882-12.189,10.768c-0.074,0.122-0.15,0.245-0.225,0.368 c7.76,0.816,15.084,0.959,21.971,0.813C1138.71,107.532,1135.511,103.556,1132.215,99.836z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1139.052,94.797c2.003,5.339,4.081,10.957,6.242,16.891c7.743-0.265,14.909-0.806,21.513-1.023 c13.409-0.441,24.487,0.483,33.298,7.834c1.665,1.389,3.25,3.003,4.754,4.886c-0.999,2.495-2.133,5.024-3.418,7.579 c-0.851,1.693-1.765,3.396-2.75,5.109c-0.57,0.993-1.166,1.988-1.783,2.987c-0.603,0.976-1.229,1.954-1.878,2.935 c-0.79,1.193-1.617,2.39-2.477,3.589c-1.655,2.307-3.437,4.621-5.363,6.94c-2.261,2.72-4.714,5.445-7.373,8.166 c-0.174,0.178-0.351,0.357-0.527,0.535c-3.414,3.458-7.164,6.909-11.272,10.334c0.008,0.037,0.016,0.074,0.024,0.111 c4.237-3.209,8.066-6.077,11.52-8.63c0.741-0.548,1.466-1.082,2.173-1.601c4.523-3.322,8.352-6.063,11.553-8.281 c0.168-0.117,0.338-0.234,0.503-0.348c0.68-0.469,1.324-0.908,1.947-1.329c1.195-0.808,2.29-1.533,3.281-2.172 c5.731-3.692,8.166-4.639,8.368-3.748c0.482-5.647,0.851-11.042,1.112-16.193c-0.204-0.553-0.407-1.104-0.607-1.65 c0.216,0.351,0.424,0.726,0.636,1.092c0.172-3.487,0.294-6.863,0.367-10.128c0.029-1.295,0.05-2.572,0.063-3.832 c0.016-1.521,0.019-3.011,0.013-4.481c-0.392,1.683-0.842,3.39-1.357,5.12c-0.242,0.813-0.5,1.631-0.771,2.453 c-0.375,1.139-0.778,2.287-1.21,3.443c-0.937-2.697-1.804-5.288-2.609-7.783c-2.295-7.116-4.072-13.429-5.401-18.977 c-0.348-1.451-0.665-2.85-0.953-4.199c-1.706-0.964-3.425-1.848-5.157-2.621c-2.368-1.055-4.786-1.966-7.236-2.762 C1167.304,88.479,1152.217,91.631,1139.052,94.797z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1216.727,150.263c-2.307-9.007-5.042-16.003-8.199-21.453c-0.009,0.185-0.02,0.373-0.029,0.558 C1210.879,135.811,1213.604,142.761,1216.727,150.263z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1208.972,110.369c0.791-3.397,1.343-6.693,1.683-9.862c-0.655-0.574-1.314-1.139-1.978-1.692 C1208.857,102.484,1208.956,106.333,1208.972,110.369z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1207.387,145.561c-0.013,0.156-0.025,0.309-0.039,0.465 C1207.401,145.838,1207.414,145.683,1207.387,145.561z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M1206.181,158.076c0.085-0.798,0.165-1.582,0.246-2.37c0.341-3.303,0.65-6.533,0.921-9.68 c-0.365,1.288-2.556,4.076-5.713,7.625c-0.24,0.27-0.487,0.546-0.738,0.824c-2.581,2.865-5.709,6.158-8.969,9.526 c-2.883,2.978-5.866,6.012-8.666,8.858c6.356-3.86,12.965-7.906,19.811-12.17C1204.083,159.84,1205.113,158.974,1206.181,158.076 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1050.609,1026.411c3.829,0.611,7.423,1.072,10.811,1.399c-9.023-9.64-6.481-16.904,15.492-19.531 c-0.46-0.667-0.915-1.323-1.365-1.96c-18.089-4.03-26.969-13.731-28.426-19.464c-2.735,1.239-5.524,2.541-8.367,3.908 c-1.244,0.598-2.498,1.21-3.763,1.833c1.188,9.932-0.996,19.938-5.695,29.446 C1037.075,1023.931,1044.172,1025.383,1050.609,1026.411z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1087.481,1026.997c-0.95-1.552-1.856-3.244-2.735-5.066c-0.31,1.757-0.611,3.664-0.899,5.736 C1085.114,1027.48,1086.319,1027.253,1087.481,1026.997z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1079.055,1008.043c-0.136-0.368-0.274-0.741-0.411-1.114c-0.393-0.069-0.784-0.14-1.169-0.214 c0.106,0.484,0.22,0.975,0.33,1.463C1078.217,1008.132,1078.629,1008.086,1079.055,1008.043z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1075.547,1006.32c0.629,0.14,1.276,0.269,1.927,0.395c-0.494-2.256-0.936-4.467-1.339-6.643 c-2.45-6.693-5.193-14.016-8.593-21.76c-4.322,1.655-8.824,3.48-13.493,5.485C1058.96,986.448,1066.266,993.191,1075.547,1006.32 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1106.76,1007.307c1.175-0.144,2.368-0.305,3.581-0.488c0.074-0.255,0.14-0.517,0.209-0.776 c1.269-4.758,1.721-10.088,1.659-15.81c0.6-0.328,1.196-0.67,1.789-1.022c4.114-2.444,8.017-5.448,11.442-8.92 c21.335,35.412,27.176,32.497,22.159,12.555c-2.01-7.991-5.763-18.712-10.96-30.798c0.231-0.764,0.438-1.537,0.62-2.318 c-0.435,0.128-0.923,0.255-1.46,0.383c-3.627-8.289-7.911-17.17-12.758-26.217c-0.022-0.04-0.043-0.081-0.065-0.121 c-1.524-2.842-3.103-5.699-4.735-8.56c-4.663,1.336-11.097,2.324-19.382,2.703c-5.425,9.059-9.835,16.542-13.36,22.567 c18.19,29.436,21.355,27.482-1.549,22.592c1.427,10.932,2.332,21.156,5.724,27.919c0.997,0.706,1.785,1.133,2.39,1.373 c1.879-1.217,2.509,0.994,0,0c-0.313,0.203-0.662,0.503-1.035,0.927c1.116,1.623,2.452,2.954,4.068,3.939 C1098.698,1007.189,1102.581,1007.212,1106.76,1007.307z M1107.638,948.452c0.686,1.298,1.359,2.562,2.026,3.811 c2.223,4.161,4.344,8.06,6.363,11.698c-1.928,0.404-3.962,0.847-6.11,1.341c-0.407-2.98-0.832-5.989-1.248-9.01 C1108.311,953.683,1107.96,951.066,1107.638,948.452z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1070.104,977.341c-0.299,0.112-0.604,0.23-0.905,0.343c1.635,2.264,3.172,4.329,4.613,6.208 c-0.456-4.519-0.737-8.836-0.865-12.933c-0.005-0.001-0.01-0.002-0.014-0.002c-0.873,0.508-1.787,0.982-2.723,1.406 C1070.061,974.129,1070.029,975.787,1070.104,977.341z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1137.992,955.485c-0.16,1.441-0.41,2.856-0.734,4.246 C1140.621,958.739,1140.949,957.667,1137.992,955.485z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1123.565,1442.261c-3.406,4.899-6.412,9.66-9.051,14.282c4.316-2.233,8.737-4.345,13.16-6.331 c1.014-1.999,2.022-3.959,3.017-5.868c0.001-0.017,0.004-0.035,0.005-0.052 C1128.193,1443.679,1125.819,1442.999,1123.565,1442.261z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1117.941,1470.365c2.762-1.335,5.593-2.692,8.516-4.079c1.709-6.393,2.923-12.098,3.659-17.157 c-0.814,0.357-1.627,0.718-2.441,1.083C1124.401,1456.668,1121.071,1463.527,1117.941,1470.365z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1124.439,1473.393c2.146-2.913,4.281-5.98,6.398-9.179c-1.482,0.698-2.938,1.387-4.381,2.072 C1125.847,1468.568,1125.176,1470.934,1124.439,1473.393z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1161.971,1398.26c-1.602,1.534-3.164,3.058-4.695,4.575c-1.116,1.105-2.205,2.204-3.284,3.3 c-0.642,0.652-1.273,1.302-1.902,1.951c-5.344,5.512-10.223,10.901-14.655,16.157c-1.266,1.502-2.491,2.991-3.686,4.471 c1.068,1.137,2.13,2.469,3.181,4.022c11.805-21.246,18.552-28.97,3.216,5.182c2.225-0.422,4.356-0.828,6.398-1.219 c3.585-7.313,7.007-15.149,10.198-23.543c0.927-2.439,1.833-4.928,2.719-7.461c0.381-1.089,0.759-2.183,1.132-3.289 C1161.058,1401.034,1161.521,1399.661,1161.971,1398.26z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1131.235,1431.869c-0.21,0.268-0.407,0.532-0.614,0.8c0.447,3.32,0.48,7.178,0.076,11.623 c0.006,0.002,0.013,0.003,0.019,0.005c1.725-3.308,3.411-6.459,5.018-9.391 C1134.189,1433.895,1132.688,1432.883,1131.235,1431.869z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1141.545,1446.391c0.462-0.849,0.92-1.709,1.378-2.574c-1.64,0.644-3.298,1.309-4.967,1.992 C1139.128,1446.016,1140.323,1446.211,1141.545,1446.391z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1149.439,200.055c-0.836-1.695-1.69-3.408-2.565-5.143c-0.077,0.048-0.155,0.095-0.232,0.143 c-4.907,3.023-9.558,5.94-13.941,8.776c-0.914,0.591-1.815,1.179-2.705,1.763c0.866,3.574,1.745,7.045,2.632,10.418 c3.692,5.093,6.389,7.847,8.239,9.476C1146.205,217.347,1149.549,208.845,1149.439,200.055z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1088.044,275.289c1.62-1.494,3.427-2.535,5.379-3.109c0.38-0.332,0.764-0.666,1.15-1 c-3.016-3.902-6.324-7.359-9.644-10.902c0.068,3.467,0.644,7.072,1.735,10.853c0.153,0.529,0.316,1.062,0.489,1.599 C1087.427,273.574,1087.719,274.426,1088.044,275.289z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1124.28,278.156c-1.341-0.195-2.605-0.353-3.809-0.484c0.136,0.274,0.257,0.538,0.385,0.807 C1122.123,278.737,1123.272,278.648,1124.28,278.156z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1136.093,264.729c3.716,3.445,7.226,5.882,10.881,6.882c1.555,0.426,3.137,0.588,4.772,0.457 c-2.453-5.428-4.955-11.557-7.46-18.405c-3.006,0.247-5.969,0.474-8.884,0.682c-0.608,2.385-1.239,5.006-1.889,7.873 C1134.386,263.103,1135.245,263.943,1136.093,264.729z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1220.436,149.71c-3.63,2.333-7.204,4.604-10.72,6.818c-2.238,1.41-4.454,2.797-6.644,4.161 c-6.846,4.263-13.455,8.31-19.811,12.17c-0.211,0.128-0.418,0.254-0.628,0.381c-4.382,2.66-8.642,5.231-12.776,7.724 c0.15,0.883,0.298,1.769,0.438,2.663c-0.275-0.822-0.543-1.62-0.816-2.435c-0.214,0.129-0.429,0.259-0.642,0.387 c-3.243,1.956-6.41,3.865-9.493,5.73c-3.645,2.205-7.176,4.35-10.588,6.443c0.434,2.116,0.657,4.216,0.683,6.301 c11.122,22.544,18.85,41.575,23.845,56.937c6.046-6.96,13.068-16.592,21.505-29.448c2.149-3.274,4.39-6.758,6.729-10.459 c-0.496-0.255-1.012-0.52-1.565-0.802c-4.89-2.5-10.79-6.02-15.8-7.89c-4.35-1.62-25.34-2.83-25.73-10.27 c-0.684-12.877,26.511-3.404,50.225,7.507c6.697-10.905,14.131-23.385,22.435-37.61c0.692-1.185,1.384-2.371,2.088-3.581 c0.089-0.153,0.18-0.311,0.269-0.464c3.531-6.068,7.217-12.444,11.063-19.135c-1.372-2.624-2.867-5.297-4.466-7.987 c-1.743,1.168-3.475,2.321-5.196,3.46C1229.949,143.555,1225.145,146.685,1220.436,149.71z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1181.87,377.65c-0.579,0.284-1.168,0.576-1.739,0.854c0.686,0.609,1.365,1.213,2.059,1.827 C1182.206,379.493,1182.096,378.597,1181.87,377.65z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1090.928,606.823c-8.914,2.319-20.337,7.381-34.628,16.008c8.185-12.255,15.172-23.041,21.071-32.376 c-3.864-4.231-7.114-8.095-9.763-11.677c-2.288,22.702-12.688,47.74-26.1,61.28c1.724,2.397,3.471,4.802,5.249,7.217 c12.925-3.154,8.246,0.366,4.577,6.145c2.863,3.805,5.79,7.624,8.8,11.454c-3.742-2.58-7.343-5.058-10.837-7.46 c-0.887,2.449-1.065,5.08,0.432,7.663c1.453,2.507,4.49,4.967,10,7.17c3.045-2.973,6.049-5.953,9.006-8.943 c1.975-3.681,4.199-7.253,6.472-10.817c-2.356-9.265,3.773-14.579,10.145-24.253c2.333-3.543,4.481-7.286,6.313-11.176 c0.314-2.047,0.505-4.161,0.564-6.345C1091.791,609.43,1091.357,608.135,1090.928,606.823z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1092.174,606.51c0.076,1.432,0.093,2.831,0.056,4.202c0.324,0.946,0.649,1.888,0.979,2.818 c0.679-1.655,1.295-3.333,1.841-5.03c-0.742-0.724-1.472-1.438-2.191-2.145C1092.631,606.407,1092.406,606.455,1092.174,606.51z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1033.777,650.87c1.499-0.442,2.896-0.849,4.207-1.225c-1.548-1.061-3.065-2.101-4.558-3.124 c-7.317,4.36-15.155,5.045-22.845,0.244c1.709,3.469,3.255,6.724,4.617,9.756C1022.614,654.225,1028.745,652.355,1033.777,650.87 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1113.751,610.49c0.065-0.094,0.131-0.188,0.196-0.282c-0.463-0.575-0.981-1.104-1.553-1.587 c-0.135,0.363-0.272,0.726-0.412,1.088C1112.563,609.973,1113.152,610.233,1113.751,610.49z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1145.892,616.857c-0.071,0.167-0.149,0.355-0.224,0.533c0.173,0.108,0.344,0.216,0.513,0.323 c0.09-0.252,0.173-0.488,0.256-0.721C1148.195,612.011,1148.235,611.322,1145.892,616.857z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1131.806,655.182c1.176-2.954,2.307-5.815,3.387-8.566c-6.873-6.491-13.262-12.501-19.172-18.082 c-1.401,5.852-4.186,12.299-8.083,18.716c1.849,3.489,3.723,6.813,5.611,9.975c1.922-2.733,3.918-5.581,6.004-8.572 c-0.714,5.467-1.173,10.711-1.438,15.883c3.923,6.012,7.854,11.37,11.676,16.144c1.339,0.023,2.698,0.042,4.08,0.058 c0.295,0.003,0.596,0.006,0.893,0.009c3.926-2.127,6.881-4.014,9.036-5.704c-0.692-1.17-1.37-2.312-2.032-3.426 C1137.994,665.268,1134.688,659.797,1131.806,655.182z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1142.771,626.959c1.059-2.811,1.97-5.27,2.711-7.307c-0.234-0.043-0.467-0.089-0.701-0.133 c-0.705,1.706-1.551,3.783-2.535,6.223c-1.06-2.356-2.464-4.924-4.184-7.616c-5.937-1.346-11.704-2.962-17.033-4.822 c0.781,4.676,5.423,13.23,16.375,27.657c0.327-0.84,0.648-1.667,0.962-2.479C1145.043,640.284,1146.118,635.081,1142.771,626.959 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1132.566,610.497c-1.191-1.485-2.462-2.981-3.809-4.476c-2.233-2.478-4.675-4.95-7.311-7.359 c-2.355,3.871-4.857,7.72-7.497,11.546c0.141,0.175,0.28,0.353,0.411,0.537c2.128,0.896,4.355,1.751,6.67,2.558 C1119.993,607.1,1125.745,607.717,1132.566,610.497z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1144.275,434.632c-1.239,1.145-2.435,2.281-3.587,3.404c-0.659,0.643-1.302,1.281-1.934,1.916 c-5.754,5.783-10.401,11.237-14.331,16.213c-0.018,0.022-0.035,0.044-0.053,0.067c4.308,7.206,7.875,14.306,10.756,21.309 c3.333-4.332,6.801-9.171,10.387-14.578c2.165-3.264,4.372-6.732,6.62-10.422c2.388-3.922,4.822-8.097,7.296-12.532 c0.534-0.957,1.069-1.925,1.607-2.906c3.516-6.422,7.111-13.381,10.773-20.917c0.318-0.655,0.637-1.313,0.956-1.977 c0.358-0.745,0.716-1.49,1.076-2.245c-0.813,0.523-1.612,1.045-2.403,1.566c-0.879,0.579-1.74,1.157-2.592,1.735 C1159.035,421.914,1150.99,428.426,1144.275,434.632z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1057.12,433.242c1.663-4.069,3.275-7.92,4.838-11.555c-3.486,1.049-6.749,1.712-9.686,2.001 c-2.732,0.619-5.34,1.241-7.802,1.893C1048.171,427.927,1052.435,430.606,1057.12,433.242z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1090.246,500.888c-0.298,1.142-0.6,2.29-0.907,3.449c0.31,0.276,0.613,0.55,0.917,0.823 C1090.259,503.764,1090.256,502.34,1090.246,500.888z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1035.33,435.564c-1.487,1.558-3.289,3.213-5.419,4.966c1.072,1.958,2.298,3.963,3.703,6.01 c-0.441-0.172-0.865-0.341-1.301-0.512c1.659,2.647,3.261,5.338,4.828,8.057c2.335-0.614,4.629-1.049,6.885-1.325 C1040.413,445.839,1037.536,440.163,1035.33,435.564z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1079.132,452.829c-0.382-3.341-0.773-6.718-1.179-10.107c-7.468-2.465-14.529-5.932-20.834-9.48 c-2.413,5.905-4.934,12.272-7.575,19.154c9.971-0.067,19.168,3.039,27.723,8.221 C1077.859,458.043,1078.479,455.448,1079.132,452.829z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1089.875,484.07c-2.193-0.372-4.607-1.046-7.3-2.046c0.939,7.136,1.933,13.614,3.069,19.087 c0.579,0.496,1.148,0.988,1.706,1.475c0.89-1.453,1.844-2.989,2.868-4.616C1090.164,493.588,1090.052,488.961,1089.875,484.07z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1080.231,462.508c-0.979-0.658-1.968-1.287-2.964-1.89c-1.365,5.939-2.569,11.759-3.611,17.44 c3.289,1.658,6.243,2.974,8.918,3.967C1081.772,475.924,1081.009,469.347,1080.231,462.508z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1033.627,415.89c1.363-4.951,2.661-9.901,3.921-14.82c-5.167-2.901-9.594-5.915-13.337-8.96 c-0.743,0.115-1.478,0.236-2.208,0.361c-0.169,2.33-0.622,4.639-1.368,6.93c1.222,3.329,1.251,7.825,1.63,13.307 C1026.529,413.448,1030.46,414.483,1033.627,415.89z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1120.627,792.815c-0.058,1.97-0.123,3.97-0.195,6.006c1.348-0.204,2.717-0.416,4.098-0.632 c-0.154-0.618-0.308-1.259-0.462-1.887C1123.032,795.118,1121.888,793.953,1120.627,792.815z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1153.508,803.777c2.364-3.387,4.976-7.081,7.852-11.093c0.303-0.423,0.602-0.841,0.912-1.271 c-1.381,0.281-2.733,0.547-4.092,0.817c-3.557,0.705-7.037,1.372-10.442,2.002c-5.307,0.982-10.443,1.883-15.375,2.7 c-0.426,0.071-0.839,0.136-1.262,0.205c-1.269,0.208-2.539,0.417-3.782,0.616c5.773,8.045,10.553,15.912,14.443,23.32 c0.507-0.771,1.036-1.572,1.592-2.408C1146.093,814.539,1149.439,809.606,1153.508,803.777z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1091.7,850.742c-2.942,0.999-5.694,1.994-8.255,3.027c0.722,1.663,1.407,3.342,2.037,5.042 c0.506,0.59,1.015,1.173,1.527,1.745C1088.274,857.447,1089.883,854.031,1091.7,850.742z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1140.318,860.506c-3.707,5.895-7.227,11.523-10.57,16.892c2.959-1.447,5.845-3.602,8.624-6.544 c2.214-2.344,4.36-5.178,6.419-8.571C1143.268,861.692,1141.782,861.099,1140.318,860.506z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1114.282,859.281c0.75-1.247,1.472-2.468,2.156-3.658c-0.286-2.471-0.624-4.686-1.009-6.653 c-2.336-1.245-4.548-2.481-6.644-3.704c-0.509,0.161-1.015,0.321-1.516,0.479C1109.563,849.806,1111.91,854.307,1114.282,859.281 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1131.893,834.877c0.733-0.966,1.453-1.907,2.161-2.821c-0.351-1.086-0.705-2.194-1.061-3.333 c-0.146,1.127-0.314,2.158-0.481,3.078C1132.285,833.049,1132.06,834.09,1131.893,834.877z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1117.363,849.979c-0.127,1.553-0.258,3.122-0.393,4.705c0.738-1.301,1.448-2.579,2.104-3.814 C1118.489,850.572,1117.933,850.276,1117.363,849.979z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1120.013,851.338c-1.032,1.49-2.077,3.008-3.149,4.583c-0.059,0.688-0.115,1.362-0.175,2.055 c-0.051-0.531-0.105-1.05-0.16-1.559c-0.699,1.029-1.403,2.07-2.119,3.135c0.999,2.102,2.002,4.264,3.007,6.536 c-1.76-1.119-3.482-2.21-5.178-3.284c-0.957,1.439-1.924,2.902-2.91,4.405c0.987-1.529,1.92-3.007,2.825-4.459 c-5.892-3.73-11.38-7.183-16.501-10.399c-0.265-0.167-0.522-0.328-0.786-0.493c0.122,2.152,0.248,4.332,0.382,6.56 c-1.545,2.565-2.906,4.711-4.099,6.489c1.163,1.146,2.337,2.239,3.521,3.277c0.15,0.131,0.3,0.263,0.45,0.393 c3.804,3.28,7.705,5.966,11.632,7.883c7.55-6.962,15.073-13.931,22.34-20.778C1125.9,854.229,1122.872,852.779,1120.013,851.338z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1093.152,781.727c-2.596,2.484-5.982,5.069-10.157,7.751c3.529,1.556,6.848,3.057,9.941,4.516 C1092.951,789.601,1093.023,785.519,1093.152,781.727z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1056.943,807.075c-4.342,0.695-7.732,1.427-10.155,2.301c4.123,2.847,8.033,5.996,11.711,9.399 c0.392-1.357,0.773-2.706,1.14-4.046C1058.642,812.144,1057.743,809.586,1056.943,807.075z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1056.943,807.075c1.494-0.239,3.104-0.475,4.821-0.71c0.48-2.068,0.914-4.105,1.295-6.106 c-2.287,1.079-4.682,2.17-7.183,3.274C1056.208,804.701,1056.564,805.882,1056.943,807.075z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1166.626,172.708c0.003,0.01,0.006,0.019,0.01,0.029c0.937,2.776,1.885,5.594,2.843,8.456 c0.273,0.815,0.542,1.613,0.816,2.435c-0.14-0.895-0.287-1.78-0.438-2.663c-0.54-3.172-1.145-6.271-1.815-9.295 c-0.008-0.037-0.016-0.074-0.024-0.111c-2.13-9.594-4.891-18.453-8.151-26.635c-0.614-1.542-1.247-3.057-1.896-4.551 c-2.494-5.745-5.236-11.141-8.178-16.207c1.896,5.304,3.847,10.825,5.857,16.573c0.61,1.745,1.225,3.507,1.845,5.294 C1160.419,154.449,1163.462,163.337,1166.626,172.708z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1117.124,115.44c0.933-1.587,1.825-3.073,2.677-4.467c0.075-0.123,0.151-0.246,0.225-0.368 c-1.419,0.674-2.833,1.159-4.247,1.483c-7.195,7.812-13.155,12.6-17.464,15.672c-0.068,1.405-0.163,2.86-0.281,4.356 c2.965,0.409,6.392,0.199,9.861-0.055c2.557-4.844,4.906-9.108,7.058-12.874C1115.7,117.877,1116.423,116.632,1117.124,115.44z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1098.567,150.498c0.886-1.821,1.752-3.579,2.601-5.288c-1.727-0.159-3.232-0.404-4.548-0.63 c-0.05,0.344-0.098,0.685-0.149,1.032C1097.18,147.278,1097.876,148.901,1098.567,150.498z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1145.294,111.688c-2.161-5.933-4.239-11.552-6.242-16.891c-1.342,0.323-2.669,0.646-3.971,0.969 c-0.965,1.466-1.921,2.828-2.866,4.07c3.296,3.72,6.496,7.696,9.556,11.949c2.801,3.892,5.485,8.014,8.022,12.381 C1148.258,119.87,1146.756,115.703,1145.294,111.688z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF931E",
                        d:
                          "M1127.628,97.686c-11.566,3.088-21.348,6.277-29.311,9.839c-0.286,0.364-0.57,0.725-0.855,1.087 c0.077,0.455,0.148,0.918,0.217,1.389c6.346,2.029,12.229,3.432,18.098,2.087C1119.428,108.124,1123.396,103.38,1127.628,97.686z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1084.687,1165.012c0.777,0.805,1.597,1.6,2.459,2.383c0.16-1.123,0.322-2.199,0.484-3.239 C1086.653,1164.453,1085.669,1164.73,1084.687,1165.012z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1052.349,1171.492c-0.019,5.664,1.849,10.261,5.153,12.876c0.024,0.019,0.048,0.037,0.072,0.056 c3.417,2.659,8.35,3.212,14.31,0.661c0.404-0.173,0.813-0.358,1.226-0.56c1.664-0.812,3.402-1.862,5.204-3.167 c2.49-1.804,5.103-4.097,7.812-6.935c-0.536-3.228-1.208-6.314-1.98-9.256 C1073.792,1168.104,1063.132,1170.198,1052.349,1171.492z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1061.395,1153.083c4.989-1.126,9.928-2.447,14.78-4.003c-0.026-0.317-0.044-0.633-0.05-0.948 C1070.672,1150.227,1065.765,1151.869,1061.395,1153.083z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1076.361,1144.17c-0.444-0.939-0.886-1.852-1.323-2.737 C1070.213,1148.069,1073.767,1149.696,1076.361,1144.17z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1072.573,1136.591c-4.636-8.903-7.762-14.201-4.466-15.87c-4.921-3.06-9.303-6.264-13.193-9.566 c-25.206,26.363-30.64,46.266-7.28,44.553c3.304-0.524,6.601-1.12,9.882-1.792 C1060.79,1148.112,1065.719,1142.15,1072.573,1136.591z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1101.664,1136.873c-0.024,0.374-0.05,0.75-0.075,1.124c2.731-1.572,5.399-3.266,8.002-5.081 c-1.953,0.996-3.865,1.956-5.736,2.88C1103.12,1136.159,1102.386,1136.521,1101.664,1136.873z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M1077.866,1147.455c0.135,0.305,0.27,0.611,0.405,0.92c4.7-1.582,9.31-3.395,13.799-5.468 c-0.087-0.47-0.174-0.933-0.26-1.39C1086.823,1143.784,1082.179,1145.758,1077.866,1147.455z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1013.395,1421.294c0.583-2.382,1.901-4.895,4.165-7.549c-1.342-0.623-2.639-1.234-3.911-1.839 c-0.952,2.217-1.933,4.469-2.938,6.75C1011.562,1419.521,1012.456,1420.4,1013.395,1421.294z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1004.993,1431.35c-1.234,2.681-2.503,5.404-3.807,8.167c-0.024,0.778-0.05,1.558-0.085,2.351 c1.839-2.277,3.641-4.427,5.406-6.457c0.187-0.214,0.374-0.433,0.56-0.644c0.429-0.489,0.854-0.967,1.279-1.442 c0.419-0.469,0.836-0.93,1.25-1.385c-1.436-0.432-2.862-0.871-4.267-1.324c-0.083,0.182-0.166,0.363-0.25,0.545 C1005.05,1431.225,1005.022,1431.287,1004.993,1431.35z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1057.182,1390.359c-5.868-5.28-13.183-11.858-22.234-19.894c7.295,1.179,13.764,4.103,19.617,7.954 c-6.962-11.272-13.669-16.326-21.771-16.617c-2.833,8.641-6.195,18.041-10.173,28.24c2.067,2.973,4.336,6.363,6.821,10.266 c1.647-3.894,3.869-7.161,6.991-9.294c1.746,2.208,3.05,4.501,3.993,6.854C1045.23,1395.457,1050.784,1392.956,1057.182,1390.359 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1040.575,1347.321c-1.097-0.154-2.145-0.323-3.167-0.5c-0.938,3.266-1.958,6.659-3.071,10.189 c9.672-5.469,17.194-9.36,23.097-11.873c-0.468-5.883-0.4-11.944,0.405-18.072c-0.629-2.662-1.276-5.417-1.942-8.275 c-4.372,5.082-8.987,8.463-13.96,10.57c-0.537,2.347-1.127,4.783-1.771,7.31C1040.333,1339.961,1040.47,1343.5,1040.575,1347.321 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1048.68,1291.322c-0.669-1.258-1.25-2.445-1.748-3.551c0.059,1.201,0.091,2.513,0.089,3.937 c-0.003,2.38-0.101,5.078-0.329,8.109c0.231-0.227,0.465-0.445,0.692-0.683c1.227-1.296,2.327-2.723,3.33-4.24 c-0.6-0.99-1.15-1.945-1.652-2.863C1048.93,1291.791,1048.804,1291.556,1048.68,1291.322z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1094.546,1270.175c-1.78,1.786-3.545,3.64-5.294,5.543c0.024-0.001,0.048-0.003,0.073-0.004 c2.397-1.877,4.649-3.645,6.747-5.296C1095.56,1270.338,1095.053,1270.256,1094.546,1270.175z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1078.88,1283.859c-0.244,0.189-0.491,0.381-0.737,0.572c-2.442,1.895-5.002,3.877-7.695,5.956 c-0.643,2.5-1.416,4.993-2.349,7.48C1070.993,1293.113,1074.557,1288.426,1078.88,1283.859z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1046.932,1287.771C1046.185,1272.622,1041.193,1275.012,1046.932,1287.771L1046.932,1287.771z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1105.964,1100.045c-0.395,0.46-0.799,0.928-1.2,1.395c-0.666,0.774-1.334,1.551-2.017,2.343 c0.055,3.722,0.033,7.505-0.056,11.343c2.813-0.546,5.547-1.332,8.203-2.31c1.724-0.635,3.415-1.352,5.074-2.137 c4.071-1.927,7.947-4.271,11.64-6.844C1118.924,1103.172,1111.802,1101.851,1105.964,1100.045z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1041.53,1029.876c-3.31,2.132-6.249,5.531-8.503,9.864c7.634,3.912,16.101,8.752,25.499,14.64 c4.533-1.196,8.916-2.503,13.033-3.805c-0.992-2.746-2.048-5.221-3.156-7.439 C1059.363,1038.202,1050.308,1033.562,1041.53,1029.876z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1185.722,1093.656c-1.297-5.853-2.71-10.41-4.25-13.859c-1.704-3.819-3.563-6.286-5.589-7.655 c-0.25-0.169-0.503-0.318-0.758-0.454c-5.386-2.874-11.916,1.459-19.809,8.39c0.008,0.109,0.017,0.22,0.025,0.33 C1165.699,1085.04,1175.99,1089.503,1185.722,1093.656z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1155.076,1080.288c0.08-0.071,0.16-0.14,0.24-0.211c-0.109-1.55-0.172-3.078-0.199-4.578 c-1.91,1.017-4.007,1.663-6.269,1.984C1150.924,1078.424,1153.001,1079.359,1155.076,1080.288z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1080.175,1114.067c0.233-1.463,0.483-2.896,0.747-4.306c0.168-0.896,0.342-1.78,0.521-2.655 c0.02-0.098,0.04-0.197,0.06-0.295c1.147-5.546,2.524-10.671,4.061-15.401c0.351-1.079,0.71-2.138,1.077-3.177 c-5.839-7.191-6.506-15.645-5.971-22.82c-15.983,5.714-32.543,6.938-50.655,7.763c1.173,4.813,3.025,9.763,5.676,14.724 c2.96,5.539,6.917,11.089,12.032,16.472c2.182,2.296,4.574,4.561,7.191,6.782c3.889,3.302,8.272,6.505,13.193,9.566 c2.329-1.179,7.87-0.547,18.353,1.906c0.417-0.48,0.837-0.964,1.249-1.439c-0.365-1.976-0.671-3.852-0.903-5.688 C1084.636,1115.182,1082.427,1114.713,1080.175,1114.067z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M1187.102,1100.616c-9.452,1.332-18.082,2.277-25.958,2.877c4.512,9.576,12.135,18.773,24.684,26.183 c1.667-0.061,3.323-0.179,4.965-0.356C1189.699,1117.816,1188.473,1108.342,1187.102,1100.616z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1055.069,339.294c2.358-6.137,4.945-11.824,7.865-16.942c-5.649-2.396-12.006-4.78-19.289-6.793 c-0.813-0.225-1.637-0.445-2.473-0.66c0.674,0.598,1.323,1.214,1.947,1.845c3.121,3.158,5.625,6.716,7.6,10.561 C1052.647,331.062,1054.069,335.093,1055.069,339.294z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1046.149,367.519c0.364-1.343,0.731-2.676,1.102-4c-0.949-0.808-1.89-1.576-2.821-2.295 c-4.225-3.266-8.243-5.628-11.969-7.21c2.371,3.17,3.802,5.544,4.426,7.268C1040.636,364.554,1043.983,367.185,1046.149,367.519z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1010.39,358.828c0.111-0.066,0.223-0.129,0.335-0.194c-0.354-0.595-0.713-1.191-1.077-1.789 c-0.329,0.47-0.633,0.959-0.895,1.481C1009.303,358.493,1009.848,358.661,1010.39,358.828z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1010.941,358.999c-0.002-0.004-0.004-0.007-0.006-0.011c-0.002,0.002-0.005,0.004-0.008,0.006 C1010.932,358.996,1010.937,358.997,1010.941,358.999z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1022.084,390.313c0.683,0.6,1.393,1.199,2.128,1.797c3.742,3.046,8.169,6.059,13.337,8.96 c0.241-0.942,0.482-1.883,0.721-2.823c-1.482-5.028-2.827-10.051-4.806-13.953c-1.579-3.115-12.079-14.205-17.246-23.641 c-1.697-0.535-3.46-1.091-5.276-1.654C1017.443,369.97,1022.111,380.337,1022.084,390.313z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1128.426,298.327c2.486,0.698,5.052,1.507,7.703,2.432c-0.011-1.348-0.04-2.71-0.08-4.083 c-0.005-0.156-0.011-0.314-0.016-0.471c-0.029-0.888-0.06-1.778-0.102-2.677c-0.082-1.785-0.191-3.592-0.324-5.418 c-0.119-1.631-0.25-3.272-0.411-4.937c-0.441,1.03-0.873,2.028-1.304,3.02c-0.312,0.719-0.62,1.422-0.928,2.122 c-0.381,0.867-0.761,1.731-1.134,2.569c-0.609,1.366-1.206,2.685-1.796,3.974 C1129.491,296.048,1128.955,297.202,1128.426,298.327z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1061.958,421.687c0.018-0.042,0.035-0.082,0.053-0.124c-3.388,0.728-6.644,1.424-9.74,2.125 C1055.209,423.399,1058.472,422.737,1061.958,421.687z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1091.303,888.653c0.349-0.08,0.693-0.165,1.04-0.247c-0.325-0.94-0.72-1.915-1.195-2.93 C1091.212,886.534,1091.277,887.591,1091.303,888.653z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1109.559,910.191c1.148-1.888,2.326-3.821,3.54-5.807c0.313-0.513,0.632-1.034,0.95-1.553 c1.56-2.549,3.172-5.177,4.839-7.887c-9.944,0.837-21.157,2.614-26.11,5.535c-0.86,2.928-2.313,5.608-3.781,8.366 c-0.021,0.253-0.039,0.511-0.055,0.771C1097.044,909.236,1103.935,909.495,1109.559,910.191z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1046.093,933.596c2.165,0.246,4.506,0.514,7.046,0.807c-1.881-0.799-3.579-1.719-5.109-2.749 C1047.379,932.304,1046.728,932.955,1046.093,933.596z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1062.197,927.527c0.509,2.607,1.062,5.314,1.661,8.125c2.372,0.279,4.87,0.574,7.51,0.888 c0.068-0.226,0.137-0.448,0.204-0.676C1069.044,932.696,1065.964,929.876,1062.197,927.527z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1025.353,956.58c-1.958,2.55-3.606,4.917-4.874,7.063c1.08,1.132,2.101,2.272,3.054,3.422 c0.907-0.001,1.806,0.002,2.695,0.008c11.273,0.077,21.094,0.688,29.569,1.559c0.657-5.006,7.016-14.98,10.96-21.548 C1049.702,952.499,1036.105,955.477,1025.353,956.58z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1058.223,900.45c0.619,1.275,1.233,2.53,1.841,3.765c0.956,1.94,1.9,3.831,2.829,5.673 c3.772-0.847,6.646-1.187,8.81-1.017c1.833-1.717,3.688-3.449,5.562-5.193c0.437-7.109,0.269-14.021-0.732-20.135 c-1.201-7.36-3.526-14.927-6.756-22.308C1060.477,868.588,1056.594,879.548,1058.223,900.45z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1050.852,842.995c-7.282-5.946-15.721-12.508-25.49-19.786c5.912,15.687,11.618,29.809,17.064,42.533 c0.382,0.004,0.764,0.009,1.145,0.012C1045.808,858.287,1048.337,850.633,1050.852,842.995z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1129.748,877.398c3.343-5.369,6.864-10.998,10.57-16.892c0.929-1.477,1.872-2.975,2.824-4.485 c-1.298-2.797-2.672-6.053-4.111-9.792c-3.244,3.117-6.561,6.27-9.939,9.452c-7.267,6.847-14.79,13.816-22.34,20.778 c-4.156,3.832-8.318,7.662-12.451,11.468c10.705-2.702,20.664-6.374,32.011-6.274c0.259,0.002,0.519,0.013,0.778,0.018 C1127.965,880.265,1128.849,878.843,1129.748,877.398z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1163.536,823.934c-1.329,0.649-2.646,1.28-3.951,1.896c-2.3,2.383-4.696,4.816-7.162,7.286 c-1.142,1.144-2.3,2.296-3.474,3.456c0.896,2.235,1.697,4.392,2.409,6.461c1.263-1.99,2.546-4.008,3.846-6.05 c2.113-3.319,4.273-6.704,6.486-10.165C1162.3,825.864,1162.918,824.899,1163.536,823.934z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1190.829,781.703c-5.741,8.809-11.217,17.256-16.451,25.367c0.348,0.431,0.681,0.891,1.001,1.377 C1184.769,797.233,1190.604,787.932,1190.829,781.703z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1072.947,970.949c-0.005,0.003-0.01,0.005-0.014,0.008c0.005,0.001,0.01,0.002,0.014,0.002 C1072.947,970.956,1072.947,970.953,1072.947,970.949z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M1083.949,973.076c22.904,4.891,19.739,6.844,1.549-22.592c3.525-6.025,7.935-13.507,13.36-22.567 c-3.057,0.14-6.361,0.198-9.924,0.158c-0.044,0.845-0.114,1.611-0.22,2.267c-0.459,2.81-1.075,5.456-1.748,8.066 c1.13,0.137,2.271,0.275,3.44,0.417c-1.328,0.501-2.638,0.99-3.934,1.468c-0.712,2.657-1.463,5.306-2.158,8.08 c-0.939,3.743-1.263,8.063-2.414,11.96C1082.775,964.581,1083.401,968.879,1083.949,973.076z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1054.528,677.281c-1.462,1.404-2.932,2.806-4.41,4.206c-0.019,0.018-0.039,0.037-0.058,0.055 c-1.987,1.883-3.986,3.763-5.997,5.641c1.112,0.058,2.219,0.075,3.321,0.06c2.548-0.036,5.07-0.264,7.558-0.666 c2.266-0.366,4.503-0.88,6.706-1.52c0.737-8.023,3.5-15.07,7.088-21.755c-2.957,2.989-5.961,5.97-9.006,8.943 c-0.515,0.503-1.03,1.006-1.548,1.508C1056.97,674.931,1055.752,676.107,1054.528,677.281z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1142.4,501.228c-0.273-1.348-0.568-2.699-0.891-4.054c-4.625,8.769-8.505,15.981-11.739,21.895 c4.878,6.959,9.555,13.579,14.094,19.335c0.43-3.507,0.701-7.038,0.811-10.592c0.013-0.42,0.024-0.841,0.032-1.262 c0.059-2.974,0.003-5.964-0.173-8.973c-0.078-1.327-0.175-2.657-0.3-3.99C1143.852,509.5,1143.24,505.381,1142.4,501.228z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1137.616,564.953c-4.722,0.42-9.169,0.73-13.154,0.965c2.334,5.249,4.736,9.828,7.166,13.794 C1133.894,574.833,1135.899,569.915,1137.616,564.953z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1105.324,429.515c-0.796,5.184-1.717,10.698-2.79,16.568c4.394-0.378,8.796-1.359,13.149-3.108 c-1.362-1.912-2.772-3.83-4.24-5.757C1109.498,434.664,1107.459,432.097,1105.324,429.515z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1101.04,453.966c0.528-2.694,1.026-5.324,1.494-7.882c-0.691,0.059-1.381,0.109-2.071,0.139 C1100.645,448.842,1100.836,451.426,1101.04,453.966z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1143.291,542.494c-10.066-0.667-16.474-3.207-22.353-7.603c-2.458,4.293-3.98,6.846-4.789,8.259 c0.085,0.283,0.171,0.563,0.256,0.844c2.338-1.829,8.217-6.067,11.361,4.143c4.642,0.533,9.446,0.519,14.508-0.057 c0.375-1.827,0.713-3.659,1.005-5.499C1143.282,542.552,1143.286,542.523,1143.291,542.494z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1090.928,606.823c-0.373-1.144-0.742-2.301-1.107-3.468c-4.697-4.672-8.838-8.945-12.449-12.9 c-5.899,9.334-12.886,20.121-21.071,32.376C1070.592,614.204,1082.015,609.143,1090.928,606.823z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1097.089,600.222c0.288-1.729,0.492-3.47,0.601-5.22c-1.773-0.266-3.47-0.721-5.088-1.361 C1093.431,595.934,1094.97,598.133,1097.089,600.222z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1092.859,606.356c-0.246-0.242-0.495-0.485-0.738-0.725c0.021,0.295,0.037,0.588,0.053,0.88 C1092.406,606.455,1092.631,606.407,1092.859,606.356z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1116.021,628.533c-3.077-2.905-6.024-5.695-8.844-8.376c-2.111,3.979-4.446,7.772-6.881,11.273 c2.47,5.619,5.029,10.888,7.642,15.819C1111.835,640.832,1114.62,634.385,1116.021,628.533z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1113.751,610.49c0.2,0.086,0.406,0.169,0.608,0.254c-0.131-0.184-0.27-0.361-0.411-0.537 C1113.883,610.302,1113.816,610.396,1113.751,610.49z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1113.948,610.208c2.641-3.826,5.142-7.675,7.497-11.546c1.252-2.058,2.462-4.123,3.627-6.195 c1.568-2.786,3.055-5.585,4.457-8.397c-4.575,3.287-8.912,5.811-13.007,7.629c-0.557,5.589-2.035,11.318-4.127,16.922 C1112.966,609.104,1113.485,609.633,1113.948,610.208z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1107.255,504.573c-1.076-6.197-2.072-12.755-2.98-19.673c-1.063-1.247-2.137-2.475-3.222-3.683 c-3.665,5.563-6.812,10.408-9.513,14.661c-0.421,1.651-0.853,3.322-1.294,5.01c0.01,1.451,0.013,2.876,0.01,4.272 c2.72,2.45,5.19,4.781,7.454,6.993C1100.726,509.753,1103.908,507.232,1107.255,504.573z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1096.316,476.163c-2.325-2.372-4.7-4.629-7.13-6.742c0.293,5.134,0.52,10.01,0.689,14.649 c0.177,4.891,0.29,9.518,0.343,13.9c0.428-0.68,0.87-1.378,1.322-2.091C1093.297,488.988,1094.882,482.424,1096.316,476.163z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1136.456,480.878c-0.424-1.11-0.871-2.224-1.33-3.339c-2.881-7.003-6.448-14.103-10.756-21.309 c-1.022-1.71-2.087-3.425-3.193-5.147c-6.926,10.292-12.807,19.072-17.801,26.615c0.289,2.444,0.588,4.843,0.898,7.201 c3.695,4.333,7.262,8.882,10.719,13.503C1121.605,493.111,1128.766,487.303,1136.456,480.878z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1149.242,748.036c1.006,0.32,2.025,0.633,3.058,0.938c5.316,1.568,10.99,2.904,17.023,3.718 c0.392,0.053,0.785,0.105,1.18,0.154c1.315,0.161,2.648,0.295,3.997,0.403c0.131,0.01,0.26,0.023,0.391,0.033 c-0.123-0.065-0.241-0.125-0.363-0.189c-1.756-0.929-3.484-1.822-5.193-2.69c-1.048-0.532-2.089-1.055-3.12-1.566 c-4.46-2.208-8.754-4.21-12.885-6.034c-2.473-1.092-4.881-2.115-7.234-3.084c-1.648-0.678-3.27-1.331-4.859-1.953 c-3.899-1.526-7.621-2.89-11.165-4.115c-1.738,1.913-3.403,3.781-4.979,5.603c4.672,1.618,9.853,3.721,15.545,5.814 C1143.386,746.078,1146.255,747.086,1149.242,748.036z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1091.15,864.907c1.193-1.778,2.554-3.925,4.099-6.489c-0.134-2.229-0.26-4.408-0.382-6.56 c-0.04-0.713-0.081-1.427-0.12-2.131c-1.037,0.34-2.054,0.678-3.047,1.016c-1.817,3.289-3.426,6.706-4.691,9.814 c-0.17,0.418-0.333,0.829-0.49,1.235c0.748,2.243,1.418,4.511,1.998,6.807c0.304-0.392,0.624-0.82,0.963-1.287 C1089.995,866.599,1090.551,865.801,1091.15,864.907z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1120.73,789.054c0.027-1.067,0.053-2.13,0.075-3.178c0.044-2.03,0.079-4.02,0.108-5.98 c0.019-1.259,0.034-2.503,0.047-3.734c0.011-1.052,0.02-2.096,0.027-3.129c0.068-10.255-0.059-19.545-0.298-28.067 c-0.004-0.14-0.008-0.276-0.012-0.415c-2.212,2.775-4.148,5.433-5.734,7.976c5.84,10.349,3.718,15.817-3.363,6.541 c-1.886,4.884-1.952,9.263,0.471,13.142c1.785,1.774,3.622,3.574,5.522,5.406c-2.511-1.679-4.32-3.482-5.522-5.406 c-4.884-4.855-9.344-9.498-13.404-13.943c2.86,5.573,6.699,11.768,11.633,18.654 C1114.026,780.961,1117.505,785.016,1120.73,789.054z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1119.554,648.652c-2.086,2.991-4.083,5.839-6.004,8.572c1.516,2.539,3.04,4.973,4.566,7.311 C1118.381,659.363,1118.84,654.119,1119.554,648.652z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1120.627,792.815c0.023-0.784,0.047-1.569,0.067-2.342c-3.906-4.791-7.37-9.305-10.414-13.552 c-4.754-5.128-9.938-10.228-15.576-15.232c-0.005,0.037-0.01,0.074-0.015,0.111c6.959,5.612,6.441,12.293-1.537,19.927 c-0.129,3.792-0.201,7.874-0.216,12.267c12.482,5.889,21.433,11.137,26.99,16.875c0.199-4.142,0.367-8.156,0.506-12.048 C1120.504,796.786,1120.569,794.785,1120.627,792.815z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1116.438,855.623c0.182-0.317,0.355-0.626,0.532-0.939c0.135-1.583,0.266-3.152,0.393-4.705 c0.212-2.6,0.414-5.161,0.604-7.679c-1.318,0.437-2.614,0.861-3.889,1.273c0.496,1.548,0.949,3.341,1.351,5.398 C1115.814,850.938,1116.151,853.152,1116.438,855.623z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1116.689,857.976c0.061-0.693,0.116-1.368,0.175-2.055c-0.111,0.163-0.224,0.332-0.336,0.496 C1116.584,856.926,1116.638,857.445,1116.689,857.976z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1115.809,174.003c-0.09,0.042-0.198,0.076-0.318,0.103c-0.022,0.074-0.05,0.147-0.071,0.221 C1115.55,174.219,1115.679,174.111,1115.809,174.003z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1121.532,164.923c-2.703,2.265-4.453,4.88-5.535,7.7c0.245,0.479,0.3,0.848,0.142,1.106 c2.126-1.765,4.197-3.444,6.086-4.959C1121.993,167.495,1121.761,166.216,1121.532,164.923z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1083.804,281.078c-0.247,0.249-0.488,0.496-0.728,0.743c-0.899,0.926-1.747,1.837-2.539,2.733 c0.461,0.456,0.918,0.9,1.37,1.332C1082.449,284.13,1083.08,282.519,1083.804,281.078z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1094.806,296.179c-3.871-2.47-8.143-5.746-12.899-10.292c-1.416,4.591-2.168,10.251-2.082,16.917 C1084.235,299.72,1089.187,297.463,1094.806,296.179z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1110.943,257.179c-0.994,0.863-1.987,1.72-2.977,2.569c0.737,0.826,1.456,1.66,2.157,2.501 c0.085-0.471,0.174-0.945,0.253-1.411C1110.587,259.601,1110.772,258.384,1110.943,257.179z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1112.689,255.656c-0.518,0.023-1.031,0.045-1.546,0.067c-0.063,0.482-0.131,0.969-0.2,1.457 C1111.525,256.674,1112.107,256.166,1112.689,255.656z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1129.232,202.414c-0.1-0.424-0.199-0.857-0.299-1.283c-0.966-4.124-1.914-8.376-2.844-12.757 c-0.79-3.723-1.566-7.536-2.326-11.445c-0.284-1.464-0.567-2.941-0.846-4.431c-2.747,3.142-5.542,5.404-8.334,6.89 c-0.128,1.947-0.069,3.934,0.121,5.928c7.592,15.04,13.48,24.565,17.925,30.696c-0.888-3.373-1.766-6.844-2.632-10.418 C1129.74,204.541,1129.485,203.484,1129.232,202.414z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1144.47,182.611c-2.673-4.694-6.502-9.452-11.698-14.265c3.246,5.838,6.294,11.491,9.165,16.969 c0.639,1.22,1.27,2.431,1.891,3.633c0.882,1.707,1.744,3.395,2.59,5.065c0.151,0.299,0.305,0.601,0.456,0.899 c0.875,1.735,1.729,3.448,2.565,5.143c-0.026-2.084-0.25-4.185-0.683-6.301C1148.003,190.084,1146.61,186.368,1144.47,182.611z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1151.475,253.04c-2.425,0.221-4.819,0.427-7.189,0.622c2.505,6.848,5.007,12.978,7.46,18.405 c9.347,20.68,17.983,31.128,23.362,31.898c0.28,0.04,0.549,0.05,0.811,0.037c6.436-0.3,7.332-16.359-2.634-47.011 c-4.995-15.363-12.723-34.394-23.845-56.937c0.11,8.791-3.234,17.292-8.573,25.433c5.188,4.568,3.721,0.313-1.105,14.091 C1143.406,243.8,1147.291,248.271,1151.475,253.04z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1095.053,271.807c-0.159-0.21-0.319-0.419-0.48-0.627c-0.386,0.335-0.77,0.668-1.15,1 C1093.957,272.023,1094.499,271.894,1095.053,271.807z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1121.513,1180.288c-0.347-0.645-0.691-1.284-1.031-1.919c-2.269-4.23-4.38-8.213-6.349-11.88 c-2.004-3.732-3.861-7.134-5.587-10.134c-2.817,1.262-5.681,2.432-8.572,3.544c-0.407,5.34-0.803,10.657-1.145,15.912 c7.594,4.387,16.42,7.787,25.388,9.467c-0.761-1.394-1.507-2.77-2.236-4.121 C1121.823,1180.864,1121.668,1180.577,1121.513,1180.288z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1142.853,1178.327c1.071-1.091,2.098-2.135,3.089-3.14c-2.853,0.074-2.789-0.792,4.736-4.784 c16.296-16.401,16.383-15.917-11.267,8.089c-1.018,0.884-2.074,1.799-3.167,2.747c-1.794,1.555-3.693,3.198-5.695,4.928 c1.476,0.137,2.95,0.224,4.415,0.255c1.656-1.71,3.243-3.342,4.768-4.905C1140.805,1180.417,1141.847,1179.353,1142.853,1178.327 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1072.385,1216.828c-5.651-3.004-9.705-5.416-12.266-7.161c7.122,6.835,13.593,13.116,20.652,18.82 c0.068-0.196,0.134-0.391,0.201-0.587C1078.291,1223.94,1075.45,1220.238,1072.385,1216.828z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1033.712,1227.353c6.364,1.012,12.874,2.097,19.512,3.26c-1.473-3.625-5.949-9.175-9.537-14.597 C1039.312,1220.052,1036.007,1223.825,1033.712,1227.353z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1041.998,1255.297c4.401,2.524,9.912,4.801,16.432,6.864c0.04,0.013,0.08,0.025,0.12,0.037 c-0.022-3.532-0.234-7.058-0.612-10.493C1052.401,1252.882,1047.096,1254.078,1041.998,1255.297z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1103.037,1271.463c-1.135-2.674-2.265-5.304-3.396-7.887c-5.768,2.729-11.375,4.1-16.652,4.574 c3.691,0.707,7.546,1.381,11.557,2.025c0.507,0.081,1.013,0.163,1.525,0.243 C1098.345,1270.776,1100.667,1271.124,1103.037,1271.463z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1083.707,1218.909c4.454-16.866,4.516-31.587,2.475-44.149c-0.37,3.069-0.736,6.37-1.1,9.934 c-0.097,0.954-0.194,1.927-0.291,2.917c-11.41,6.565-20.91,12.643-28.62,18.275c0.233,0.227,0.459,0.445,0.672,0.648 c0.002,0.002,0.004,0.004,0.007,0.006C1057.656,1205.709,1067.025,1209.422,1083.707,1218.909z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1158.005,1238.721c-0.445-0.586-0.889-1.172-1.328-1.759c-0.655-0.874-1.302-1.75-1.944-2.626 c-0.297-0.405-0.594-0.81-0.888-1.215c-2.626-3.623-5.143-7.255-7.555-10.873c-1.719-2.578-3.382-5.148-4.997-7.702 c-5.738,12.256-11.743,21.875-17.825,29.371c5.246,3.563,10.77,7.405,16.561,11.538c11.421,2.286,23.019,3.282,34.684,3.192 c-0.225-0.242-0.448-0.486-0.672-0.729C1168.303,1251.696,1162.969,1245.247,1158.005,1238.721z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1197.878,1280.18c-3.056-2.422-6.022-4.93-8.901-7.506c0.65,2.059,1.196,4.405,1.62,7.042 C1193.006,1279.873,1195.433,1280.027,1197.878,1280.18z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1095.057,1161.707c-2.456,0.863-4.928,1.688-7.427,2.449c-0.163,1.041-0.324,2.116-0.484,3.239 c2.764,2.508,5.948,4.889,9.435,7.065C1096.093,1169.85,1095.581,1165.614,1095.057,1161.707z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#29ABE2",
                        d:
                          "M1164.063,1272.35c-0.368-0.002-0.726-0.011-1.091-0.014c0.251,0.19,0.508,0.387,0.76,0.578 C1163.842,1272.725,1163.952,1272.535,1164.063,1272.35z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1037.353,1454.406c0.009-1.247-0.758-2.565-2.031-3.97 C1035.765,1451.639,1036.435,1452.918,1037.353,1454.406z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M998.641,1465.271c2.066-0.222,4.031-0.445,5.901-0.669c0.265-1.626,0.692-3.069,1.369-4.226 c-2.339,1.256-4.704,2.528-7.095,3.818C998.76,1464.551,998.699,1464.912,998.641,1465.271z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1113.632,1483.219c0.054,6.14,0.031,12.6-0.075,19.394c0.192,0.153,0.385,0.308,0.575,0.457 c1.612-4.184,3.099-8.189,4.472-12.031C1117.375,1488.534,1115.753,1485.934,1113.632,1483.219z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1054.677,1533.126c-4.055-0.331-8.03-0.624-11.923-0.881c0.002,0.029,0.005,0.058,0.007,0.087 c0.232,2.547,0.877,5.148,1.943,7.834c2.36,5.945,6.745,12.3,13.035,19.356c4.064-3.959,8.104-7.962,12.227-11.901 C1065.107,1543.433,1060.015,1538.623,1054.677,1533.126z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1056.759,1533.297c-0.355-0.03-0.706-0.057-1.06-0.087c0.724,0.515,1.322,0.988,1.809,1.409 C1057.272,1534.236,1057.021,1533.798,1056.759,1533.297z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1046.102,1439.413c4.591-2.284,9.021-4.431,13.285-6.428c2.056-8.986,4.545-18.7,7.536-29.196 c-1.107-2.673-2.191-5.208-3.255-7.599c-1.93-1.731-4.088-3.673-6.486-5.83c-6.398,2.597-11.952,5.099-16.756,7.509 c2.835,7.074,2.396,14.696,0.83,22.224c0.958,1.698,1.936,3.449,2.939,5.272c-1.284-0.531-2.547-1.057-3.791-1.578 c-1.152,4.59-2.593,9.106-3.832,13.398c-0.997,3.44-1.662,5.904-1.877,8.006c2.427-1.248,4.814-2.465,7.162-3.65 C1043.287,1440.819,1044.703,1440.109,1046.102,1439.413z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1021.723,1438.986c0.103-0.349,0.223-0.692,0.321-1.043c0.22-0.789,0.42-1.625,0.608-2.497 c-1.924-0.453-3.817-0.933-5.69-1.428C1018.337,1435.762,1019.977,1437.416,1021.723,1438.986z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1128.042,1424.29c-2.455-4.393-6.42-6.879-11.773-7.733c-0.221,0.966-0.429,1.938-0.633,2.912 c0.885,0.808,1.79,1.617,2.726,2.427C1121.483,1422.085,1124.753,1422.568,1128.042,1424.29z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1072.291,1427.197c-0.511-2.587-1.012-5.038-1.481-7.333c0.196,2.587,0.475,5.124,0.823,7.614 C1071.853,1427.383,1072.072,1427.291,1072.291,1427.197z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1123.565,1442.261c2.254,0.738,4.627,1.418,7.132,2.031c0.404-4.445,0.37-8.303-0.076-11.623 c-0.063-0.472-0.135-0.933-0.216-1.383c-4.427-3.126-8.429-6.262-12.043-9.39c-1.085-0.066-2.151-0.096-3.194-0.131 c-1.036,5.197-1.978,10.453-3.435,15.555C1115.25,1439.159,1119.175,1440.823,1123.565,1442.261z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1095.15,1481.786c-0.33,0.173-0.672,0.349-0.998,0.521c0.706,0.949,1.417,1.876,2.134,2.782 C1095.904,1483.979,1095.525,1482.879,1095.15,1481.786z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1013.02,1457.601c0.352-0.523,0.7-1.05,1.037-1.583c-0.895,0.477-1.795,0.957-2.698,1.44 C1011.876,1457.463,1012.428,1457.509,1013.02,1457.601z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1141.545,1446.391c-1.222-0.18-2.417-0.375-3.589-0.582c-2.593,1.061-5.213,2.167-7.84,3.32 c-0.736,5.059-1.95,10.764-3.659,17.157c1.442-0.685,2.899-1.374,4.381-2.072c4.651-2.191,9.512-4.454,14.554-6.785 c0.708-0.327,1.401-0.649,2.116-0.979c0.516-0.238,1.047-0.482,1.568-0.722c3.708-1.708,7.514-3.454,11.428-5.243 c-1.877-0.73-3.447-1.62-4.624-2.693C1150.752,1447.522,1145.982,1447.047,1141.545,1446.391z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1117.941,1470.365c-1.503,3.284-2.959,6.562-4.341,9.788c0.006,0.478,0.012,0.957,0.018,1.439 c2.278,2.048,4.367,3.993,6.262,5.83c1.727-4.969,3.245-9.641,4.56-14.029c0.737-2.459,1.408-4.825,2.018-7.107 C1123.534,1467.673,1120.703,1469.03,1117.941,1470.365z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1130.692,1444.344c0.008-0.016,0.016-0.032,0.025-0.047c-0.006-0.001-0.013-0.003-0.019-0.005 C1130.696,1444.309,1130.693,1444.327,1130.692,1444.344z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M1017.56,1413.745c-2.264,2.654-3.582,5.167-4.165,7.549c2.94,2.799,6.322,5.74,10.191,8.835 c0.594-4.005,1.083-8.429,1.726-12.862C1022.609,1416.062,1020.019,1414.886,1017.56,1413.745z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1129.835,162.434c-0.103,0.185-0.207,0.356-0.31,0.537 C1131.214,161.624,1131.58,161.278,1129.835,162.434z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1093.627,130.927c0.017,0.006,0.032,0.011,0.05,0.017c0.004-0.019,0.007-0.038,0.011-0.057 C1093.667,130.901,1093.648,130.914,1093.627,130.927z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1107.488,93.709c0.427,0.141,0.845,0.274,1.276,0.418c-3.553,4.593-7.033,9.053-10.446,13.398 c7.963-3.562,17.744-6.751,29.311-9.839c3.158-4.249,6.462-9.028,9.891-14.408c-2.269,0.478-4.519,1.017-6.737,1.637 C1127.199,89.739,1118.471,93.244,1107.488,93.709z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1135.081,95.767c1.302-0.323,2.629-0.646,3.971-0.969c13.165-3.166,28.252-6.318,45.226-9.756 c-13.372-4.347-27.799-4.928-41.649-2.719C1140.027,87.626,1137.52,92.063,1135.081,95.767z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1122.917,172.498c0.422-0.482,0.842-0.988,1.261-1.512c1.812-2.265,3.599-4.931,5.348-8.014 c-1.325,1.059-3.465,2.735-6.042,4.791c-0.409,0.326-0.83,0.663-1.259,1.007c-1.889,1.515-3.96,3.195-6.086,4.959 c-0.069,0.113-0.18,0.203-0.33,0.274c-0.129,0.108-0.259,0.216-0.389,0.325c-1.439,1.2-2.894,2.434-4.328,3.677 c0.4,0.826,0.795,1.638,1.187,2.436c0.767-0.294,1.535-0.644,2.304-1.053C1117.375,177.902,1120.169,175.64,1122.917,172.498z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1016.187,1367.591c2.561-1.526,5.02-2.981,7.371-4.361c-1.534,0.48-3.121,1.074-4.77,1.778 C1018.083,1365.87,1017.204,1366.723,1016.187,1367.591z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1128.042,1424.29c-3.289-1.722-6.559-2.205-9.68-2.394c3.614,3.129,7.616,6.264,12.043,9.39 c0.275,0.194,0.551,0.389,0.83,0.583c1.453,1.013,2.954,2.026,4.5,3.036c0.404-0.737,0.803-1.461,1.197-2.169 c-1.052-1.553-2.113-2.885-3.181-4.022C1131.858,1426.699,1129.947,1425.287,1128.042,1424.29z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1097.682,1466.352c4.758-3.163,9.89-6.155,15.206-8.96c-0.355-6.922-0.822-13.34-1.389-19.276 c-1.364,4.584-3.173,9.034-5.886,13.187c-2.75,4.21-5.662,8.164-8.836,11.754 C1097.083,1464.137,1097.385,1465.233,1097.682,1466.352z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1071.622,1393.112c0,0.001,0,0.001,0,0.002c4.895,10.272,8.458,15.983,5.53,14.416 c2.573,3.113,5.786,7.298,9.764,12.695c-28.842-15.262-11.958-14.732,3.523,24.059c3.203-3.989,5.984-8.601,7.474-13.021 c1.573-4.659,2.509-9.088,2.92-13.349C1091.481,1415.995,1082.592,1404.419,1071.622,1393.112z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1029.6,1359.716c-1.936,1.116-3.946,2.285-6.042,3.514c3.303-1.033,6.358-1.533,9.236-1.429 c8.102,0.291,14.81,5.345,21.771,16.617c5.831,3.837,11.051,8.594,15.862,13.472c0.08-0.263,0.163-0.531,0.244-0.795 c-5.34-11.481-11.798-27.875-13.238-45.957c-5.902,2.513-13.425,6.404-23.097,11.873 C1032.813,1357.873,1031.233,1358.775,1029.6,1359.716z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M977.892,1390.868c-0.18-0.161-0.352-0.318-0.522-0.476c-4.983,3.334-10.323,6.887-16.069,10.622 c0.003,0.021,0.007,0.041,0.01,0.062C967.127,1397.492,972.65,1394.09,977.892,1390.868z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1098.845,1322.146c-4.874,6.757-8.773,12.144-11.84,16.491c1.358,2.605,2.922,5.188,4.698,7.723 c1.754,1.068,3.549,2.449,5.327,3.964c0.06-1.192,0.124-2.408,0.191-3.641 C1097.625,1339.264,1098.161,1331.115,1098.845,1322.146z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1113.632,1483.219c-0.281-0.36-0.573-0.723-0.872-1.088c-2.168,5.141-4.128,10.122-5.765,14.748 c2.224,2.121,4.425,4.032,6.562,5.733C1113.663,1495.819,1113.685,1489.359,1113.632,1483.219z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1115.636,1419.469c-0.159,0.764-0.316,1.529-0.469,2.296c1.043,0.035,2.11,0.066,3.194,0.131 C1117.426,1421.086,1116.521,1420.277,1115.636,1419.469z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1113.6,1480.153c-0.147,0.344-0.294,0.687-0.439,1.03c0.153,0.137,0.306,0.274,0.457,0.409 C1113.612,1481.11,1113.606,1480.631,1113.6,1480.153z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1097.682,1466.352c-2.189,1.455-4.297,2.947-6.307,4.474c1.225,3.552,2.483,7.205,3.774,10.96 c0.376,1.093,0.754,2.193,1.136,3.304c2.265,2.866,4.575,5.523,6.888,7.959C1101.662,1483.13,1099.78,1474.247,1097.682,1466.352 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M1066.923,1403.789c0.352-1.234,0.71-2.479,1.076-3.735c-1.297-1.15-2.737-2.436-4.33-3.864 C1064.732,1398.581,1065.816,1401.116,1066.923,1403.789z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1122.038,1508.493c-2.458-1.436-5.123-3.247-7.906-5.424c-0.191-0.149-0.383-0.304-0.575-0.457 c-2.137-1.701-4.338-3.613-6.562-5.733c-0.886,2.505-1.677,4.905-2.354,7.171c0.081,0.712,0.155,1.442,0.232,2.163 c5.46,2.461,11.082,4.63,16.826,6.512C1121.85,1511.327,1121.973,1509.918,1122.038,1508.493z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1077.895,1477.324c-3.628,1.589-7.559,2.785-11.882,3.48c2.78,2.581,5.682,5.032,8.68,7.368 c0.878-1.431,1.864-2.842,2.95-4.231C1077.781,1481.74,1077.864,1479.532,1077.895,1477.324z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1075.421,1444.944c-1.64-5.519-2.933-11.345-3.788-17.467c-0.348-2.49-0.626-5.027-0.823-7.614 c-2.166-10.603-3.641-17.837-2.212-19.28c-0.196-0.173-0.397-0.351-0.599-0.531c-0.366,1.256-0.724,2.501-1.076,3.735 c-2.99,10.496-5.48,20.21-7.536,29.196c-2.001,8.745-3.592,16.801-4.836,24.214c-0.711,4.236-1.311,8.267-1.807,12.093 c0.153,0.068,0.291,0.117,0.399,0.132c3.765,0.509,15.342-6.899,23.739-12.998 C1076.478,1452.505,1075.977,1448.664,1075.421,1444.944z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1082.285,1535.862c-8.834-1.029-17.343-1.875-25.526-2.565c0.262,0.502,0.513,0.939,0.75,1.323 c-0.488-0.421-1.086-0.894-1.809-1.409c-0.342-0.028-0.682-0.056-1.022-0.084c5.338,5.496,10.431,10.307,15.29,14.494 c9.748-9.312,19.969-18.248,32.136-25.287c-10.045-5.822-18.967-10.222-28.102-16.458c-0.41,1.408-0.858,2.801-1.344,4.177 C1076.019,1517.531,1079.247,1526.089,1082.285,1535.862z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1069.941,1502.984c-0.356-0.264-0.711-0.526-1.068-0.798c0.355,0.687,0.708,1.384,1.06,2.093 C1069.924,1503.846,1069.928,1503.415,1069.941,1502.984z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1113.617,1481.593c-0.151-0.136-0.304-0.273-0.457-0.409c-0.135,0.317-0.268,0.633-0.401,0.948 c0.299,0.365,0.591,0.727,0.872,1.088c2.121,2.715,3.744,5.315,4.972,7.82c3.086,6.295,3.684,11.998,3.435,17.454 c3.222,1.882,6.082,3.115,8.376,3.676c5.243,1.284,7.51-0.951,4.311-7.016c-2.171-4.115-6.855-9.99-14.845-17.731 C1117.984,1485.586,1115.895,1483.64,1113.617,1481.593z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1103.173,1493.049c-2.313-2.436-4.623-5.093-6.888-7.959c-0.716-0.907-1.428-1.833-2.134-2.782 c-2.074-2.789-4.093-5.762-6.024-8.911c-4.062,3.358-7.616,6.876-10.484,10.544c-0.127,2.024-0.302,4.042-0.53,6.047 c8.332,6.199,17.406,11.488,27,15.873c0.166-0.593,0.343-1.198,0.526-1.811 C1104.206,1500.243,1103.712,1496.584,1103.173,1493.049z"
                      }
                    }),
                    _vm._v(" "),
                    _c("polygon", {
                      attrs: {
                        fill: "#736357",
                        points:
                          "1071.622,1393.112 1071.62,1393.109 1071.622,1393.114 "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M1071.62,1393.109c-0.311-0.653-0.628-1.325-0.948-2.015c-0.081,0.264-0.164,0.532-0.244,0.795 C1070.828,1392.296,1071.225,1392.702,1071.62,1393.109z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1174.245,1431.298c-6.283,1.246-15.327,3.035-27.699,5.401c-2.042,0.391-4.173,0.797-6.398,1.219 c15.336-34.151,8.589-26.427-3.216-5.182c-0.394,0.708-0.793,1.432-1.197,2.169c-1.607,2.932-3.292,6.083-5.018,9.391 c-0.008,0.016-0.016,0.032-0.025,0.047c-0.995,1.909-2.004,3.869-3.017,5.868c0.814-0.365,1.628-0.726,2.441-1.083 c2.627-1.152,5.247-2.259,7.84-3.32c1.669-0.683,3.327-1.348,4.967-1.992c3.806-1.495,7.517-2.883,11.066-4.163 c0.023-0.071,0.039-0.14,0.064-0.212c1.611-4.602,9.934-5.76,17.967-5.901c1.197-0.382,2.331-0.74,3.399-1.074 C1187.994,1428.534,1191.17,1427.94,1174.245,1431.298z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1114.515,1456.543c-0.544,0.281-1.086,0.564-1.626,0.849c-5.316,2.806-10.448,5.797-15.206,8.96 c2.098,7.895,3.98,16.777,5.491,26.696c0.538,3.536,1.032,7.194,1.468,11.001c0.677-2.266,1.468-4.665,2.354-7.171 c1.636-4.626,3.597-9.606,5.765-14.748c0.133-0.316,0.266-0.631,0.401-0.948c0.146-0.343,0.292-0.686,0.439-1.03 c1.382-3.226,2.838-6.504,4.341-9.788c3.13-6.838,6.459-13.697,9.733-20.153 C1123.251,1452.198,1118.831,1454.31,1114.515,1456.543z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1086.916,1420.225c-3.978-5.396-7.191-9.582-9.764-12.695c-1.336-0.715-4.023-2.943-8.554-6.946 c-1.429,1.442,0.046,8.676,2.212,19.28c0.469,2.296,0.97,4.746,1.481,7.333c1.069,5.407,2.18,11.399,3.13,17.747 c0.557,3.719,1.057,7.561,1.461,11.481c3.647-2.649,6.697-5.053,8.241-6.452c1.807-1.637,3.62-3.578,5.316-5.689 C1074.958,1405.493,1058.073,1404.963,1086.916,1420.225z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1074.693,1488.171c0.795,0.62,1.611,1.214,2.421,1.816c0.228-2.005,0.403-4.023,0.53-6.047 C1076.557,1485.329,1075.571,1486.74,1074.693,1488.171z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1077.644,1483.94c2.868-3.668,6.423-7.187,10.484-10.544c1.05-0.868,2.134-1.724,3.248-2.57 c2.01-1.527,4.118-3.019,6.307-4.474c-0.297-1.119-0.6-2.215-0.905-3.295c-5.343,6.043-11.454,11.013-18.882,14.267 C1077.864,1479.532,1077.781,1481.74,1077.644,1483.94z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1069.933,1504.279c0.917,1.846,1.825,3.774,2.723,5.773c0.486-1.376,0.934-2.769,1.344-4.177 c-1.347-0.919-2.699-1.881-4.059-2.891C1069.928,1503.415,1069.924,1503.846,1069.933,1504.279z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1104.114,1505.861c0.254,0.116,0.505,0.237,0.759,0.352c-0.077-0.721-0.151-1.451-0.232-2.163 C1104.458,1504.663,1104.281,1505.268,1104.114,1505.861z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1129.335,1391.864c-4.478-2.064-6.656,0.347-6.521,7.269c-2.005,3.25-3.463,6.706-4.615,10.282 c2.871-3.401,5.881-7.898,9.078-13.689C1127.954,1394.5,1128.64,1393.208,1129.335,1391.864z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1057.434,1345.138c1.44,18.083,7.898,34.476,13.238,45.957c0.321,0.69,0.637,1.361,0.948,2.015 c0.001,0.001,0.002,0.002,0.003,0.003c10.969,11.307,19.859,22.883,29.211,24.802c1.852-19.162-7.018-34.861-17.44-52.131 c-4-6.64-13.09-21.72,2.12-21.6c1.926,0.017,4.026,0.859,6.19,2.177c-1.776-2.534-3.34-5.118-4.698-7.723 c-8.78-16.838-9.004-34.563-2.865-45.615c1.705-3.069,3.898-5.624,6.537-7.502c0.315-0.224,0.639-0.437,0.967-0.642 c4.331-2.705,9.752-3.677,16.08-2.277c-1.024-2.444-2.035-4.857-3.038-7.24c-4.826-0.086-9.942,0.024-15.361,0.352 c-0.024,0.001-0.048,0.003-0.073,0.004c-0.604,0.037-1.204,0.07-1.816,0.112c-1.933,1.615-3.747,3.252-5.463,4.905 c-1.073,1.034-2.102,2.076-3.094,3.124c-4.322,4.567-7.887,9.253-10.781,14.008c-1.547,4.125-3.528,8.238-6.046,12.358 c-2.128,5.613-3.481,11.255-4.215,16.841C1057.033,1333.194,1056.965,1339.255,1057.434,1345.138z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M1054.565,1378.418c-5.853-3.851-12.321-6.775-19.617-7.954c9.051,8.036,16.365,14.615,22.234,19.894 c2.398,2.158,4.556,4.099,6.486,5.83c1.593,1.428,3.033,2.714,4.33,3.864c0.203,0.179,0.404,0.358,0.599,0.531 c4.531,4.004,7.218,6.232,8.554,6.946c2.928,1.567-0.635-4.144-5.53-14.416c-0.001-0.001-0.001-0.003-0.002-0.005 c-0.395-0.407-0.792-0.814-1.192-1.219C1065.616,1387.012,1060.396,1382.255,1054.565,1378.418z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1173.607,1385.465c-1.756,1.982-3.688,3.791-5.364,5.104c0.875,1.059,1.762,2.117,2.661,3.174 C1171.843,1390.934,1172.741,1388.177,1173.607,1385.465z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1193.936,1296.624c2.647,2.147,5.332,4.345,8.043,6.579c0.726,0.598,1.444,1.185,2.174,1.79 c0.079-0.892,0.158-1.757,0.236-2.611c1.755-19.083,3.312-28.745,3.828-32.165c-0.144,0.014-0.289,0.027-0.433,0.041 C1206.376,1274.211,1202.365,1285.28,1193.936,1296.624z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1099.641,1263.576c1.131,2.583,2.26,5.213,3.396,7.887c0.548,1.289,1.097,2.59,1.648,3.899 c1.003,2.383,2.014,4.796,3.038,7.24c0.008,0.018,0.015,0.037,0.023,0.055c2.352,5.615,4.773,11.386,7.325,17.283 c1.621,3.745,3.293,7.539,5.036,11.378c2.074,4.567,4.25,9.196,6.547,13.872c5.191,10.564,11.022,21.369,17.808,32.267 c3.835,6.159,7.979,12.348,12.481,18.538c3.949-0.465,13.751-3.381,18.45-3.381c0.897,0,1.6,0.117,2.046,0.375 c2.199-7.459,4.111-14.516,5.75-21.17c0.217-0.881,0.427-1.752,0.635-2.62c1.073-4.479,2.025-8.776,2.858-12.888 c-1.067-1.695-1.863-3.357-2.24-4.927c-2.289-9.576,0.404-11.341,4.832-9.635c0.484-3.193,0.889-6.253,1.217-9.178 c0.212-1.896,0.393-3.735,0.543-5.52c0.214-2.543,0.368-4.976,0.462-7.296c0.851-1.043,1.662-2.088,2.438-3.132 c-0.778-0.631-1.549-1.252-2.321-1.875c0.029-5.789-0.336-10.791-1.018-15.032c-0.424-2.637-0.97-4.983-1.62-7.042 c-0.111-0.352-0.225-0.696-0.343-1.032c-5.781,0.293-11.517,0.49-17.16,0.632c-2.53,0.063-4.998,0.089-7.41,0.077 c-0.111,0.185-0.221,0.374-0.332,0.563c-0.252-0.191-0.508-0.388-0.76-0.578c-22.421-0.222-40.007-3.804-57.791-11.787 C1103.322,1261.706,1101.474,1262.709,1099.641,1263.576z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1072.385,1216.828c3.065,3.41,5.906,7.112,8.586,11.072c1.052-3.062,1.962-6.059,2.736-8.991 c-16.682-9.487-26.052-13.2-26.857-12.37c1.109,1.056,2.194,2.096,3.269,3.127 C1062.68,1211.412,1066.734,1213.824,1072.385,1216.828z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1123.469,1243.918c-1.628,2.006-3.261,3.865-4.897,5.577c7.062,2.541,14.223,4.514,21.458,5.961 C1134.238,1251.323,1128.714,1247.48,1123.469,1243.918z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1175.96,1158.102c-12.39,5.812-20.404,9.713-25.283,12.302c-7.525,3.992-7.589,4.858-4.736,4.784 c4.872-0.127,18.249-2.995,17.524,2.268C1168.828,1172.977,1173.181,1166.655,1175.96,1158.102z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1046.91,1261.607c0.96,1.791,3.732,5.458,8.688,12.015c0.16,0.211,0.316,0.418,0.48,0.636 c0.102-0.141,0.198-0.281,0.3-0.422c0.598-0.831,1.19-1.66,1.767-2.484c0.217-2.209,0.342-4.446,0.387-6.69 c-2.805-0.993-5.196-2.017-7.091-2.836C1047.453,1260.104,1045.67,1259.293,1046.91,1261.607z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1082.989,1268.15c5.277-0.474,10.885-1.845,16.652-4.574c1.833-0.867,3.681-1.87,5.541-3.027 c-7.921-3.556-15.888-7.992-24.337-13.382c-2.689,0.498-5.333,0.999-7.931,1.502c0.271,6.632,0.5,13.081,0.346,19.408 C1076.335,1268.389,1079.593,1268.455,1082.989,1268.15z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1076.514,1144.493c-0.287,1.194-0.414,2.41-0.389,3.639c0.006,0.315,0.024,0.631,0.05,0.948 c0.702-0.225,1.397-0.469,2.096-0.704c-0.135-0.31-0.27-0.616-0.405-0.92C1077.416,1146.441,1076.965,1145.452,1076.514,1144.493 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1102.258,1126.638c-0.004,0.075-0.008,0.149-0.012,0.224c0.149-0.036,0.292-0.074,0.443-0.109 C1102.543,1126.714,1102.404,1126.677,1102.258,1126.638z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1068.107,1120.721c-3.296,1.669-0.17,6.967,4.466,15.87c0.787,1.511,1.615,3.124,2.465,4.843 c0.437,0.885,0.879,1.797,1.323,2.737c0.051,0.108,0.102,0.214,0.153,0.323c1.214-5.053,5.321-9.722,13.203-13.413 c-0.615-2.942-1.179-5.597-1.663-8.076c-0.543-0.13-1.075-0.256-1.594-0.378 C1075.977,1120.174,1070.436,1119.542,1068.107,1120.721z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M1123.469,1243.918c6.082-7.495,12.086-17.115,17.825-29.371c3.2-6.835,6.319-14.481,9.32-23.045 c2.885-2.323,5.203-4.341,7.035-6.095c2.463-2.359,4.041-4.236,4.929-5.726c0.427-0.715,0.695-1.342,0.823-1.888 c0.027-0.116,0.049-0.229,0.064-0.337c-0.138,0.115-0.276,0.231-0.416,0.344c-0.351,0.284-0.706,0.56-1.065,0.829 c-2.919,2.184-6.105,3.867-9.476,5.099c-5.477,2.002-11.442,2.823-17.546,2.695c-1.465-0.031-2.939-0.118-4.415-0.255 c-2.109-0.195-4.224-0.496-6.331-0.891c-8.968-1.68-17.794-5.08-25.388-9.467c-0.323,4.963-0.598,9.872-0.786,14.69 c-0.45-5.811-0.943-11.135-1.462-16.04c-3.487-2.176-6.672-4.557-9.435-7.065c-0.862-0.783-1.682-1.578-2.459-2.383 c-0.18,0.052-0.361,0.103-0.542,0.154c0.772,2.942,1.445,6.028,1.98,9.256c0.019,0.113,0.039,0.224,0.057,0.337 c2.04,12.563,1.979,27.284-2.475,44.149c-0.774,2.932-1.684,5.929-2.736,8.991c-0.067,0.196-0.132,0.39-0.201,0.587 c4.574,3.696,9.408,7.147,14.824,10.348c4.838,1.035,9.727,2.115,14.666,3.245c-2.243,0.364-4.449,0.728-6.637,1.092 c4.924,2.416,9.912,4.511,14.949,6.323C1120.207,1247.783,1121.84,1245.924,1123.469,1243.918z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1082.475,1040.034c-0.098,1.12-0.192,2.271-0.283,3.457c1.076,0.665,2.178,1.334,3.304,2.007 c0.514-0.232,1.024-0.467,1.528-0.708C1085.624,1043.104,1084.114,1041.513,1082.475,1040.034z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1063.091,1029.498c-3.738-1.095-7.816-1.891-12.249-2.376c-5.259-0.575-11.008-0.719-17.33-0.359 c2.641,0.934,5.317,1.979,8.018,3.113c8.778,3.686,17.833,8.326,26.873,13.26c3.206,1.75,6.411,3.536,9.6,5.33 c1.348-0.469,2.658-0.956,3.938-1.463c0.08-1.2,0.164-2.373,0.251-3.511C1074.158,1038.526,1067.577,1033.8,1063.091,1029.498z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1102.246,1126.862c0.004-0.075,0.008-0.149,0.012-0.224c0.128-2.563,0.237-5.112,0.322-7.642 c0.031-0.916,0.056-1.828,0.08-2.738c0.01-0.377,0.022-0.756,0.031-1.132c0.089-3.837,0.111-7.621,0.056-11.343 c-0.024-1.636-0.063-3.261-0.12-4.87c-6.082-2.27-10.556-5.128-13.824-8.318c-0.292,1.161-0.553,2.275-0.79,3.352 c-0.658,3.002-1.107,5.707-1.376,8.236c-0.157,1.471-0.252,2.882-0.295,4.26c-0.007,0.219-0.012,0.438-0.016,0.656 c-0.021,1.118-0.006,2.217,0.041,3.308c0.073,1.697,0.224,3.377,0.44,5.092c0.231,1.836,0.538,3.712,0.903,5.688 c0.11,0.596,0.225,1.201,0.345,1.817c0.484,2.479,1.047,5.133,1.663,8.076c0.651,3.113,1.36,6.55,2.094,10.438 c0.086,0.457,0.173,0.92,0.26,1.39c3.24-1.497,6.419-3.126,9.519-4.911c0.025-0.375,0.051-0.75,0.075-1.124 C1101.883,1133.518,1102.08,1130.179,1102.246,1126.862z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1148.848,1077.483c2.262-0.321,4.359-0.967,6.269-1.984c4.128-2.199,7.388-6.13,9.583-12.242 c0.024-0.067,0.047-0.137,0.071-0.205c2.207-6.26,3.312-14.777,3.106-26.027c-0.002-0.109-0.002-0.215-0.004-0.324 c1.779-19.613-0.473-19.713-6.549-15.452c-1.085,0.761-2.29,1.657-3.617,2.609c-0.937,0.672-1.935,1.37-2.992,2.065 c-3.365,2.212-7.333,4.381-11.898,5.538c-4.04,1.025-8.547,1.245-13.509,0.001c-0.501,0.239-1.009,0.485-1.499,0.711 c-4.57,9.783-15.961,15.787-25.94,22.507C1116.117,1062.252,1132.433,1070.042,1148.848,1077.483z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1095.057,1161.707c0.524,3.907,1.036,8.143,1.524,12.753c0.519,4.905,1.011,10.229,1.462,16.04 c0.188-4.818,0.463-9.727,0.786-14.69c0.342-5.255,0.738-10.572,1.145-15.912 C1098.345,1160.525,1096.706,1161.127,1095.057,1161.707z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1067.542,978.312c3.399,7.744,6.143,15.067,8.593,21.76c-1.05-5.667-1.806-11.059-2.323-16.18 c-1.442-1.88-2.978-3.945-4.613-6.208c-0.905-1.253-1.841-2.57-2.808-3.949c-0.276,0.072-0.551,0.138-0.825,0.196 C1066.249,975.405,1066.908,976.866,1067.542,978.312z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1149.76,1020.124c3.061-1.88,6.268-3.908,9.648-6.109c1.37-0.892,2.762-1.806,4.187-2.752 c-1.654-0.168-3.284-0.331-4.893-0.488c-0.917-0.09-1.81-0.173-2.713-0.259c-3.145-0.3-6.204-0.578-9.178-0.835 c-3.563-0.308-7.012-0.588-10.334-0.836c-8.776-0.656-16.732-1.108-23.9-1.368c-6.961,2.148-12.033,2.174-15.796,0.613 c-6.789,0.23-12.822-0.224-18.136-1.161c0.138,0.373,0.275,0.746,0.411,1.114c-0.426,0.043-0.838,0.089-1.251,0.135 c0.158,0.698,0.305,1.387,0.472,2.093c-0.462-0.687-0.911-1.335-1.364-1.992c-21.973,2.626-24.516,9.89-15.492,19.531 c0.52,0.555,1.076,1.118,1.671,1.688c4.486,4.303,11.067,9.029,19.102,13.994c0.091-1.186,0.185-2.337,0.283-3.457 c0.406-4.661,0.87-8.761,1.372-12.367c0.288-2.072,0.589-3.978,0.899-5.736c0.879,1.822,1.785,3.514,2.735,5.066 c3.146,5.138,6.797,8.734,11.693,10.369c2.259-1.734,4.475-3.654,6.689-5.803c6.58-6.39,12.49-16.8,22.48-18.04 c2.363,7.618,1.81,13.63-0.535,18.649c0.489-0.226,0.998-0.472,1.499-0.711 C1135.243,1028.633,1142.006,1024.885,1149.76,1020.124z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1092.062,1002.368C1094.571,1003.363,1093.942,1001.151,1092.062,1002.368L1092.062,1002.368z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1092.062,1002.368c-0.605-0.24-1.393-0.667-2.39-1.373c0.412,0.821,0.864,1.586,1.354,2.3 C1091.401,1002.871,1091.749,1002.571,1092.062,1002.368z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1106.76,1007.307c-4.179-0.095-8.062-0.118-11.664-0.073c0.53,0.323,1.091,0.61,1.684,0.856 C1099.943,1007.983,1103.263,1007.734,1106.76,1007.307z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1155.342,1080.407c-0.089-0.04-0.177-0.079-0.266-0.119c-2.075-0.929-4.152-1.864-6.228-2.805 c-16.415-7.441-32.731-15.23-46.979-22.803c-0.002,0.001-0.004,0.002-0.005,0.004c-7.007,4.721-14.043,8.174-21.194,10.731 c-0.534,7.175,0.132,15.629,5.971,22.82c0.653,0.804,1.373,1.592,2.161,2.361c3.268,3.19,7.743,6.047,13.824,8.318 c0.933,0.349,1.908,0.682,2.918,1.002c0.139,0.044,0.279,0.087,0.419,0.13c5.838,1.805,12.96,3.126,21.643,3.789 c9.16,0.699,20.051,0.667,32.989-0.298c0.181-0.014,0.367-0.029,0.549-0.043c7.876-0.6,16.505-1.545,25.958-2.877 c2.344-0.33,4.736-0.683,7.182-1.062c1.287-0.199,2.584-0.404,3.9-0.617c-1.644-0.693-3.316-1.398-5.007-2.114 c-2.442-1.033-4.928-2.09-7.454-3.168C1175.99,1089.503,1165.699,1085.04,1155.342,1080.407z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1081.941,1047.002c1.213-0.48,2.396-0.982,3.555-1.505c-1.126-0.673-2.228-1.342-3.304-2.007 C1082.105,1044.629,1082.022,1045.802,1081.941,1047.002z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M1071.703,908.871c-2.164-0.17-5.038,0.17-8.81,1.017c-1.098,0.246-2.281,0.54-3.536,0.872 c0.7,5.083,1.646,10.654,2.839,16.767c3.767,2.349,6.847,5.169,9.375,8.336c2.278-7.723,4.09-16.492,5.085-25.259 c-0.211,0.023-0.425,0.049-0.637,0.073C1075.096,909.633,1073.707,909.029,1071.703,908.871z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M1047.121,986.855c1.457,5.734,10.337,15.434,28.426,19.464c-9.281-13.129-16.587-19.871-21.498-22.522 c-2.945-1.59-5.028-1.716-6.159-0.866C1046.936,983.648,1046.663,985.054,1047.121,986.855z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M1037.803,917.565c-1.814,0.621-3.693,1.268-5.668,1.953c-0.823,0.228-1.649,0.459-2.482,0.696 c0.164-0.003,0.315,0.003,0.478,0.001c-0.779,0.271-1.544,0.537-2.348,0.818c4.293,0.825,8.437,1.566,12.439,2.231 C1039.22,921.494,1038.419,919.59,1037.803,917.565z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M1076.912,1008.279c0.453,0.657,0.902,1.305,1.364,1.992c-0.167-0.706-0.314-1.395-0.472-2.093 c-0.11-0.488-0.224-0.979-0.33-1.463c-0.651-0.126-1.298-0.255-1.927-0.395 C1075.997,1006.957,1076.453,1007.612,1076.912,1008.279z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M1073.812,983.893c0.517,5.12,1.273,10.512,2.323,16.18c0.403,2.175,0.846,4.386,1.339,6.643 c0.385,0.075,0.776,0.145,1.169,0.214c5.314,0.938,11.347,1.392,18.136,1.161c-0.593-0.246-1.154-0.533-1.684-0.856 c-1.616-0.985-2.953-2.316-4.068-3.939c-0.491-0.714-0.943-1.479-1.354-2.3c-3.391-6.763-4.296-16.987-5.724-27.919 c-0.548-4.198-1.174-8.496-2.05-12.743c-0.528,1.788-1.23,3.487-2.246,5c-1.124,1.677-3.657,3.839-6.706,5.616 c0,0.004,0,0.007,0,0.01C1073.075,975.057,1073.356,979.374,1073.812,983.893z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M1098.858,927.918c8.285-0.379,14.719-1.367,19.382-2.703c1.022-0.293,1.96-0.602,2.812-0.925 c9.444-3.579,8.55-8.857-1.564-12.063c-0.566-0.179-1.161-0.352-1.785-0.518c-2.321-0.617-5.039-1.135-8.145-1.519 c-5.624-0.696-12.515-0.955-20.618-0.575c-0.379,5.939,0.248,13.576-0.007,18.46 C1092.498,928.116,1095.802,928.058,1098.858,927.918z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M1112.575,1007.477c1.824-0.563,3.768-1.26,5.862-2.123c-2.638,0.555-5.19,1.014-7.668,1.396 c-0.142,0.022-0.288,0.048-0.429,0.069c-1.213,0.183-2.406,0.344-3.581,0.488c-3.497,0.427-6.816,0.676-9.98,0.783 C1100.542,1009.652,1105.614,1009.625,1112.575,1007.477z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1156.244,808.224c-3.464,2.633-7.481,6.442-12.173,11.7c-0.596,0.668-1.205,1.363-1.823,2.078 c1.698,3.28,3.22,6.465,4.577,9.533c1.155-0.488,2.325-0.992,3.502-1.504c3.014-1.313,6.1-2.709,9.259-4.2 c1.305-0.616,2.621-1.247,3.951-1.896c4.985-2.433,10.145-5.105,15.478-8.049c-1.075-2.719-2.233-5.317-3.635-7.439 c-0.32-0.485-0.653-0.946-1.001-1.377c-2.246-2.782-5.106-4.34-9.096-3.524C1162.764,804.061,1159.793,805.526,1156.244,808.224z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1036.415,898.693c-0.032,0.368-0.06,0.732-0.086,1.097c-0.483,6.565-0.111,12.569,1.474,17.776 c0.616,2.025,1.417,3.929,2.419,5.7c1.859,3.286,4.421,6.109,7.807,8.389c1.53,1.03,3.229,1.95,5.109,2.749 c3.241,0.374,6.804,0.789,10.719,1.249c-0.599-2.81-1.152-5.517-1.661-8.125c-1.193-6.114-2.139-11.685-2.839-16.767 c-0.268-1.948-0.501-3.826-0.697-5.635c-0.175-1.612-0.32-3.169-0.438-4.675c-1.629-20.902,2.255-31.862,11.555-39.215 c-4.092-9.351-9.648-18.397-16.273-26.336c-0.873,2.69-1.762,5.392-2.652,8.096c-2.515,7.637-5.044,15.292-7.281,22.759 c5.619,0.045,11.133-0.023,16.499-0.245c-6.154,1.166-11.918,2.179-17.331,3.059 C1039.631,879.259,1037.216,889.504,1036.415,898.693z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1179.014,815.885c1.243,3.146,2.377,6.449,3.648,9.357c1.168,2.672,2.454,5.009,4.05,6.578 c1.308,1.286,2.828,2.051,4.661,2.07c4.326,0.044,10.414-4.11,19.66-15.571c0.474-0.588,0.957-1.196,1.448-1.823 c0.513-0.655,1.036-1.331,1.568-2.03c-7.921,2.784-17.04,4.787-20.836,0.937c-2.878-2.927-1.854-5.762,0.8-8.271 C1188.869,810.299,1183.871,813.203,1179.014,815.885z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1241.008,773.521c-8.346,6.797-16.409,12.921-24.194,18.468c-1.625,1.158-3.241,2.297-4.842,3.404 c-0.538,0.372-1.072,0.735-1.608,1.102c-2.727,1.868-5.42,3.667-8.075,5.395c3.255-1.571,6.386-2.77,7.985-3.447 c7.839-3.31,15.415-7.252,22.649-11.752C1235.479,782.62,1238.166,778.246,1241.008,773.521z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1116.97,854.684c-0.178,0.313-0.35,0.622-0.532,0.939c-0.684,1.19-1.405,2.411-2.156,3.658 c-0.681,1.131-1.393,2.289-2.128,3.469c-0.905,1.452-1.838,2.93-2.825,4.459c0.986-1.503,1.954-2.966,2.91-4.405 c0.731-1.1,1.457-2.189,2.171-3.252c0.716-1.066,1.42-2.106,2.119-3.135c0.111-0.164,0.225-0.333,0.336-0.496 c1.071-1.575,2.116-3.092,3.149-4.583c3.272-4.723,6.35-9.028,9.246-12.941c-1.797,0.649-3.559,1.271-5.29,1.87 c-1.238,3.264-2.865,6.776-4.896,10.603C1118.418,852.105,1117.708,853.383,1116.97,854.684z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1131.893,834.877c-0.859,1.133-1.74,2.314-2.633,3.52c2.005-0.725,4.05-1.481,6.138-2.277 c-0.443-1.314-0.891-2.664-1.344-4.064C1133.346,832.971,1132.625,833.911,1131.893,834.877z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M1094.747,849.726c0.368-0.12,0.737-0.241,1.11-0.362c3.556-1.154,7.361-2.34,11.411-3.618 c0.501-0.158,1.007-0.318,1.516-0.479c1.721-0.545,3.486-1.109,5.294-1.694c1.275-0.413,2.571-0.837,3.889-1.273 c1.954-0.647,3.955-1.323,6.003-2.032c1.918-5.056,2.886-9.503,2.862-13.515c-0.028-4.777-1.459-8.944-4.31-12.819 c-0.765-1.04-1.625-2.06-2.596-3.064c-5.557-5.738-14.508-10.986-26.99-16.875c-3.093-1.459-6.411-2.961-9.941-4.516 c-5.351,3.437-11.994,7.033-19.936,10.781c-0.381,2.001-0.815,4.038-1.295,6.106c-0.635,2.738-1.35,5.53-2.126,8.365 c-0.367,1.339-0.748,2.689-1.14,4.046c10.615,9.821,19.214,21.791,24.946,34.994c2.561-1.033,5.313-2.029,8.255-3.027 C1092.694,850.404,1093.71,850.066,1094.747,849.726z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1084.196,752.909c3.666,2.883,7.167,5.814,10.508,8.78c5.637,5.004,10.822,10.104,15.576,15.232 c-4.934-6.886-8.773-13.081-11.633-18.654c-6.769-7.409-12.427-14.267-17.129-20.65c-3.352,2.133-6.881,4.007-10.551,5.621 c4.174,2.835,8.168,5.739,11.984,8.698C1083.369,752.259,1083.783,752.584,1084.196,752.909z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1068.114,715.74c-0.046-0.018-0.093-0.035-0.138-0.053c-7.442-0.001-15.392,0.05-23.887,0.169 c4.209-1.407,8.238-2.768,12.131-4.096c-9.646-2.737-20.584-4.718-32.929-5.572c-4.402-0.305-8.979-0.469-13.743-0.471 c-6.473-0.002-13.283,0.289-20.448,0.92c6.779,1.791,13.302,3.768,19.589,5.902c1.746,0.593,3.47,1.2,5.178,1.817 c14.06,5.08,26.871,10.97,38.506,17.434c5.349-1.766,10.52-3.99,15.241-6.658c1.436-0.812,2.78-1.663,4.058-2.55 C1070.34,720.23,1069.159,717.952,1068.114,715.74z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1146.825,831.535c-1.356-3.068-2.878-6.253-4.577-9.533c-0.16-0.309-0.323-0.619-0.486-0.93 c-3.89-7.408-8.67-15.275-14.443-23.32c-2.068-2.881-4.262-5.785-6.589-8.698c-3.225-4.038-6.704-8.093-10.449-12.133 c3.043,4.247,6.508,8.761,10.414,13.552c0.902,1.106,1.818,2.222,2.768,3.358c0.203,0.838,0.404,1.649,0.605,2.471 c0.154,0.628,0.309,1.268,0.462,1.887c1.166,4.696,2.317,9.117,3.451,13.295c1.715,6.315,3.39,12.055,5.012,17.24 c0.356,1.138,0.71,2.247,1.061,3.333c0.453,1.399,0.9,2.75,1.344,4.064c1.25,3.702,2.464,7.066,3.634,10.108 c1.439,3.739,2.813,6.995,4.111,9.792c10.377,22.365,15.893,15.635,10.807-4.377c-0.411-1.618-0.891-3.321-1.444-5.104 c-0.353-1.138-0.735-2.308-1.148-3.507c-0.712-2.069-1.513-4.226-2.409-6.461 C1148.292,834.933,1147.584,833.252,1146.825,831.535z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1173.857,706.071c0.517-0.024,1.033-0.049,1.547-0.073c2.818-0.136,5.598-0.286,8.319-0.462 c2.416-0.156,4.786-0.332,7.094-0.537c0.57-0.051,1.135-0.104,1.697-0.158c9-0.872,16.987-2.237,23.051-4.641 c-4.718-1.564-9.278-2.822-13.692-3.816c-0.283-0.064-0.569-0.131-0.851-0.193c-0.881-0.192-1.755-0.371-2.625-0.542 c-0.762-0.15-1.519-0.292-2.271-0.425c-5.809-1.033-11.345-1.592-16.616-1.751c-4.928-0.149-9.626,0.05-14.1,0.54 c-3.472,4.393-7.057,8.639-10.658,12.738c0.061,0.054,0.123,0.11,0.183,0.164c0.815-0.041,1.63-0.081,2.446-0.119 C1162.902,706.536,1168.442,706.323,1173.857,706.071z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1114.943,752.527c-1.418,2.273-2.557,4.453-3.363,6.541 C1118.661,768.344,1120.784,762.876,1114.943,752.527z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1091.666,617.058c0.547-1.162,1.056-2.341,1.543-3.527c-0.33-0.93-0.655-1.872-0.979-2.818 C1092.172,612.897,1091.98,615.011,1091.666,617.058z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1092.23,610.712c0.037-1.371,0.02-2.771-0.056-4.202c-0.016-0.292-0.032-0.585-0.053-0.88 c-0.78-0.768-1.548-1.528-2.3-2.275c0.365,1.167,0.734,2.324,1.107,3.468C1091.357,608.135,1091.791,609.43,1092.23,610.712z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1068.736,663.303c-3.588,6.685-6.351,13.732-7.088,21.755c-0.228,2.485-0.26,5.065-0.063,7.755 c0.063,0.867,0.152,1.746,0.264,2.637c0.145,1.148,0.331,2.315,0.561,3.505c0.6,3.091,1.5,6.328,2.742,9.734 c-2.882,1-5.861,2.024-8.934,3.072c-3.893,1.328-7.922,2.689-12.131,4.096c8.495-0.119,16.445-0.17,23.887-0.169 c0.037,0,0.076,0,0.113,0c0.008,0.018,0.017,0.035,0.025,0.053c1.046,2.212,2.226,4.49,3.558,6.843 c6.893-4.786,11.598-10.753,15.192-18.86c8.7-19.6,0.12-28.7-8.83-44.54c-1.404-2.478-2.312-4.68-2.825-6.697 C1072.935,656.05,1070.712,659.622,1068.736,663.303z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1117.573,777.615c-1.9-1.832-3.737-3.632-5.522-5.406 C1113.253,774.134,1115.062,775.936,1117.573,777.615z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M1098.647,758.267c4.06,4.445,8.52,9.088,13.404,13.943c-2.423-3.879-2.358-8.258-0.471-13.142 c0.806-2.088,1.945-4.268,3.363-6.541c1.586-2.542,3.522-5.201,5.734-7.976c0.046-0.058,0.092-0.115,0.138-0.173 c1.333-1.666,2.764-3.375,4.278-5.125c1.576-1.822,3.241-3.689,4.979-5.603c4.069-4.481,8.531-9.212,13.158-14.196 c0.531-0.572,1.063-1.147,1.598-1.725c4.524,0.215,8.161,0.371,11.004,0.415c0.568,0.009,1.104,0.013,1.609,0.012 c6.185-0.008,7.754-0.759,6.108-3.053c-0.995-1.388-3.165-3.342-6.197-6.038c-0.754-0.671-1.559-1.386-2.416-2.151 c-0.06-0.054-0.123-0.11-0.183-0.164c3.6-4.099,7.186-8.345,10.658-12.738c3.049-3.859,6.01-7.831,8.813-11.917 c1.139-1.66,2.252-3.34,3.335-5.038c3.42-5.362,6.533-10.914,9.201-16.654c3.066-6.597,5.54-13.445,7.204-20.545 c0.801-3.418,1.417-6.893,1.818-10.429c0.115-1.014,0.209-2.033,0.289-3.056c0.208-2.685,0.297-5.403,0.247-8.155 c-1.671,0.655-3.283,1.295-4.868,1.927c-2.83,1.129-5.529,2.225-8.092,3.285c-23.979,9.918-36.555,16.875-42.447,22.072 c7.035,8.977,16.229,19.954,28.056,33.317c-11.334-10.941-21.736-20.828-31.244-29.816c-6.845,10.347,16.75,12.619,9.824,22.327 c-0.805,1.129-2.018,2.357-3.745,3.711c-2.155,1.69-5.11,3.577-9.036,5.704c-0.433,0.234-0.88,0.472-1.336,0.713 c-0.681,0.358-1.382,0.722-2.118,1.094c-0.504-0.615-1.01-1.239-1.519-1.874c-3.822-4.774-7.753-10.132-11.676-16.144 c-1.526-2.338-3.05-4.772-4.566-7.311c-1.888-3.162-3.763-6.486-5.611-9.975c-2.613-4.931-5.172-10.199-7.642-15.819 c-3.467,4.984-7.127,9.376-10.613,12.823c22.72,16.56,27.36,47.96,12.91,72.04c-5.355,8.92-12.641,15.955-21.075,21.323 C1086.22,744,1091.879,750.857,1098.647,758.267z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1154.896,465.11c-6.449,5.648-12.596,10.884-18.44,15.768c-7.69,6.425-14.851,12.233-21.462,17.526 c5.152,6.888,10.058,13.934,14.776,20.665c3.233-5.914,7.114-13.125,11.739-21.895c4.619-8.759,9.981-19.072,16.182-31.199 c1.009-1.974,2.037-3.988,3.091-6.059C1158.793,461.685,1156.831,463.416,1154.896,465.11z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1138.062,618.125c2.221,0.503,4.464,0.969,6.719,1.394c0.234,0.044,0.467,0.09,0.701,0.133 c0.717,0.132,1.434,0.261,2.152,0.385c7.265,4.081,4.502,1.45-1.453-2.325c-0.168-0.107-0.339-0.214-0.513-0.323 c-0.515-0.322-1.051-0.651-1.603-0.983c-3.491-2.101-7.663-4.346-11.499-5.909c-6.821-2.78-12.573-3.397-11.537,2.806 C1126.358,615.163,1132.125,616.779,1138.062,618.125z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1116.405,543.994c0.188,0.615,0.375,1.226,0.565,1.829c3.527,1.115,7.111,1.891,10.796,2.314 C1124.622,537.926,1118.743,542.164,1116.405,543.994z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1107.255,504.573c-3.347,2.659-6.529,5.18-9.545,7.58c2.998,2.929,5.645,5.649,8.054,8.158 c1.004-0.253,2.001-0.504,3.019-0.759c-0.48,0.811-0.962,1.606-1.444,2.402c1.533,1.603,2.978,3.114,4.364,4.531 C1110.11,519.73,1108.62,512.435,1107.255,504.573z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1111.702,526.486c1.407,5.97,2.896,11.512,4.446,16.664c0.809-1.413,2.331-3.966,4.789-8.259 C1117.867,532.595,1114.935,529.792,1111.702,526.486z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1073.511,568.898c-1.819,1.007-3.639,1.97-5.458,2.882c-0.057,2.297-0.207,4.634-0.445,6.997 c2.649,3.582,5.899,7.446,9.763,11.677c3.611,3.955,7.753,8.228,12.449,12.9c0.751,0.747,1.52,1.507,2.3,2.275 c0.244,0.24,0.492,0.483,0.738,0.725c0.719,0.706,1.449,1.421,2.191,2.145c0.873-2.717,1.572-5.48,2.038-8.278 c-2.119-2.089-3.658-4.288-4.488-6.581C1083.97,590.229,1077.549,581.614,1073.511,568.898z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#BDCCD4",
                        d:
                          "M1116.021,628.533c5.91,5.581,12.299,11.591,19.172,18.082c0.835,0.789,1.679,1.586,2.529,2.389 c9.508,8.988,19.91,18.875,31.244,29.816c-11.827-13.363-21.02-24.34-28.056-33.317c-1.235-1.576-2.402-3.089-3.506-4.543 c-10.953-14.427-15.595-22.982-16.375-27.657c-2.314-0.808-4.542-1.663-6.67-2.558c-0.202-0.085-0.408-0.169-0.608-0.254 c-0.599-0.257-1.188-0.517-1.77-0.781c-1.386,3.567-3.012,7.071-4.804,10.448 C1109.997,622.839,1112.944,625.628,1116.021,628.533z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1132.818,581.603c0.117,0.182,0.235,0.367,0.353,0.546c0.674,1.024,1.349,2.001,2.024,2.935 c1.204,1.663,2.411,3.18,3.614,4.564c0.054,0.063,0.109,0.124,0.163,0.186c4.26,4.858,8.482,8.016,12.452,9.743 c7.572,3.292,14.231,1.4,18.508-3.725c1.237-1.482,2.273-3.235,3.076-5.211c1.135-2.794,1.799-6.034,1.894-9.588 c0.161-6.008-1.305-12.911-4.889-20.068c-0.094-0.187-0.191-0.374-0.288-0.561c-5.725,1.194-11.617,2.149-17.404,2.916 c-0.645,0.698-1.287,1.385-1.926,2.058C1144.216,571.919,1138.353,577.297,1132.818,581.603z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1089.186,469.42c2.429,2.113,4.804,4.371,7.13,6.742c1.804-7.875,3.367-15.265,4.724-22.197 c-0.204-2.54-0.395-5.124-0.577-7.743c-6.431,0.279-12.819-0.695-18.978-2.423c-0.824,3.036-1.609,6.047-2.353,9.029 c-0.653,2.619-1.273,5.214-1.864,7.788c0.996,0.604,1.985,1.232,2.964,1.89C1083.298,464.57,1086.28,466.892,1089.186,469.42z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1024.776,460.001c-0.176-0.297-0.352-0.593-0.529-0.889c-0.185,0.095-0.369,0.184-0.555,0.282 C1024.061,459.598,1024.41,459.797,1024.776,460.001z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1071.681,489.942c0.579-3.889,1.236-7.851,1.976-11.884c1.042-5.681,2.246-11.501,3.611-17.44 c-8.555-5.182-17.752-8.288-27.723-8.221c-0.789,2.056-1.589,4.156-2.399,6.304c-1.098-2.079-2.132-4.051-3.119-5.94 c-2.256,0.276-4.55,0.711-6.885,1.325c3.694,6.411,7.185,12.979,10.693,19.531 C1057.055,479.423,1064.903,484.862,1071.681,489.942z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1150.77,542.659c-1.19,0.018-2.331,0.016-3.437-0.003c1.182,1.395,2.355,2.72,3.521,3.965 c3.413-0.756,6.944-1.728,10.629-2.938c1.993-0.654,3.849-1.364,5.596-2.119C1160.833,542.222,1155.461,542.586,1150.77,542.659z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1087.35,502.586c-0.558-0.487-1.128-0.979-1.706-1.475c-4.088-3.503-8.702-7.227-13.963-11.169 c-0.989,6.643-1.745,13.068-2.274,19.245c2.71,3.593,5.596,7.046,8.703,10.324 C1079.933,515.291,1082.796,510.024,1087.35,502.586z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1116.149,543.15c-1.551-5.151-3.039-10.694-4.446-16.664c-1.386-1.418-2.83-2.928-4.364-4.531 c-3.095,5.113-6.213,9.902-9.345,14.385c6.327,4.294,12.56,7.454,18.976,9.483c-0.189-0.603-0.377-1.215-0.565-1.829 C1116.319,543.713,1116.234,543.433,1116.149,543.15z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1129.528,584.07c0.971-0.698,1.955-1.436,2.948-2.203c0.114-0.088,0.228-0.175,0.342-0.264 c-0.397-0.614-0.794-1.244-1.191-1.891c-2.43-3.966-4.831-8.545-7.166-13.794c-5.842,0.345-10.695,0.531-13.948,0.665 c5.371,7.186,6.92,15.958,6.008,25.116C1120.616,589.881,1124.953,587.356,1129.528,584.07z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1103.376,477.699c-0.797,1.204-1.571,2.376-2.324,3.519c1.085,1.208,2.159,2.436,3.222,3.683 C1103.965,482.542,1103.665,480.144,1103.376,477.699z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1129.77,519.069c-4.718-6.731-9.625-13.777-14.776-20.665c-3.457-4.621-7.024-9.17-10.719-13.503 c0.909,6.918,1.904,13.476,2.98,19.673c1.365,7.862,2.855,15.157,4.448,21.913c3.232,3.306,6.165,6.109,9.235,8.405 c5.879,4.396,12.288,6.936,22.353,7.603c1.284,0.085,2.633,0.138,4.042,0.162c-1.148-1.354-2.304-2.774-3.469-4.252 C1139.325,532.648,1134.648,526.028,1129.77,519.069z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1105.764,520.311c-2.409-2.509-5.056-5.229-8.054-8.158c-2.264-2.211-4.733-4.542-7.454-6.993 c-0.304-0.273-0.606-0.547-0.917-0.823c-1.745,6.578-3.641,13.435-5.701,20.581c0.188,0.17,0.366,0.346,0.555,0.515 c0.137,0.122,0.272,0.237,0.409,0.358C1091.273,524.01,1098.326,522.184,1105.764,520.311z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#3FA9F5",
                        d:
                          "M1073.511,568.898c4.038,12.716,10.459,21.331,19.09,24.743c1.619,0.64,3.315,1.095,5.088,1.361 c0.104-1.676,0.122-3.36,0.044-5.049c-0.542-11.727-1.796-22.561-6.583-32.512 C1085.327,561.833,1079.424,565.625,1073.511,568.898z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1057.12,433.242c-4.684-2.636-8.948-5.315-12.65-7.661c-1.195,0.316-2.355,0.64-3.479,0.973 c-0.59,2.579-2.371,5.562-5.66,9.01c2.206,4.599,5.083,10.274,8.697,17.196c0.987,1.89,2.021,3.861,3.119,5.94 c0.811-2.148,1.61-4.248,2.399-6.304C1052.186,445.515,1054.706,439.147,1057.12,433.242z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1057.12,433.242c6.304,3.548,13.366,7.015,20.834,9.48c1.168,0.385,2.346,0.745,3.532,1.077 c6.159,1.728,12.547,2.702,18.978,2.423c0.69-0.03,1.381-0.079,2.071-0.139c1.073-5.87,1.995-11.385,2.79-16.568 c0.449-2.924,0.857-5.74,1.23-8.456c0.148-1.079,0.292-2.147,0.43-3.195c0.43-3.281,0.808-6.402,1.143-9.379 c-16.248,6.591-32.28,10.105-46.116,13.078c-0.018,0.042-0.036,0.082-0.053,0.124 C1060.395,425.323,1058.782,429.174,1057.12,433.242z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1101.052,481.218c0.753-1.142,1.527-2.315,2.324-3.519c4.994-7.543,10.874-16.324,17.801-26.615 c1.098-1.631,2.222-3.301,3.373-5.009c5.468-8.116,11.54-17.108,18.292-27.108c-6.207,9.412-12.885,15.942-19.784,20.25 c-1.451,0.906-2.911,1.712-4.379,2.427c-0.996,0.485-1.995,0.928-2.996,1.331c-4.353,1.749-8.756,2.73-13.149,3.108 c-0.468,2.558-0.966,5.188-1.494,7.882c-1.358,6.932-2.921,14.322-4.724,22.197c-1.434,6.261-3.019,12.825-4.776,19.716 C1094.241,491.625,1097.387,486.781,1101.052,481.218z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M1089.339,504.338c0.307-1.159,0.609-2.307,0.907-3.449c0.441-1.688,0.873-3.359,1.294-5.01 c-0.452,0.712-0.894,1.411-1.322,2.091c-1.024,1.627-1.978,3.163-2.868,4.616c-4.555,7.438-7.417,12.705-9.24,16.925 c1.766,1.863,3.605,3.668,5.527,5.408C1085.698,517.773,1087.594,510.916,1089.339,504.338z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1048.115,360.465c-0.291,1.011-0.579,2.03-0.865,3.054c-0.37,1.323-0.737,2.657-1.102,4 c0.095,0.015,0.194,0.039,0.285,0.044c11.62,0.74,38.38-13.01,47.37-20.12c14.211-11.231,15.985-28.462,13.258-45.076 c-3.614-1.448-7.652-3.252-12.255-6.189c-5.619,1.284-10.571,3.541-14.981,6.625c0.043,3.299,0.278,6.828,0.756,10.612 c-2.522-1.732-4.961-3.407-7.326-5.035c-1.987,2.016-3.847,4.231-5.596,6.626c-1.672,2.289-3.242,4.744-4.726,7.346 c-2.919,5.118-5.506,10.804-7.865,16.942c-0.743,1.933-1.464,3.91-2.165,5.927 C1051.213,350.086,1049.633,355.186,1048.115,360.465z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1147.87,392.442c0.028-0.01,0.056-0.021,0.084-0.031c2.207-0.8,4.495-1.67,6.876-2.618 c5.837-2.324,12.214-5.103,19.181-8.371c1.996-0.936,4.025-1.9,6.12-2.918c0.571-0.278,1.16-0.57,1.739-0.854 c4.791-2.35,9.833-4.906,15.155-7.692c1.283-0.672,2.583-1.357,3.898-2.055c0.044-0.023,0.087-0.046,0.131-0.069 c-0.51-7.44,1.239-14.275,8.819-16.81c0.08-0.03,0.16-0.06,0.25-0.09c0.01,0.02,0.03,0.04,0.04,0.06c0.26,0.4,0.49,0.77,0.69,1.1 c0.08,0.12,0.16,0.23,0.22,0.35c1.458,2.393,2.774,5.015,3.969,7.802c1.258-0.696,2.528-1.401,3.812-2.118 c1.22-0.681,2.461-1.379,3.704-2.08c1.317-0.742,2.621-1.473,3.965-2.237c-4.341-3.222-8.568-6.294-12.687-9.222 c-7.941-5.646-15.469-10.745-22.623-15.342c-1.982-1.273-3.935-2.51-5.859-3.705c-2.247-1.397-4.458-2.746-6.628-4.038 c-7.845-4.674-15.185-8.669-22.065-12.038c-5.757-2.819-11.188-5.195-16.319-7.158c-1.426-0.546-2.833-1.064-4.213-1.546 c-2.651-0.926-5.217-1.735-7.703-2.432c-0.768-0.215-1.526-0.418-2.278-0.612c4.942,9.3,9.511,21.175,13.222,35.824 c7.403-0.81,14.71-1.955,21.963-4.075c11.04-3.22,17.85-8.1,14.01,6.72c-3.45,13.28-15.21,15.94-27.41,17.31 c-1.386,0.156-2.851,0.165-4.358,0.094C1145.556,365.198,1147.033,378.144,1147.87,392.442z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1126.191,315.039c-0.124,7.135-0.753,14.052-1.838,19.864c3.346-0.284,6.667-0.552,9.969-0.858 C1131.617,325.164,1128.977,319.214,1126.191,315.039z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1033.627,415.89c5.326,2.367,8.478,5.791,7.363,10.665c1.124-0.333,2.284-0.657,3.479-0.973 c2.462-0.652,5.07-1.274,7.802-1.893c3.095-0.701,6.352-1.397,9.74-2.125c13.836-2.973,29.868-6.487,46.116-13.078 c5.74-2.328,11.506-5.039,17.212-8.248c1.293-0.727,2.583-1.482,3.868-2.261c2.998-0.643,6.216-1.478,9.687-2.531 c2.51-0.761,5.148-1.632,7.924-2.621c-2.73-16.102-5.214-29.094-7.568-39.622c-6.096-0.738-12.466-2.055-17.388-0.859 c-7.78,1.89-9.79,8.14-17.31,13.89c-16.66,12.73-34.61,12.23-54.24,13.62c2.33,6.66,16.59,54.2-3.28,36.15 c-4.477-4.068-6.749-10.919-8.764-17.757c-0.239,0.94-0.479,1.881-0.721,2.823C1036.288,405.989,1034.99,410.939,1033.627,415.89 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1049.318,291.742c0.289,0.204,0.577,0.408,0.87,0.615c0.252,0.178,0.505,0.356,0.76,0.536 c6.473,4.562,13.897,9.7,22.307,15.487c2.365,1.627,4.804,3.303,7.326,5.035c-0.477-3.784-0.713-7.313-0.756-10.612 c-0.086-6.666,0.667-12.326,2.082-16.917c-0.452-0.432-0.909-0.876-1.37-1.332c-1.708-1.688-3.478-3.543-5.312-5.578 c-0.008-0.009-0.017-0.018-0.025-0.027c-1.085-1.204-2.192-2.472-3.323-3.809c-3.263-3.857-6.717-8.276-10.388-13.374 c-1.171-1.626-2.364-3.322-3.579-5.089c-2.065,0.004-4.057,0.008-5.978,0.015c-2.111,0.007-4.136,0.018-6.069,0.035 c-0.958,0.008-1.896,0.018-2.811,0.03c-4.456,7.158-9.297,13.691-14.424,19.662 C1033.807,280.581,1040.673,285.627,1049.318,291.742z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1028.358,206.886c0.981,1.853,1.955,3.679,2.915,5.458c3.479-3.107,7.119-6.444,10.917-10.008 C1037.226,203.844,1032.623,205.361,1028.358,206.886z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1049.947,244.554c2.756,4.374,5.41,8.411,7.964,12.123c7.044-0.014,14.917-0.028,23.573-0.144 c-3.824-4.263-7.528-8.896-10.66-14.749c-0.07-0.13-0.16-0.28-0.24-0.44c1.81-0.67,3.71-0.99,5.66-0.99 c9.156,0,19.505,6.907,28.179,15.633c0.462-0.016,0.93-0.034,1.395-0.051c1.752-0.065,3.527-0.135,5.325-0.212 c0.515-0.022,1.028-0.044,1.546-0.067c2.929-0.13,5.919-0.279,8.965-0.446c1.517-0.083,3.049-0.171,4.594-0.264 c-3.751-30.858-14.389-52.357-41.279-57.492c0.187,10.016-0.213,19.291-2.956,21.94c-1.87,1.81-3.71,2.56-5.44,2.56 c-5.72,0-10.27-8.22-11.03-13.47c-0.266-1.826-0.351-3.85-0.315-5.993C1061.461,218.276,1056.245,232.225,1049.947,244.554z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1094.806,296.179c4.603,2.937,8.641,4.741,12.255,6.189c-0.631-3.845-1.503-7.657-2.518-11.354 c-2.2-8.031-5.579-14.027-9.49-19.207c-0.554,0.087-1.096,0.216-1.63,0.374c-1.952,0.574-3.76,1.615-5.379,3.109 c-1.615,1.49-3.047,3.416-4.24,5.789c-0.724,1.44-1.355,3.052-1.896,4.808C1086.664,290.433,1090.935,293.708,1094.806,296.179z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1151.475,253.04c-4.184-4.769-8.068-9.241-11.714-13.461c-1.248,3.562-2.719,8.329-4.359,14.766 c2.915-0.208,5.878-0.435,8.884-0.682C1146.655,253.468,1149.05,253.261,1151.475,253.04z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1146.819,392.824c0.497,2.929,1.001,5.954,1.515,9.093c-0.119-3.231-0.281-6.374-0.463-9.475 c-0.837-14.298-2.315-27.244-4.295-38.855c-1.41-0.067-2.858-0.207-4.324-0.384 C1141.605,363.731,1144.089,376.722,1146.819,392.824z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M1126.148,297.715c-0.296-0.557-0.591-1.122-0.89-1.661c0.751,6.091,1.044,12.623,0.933,18.985 c2.785,4.175,5.426,10.125,8.13,19.006c1.688-0.156,3.371-0.324,5.048-0.507C1135.659,318.89,1131.09,307.015,1126.148,297.715z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M970.609,192.009c-0.273,0.428-0.547,0.861-0.821,1.293c-0.054,0.195-0.104,0.387-0.163,0.585 c0.234-0.16,0.47-0.311,0.707-0.45C970.422,192.962,970.515,192.486,970.609,192.009z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1023.436,196.792c7.334,0.007,15.927-0.396,25.932-1.285c6.03-5.813,12.443-12.185,19.249-19.136 c0.271-1.707,0.514-3.339,0.697-4.838c1.099-9.024,2.463-17.575,2.701-25.995c-0.484-1.156-0.955-2.325-1.412-3.5 C1052.279,164.329,1036.558,182.367,1023.436,196.792z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1101.956,158.241c-1.104-2.488-2.234-5.069-3.389-7.743c-0.69-1.598-1.387-3.22-2.096-4.886 c-0.16-0.375-0.323-0.762-0.483-1.141c-3.071-0.53-5.081-0.825-6.641,0.685C1093.93,150.208,1098.213,154.559,1101.956,158.241z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1098.314,127.759c4.309-3.071,10.269-7.86,17.464-15.672c-5.869,1.345-11.752-0.058-18.098-2.087 c-0.346-0.111-0.695-0.223-1.044-0.337c-3.705,4.704-7.325,9.26-10.863,13.676c0.263,0.464,0.508,0.872,0.721,1.184 c3.984,5.864,0.554,4.163,7.134,6.404c0.021-0.014,0.04-0.026,0.061-0.04C1094.899,130.094,1096.454,129.084,1098.314,127.759z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1127.628,97.686c-4.232,5.694-8.2,10.438-11.851,14.402c1.414-0.324,2.828-0.809,4.247-1.483 c3.973-1.886,7.99-5.252,12.189-10.768c0.945-1.242,1.901-2.604,2.866-4.07c2.439-3.704,4.946-8.141,7.548-13.445 c-1.714,0.273-3.416,0.599-5.11,0.956C1134.091,88.657,1130.786,93.437,1127.628,97.686z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1126.248,254.946c0.265,2.18,0.496,4.407,0.696,6.679c0.051,0.577,0.106,1.148,0.152,1.73 c0.075,0.938,0.141,1.888,0.207,2.84c0.294,4.274,0.491,8.691,0.61,13.237c0.007,0.278,0.014,0.557,0.02,0.835 c0.073,3.023,0.116,6.099,0.129,9.229c0.001,0.236,0.004,0.469,0.005,0.706c0.05-0.295,0.099-0.578,0.149-0.87 c0.401-2.353,0.799-4.614,1.192-6.783c0.071-0.394,0.143-0.786,0.214-1.174c1.237-6.75,2.43-12.615,3.565-17.711 c0.109-0.491,0.218-0.969,0.326-1.446c0.651-2.867,1.282-5.488,1.889-7.873c1.639-6.437,3.111-11.204,4.359-14.766 c4.826-13.778,6.293-9.523,1.105-14.091c-1.85-1.629-4.547-4.383-8.239-9.476c-4.445-6.13-10.333-15.656-17.925-30.696 c-0.79-1.564-1.598-3.189-2.425-4.875c-0.391-0.798-0.787-1.61-1.187-2.436c-0.746-1.543-1.507-3.131-2.283-4.775 c-4.629-1.077-11.606-3.048-21.441-5.85c-0.824-0.495-1.619-1.065-2.39-1.696c-0.1,1.282-0.222,2.548-0.404,3.769 c-0.597,3.996-0.1,12.651,0.219,21.697c3.163-0.477,6.414-0.985,9.762-1.529c-3.342,0.661-6.584,1.326-9.745,1.994 c0.067,1.946,0.124,3.905,0.16,5.838C1111.859,202.589,1122.497,224.088,1126.248,254.946z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1130.783,84.915c-1.198,0.335-2.39,0.685-3.569,1.059c-6.538,2.069-13.506,4.719-20.048,7.63 c0.108,0.035,0.215,0.07,0.322,0.106C1118.471,93.244,1127.199,89.739,1130.783,84.915z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1072.015,145.538c0.049-1.74,0.049-3.475-0.01-5.207c-0.469,0.572-0.936,1.14-1.402,1.707 C1071.06,143.213,1071.531,144.381,1072.015,145.538z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1087.367,167.38c9.835,2.802,16.812,4.773,21.441,5.85c3.497,0.814,5.65,1.114,6.682,0.877 c0.12-0.028,0.228-0.061,0.318-0.103c0.151-0.071,0.262-0.162,0.33-0.274c0.158-0.258,0.103-0.626-0.142-1.106 c-0.971-1.903-4.957-5.573-10.746-11.17c-1.043-1.009-2.143-2.077-3.296-3.212c-3.742-3.682-8.026-8.033-12.609-13.085 c-1.136,1.1-2.036,3.155-2.933,6.787c-1.049,4.228-1.074,9.115-1.436,13.741C1085.748,166.315,1086.543,166.885,1087.367,167.38z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M901.808,320.208c4.57-7.74,9.457-8.394,14.724-4.332c1.976-4.393,3.714-8.624,5.254-12.697 c-7.424,0.701-14.795,2.064-22.064,4.007c0.011,0.128,0.025,0.259,0.037,0.387C900.122,311.494,900.788,315.701,901.808,320.208z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M967.422,261.006c-0.021,0.494-0.027,0.967-0.017,1.417c10.455,8.899,0.263,11.625,0,0 c-1.271-1.082-2.851-2.255-4.787-3.505c-1.605,3.667-3.326,7.144-5.14,10.459c4.45,10.593,9.577,19.399,11.598,24.938 c0.637-0.962,1.279-1.926,1.931-2.898c0.038-0.056,0.077-0.113,0.115-0.169c3.964-5.899,8.216-11.988,12.752-18.232 c-0.687-1.713-1.412-3.476-2.115-5.285C977.238,265.502,972.441,263.26,967.422,261.006z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M927.734,409.075c-0.172,0.289-0.342,0.578-0.516,0.868c1.428,0.606,2.829,1.183,4.203,1.732 c0.026-0.538,0.052-1.078,0.079-1.62c0.022-0.453,0.045-0.907,0.069-1.362c0.033-0.642,0.067-1.285,0.103-1.929 c-0.986,0.236-1.984,0.475-2.992,0.717c-0.295,0.504-0.602,1.014-0.903,1.521C927.763,409.027,927.748,409.051,927.734,409.075z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M950.724,222.071c-4.171,1.745-7.086,4.256-9.25,7.567c-0.835,1.277-1.557,2.674-2.198,4.191 c-0.253,0.599-0.494,1.216-0.724,1.854c-0.407,1.132-0.779,2.324-1.126,3.576c-0.61,2.202-1.144,4.593-1.654,7.173 c-0.072,0.361-0.143,0.726-0.213,1.095c3.52,1.426,6.992,2.846,10.405,4.26c-2.426-7.947-3.73-19.217,6.121-30.155 c0.01-0.032,0.02-0.063,0.03-0.095C951.637,221.706,951.172,221.883,950.724,222.071z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M977.795,249.331c0.035-0.873,0.114-1.751,0.237-2.634c-0.493-0.302-0.971-0.64-1.431-1.019 c-3.574,2.189-3.797,2.3-0.674-0.599c-0.931-0.878-1.786-1.922-2.563-3.123c-1.602,3.192-2.818,6.073-3.719,8.663 C971.889,250.737,974.588,250.343,977.795,249.331z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M1002.544,231.149c3.401-1.722,7.1-3.532,11.103-5.407c-1.051,1.402-2.086,2.726-3.109,3.988 c2.478-1.92,5.065-3.99,7.768-6.223c-2.506-0.359-4.933-0.697-7.281-1.014c-3.69-0.498-7.188-0.942-10.506-1.333 c-0.105,0.107-0.207,0.211-0.311,0.318C1001.156,224.571,1001.946,227.81,1002.544,231.149z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M931.617,268.941c-14.084-5.254-29.145,2.72-31.786,24.69c1.168-0.317,2.333-0.643,3.512-0.938 c7.611-1.903,15.236-2.56,22.872-2.447c0.782-2.549,1.489-5.023,2.133-7.426C929.67,277.892,930.728,273.267,931.617,268.941z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M978.417,244.566c0.182-0.804,0.407-1.612,0.674-2.423c-1.288,1.199-2.343,2.172-3.166,2.936 c0.221,0.208,0.445,0.409,0.674,0.599C977.131,245.353,977.739,244.98,978.417,244.566z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M952.311,254.441c-2.091-0.883-4.207-1.767-6.347-2.654c3.45,11.301,9.153,15.876-11.754,3.217 c-0.744,4.247-1.555,8.889-2.594,13.938c3.865,1.442,7.655,3.883,11.096,7.302c1.038,1.031,2.044,2.151,3.01,3.36 c0.128,0.161,0.257,0.32,0.384,0.484c0.842,1.086,1.653,2.24,2.427,3.463c3.161-4.395,6.163-9.093,8.942-14.174 C955.514,264.704,953.685,259.682,952.311,254.441z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M977.455,831.61c0.412,2.607,1.102,5.761,2.124,9.532c0.615,2.269,1.354,4.767,2.221,7.497 c0.11,0.348,0.218,0.691,0.333,1.047c-0.132,0.095-0.261,0.179-0.392,0.272c-4.915,3.462-9.341,4.932-13.272,4.814 c-1.17-0.035-2.297-0.205-3.379-0.511c1.028,0.389,2.023,0.748,2.989,1.081c3.591,1.237,6.755,2.089,9.535,2.612 c0.313,0.059,0.624,0.116,0.927,0.167c1.065,0.177,2.07,0.303,3.019,0.382c8.273,0.685,12.207-2.265,13.433-6.775 c0.707-2.601,0.514-5.719-0.267-8.958c-0.333-1.379-0.77-2.78-1.291-4.171c-1.38-3.682-3.336-7.298-5.421-10.28 C984.573,829.406,981.054,830.504,977.455,831.61z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M965.089,854.26c-0.828-0.313-1.681-0.65-2.551-1.001C963.36,853.674,964.209,854.012,965.089,854.26z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M957.594,849.48c-0.094,0.524-0.184,1.04-0.274,1.555c1.632,0.731,3.195,1.399,4.702,2.014 c0.173,0.071,0.345,0.141,0.517,0.21c-0.18-0.091-0.36-0.182-0.538-0.281C960.419,852.1,958.951,850.918,957.594,849.48z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M874.188,720.44c0.65-1.134,1.296-2.257,1.938-3.37c-2.84-1.782-5.773-3.585-8.803-5.41 c-0.837-0.504-1.686-1.011-2.537-1.519c-0.451-0.269-0.895-0.536-1.35-0.806c0.136,0.267,0.268,0.525,0.403,0.791 c0.086,0.17,0.172,0.337,0.258,0.506c0.274,0.538,0.548,1.075,0.82,1.607c1.271,2.49,2.519,4.923,3.745,7.303 C870.551,719.822,872.393,720.122,874.188,720.44z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M883.753,744.408c-0.426-0.213-0.848-0.431-1.268-0.653c-0.292,0.125-0.59,0.259-0.891,0.399 c0.07,0.13,0.14,0.259,0.21,0.389C882.452,744.499,883.094,744.454,883.753,744.408z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M915.377,769.294c2.155-0.021,4.455-0.721,6.845-1.979c0.32-3.55,1.025-7.63,2.193-12.296 c-3.808-0.414-7.391-0.764-10.783-1.047c-11.55,2.576-12.897,2.067-9.483-0.626c-6.526-0.3-12.258-0.248-17.426,0.228 c15.238,27.617,26.216,44.024,35.448,53.033C917.137,798.564,914.403,786.601,915.377,769.294z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M985.59,427.32c-0.079,0.141-0.157,0.282-0.237,0.421c0.441,0.207,0.873,0.422,1.295,0.646 C986.294,428.037,985.942,427.681,985.59,427.32z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M991.471,427.955c-0.947,0.513-1.93,1.026-2.928,1.538c6.965,4.488,11.091,12.229,13.88,28.822 c3.298-1.818,6.337-3.565,9.157-5.25c2.252-1.346,4.357-2.65,6.318-3.914c-3.224-4.714-6.677-9.24-10.423-13.486 C1001.419,432.948,996.102,430.383,991.471,427.955z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M980.318,434.341c1.816-1.792,3.526-3.991,5.034-6.6c-1.011-0.475-2.072-0.91-3.189-1.316 C981.579,429.202,980.964,431.841,980.318,434.341z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M982.164,426.425c0.158-0.751,0.311-1.529,0.465-2.3c-0.694-0.786-1.385-1.591-2.072-2.417 c-4.43-2.809-7.878-5.433-10.498-7.917c-0.43,1.04-0.851,2.086-1.264,3.136c0.13,1.836,0.258,3.828,0.37,5.975 C974.173,424.056,978.468,425.084,982.164,426.425z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M959.913,499.174c-0.61,0.258-1.288,0.495-2.041,0.707c0.231,0.16,0.464,0.321,0.691,0.472 c0.553,0.367,1.113,0.736,1.676,1.107c0.065-0.241,0.132-0.485,0.196-0.726C960.255,500.219,960.081,499.7,959.913,499.174z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M925.36,457.449c-7.335,3.441-14.063,6.233-20.274,8.495c-0.267,1.819-0.481,3.672-0.639,5.551 c-0.305,3.622-0.402,7.344-0.265,11.119c2.653,0.782,5.264,1.575,7.824,2.38c-3.939-3.484-4.868-6.767,3.467-8.111 c-0.34,0.04-0.64,0.07-0.82,0.09c0.26-0.04,0.82-0.11,1.78-0.23c0.1-0.01,0.2-0.03,0.31-0.04c0.11-0.01,0.22-0.02,0.33-0.03 c0.19-0.02,0.31-0.04,0.38-0.04c-0.02,0.01-0.04,0.01-0.06,0.01c1.955-0.132,3.92,0.065,5.885,0.51 C923.789,471.265,924.484,464.719,925.36,457.449z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M956.72,480.281c-0.182-3.671-0.161-7.459,0.05-11.333c-3.743,0.72-7.832,0.208-12.28-1.487 C948.781,471.843,953.166,476.21,956.72,480.281z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M923.028,452.875c-3.39-3.1-6.92-6.616-10.607-10.57c-2.528,4.822-4.597,10.506-6.037,16.742 C911.152,457.209,916.668,455.156,923.028,452.875z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1040.99,426.555c1.115-4.874-2.037-8.298-7.363-10.665c-3.167-1.407-7.098-2.442-11.361-3.183 c0.523,7.559,1.717,16.99,7.646,27.823c2.13-1.753,3.932-3.408,5.419-4.966C1038.62,432.117,1040.401,429.134,1040.99,426.555z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M923.828,1046.445c-0.821,1.15-1.579,2.289-2.265,3.418c-0.982,1.617-1.826,3.214-2.55,4.799 c-0.268,0.587-0.519,1.173-0.754,1.757c2.319-2.252,4.781-4.867,7.317-7.825c-0.265-0.69-0.529-1.389-0.795-2.104 C924.46,1046.424,924.142,1046.409,923.828,1046.445z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M974.167,1107.495c-2.239,8.01-6.158,17.162-11.423,28.226c13.834,1.448,22.952,6.929,24.501,17.063 c3.196-9.038,6.566-19.339,8.312-30.8c0.107-0.706,0.209-1.416,0.304-2.131C987.681,1116.642,980.5,1112.372,974.167,1107.495z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M990.495,1072.521c-1.016-0.252-2.026-0.529-3.021-0.858c-1.97-0.65-3.47-2.24-5.34-2.99 c-0.81-0.323-1.606-0.684-2.399-1.055c-2.707,1.302-5.461,2.511-8.253,3.617c1.94,1.742,3.929,3.518,5.974,5.332 c4.47-0.472,9.129-0.97,13.96-1.496C991.121,1074.225,990.816,1073.375,990.495,1072.521z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M928.557,1152.492c-0.006,0.365-0.007,0.726-0.015,1.094c2.168-1.249,4.407-2.528,6.716-3.837 c-2.056-1.182-4.334-2.505-6.744-3.939C928.576,1147.983,928.592,1150.21,928.557,1152.492z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M940.906,1136.228c-0.799,0.097-1.603,0.2-2.416,0.313c1.237,0.743,2.488,1.466,3.759,2.164 C941.806,1137.891,941.358,1137.065,940.906,1136.228z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M1021.798,1191.302c-0.971,3.449-3.036,7.461-6.335,12.034c-5.431-0.396-9.561-0.81-12.641-1.248 c-0.032,0.773-0.07,1.557-0.114,2.348c9.866,0.15,22.026-0.73,36.875-3.053c0.239-0.611,0.502-1.138,0.786-1.587 C1033.566,1197.384,1027.404,1194.498,1021.798,1191.302z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M952.756,1135.346c0.153,0.402,0.309,0.805,0.459,1.205c0.408-0.148,0.814-0.268,1.217-0.365 c0.944-0.226,1.875-0.312,2.798-0.273c1.135,0.048,2.26,0.285,3.384,0.695c0.472,0.172,0.944,0.377,1.416,0.608 c0.242-0.504,0.477-1,0.714-1.496C959.64,1135.396,956.303,1135.272,952.756,1135.346z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M979.395,1179.447c-0.188,0.319-0.377,0.637-0.572,0.96c1.304,5.499,0.088,8.057-3.691,5.708 c-0.42,0.612-0.851,1.23-1.294,1.853c4.707-1.897,6.201,2.116,5.057,6.709c18.715-20.992,23.498-14.631,23.998-0.439 c7.516-3.978,13.76-9.281-15.791-16.7C984.626,1178.071,982.054,1178.706,979.395,1179.447z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M984.309,1169.751c-0.841,2.036-1.857,4.169-3.055,6.4c2.087,0.471,4.036,0.933,5.846,1.388 c4.765-1.024,9.171-1.665,13.135-1.915c-1.56-1.4-3.061-2.808-4.509-4.215C991.886,1170.947,988.081,1170.387,984.309,1169.751z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M966.697,1069.219c0.817,0.999,1.582,1.99,2.289,2.977c0.835-0.31,1.666-0.632,2.495-0.96 c-1.377-1.237-2.725-2.454-4.05-3.655C967.194,1068.135,966.951,1068.682,966.697,1069.219z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M997.046,1474.052c1.224-0.893,2.426-1.822,3.602-2.796c-1.238,0.829-2.429,1.71-3.568,2.633 C997.069,1473.944,997.057,1473.999,997.046,1474.052z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M953.685,1531.704c-3.299-2.104-6.417-3.977-9.355-5.625c-0.707,1.789-1.551,3.656-2.548,5.61 c0.034,0.232,0.068,0.466,0.101,0.698C945.554,1532.156,949.487,1531.923,953.685,1531.704z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M925.471,1517.672c5.241,1.539,11.491,4.275,18.859,8.408c1.529-3.869,2.372-7.349,2.502-10.423 c-6.102-0.624-12.573-1.108-19.429-1.429C926.742,1515.405,926.097,1516.555,925.471,1517.672z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M967.616,1471.853c-0.942-0.798-1.9-1.615-2.891-2.473c-2.195,2.078-4.324,4.085-6.4,6.036 c-5.635,5.295-10.833,10.128-15.594,14.536c-1.143,1.058-2.266,2.097-3.358,3.106c-1.527,2.675-2.985,5.242-4.385,7.712 c8.34,2.448,12.158,7.491,11.844,14.887c9.532,0.975,18.163,2.291,25.938,3.866c0.013-0.029,0.025-0.057,0.039-0.086 c-0.505-3.757-1.032-7.895-1.574-12.439c-3.188,0.668-6.342,1.076-9.412,1.167c-21.39,0.63-13.63-9.5,0.23-15.9 c2.395-1.108,4.799-2.188,7.198-3.268C968.71,1483.699,968.164,1477.995,967.616,1471.853z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1054.018,1495.399c-1.004,12.424-11.911,23.478-25.526,31.37c0.885,1.535,1.689,3.131,2.413,4.786 c2.2,0.111,4.425,0.231,6.682,0.365c1.14,0.068,2.284,0.137,3.438,0.211c0.538,0.034,1.083,0.072,1.624,0.108 c0.035,0.002,0.07,0.005,0.104,0.007c3.893,0.257,7.867,0.55,11.923,0.881c0.341,0.028,0.681,0.055,1.022,0.084 c0.354,0.029,0.704,0.057,1.06,0.087c8.184,0.69,16.692,1.536,25.526,2.565c-3.038-9.774-6.266-18.331-9.628-25.81 c-0.899-1.999-1.806-3.927-2.723-5.773c-0.352-0.709-0.706-1.406-1.06-2.093c-0.836-0.635-1.675-1.285-2.52-1.963 c-13.17-10.55-30.69-17-42.35-28.8c-3.368,5.091-7.859,10.095-13.063,14.697 C1034.286,1502.812,1021.04,1486.463,1054.018,1495.399z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1011.359,1457.458c-1.379-0.012-2.498,0.278-3.406,0.812c-0.854,0.502-1.522,1.218-2.042,2.106 c-0.677,1.157-1.104,2.6-1.369,4.226c-0.177,1.088-0.282,2.256-0.341,3.475c1.194-1.143,2.367-2.322,3.492-3.583 c1.948-2.182,3.711-4.492,5.327-6.892C1012.428,1457.509,1011.876,1457.463,1011.359,1457.458z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M973.23,742.151c4.801,2.827,9.608,5.692,14.389,8.469c2.861-0.991,5.06-2.189,6.385-3.435 c-0.518-1.49-1.079-2.915-1.688-4.275C986.216,742.613,979.853,742.36,973.23,742.151z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M973.046,738.997c8.924-0.091,14.845,0.697,18.342,1.942c-1.025-2.05-2.155-3.973-3.395-5.8 c-2.223,0.573-4.397,1.134-6.515,1.681C978.572,737.57,975.76,738.296,973.046,738.997z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M924.221,706.394c0.159-0.166,0.315-0.327,0.474-0.492c-0.201,0.017-0.403,0.033-0.605,0.05 C924.133,706.097,924.178,706.25,924.221,706.394z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M878.125,724.894c-0.381,3.039-0.812,6.137-1.294,9.294c0.266-3.271,0.516-6.477,0.758-9.645 c-1.356-0.888-2.74-1.798-4.178-2.748c0.261-0.456,0.518-0.903,0.778-1.355c-1.796-0.318-3.637-0.618-5.526-0.899 c-2.305-0.343-4.668-0.662-7.115-0.944c0.135,0.986,0.333,1.954,0.586,2.906c2.103,7.906,8.138,14.624,15.937,19.671 c2.399-4.485,4.986-8.224,7.738-11.307C883.409,728.334,880.848,726.676,878.125,724.894z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M891.17,743.907c-1.067-2.265-4.352-2.01-8.685-0.152c0.42,0.222,0.842,0.44,1.268,0.653 C886.153,744.243,888.623,744.076,891.17,743.907z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M913.632,753.972c-3.344-0.279-6.497-0.489-9.483-0.626C900.735,756.039,902.083,756.548,913.632,753.972 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M962.314,1171.767c0.306,2.172,0.559,4.318,0.765,6.441c1.006-0.407,2.031-0.825,3.081-1.257 C964.961,1175.418,963.68,1173.696,962.314,1171.767z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M934.348,1011.189c2.856,0.917,5.673,1.768,8.438,2.552c1.54,0.437,3.063,0.852,4.569,1.248 c2.89-5.962,5.582-12.408,7.948-19.328c-0.898-0.293-1.811-0.589-2.74-0.886c-1.273-0.408-2.584-0.821-3.918-1.237 c-3.291,1.744-6.514,3.138-9.658,4.202c0.549,0.099,1.09,0.193,1.643,0.295c-6.128,3.793-11.752,6.93-16.918,9.485 c2.425,0.895,4.834,1.746,7.22,2.548C932.076,1010.453,933.215,1010.826,934.348,1011.189z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M920.803,1013.031c-0.342-0.385-0.678-0.768-1.027-1.155c-0.526-0.582-1.072-1.169-1.615-1.756 c-0.942,0.416-1.863,0.806-2.772,1.18C917.218,1011.855,919.024,1012.431,920.803,1013.031z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M893.111,978.375c-0.259-0.063-0.522-0.127-0.782-0.191c-2.076-0.507-4.183-1.017-6.33-1.532 c-0.288-0.069-0.567-0.137-0.856-0.206c-0.415-0.099-0.842-0.2-1.26-0.299c0.988,1.682,2.05,3.307,3.186,4.864 C888.861,979.915,890.876,979.047,893.111,978.375z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M913.432,1249.573c-0.801-0.661-1.633-1.37-2.486-2.109c-0.488,1.193-0.977,2.398-1.467,3.61 c0.071,0.549,0.15,1.093,0.239,1.63C910.973,1251.653,912.211,1250.609,913.432,1249.573z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M895.133,1147.708c-0.001,0.002-0.002,0.004-0.003,0.006c1.559-0.56,3.111-1.102,4.655-1.626 c1.714-0.582,3.417-1.139,5.111-1.676c1.83-0.58,3.648-1.137,5.45-1.664c3.098-0.906,6.151-1.73,9.153-2.476 c-2.201-1.403-4.408-2.856-6.567-4.336C907.193,1139.75,901.182,1143.659,895.133,1147.708z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M908.123,1022.932c0.849,0.579,1.683,1.15,2.514,1.719c-0.588-4.046-1.408-7.646-2.298-10.75 c-3.605,1.165-6.907,1.958-9.931,2.421c0.73,0.496,1.447,0.983,2.166,1.471C903.162,1019.551,905.684,1021.267,908.123,1022.932z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M915.487,1016.218c-0.381-1.469-0.762-2.966-1.143-4.494c-0.7,0.28-1.389,0.546-2.07,0.801 C913.251,1013.669,914.319,1014.898,915.487,1016.218z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M987.245,1152.784c-1.549-10.134-10.667-15.615-24.501-17.063c-0.236,0.496-0.472,0.992-0.714,1.496 c-0.186,0.389-0.378,0.785-0.567,1.179c-0.295,0.612-0.593,1.229-0.895,1.853c-0.743,1.533-1.509,3.101-2.296,4.706 c0.463,0.549,0.921,1.097,1.369,1.645c9.46,3.635,18.639,6.408,27.816,8.333c-0.029-0.631-0.089-1.244-0.17-1.843 C987.272,1152.988,987.26,1152.885,987.245,1152.784z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M887.068,981.01c-3.732,2.281-6.506,5.552-8.322,10.098c5.981,0.105,12.397,0.438,19.289,1.026 C893.876,989.075,890.197,985.299,887.068,981.01z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M977.183,1175.261c1.414,0.3,2.77,0.596,4.071,0.89c1.198-2.231,2.214-4.364,3.055-6.4 c-3.559-0.601-7.082-1.28-10.565-2.032C975.158,1170.445,976.305,1172.982,977.183,1175.261z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M824.169,962.949c-0.875-0.181-1.758-0.362-2.64-0.544c-0.11,0.299-0.222,0.597-0.329,0.896 c0.45,0.317,0.9,0.633,1.348,0.948C823.077,963.83,823.615,963.4,824.169,962.949z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M849.423,979.101c-2.785-4.317-5.422-8.481-7.927-12.507c-3.685-0.789-7.445-1.586-11.285-2.389 c-1.474,0.296-2.881,0.612-4.221,0.943c-0.337,0.266-0.685,0.528-1.042,0.787c8.366,5.868,16.325,11.394,23.896,16.614 c0.387-0.452,0.779-0.908,1.175-1.371c0.446-0.849,0.881-1.669,1.299-2.452C850.69,978.865,850.059,978.993,849.423,979.101z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M952.756,1135.346c3.546-0.074,6.884,0.05,9.988,0.375c5.265-11.064,9.184-20.216,11.423-28.226 c-2.442-1.88-4.756-3.851-6.955-5.884c-5.183-0.87-10.05-1.69-14.608-2.465c-1.665,4.767-5.102,9.441-9.807,14.12 C946.741,1120.856,950.036,1128.213,952.756,1135.346z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M970.606,1182.173c-2.298,0.782-4.646,1.633-7.037,2.552c0.213,4.042,0.257,7.994,0.148,11.854 c4.307-4.998,7.656-7.618,10.12-8.611c0.443-0.624,0.875-1.242,1.294-1.853C973.897,1185.348,972.388,1184.054,970.606,1182.173z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M933.238,1121.589c-2.457,1.925-5.074,3.861-7.817,5.813c4.224,3.399,8.548,6.421,13.07,9.138 c0.813-0.113,1.617-0.215,2.416-0.313C938.468,1131.707,935.911,1126.829,933.238,1121.589z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M979.395,1179.447c-0.252,0.07-0.506,0.142-0.76,0.214c0.067,0.254,0.13,0.503,0.188,0.745 C979.018,1180.084,979.206,1179.766,979.395,1179.447z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M966.697,1069.219c-0.785,1.662-1.654,3.231-2.597,4.67c1.638-0.53,3.268-1.092,4.887-1.693 C968.279,1071.209,967.514,1070.217,966.697,1069.219z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M923.075,1585.521c-3.286-5.37-6.277-10.789-8.888-16.105c-6.867,7.784-14.755,16.141-23.596,25.029 c5.204,3.943,11.25,6.784,17.842,9.118c5.612,1.987,11.201,3.402,16.767,4.346c0.968-4.548,1.968-9.346,3.001-14.41 C926.425,1590.865,924.713,1588.199,923.075,1585.521z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M935.364,1542.504c1.4-2.103,2.668-4.131,3.818-6.093c0.598-3.271,1.204-6.602,1.819-10.011 c0.268,1.781,0.528,3.543,0.782,5.289c0.997-1.954,1.841-3.821,2.548-5.61c-7.368-4.133-13.618-6.868-18.859-8.408 c-9.634,17.187-15.271,27.32-19.22,32.361c1.921,6.053,4.598,12.572,7.875,19.257c0.021,0.042,0.041,0.084,0.061,0.126 c0.137-0.155,0.28-0.314,0.416-0.468C923.172,1559.205,930.129,1550.368,935.364,1542.504z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M900.677,1513.815c5.204-5.141,10.845-10.078,16.969-14.717c-1.141,0.034-2.32,0.09-3.531,0.165 c-0.706,0.767-1.416,1.541-2.136,2.33c0.385-0.762,0.764-1.509,1.143-2.259c-2.704,0.188-5.575,0.472-8.621,0.858 c-6.324,0.8-13.396,2.031-21.232,3.703c4.482,3.041,9.071,6.36,13.766,9.985C898.256,1513.855,899.475,1513.831,900.677,1513.815 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M976.468,1537.143c-0.249,0.565-0.503,1.133-0.757,1.701c0.661,3.975,1.215,7.044,1.625,9.375 c1.387,0.932,2.754,1.816,4.101,2.654c3.01,1.874,5.915,3.512,8.712,4.943c1.916-5.47,3.937-11.257,6.07-17.368 C988.217,1539.693,981.146,1539.38,976.468,1537.143z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M974.898,1536.255c0.048-0.47,0.102-0.952,0.157-1.439c-0.295-1.859-0.606-3.873-0.932-6.064 c-0.944,0.573-2.012,1.241-3.223,2.028C971.492,1533.113,972.883,1534.922,974.898,1536.255z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M953.685,1531.704c2.59,1.651,5.297,3.452,8.116,5.398c3.705-2.711,6.687-4.754,9.1-6.322 c-0.737-2.911-0.226-6.636,1.869-11.257c-7.775-1.575-16.406-2.891-25.938-3.866c-0.13,3.074-0.973,6.554-2.502,10.423 C947.268,1527.727,950.386,1529.6,953.685,1531.704z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1C24",
                        d:
                          "M927.403,1514.227c6.856,0.321,13.327,0.805,19.429,1.429c0.313-7.396-3.504-12.438-11.844-14.887 C932.228,1505.64,929.708,1510.119,927.403,1514.227z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M961.307,831.411c-0.181,0.283-0.363,0.57-0.549,0.866c0.138-0.092,0.28-0.187,0.417-0.279 C961.219,831.801,961.263,831.608,961.307,831.411z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M957.32,851.035c0.09-0.515,0.18-1.031,0.274-1.555c0.331-1.842,0.691-3.744,1.076-5.7 c0.443-2.244,0.922-4.564,1.438-6.96c-0.927,0.272-1.858,0.545-2.794,0.819c-1.461,2.155-3.063,4.285-4.822,6.07 c-0.169,5.466-0.407,11.445-0.722,17.637c1.308,0.035,2.622,0.075,3.939,0.119c0.127-0.964,0.266-1.954,0.412-2.959 C956.467,856.131,956.866,853.641,957.32,851.035z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M945.648,861.221c1.244,0.017,2.492,0.04,3.746,0.067c0.218-5.236,0.427-9.941,0.628-14.162 C948.546,851.859,947.081,856.572,945.648,861.221z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M954.385,877.772c0.044-2.784,0.215-5.85,0.525-9.216c-0.994,1.309-2.246,2.927-3.84,4.901 c-0.093,1.431-0.191,2.862-0.292,4.291C951.989,877.754,953.191,877.761,954.385,877.772z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1005.706,858.287c-1.238,1.962-2.479,3.874-3.72,5.734c0.816,0.05,1.633,0.101,2.448,0.15 C1004.818,862.323,1005.24,860.367,1005.706,858.287z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M995.343,873.482c-0.631,0.85-1.26,1.683-1.887,2.5c4.732-0.124,4.695,0.794,1.125,3.569 c2.467,0.216,4.827,0.45,7.075,0.699c0.249-2.023,0.592-4.352,1.051-7.031C1000.092,873.358,997.643,873.443,995.343,873.482z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M984.005,817.058c2.692-1.713,5.076-3.208,7.159-4.496c0.466-0.48,0.916-0.996,1.353-1.539 c-4.187,1.871-9.326,3.933-14.952,5.712c0.025,0.011,0.05,0.021,0.074,0.032C979.586,817.612,981.783,817.682,984.005,817.058z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M899.959,1385.231c6.595-0.38,13.882,1.871,22.168,5.677c-2.577-3.789-5.05-7.782-7.397-11.964 c-4.664,1.718-9.688,3.752-15.089,6c-0.311,0.13-0.629,0.263-0.943,0.394C899.115,1385.291,899.536,1385.255,899.959,1385.231z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1015.589,1368.089c0.204-0.167,0.405-0.333,0.598-0.498c1.017-0.869,1.897-1.721,2.602-2.583 c2.075-2.536,2.675-5.165,1.185-8.57c-0.111-0.254-0.22-0.507-0.355-0.77c-0.052,0.191-0.109,0.382-0.172,0.572 c-0.586,1.773-1.64,3.499-2.989,5.222c-2.281,2.913-5.398,5.819-8.507,8.934c0.481,0.689,1.005,1.404,1.573,2.158 c0.933-0.654,1.823-1.282,2.667-1.889C1013.435,1369.772,1014.573,1368.92,1015.589,1368.089z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M893.892,1386.415c-0.738,0.653-1.477,1.272-2.217,1.87c1.516-0.638,3.003-1.264,4.467-1.878 c0.861-0.361,1.713-0.718,2.555-1.069c-0.915,0.102-1.816,0.257-2.705,0.468C895.285,1385.974,894.584,1386.173,893.892,1386.415 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1017.657,1352.617c0.663,0.885,1.215,1.722,1.66,2.516c0.1,0.179,0.213,0.362,0.302,0.536 c0.173-0.64,0.286-1.286,0.325-1.941c0.018-0.297,0.02-0.595,0.008-0.896c-0.026-0.659-0.126-1.328-0.307-2.008 c-1.121-4.219-5.376-8.884-14.662-14.479c-0.333,0.023-0.665,0.046-0.987,0.067c-0.066,0.93-0.13,1.829-0.189,2.699 C1010.528,1344.722,1014.998,1349.068,1017.657,1352.617z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M916.426,1378.329c6.415,5.683,12.301,9.535,17.508,12.291c7.25-2.645,14.021-6.05,19.954-10.348 C946.357,1370.613,934.078,1372.007,916.426,1378.329z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M963.202,1431.981c0.788,0.51,1.571,1.003,2.348,1.478c1.737-6.115,3.722-11.621,5.892-16.573 c-3.046-1.473-5.998-2.958-8.866-4.441C962.999,1418.194,963.207,1424.679,963.202,1431.981z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M957.609,1409.838c1.626,0.866,3.282,1.736,4.967,2.607c-0.307-4.169-0.726-7.954-1.265-11.368 c-0.003-0.021-0.007-0.041-0.01-0.062c-0.219-1.382-0.458-2.699-0.715-3.963c-1.564,1.029-3.162,1.995-4.776,2.927 C958.431,1401.854,959.164,1404.482,957.609,1409.838z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M971.442,1416.886c3.664,1.771,7.459,3.522,11.394,5.226c5.277,2.284,10.807,4.479,16.606,6.518 c-2.045-5.498-6.419-12.592-13.741-21.359c-1.245-4.035-2.083-7.533-2.601-10.537 C978.949,1402.25,974.96,1408.857,971.442,1416.886z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#009245",
                        d:
                          "M1013.395,1421.294c-0.939-0.894-1.833-1.773-2.683-2.638c-0.637-0.647-1.255-1.289-1.844-1.921 c-3.908-4.195-6.769-8.048-8.777-11.608c-0.767-0.406-1.517-0.808-2.247-1.204c1.74,6.83,3.016,15.286,3.345,25.313 c1.147,0.393,2.303,0.781,3.471,1.161c0.224,0.073,0.445,0.147,0.67,0.22c1.405,0.453,2.831,0.892,4.267,1.324 c2.41,0.725,4.865,1.418,7.364,2.077c1.874,0.494,3.766,0.974,5.69,1.428c0.354-1.649,0.656-3.438,0.935-5.317 C1019.716,1427.034,1016.335,1424.093,1013.395,1421.294z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M959.297,1228.95c-0.927,3.835-1.961,7.56-3.072,11.178c6.77,2.251,14.156,4.022,22.147,5.144 C972.836,1240.114,966.501,1234.675,959.297,1228.95z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M961.867,1216.166c0.621-3.883,1.108-7.869,1.436-11.961c-0.439-0.147-0.885-0.319-1.339-0.517 c-1.105,4.692-2.924,9.158-5.726,13.248c1.536,0.181,3.095,0.365,4.667,0.552C961.227,1217.044,961.55,1216.601,961.867,1216.166 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M941.11,1302.615c2.011-1.972,4.089-3.88,6.24-5.732c5.002-11.879,12.172-24.245,21.73-31.703 c-6.743-1.612-12.921-4.736-17.799-10.672c-5.08,13.48-10.627,25.281-14.399,35.618c-0.5,1.37-0.968,2.715-1.401,4.035 c1.877,2.792,2.395,5.104,0.554,7.142c-0.808,3.209-1.635,6.328-2.482,9.352c0.043-0.05,0.086-0.1,0.129-0.15 C936.064,1307.767,938.534,1305.14,941.11,1302.615z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M883.67,1185.499c0.759,7.401,0.762,13.985,0.173,19.776c0.019,0.007,0.037,0.015,0.057,0.022 c0.958-4.099,1.608-12.134,0.492-22.917c-0.056,0.048-0.116,0.097-0.172,0.145C884.025,1183.547,883.84,1184.542,883.67,1185.499 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M913.574,1162.415c1.176,1.011,2.346,2.138,3.508,3.396c1.828-2.871,3.623-5.768,5.377-8.691 c-1.762,1.033-3.465,2.042-5.124,3.033c-0.365,0.218-0.731,0.436-1.091,0.652 C915.338,1161.348,914.448,1161.885,913.574,1162.415z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M913.143,1171.883c-4.551,1.551-8.847,2.892-12.911,4.041c1.528,2.391,3.045,4.832,4.541,7.306 c0.268-0.115,0.549-0.219,0.847-0.301C908.167,1179.292,910.679,1175.61,913.143,1171.883z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M954.812,1141.003c-0.509-1.475-1.038-2.958-1.596-4.452c-0.15-0.401-0.306-0.804-0.459-1.205 c-2.72-7.133-6.016-14.49-9.959-22.08c-2.781,2.766-5.999,5.533-9.559,8.323c2.673,5.24,5.23,10.118,7.668,14.639 c0.452,0.838,0.899,1.663,1.343,2.477c3.779,2.076,7.705,3.97,11.864,5.689c1.854,0.767,3.696,1.502,5.527,2.206 c-0.448-0.547-0.906-1.096-1.369-1.645C957.162,1143.639,956.009,1142.321,954.812,1141.003z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1033.712,1227.353c-6.229-0.991-12.317-1.913-18.265-2.779c-3.055-0.445-6.074-0.875-9.052-1.291 c-1.692-0.236-3.372-0.468-5.039-0.695c-0.953,12.85-1.179,23.741,3.662,23.886c0.18-0.008,0.358-0.013,0.538-0.021 c-0.187,0.023-0.365,0.026-0.538,0.021c-9.524,0.42-18.408-0.044-26.646-1.201c4.541,4.232,8.542,8.274,12.068,12.142 c13.373-1.656,19.837,1.125,21.849,6.01c1.049-0.331,2.109-0.66,3.18-0.987c2.326-0.709,4.702-1.41,7.138-2.101 c3.218-0.913,6.531-1.81,9.947-2.694c2.766-0.716,5.604-1.422,8.505-2.121c0.312-0.075,0.625-0.15,0.938-0.225 c5.098-1.219,10.403-2.415,15.939-3.592c-0.845-7.685-2.49-14.908-4.554-20.691c-0.046-0.129-0.104-0.266-0.159-0.401 C1046.586,1229.45,1040.076,1228.365,1033.712,1227.353z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1080.844,1247.167c-2.685-1.713-5.414-3.513-8.211-5.424c0.089,2.332,0.187,4.64,0.281,6.926 C1075.511,1248.166,1078.155,1247.665,1080.844,1247.167z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M1110.26,1242.08c-4.939-1.13-9.828-2.209-14.666-3.245c2.464,1.456,5.038,2.867,7.779,4.218 c0.083,0.041,0.167,0.078,0.25,0.118C1105.811,1242.807,1108.017,1242.443,1110.26,1242.08z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M928.542,1153.586c-1.85,1.066-3.641,2.107-5.39,3.13c-1.675,3.62-3.298,7.094-4.874,10.439 c0.616,0.718,1.23,1.469,1.841,2.26c-1.185,0.434-2.353,0.854-3.507,1.263c-2.046,4.312-4.012,8.398-5.896,12.251 c4.384,0.859,10.293,3.679,17.754,9.082c4.339-2.24,10.722-4.56,19.735-7.985c0.79-8.711-0.338-24.839-3.14-28.503 c-0.32-0.416-4.237-2.572-9.806-5.774C932.949,1151.059,930.71,1152.337,928.542,1153.586z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M962.314,1171.767c1.365,1.929,2.646,3.651,3.846,5.184c2.033-0.836,4.143-1.717,6.344-2.652 c1.628,0.325,3.181,0.645,4.678,0.963c-0.878-2.28-2.025-4.816-3.439-7.542c-4.173-0.901-8.292-1.896-12.331-3.006 c0.518,4.39,1.098,8.951,1.51,13.557c0.053-0.021,0.104-0.042,0.156-0.063C962.873,1176.085,962.62,1173.939,962.314,1171.767z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M963.568,1184.726c-0.068,0.026-0.135,0.052-0.203,0.078c0.184,4.237,0.131,8.46-0.33,12.576 c0.23-0.274,0.457-0.539,0.681-0.8C963.825,1192.719,963.782,1188.768,963.568,1184.726z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M975.131,1186.115c3.78,2.348,4.995-0.209,3.691-5.708c-0.057-0.243-0.12-0.491-0.188-0.745 c-2.599,0.739-5.278,1.576-8.029,2.512C972.388,1184.054,973.897,1185.348,975.131,1186.115z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M961.859,76.793c0.831,0.066,1.677,0.143,2.535,0.231c0.588-1.073,1.173-2.172,1.756-3.292 C964.684,74.807,963.253,75.829,961.859,76.793z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M958.479,86.812c-2.413-1.16-4.689-2.334-6.843-3.516c-3.734,2.152-7.121,3.843-10.15,5.127 c2.963,2.95,5.735,5.633,8.329,8.065C952.521,94.646,955.466,91.24,958.479,86.812z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1012.826,90.188c0.163-0.104,0.329-0.207,0.495-0.31c-1.045-4.215-1.825-8.519-2.39-12.883 c-2.286-3.226-4.2-5.865-5.819-7.978c-0.394-0.132-0.788-0.265-1.183-0.394C1006.073,76.134,1008.997,83.348,1012.826,90.188z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M1018.124,87.263c3.924-1.85,8.49-3.356,13.879-4.329c-0.214-0.27-0.426-0.536-0.639-0.804 c-0.719-0.904-1.434-1.797-2.145-2.68c-6.036-3.347-12.401-6.195-18.938-8.618c0.168,2.067,0.386,4.121,0.65,6.162 C1012.998,79.912,1015.375,83.315,1018.124,87.263z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M938.326,77.665c0.028,0.141,0.055,0.288,0.083,0.43c1.128-0.259,2.318-0.491,3.565-0.695 c-1.2-0.818-2.349-1.634-3.441-2.449C938.453,75.846,938.381,76.748,938.326,77.665z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M938.534,74.951c0.258-2.84,0.651-5.57,1.166-8.193c-1.024,1.029-2.057,2.09-3.104,3.197 c0.001,0.029,0.002,0.055,0.003,0.083c0.345,1.343,0.681,2.745,1.006,4.207C937.912,74.481,938.219,74.716,938.534,74.951z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M937.606,74.246c-0.287-0.22-0.576-0.44-0.855-0.659c0.09,1.708,0.202,3.32,0.338,4.829 c0.397-0.102,0.803-0.201,1.216-0.297c0.008-0.151,0.013-0.305,0.021-0.455C938.093,76.489,937.852,75.353,937.606,74.246z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1008.164,590.911c0.96-0.451,1.973-0.952,3.017-1.481c-1.161,0.225-2.343,0.45-3.543,0.676 C1007.812,590.373,1007.989,590.643,1008.164,590.911z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M879.581,710.731c0.081-0.011,0.159-0.021,0.24-0.031c0.054-0.093,0.108-0.186,0.162-0.278 c-0.129,0.043-0.258,0.087-0.389,0.13C879.59,710.611,879.586,710.67,879.581,710.731z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1010.625,697.874c3.198-1.06,5.763-2.372,7.715-4.023c2.737-2.315,4.257-5.308,4.601-9.226 c0.122-1.382,0.098-2.88-0.073-4.505c-0.108-1.034-0.28-2.123-0.505-3.262c-1.077-5.439-3.469-12.103-7.166-20.337 c-1.361-3.031-2.908-6.287-4.617-9.756c-7.364-4.597-14.589-14.232-21.089-30.5c-33.314-23.447-31.308-25.081-11.679-25.839 c-2.196-3.024-3.846-6.081-4.379-9.244c-7.216,2.482-14.637,5.292-22.188,8.453c-0.827,11.737,0.842,22.663,4.768,35.649 c1.26,4.15,2.17,8.46,3.4,12.59c2.76,9.29-0.88,6.95,6.72,11.53c2.916,1.758,5.867,2.194,8.698,2.522 c3.622-5.841,7.461-11.905,11.543-18.217c-3.222,6.612-6.271,12.765-9.164,18.498c4.308,0.568,8.215,1.708,11.122,8.077 c-0.671,1.811-7.22,1.938-15.955,1.391c-2.777,5.373-5.39,10.306-7.846,14.818c6.373,0.637,6.183,10.349,2.158,23.273 c3.271-0.576,6.915,1.519,9.773,2.448c0.239,0.077,0.472,0.171,0.709,0.254C991.957,701.502,1003.053,700.384,1010.625,697.874z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M911.379,685.079c-3.139-3.744-6.217-7.378-9.237-10.911c-0.125,0.192-0.249,0.384-0.374,0.577 c-0.732,4.563-1.543,8.792-2.589,12.642c1.662,7.126,3.89,13.967,6.25,20.297c6.504-0.67,12.719-1.238,18.661-1.731 c0.202-0.017,0.404-0.034,0.605-0.05c1.557-1.618,3.066-3.161,4.529-4.63c-0.256-10.452,1.019-25.537,2.954-43.123 c-3.953-0.214-7.039-0.211-8.695,0.164c-5.006,1.129-9.857,3.146-14.511,5.609c-1.49,2.171-3.019,4.446-4.584,6.816 C906.62,675.373,908.944,680.147,911.379,685.079z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M916.974,606.138c5.472-3.002,10.935-5.811,16.364-8.435c-0.185-9.045,0.865-18.174,3.205-27.117 c-1.648,2.299-3.204,4.588-4.681,6.867c-3.279,5.059-6.149,10.064-8.669,14.999c0.035,0.032,0.069,0.062,0.104,0.094 c-0.096,0.089-0.194,0.179-0.291,0.268C920.72,597.319,918.726,601.765,916.974,606.138z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M935.139,632.847c-4.031,3.124-8.611,7.879-13.771,14.265c3.992-0.381,8.023-0.549,12.144-0.657 C934.031,642.026,934.577,637.48,935.139,632.847z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M935.139,632.847c1.511-1.171,2.945-2.112,4.304-2.825c-0.55-1.488-1.058-2.991-1.535-4.503 c-0.523-0.364-1.099-0.76-1.736-1.171C935.823,627.209,935.478,630.044,935.139,632.847z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M978.732,567.682c-0.289,0.296-0.569,0.59-0.833,0.883c-0.415,0.46-0.796,0.917-1.15,1.37 c0.154,0.798,0.31,1.575,0.466,2.36c0.603,1.089,1.262,2.149,1.975,3.175c0.727,1.046,1.51,2.058,2.347,3.032 c5.325-1.691,10.518-3.205,15.542-4.545c-1.461-2.225-2.909-4.419-4.343-6.579C988.226,567.817,983.552,567.937,978.732,567.682z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M959.413,677.427c0.069-0.026,0.136-0.05,0.204-0.075c2.923-5.089,6.044-10.386,9.385-15.912 c-3.237-0.245-6.684-0.557-10.187-0.894C959.168,665.582,959.365,671.21,959.413,677.427z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1108.782,519.552c-1.018,0.254-2.015,0.506-3.019,0.759c-7.438,1.872-14.49,3.699-21.161,5.48 c4.572,4.051,9.006,7.572,13.392,10.549c3.132-4.483,6.25-9.272,9.345-14.385C1107.82,521.159,1108.302,520.364,1108.782,519.552 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M992.792,374.668c5.602-6.78,11.546-12.24,17.598-15.84c-0.542-0.167-1.087-0.335-1.637-0.503 c-7.125-2.172-14.934-4.346-22.622-5.65c-0.523,19.636-17.992,31.029-22.217,42.925c2.588,0.553,5.148,1.193,7.674,1.921 C976.864,390.677,983.814,383.052,992.792,374.668z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M988.297,380.484c-3.509,4.849-6.846,10.197-9.946,15.893c3.081-0.594,5.943-1.113,8.597-1.558 C987.439,390.254,987.89,385.486,988.297,380.484z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M974.647,292.624c0.533,1.91,1.132,3.8,1.783,5.673c1.806,0.489,3.606,0.994,5.403,1.512 C979.52,297.49,977.13,295.099,974.647,292.624z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M1009.647,356.845c0.364,0.598,0.723,1.195,1.077,1.789c0.682-0.398,1.365-0.776,2.049-1.125 c-0.623,0.496-1.229,0.987-1.839,1.479c0.002,0.004,0.004,0.007,0.006,0.011c1.816,0.563,3.579,1.119,5.276,1.654 c-2.978-5.439-4.19-10.329-0.884-12.82c0.53-0.4,1.16-0.59,1.87-0.59c4.688,0,12.845,8.068,19.684,14.038 c-0.624-1.724-2.055-4.098-4.426-7.268c-0.253-0.338-0.518-0.686-0.792-1.043c-3.868-5.022-9.889-11.873-18.525-21.051 c-2.46-2.614-5.136-5.421-8.03-8.424c-3.717,1.976-8.064,3.95-13.068,5.923c1.143,1.841,2.298,3.664,3.459,5.469 C1000.399,342.497,1005.356,349.797,1009.647,356.845z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M992.792,374.668c-1.467,1.776-2.911,3.641-4.328,5.589c1.214,4.96,2.012,9.601,2.452,13.926 c20.929-3.165,27.427-1.026,29.719,5.217c0.747-2.291,1.199-4.6,1.368-6.93c0.052-0.717,0.078-1.436,0.08-2.158 c0.027-9.975-4.641-20.343-11.143-31.314c-0.005-0.001-0.009-0.003-0.014-0.004 C1004.129,364.479,998.103,369.708,992.792,374.668z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M912.768,321.824c1.682-1.607,3.38-3.216,5.086-4.837c-0.091-0.082-0.182-0.166-0.272-0.245 c-0.352-0.309-0.701-0.597-1.049-0.865c-5.267-4.061-10.154-3.408-14.724,4.332c-0.441,0.746-0.878,1.563-1.313,2.443 c-0.195,0.394-0.389,0.802-0.582,1.224c1.132,0.382,2.278,0.772,3.438,1.171C906.343,323.562,909.484,322.458,912.768,321.824z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M986.648,428.386c0.654,0.347,1.285,0.714,1.895,1.107c0.998-0.512,1.982-1.025,2.928-1.538 c-1.708-0.895-3.313-1.771-4.842-2.63c-0.333,0.689-0.68,1.354-1.039,1.995C985.942,427.681,986.294,428.037,986.648,428.386z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M982.829,423.113c-0.785-0.474-1.541-0.942-2.272-1.405c0.687,0.826,1.377,1.631,2.072,2.417 C982.696,423.788,982.763,423.453,982.829,423.113z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M975.497,1320.132c2.873-0.4,5.635-0.995,8.29-1.731c-4.037-4.408-9.659-4.581-17.57,2.298 C969.431,1320.754,972.523,1320.547,975.497,1320.132z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1029.395,1298.752c-0.262,2.834-0.682,5.914-1.274,9.266c2.654-0.344,5.243-0.868,7.724-1.684 C1034.162,1301.744,1032.026,1299.454,1029.395,1298.752z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1021.301,1335.241c-2.408,0.157-4.657,0.308-6.757,0.45c2.323,3.603,6.584,6.652,13.518,8.895 c2.696,0.872,5.8,1.621,9.347,2.235c1.022,0.177,2.07,0.346,3.167,0.5c-0.105-3.821-0.243-7.36-0.411-10.651 c-0.116-2.278-0.248-4.437-0.395-6.474c-5.374,1.849-11.175,2.329-17.535,1.942 C1021.933,1333.157,1021.622,1334.191,1021.301,1335.241z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M1005.989,1308.615c2.554-1.462,4.95-2.901,7.192-4.214c0.51-6.479-0.933-14.146-5.546-23.19 C1007.077,1291.683,1006.517,1300.74,1005.989,1308.615z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M998.257,1266.683c3.515-0.03,6.911,0.018,10.089,0.317c0.07-1.503,0.141-3.022,0.21-4.575 c0.199,1.537,0.23,3.073,0.12,4.609c11.39,1.142,19.906,5.625,20.946,21.583c6.972-13.596,8.234-24.272-17.208-24.886 c-0.038-0.104-0.082-0.205-0.124-0.307c-2.012-4.885-8.477-7.666-21.849-6.01 C993.368,1260.625,995.967,1263.714,998.257,1266.683z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M969.08,1265.18c-9.559,7.458-16.729,19.823-21.73,31.703c-1.171,2.78-2.224,5.532-3.161,8.188 c-1.529,4.338-2.75,8.417-3.674,11.937c-3.398,12.937-2.794,18.286,1.185,1.036c0.18-0.78,0.365-1.592,0.558-2.465 c8.258,3.353,15.902,4.858,22.97,5.094c15.163-13.194,33.399-27.887,40.486-42.99c-2.01-3.472-4.476-7.135-7.457-10.999 C988.756,1266.763,978.384,1267.405,969.08,1265.18z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1047.873,541.57c0.738,0.271,1.47,0.534,2.213,0.811c-1.366,0.367-2.707,0.701-4.058,1.047 c-11.492,11.127-30.219,21.703-53.292,23.95c1.434,2.16,2.881,4.354,4.343,6.579c20.86-5.566,38.844-8.202,51.618-8.692 c5.242-3.851,10.923-8.16,17.081-12.98c1.411,4.692,2.142,9.925,2.281,15.465c1.261,1,1.323,2.259,0.004,3.725 c-0.002,0.102-0.006,0.204-0.008,0.306c1.819-0.912,3.638-1.875,5.458-2.882c5.913-3.274,11.816-7.066,17.639-11.457 c-2.108-4.38-4.897-8.59-8.617-12.629c-5.521-5.989-10.942-11.401-16.085-16.898c-2.841-0.914-5.634-1.747-8.385-2.509 C1056.854,530.133,1053.33,535.865,1047.873,541.57z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M1033.426,646.521c1.493,1.023,3.01,2.063,4.558,3.124c1.643,1.126,3.306,2.267,5.011,3.438 c2.051,1.408,4.161,2.857,6.303,4.33c3.494,2.402,7.096,4.88,10.837,7.46c-3.01-3.83-5.938-7.649-8.8-11.454 c-1.545-2.053-3.073-4.102-4.577-6.145c-1.778-2.414-3.525-4.82-5.249-7.217C1038.915,642.677,1036.208,644.863,1033.426,646.521 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M956.72,480.281c-3.554-4.07-7.939-8.438-12.23-12.82c-5.238-1.997-10.978-5.647-17.25-10.898 c-0.633,0.302-1.256,0.594-1.88,0.886c-0.876,7.27-1.571,13.816-2.081,19.705c12.614,2.859,25.193,16.243,34.594,22.727 c0.753-0.212,1.43-0.449,2.041-0.707C958.086,493.434,957.055,487.061,956.72,480.281z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M986.502,593.77c2.404,2.208,7.776,3.662,21.662-2.858c-0.175-0.268-0.352-0.538-0.526-0.805 C1001.169,591.322,994.137,592.546,986.502,593.77z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M982.341,594.427c-0.338,0.053-0.665,0.105-1.005,0.158c0.254-0.495,0.479-0.927,0.688-1.32 c-0.258-0.97-0.513-1.962-0.767-2.961c-1.203,0.041-2.349,0.08-3.444,0.123c-19.629,0.758-21.635,2.392,11.679,25.839 C986.989,610,984.595,602.751,982.341,594.427z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M961.383,972.978c0.52-2.623,0.987-5.298,1.399-8.022c-4.242-1.173-8.2-2.334-11.895-3.479 c2.51,2.457,5.042,5.136,7.572,8.039c0.206,0.236,0.411,0.466,0.617,0.705c0.275,0.319,0.549,0.649,0.824,0.974 C960.395,971.78,960.889,972.374,961.383,972.978z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M950.149,961.248c0.244,0.076,0.492,0.153,0.738,0.229c-0.207-0.202-0.413-0.398-0.619-0.598 c-0.517-0.499-1.033-0.99-1.547-1.471c-4.751-4.443-9.392-8.113-13.754-11.091c-6.026-0.597-11.869-1.333-17.527-2.191 c0.669,0.974,1.339,1.954,2.011,2.94c6.84,2.577,13.19,5.042,19.289,8.383c3.1,1.106,6.463,2.236,10.09,3.385 C949.265,960.972,949.706,961.11,950.149,961.248z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M1005.97,1090.741c0.067,0.586,0.14,1.163,0.205,1.753c0.363-0.808,0.693-1.598,1.041-2.397 c2.376-5.459,4.419-10.723,6.154-15.793c0.042-0.123,0.086-0.247,0.128-0.37c-3.273,0.147-6.579,0.242-9.867,0.169 c0.544,3.238,1.043,6.55,1.502,9.928C1005.431,1086.236,1005.709,1088.475,1005.97,1090.741z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M983.722,939.851c1.824,0.779,3.589,1.571,5.304,2.375c-1.419-5.625-0.5-12.233,1.526-18.699 c-0.719-0.157-1.455-0.318-2.216-0.483c-0.247,0.897-0.498,1.809-0.754,2.739C986.385,930.135,985.095,934.849,983.722,939.851z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M992.77,924.015c0.514-2.942,0.976-5.626,1.391-8.075c0.149-0.88,0.291-1.725,0.427-2.543 c-1.538,3.218-2.946,6.654-4.036,10.131C991.315,923.694,992.054,923.856,992.77,924.015z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M880.639,141.148c0.427-0.378,0.863-0.764,1.306-1.154c-0.994,0.001-1.992,0.002-2.995,0.002 C879.518,140.378,880.08,140.762,880.639,141.148z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M902.234,150.649c0.479,0.146,0.958,0.292,1.432,0.437c-0.367-2.732-0.574-5.626-0.618-8.677 c-1.495,2.582-3.375,5.038-5.209,6.893c0.358,0.11,0.705,0.216,1.06,0.325C900.024,149.973,901.135,150.313,902.234,150.649z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M964.234,191.506c-2.551,2.955-8.143,6.873-17.76,11.953c-3.439,1.817-7.382,3.779-11.899,5.902 c-1.126,0.53-2.3,1.073-3.497,1.622c-6.329,2.905-13.655,6.089-22.083,9.574c-1.524,0.63-3.07,1.266-4.666,1.916 c1.578-0.63,3.123-1.248,4.672-1.868c7.407-2.965,14.486-5.822,21.214-8.557c1.572-0.639,3.123-1.271,4.657-1.897 c4.168-1.701,8.207-3.357,12.101-4.961c6.195-2.552,12.024-4.974,17.525-7.273c0.53-0.222,1.064-0.445,1.588-0.664 c1.133-1.415,2.317-2.53,3.537-3.365c0.058-0.197,0.109-0.39,0.163-0.585c0.368-1.335,0.629-2.609,0.779-3.827 c-1.597-0.155-3.189-0.341-4.77-0.551C965.573,189.687,965.063,190.546,964.234,191.506z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M898.701,195.633c-0.678,1.254,0.403,2.402,3.866,3.319c0.079,0.021,0.15,0.042,0.231,0.063 c1.154-0.525,2.293-1.043,3.425-1.559c0.132-0.06,0.267-0.121,0.398-0.181c-1.12-1.649-2.231-3.225-3.334-4.747 C900.865,193.587,899.236,194.643,898.701,195.633z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M929.543,186.742c-0.542-0.21-1.08-0.43-1.611-0.662c-4.548,0.783-8.988,1.711-12.986,2.717 c0.261,1.426,0.48,2.884,0.659,4.372C920.471,190.938,925.116,188.796,929.543,186.742z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1014.219,212.492c4.239-1.877,8.941-3.747,14.14-5.606c4.265-1.525,8.868-3.042,13.831-4.55 c2.333-2.189,4.722-4.46,7.179-6.829c-10.005,0.889-18.598,1.292-25.932,1.285c-7.213,7.93-13.64,14.768-19.282,20.62 c0.719-0.391,1.451-0.781,2.207-1.172C1008.784,214.989,1011.403,213.739,1014.219,212.492z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M986.155,290.842c-2.099,2.075-4.408,4.047-6.947,5.892C982.779,295.047,984.962,293.071,986.155,290.842 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M969.923,195.685c0.13-0.745,0.266-1.494,0.409-2.249c-0.237,0.14-0.473,0.29-0.707,0.45 c-1.221,0.835-2.404,1.95-3.537,3.365c-1.235,1.543-2.41,3.435-3.504,5.721C964.71,200.502,967.144,198.069,969.923,195.685z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1094.554,189.622c-3.348,0.544-6.599,1.052-9.762,1.529c0.006,0.155,0.011,0.31,0.017,0.466 C1087.97,190.948,1091.212,190.283,1094.554,189.622z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M981.759,267.731c0.703,1.808,1.428,3.572,2.115,5.285c2.761,6.889,4.885,12.96,2.281,17.826 c4.606-4.555,8.184-9.617,10.881-14.975C992.416,273.172,987.295,270.46,981.759,267.731z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M969.643,250.619c0.902-2.59,2.118-5.472,3.719-8.663c-1.144-1.768-2.116-3.876-2.909-6.29 c-1.246,5.034-2.679,9.774-4.274,14.252C967.19,250.308,968.339,250.551,969.643,250.619z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M967.405,262.423c-0.01-0.45-0.005-0.923,0.017-1.417c-1.574-0.707-3.17-1.416-4.786-2.125 c-0.006,0.013-0.011,0.025-0.017,0.038C964.554,260.168,966.134,261.341,967.405,262.423z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M967.405,262.423C967.668,274.048,977.86,271.322,967.405,262.423L967.405,262.423z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M1002.544,231.149c-0.598-3.339-1.388-6.578-2.336-9.671c-9.714,9.936-16.751,16.601-21.117,20.666 c-0.268,0.811-0.493,1.618-0.674,2.423C983.038,241.75,991.08,236.955,1002.544,231.149z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M977.795,249.331c1.107-0.349,2.276-0.775,3.507-1.277c-1.159-0.278-2.25-0.733-3.27-1.357 C977.908,247.579,977.83,248.457,977.795,249.331z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M992.531,65.292c-2.724-0.711-5.45-1.366-8.171-1.971c0.977,2.653,1.129,5.596,0.143,8.94 c0.144,0.294,0.289,0.588,0.431,0.882C988.549,70.313,990.802,67.453,992.531,65.292z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1010.28,70.832c-1.712-0.635-3.437-1.237-5.169-1.816c1.618,2.113,3.533,4.752,5.819,7.978 C1010.666,74.953,1010.448,72.899,1010.28,70.832z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1010.93,76.994c0.565,4.364,1.345,8.669,2.39,12.883c1.489-0.927,3.084-1.803,4.803-2.614 C1015.375,83.315,1012.998,79.912,1010.93,76.994z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M945.478,1559.603c-0.214-1.775-0.434-3.575-0.662-5.402c-3.068,1.418-6.393,3.253-9.988,5.583 c-1.006,5.297-1.987,10.383-2.941,15.265c-1.273,6.507-2.501,12.652-3.685,18.451c-1.034,5.063-2.034,9.862-3.001,14.41 c8.633,1.463,17.211,1.765,25.739,1.186c-1.357-11.537-2.797-26.86-4.952-45.214 C945.822,1562.473,945.652,1561.046,945.478,1559.603z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M1035.486,1569.525c0.12-1.088,0.22-2.173,0.305-3.256c0.257-3.297,0.351-6.564,0.261-9.772 c-0.111-3.996-0.504-7.896-1.183-11.651c-0.164-0.906-0.343-1.804-0.542-2.692c-0.831-3.722-1.967-7.273-3.423-10.6 c-0.724-1.654-1.528-3.251-2.413-4.786c-10.246,5.939-22.023,10.087-32.272,11.68c-2.133,6.111-4.154,11.898-6.07,17.368 c-7.498,21.406-13.388,37.972-18.076,50.182c11.882-2.595,23.67-6.459,35.37-10.816c9.811-3.654,18.353-8.676,26.198-14.475 c0.22-1.007,0.424-2.015,0.616-3.023C1034.775,1574.962,1035.186,1572.238,1035.486,1569.525z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0000FF",
                        d:
                          "M941.782,1531.689c-0.254-1.746-0.514-3.508-0.782-5.289c-0.615,3.409-1.22,6.74-1.819,10.011 c-0.522,2.852-1.037,5.653-1.546,8.401c-0.673,3.63-1.334,7.17-1.985,10.625c-0.125,0.662-0.25,1.326-0.374,1.981 c-0.06,0.317-0.119,0.629-0.179,0.945c3.33-2.806,6.415-5.363,9.272-7.692c-0.748-5.851-1.57-11.951-2.486-18.284 C941.85,1532.155,941.816,1531.922,941.782,1531.689z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M981.274,1463.338c-0.152-0.12-0.298-0.235-0.451-0.356c-3.175-2.509-6.591-5.217-10.262-8.132 c-0.167-0.133-0.327-0.259-0.495-0.393c-1.177,0.138-2.452,0.431-3.836,0.893c0.24,3.032,0.48,5.966,0.72,8.823 c0.222,2.634,0.444,5.192,0.666,7.68c0.548,6.142,1.094,11.846,1.635,17.142c4.397-1.98,8.771-3.966,13.034-6.116 C982.801,1475.25,982.651,1468.407,981.274,1463.338z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M972.809,1519.436c-0.013,0.029-0.026,0.057-0.039,0.086c-2.094,4.621-2.606,8.347-1.869,11.257 c1.211-0.787,2.279-1.455,3.223-2.028c0.325,2.191,0.636,4.206,0.932,6.064c0.95-8.312,2.935-19.151,4.625-30.17 c-2.821,0.975-5.646,1.765-8.446,2.351C971.777,1511.541,972.303,1515.679,972.809,1519.436z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M976.468,1537.143c4.678,2.236,11.749,2.549,19.752,1.306c10.25-1.593,22.027-5.741,32.272-11.68 c13.615-7.892,24.522-18.945,25.526-31.37c-32.978-8.936-19.732,7.413-43.078-9.279c-6.08,5.377-13.136,10.202-20.542,13.957 C986.839,1511.652,982.255,1524.021,976.468,1537.143z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M975.711,1538.845c-0.401,0.896-0.783,1.782-1.195,2.685c0.051-1.583,0.185-3.352,0.383-5.276 c-2.015-1.333-3.406-3.142-3.997-5.475c-2.413,1.568-5.395,3.61-9.1,6.322c-4.596,3.363-10.319,7.772-17.432,13.57 c-2.857,2.329-5.942,4.886-9.272,7.692c-2.823,2.379-5.801,4.916-8.988,7.67c3.071-2.403,5.973-4.468,8.719-6.249 c3.595-2.33,6.92-4.165,9.988-5.583c0.605-0.28,1.198-0.541,1.784-0.789c19.33-8.2,27.985,0.346,30.62,1.383 c0.614,0.242,0.901,0.074,0.921-0.808c0.021-0.955-0.272-2.747-0.803-5.766C976.926,1545.889,976.372,1542.82,975.711,1538.845z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M998.641,1465.271c0.058-0.359,0.119-0.72,0.175-1.077c0.115-0.732,0.228-1.46,0.334-2.183 c0.228-1.555,0.437-3.088,0.625-4.599c0.084-0.671,0.159-1.332,0.236-1.994c0.134-1.162,0.256-2.309,0.366-3.445 c0.341-3.492,0.582-6.864,0.724-10.104c0.035-0.793,0.061-1.573,0.085-2.351c0.109-3.586,0.111-7.022,0.004-10.281 c-0.329-10.027-1.605-18.483-3.345-25.313c-6.322-3.432-11.268-6.483-15.051-9.188c0.085,0.639,0.188,1.306,0.308,1.999 c0.518,3.004,1.356,6.501,2.601,10.537c7.322,8.767,11.696,15.861,13.741,21.359c3.786,10.179-0.464,14.851-9.102,14.329 c-5.753-0.348-13.444-2.997-21.991-7.849c-0.924-0.525-1.857-1.074-2.799-1.65c-0.777-0.475-1.56-0.969-2.348-1.478 c-3.697-2.391-7.504-5.16-11.346-8.308c-1.28,2.665-2.753,5.635-4.436,8.959c-1.032,2.039-2.141,4.21-3.33,6.523 c-4.076,7.93-9.09,17.534-15.115,29.198c-2.897,5.609-6.03,11.696-9.405,18.304c-0.611,1.196-1.23,2.41-1.857,3.641 c-1.485,2.914-3.014,5.924-4.59,9.036c-0.38,0.75-0.758,1.497-1.143,2.259c0.72-0.789,1.43-1.564,2.136-2.33 c3.892-4.228,7.573-8.111,11.055-11.669c5.471-5.591,10.447-10.376,14.971-14.431c11.321-10.148,19.808-15.715,26.089-17.814 c1.384-0.462,2.659-0.755,3.836-0.893c2.35-0.276,4.303,0.067,5.908,0.941c2.502,1.362,4.163,4.006,5.192,7.568 c0.036,0.124,0.073,0.246,0.108,0.373c1.377,5.069,1.527,11.912,1.011,19.54c5.142-2.593,10.116-5.438,14.761-8.826 c0.011-0.054,0.023-0.109,0.033-0.162C997.67,1470.949,998.187,1468.078,998.641,1465.271z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M951.856,1423.673c2.89-6.019,4.774-10.468,5.752-13.836c1.556-5.355,0.822-7.983-1.799-9.859 c-6.32,3.649-13.003,6.533-19.879,8.487C941.161,1414.24,946.539,1419.317,951.856,1423.673z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M912.316,1374.502c0.786,1.507,1.595,2.982,2.414,4.442c2.346,4.182,4.82,8.175,7.397,11.964 c0.641,0.942,1.289,1.869,1.942,2.787c3.362-0.882,6.659-1.906,9.866-3.076c-5.207-2.757-11.093-6.608-17.508-12.291 C915.079,1377.135,913.709,1375.865,912.316,1374.502z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M975.056,1534.816c-0.056,0.488-0.109,0.969-0.157,1.439c-0.198,1.923-0.332,3.693-0.383,5.276 c0.412-0.904,0.795-1.789,1.195-2.685c0.254-0.568,0.508-1.136,0.757-1.701c5.787-13.122,10.371-25.491,13.93-37.066 c-3.517,1.783-7.113,3.322-10.717,4.568C977.99,1515.665,976.006,1526.504,975.056,1534.816z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M977.37,1390.393c0.17,0.157,0.342,0.315,0.522,0.476c1.35,1.202,2.974,2.49,4.901,3.867 c3.783,2.705,8.729,5.756,15.051,9.188c0.729,0.396,1.48,0.798,2.247,1.204c1.576,0.836,3.237,1.694,4.974,2.573 c1.707,0.864,3.495,1.75,5.362,2.657c1.049,0.509,2.122,1.025,3.222,1.548c1.272,0.605,2.568,1.216,3.911,1.839 c2.459,1.141,5.049,2.317,7.751,3.522c0.869-5.993,2.029-11.989,4.131-16.96c-2.485-3.903-4.754-7.293-6.821-10.266 c-4.001-5.754-7.25-9.953-9.864-13.304c-0.767-0.984-1.481-1.896-2.142-2.753c-0.381-0.494-0.744-0.969-1.091-1.429 c-0.568-0.753-1.092-1.468-1.573-2.158c-3.804-5.449-4.986-9.377-4.772-19.23c0.015-0.715,0.038-1.46,0.068-2.24 c0.027-0.721,0.061-1.473,0.1-2.254c0.009-0.17,0.017-0.337,0.026-0.51c0.109-2.112,0.257-4.448,0.436-7.051 c0.06-0.869,0.123-1.768,0.189-2.699c-0.78,0.053-1.519,0.103-2.233,0.151c-1.342,8.179-4.082,16.142-7.917,23.644 c0.406,5.643,0.683,11.218,0.933,16.324c-3.919-0.39-7.95-0.456-11.493-0.106c-2.883,3.573-6.032,6.945-9.388,10.094 C974.697,1387.693,975.843,1388.983,977.37,1390.393z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1041.257,1420.092c-0.257,1.235-0.544,2.467-0.852,3.693c1.243,0.521,2.506,1.047,3.791,1.578 C1043.192,1423.541,1042.214,1421.789,1041.257,1420.092z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1007.635,1281.211c-0.589-1.154-1.228-2.33-1.922-3.529c-7.087,15.103-25.322,29.796-40.486,42.99 c-3.365,2.928-6.577,5.783-9.483,8.552c-5.446,5.189-9.813,10.077-12.073,14.585c-1.54,3.072-2.105,5.968-1.366,8.663 c1.75-2.912,3.438-5.622,5.069-8.15c3.568-5.527,6.858-10.155,9.894-13.975c3.27-4.116,6.243-7.294,8.949-9.647 c7.911-6.879,13.533-6.706,17.57-2.298c0.288,0.315,0.571,0.645,0.844,1.002c1.472-4.316,4.371-7.644,10.682-9.17 c3.392-0.818,6.981-1.177,10.657-1.348c0.006-0.09,0.012-0.18,0.018-0.271C1006.517,1300.74,1007.077,1291.683,1007.635,1281.211 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#534741",
                        d:
                          "M1008.556,1262.426c-0.07,1.553-0.14,3.072-0.21,4.575c0.111,0.01,0.22,0.023,0.33,0.034 C1008.786,1265.499,1008.755,1263.963,1008.556,1262.426z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M941.722,1230.088c-0.58,1.045-1.166,2.107-1.761,3.199c0.753,0.39,1.513,0.775,2.287,1.153 c0.094,0.046,0.189,0.09,0.283,0.135c-0.069-0.328-0.133-0.668-0.199-1.002C942.11,1232.448,941.906,1231.289,941.722,1230.088z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1002.892,1194.239c-0.5-14.193-5.283-20.554-23.998,0.439c-0.953,3.825-3.734,8.051-8.018,9.607 c-2.768,3.497-5.763,7.443-9.009,11.882c-0.318,0.435-0.64,0.878-0.963,1.322c-0.94,1.294-1.902,2.63-2.883,4.006 c-0.961,1.347-1.937,2.723-2.938,4.149c1.441,1.115,2.837,2.214,4.213,3.308c7.204,5.725,13.539,11.163,19.075,16.322 c8.239,1.157,17.123,1.621,26.646,1.201c-4.842-0.145-4.615-11.035-3.662-23.886c0.258-3.479,0.568-7.099,0.846-10.69 c0.195-2.523,0.374-5.03,0.506-7.462c0.043-0.792,0.081-1.575,0.114-2.348C988.973,1200.12,996.403,1197.673,1002.892,1194.239z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1004.984,1336.346c2.772-0.19,5.941-0.41,9.56-0.655c2.101-0.142,4.349-0.293,6.757-0.45 c0.321-1.05,0.632-2.083,0.933-3.102c-6.006-0.366-12.511-1.502-19.641-3.006c-0.145,2.491-0.425,4.97-0.829,7.431 c0.713-0.048,1.453-0.097,2.233-0.151C1004.318,1336.391,1004.651,1336.369,1004.984,1336.346z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M956.225,1240.128c-1.891-0.629-3.733-1.294-5.528-1.993c-1.303-0.507-2.578-1.034-3.83-1.575 c-1.481-0.64-2.927-1.302-4.337-1.985c0.536,2.536,1.17,4.871,1.89,7.027c0.258,0.772,0.528,1.518,0.808,2.244 c1.661,4.303,3.706,7.808,6.052,10.663c4.878,5.936,11.056,9.059,17.799,10.672c9.304,2.225,19.676,1.583,29.177,1.503 c-2.29-2.969-4.889-6.058-7.816-9.268c-3.527-3.868-7.528-7.911-12.068-12.142 C970.381,1244.15,962.995,1242.379,956.225,1240.128z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1005.557,1246.453c-0.181,0.009-0.358,0.013-0.538,0.021 C1005.192,1246.479,1005.37,1246.476,1005.557,1246.453z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M919.454,1209.935c0.397,0.801,0.789,1.599,1.174,2.393c0.428-0.25,0.834-0.493,1.22-0.73 c-0.358-1.582-0.65-3.023-0.864-4.341C920.454,1208.159,919.943,1209.052,919.454,1209.935z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M928.469,1192.011c-7.461-5.403-13.37-8.223-17.754-9.082c-0.945,1.933-1.872,3.813-2.778,5.634 c2.263,3.888,4.46,7.825,6.557,11.748c2.796-1.487,5.661-2.988,8.565-4.497C924.312,1194.455,926.082,1193.244,928.469,1192.011z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M904.773,1183.229c0.098,0.162,0.195,0.325,0.293,0.488c0.185-0.263,0.37-0.525,0.554-0.788 C905.321,1183.011,905.041,1183.114,904.773,1183.229z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M1029.395,1298.752c0.097-1.044,0.173-2.057,0.227-3.035c0.143-2.588,0.14-4.949-0.001-7.101 c-1.04-15.958-9.556-20.442-20.946-21.583c-0.11-0.011-0.219-0.024-0.33-0.034c-3.178-0.299-6.574-0.347-10.089-0.317 c2.98,3.864,5.446,7.527,7.457,10.999c0.694,1.199,1.334,2.375,1.922,3.529c4.613,9.044,6.056,16.711,5.546,23.19 c-0.118,1.504-0.34,2.945-0.653,4.323c5.242-0.055,10.535-0.05,15.593-0.705 C1028.714,1304.666,1029.133,1301.587,1029.395,1298.752z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M933.419,1245.687c0.709-1.384,1.412-2.749,2.103-4.072c1.524-2.92,3.003-5.693,4.439-8.328 c0.595-1.092,1.181-2.154,1.761-3.199c0.374-0.674,0.746-1.341,1.114-1.995c0.026-0.046,0.051-0.09,0.076-0.135 c-3.977,1.687-8.839,3.151-13.707,4.066C931.124,1237.129,932.573,1241.764,933.419,1245.687z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1002.892,1194.239c-6.489,3.435-13.918,5.882-0.07,7.849c3.08,0.438,7.21,0.852,12.641,1.248 c3.299-4.574,5.364-8.585,6.335-12.034c3.219-11.44-5.622-16.685-21.563-15.678c-3.964,0.25-8.37,0.891-13.135,1.915 C1016.652,1184.958,1010.407,1190.261,1002.892,1194.239z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M970.606,1182.173c2.751-0.936,5.431-1.773,8.029-2.512c0.254-0.072,0.508-0.144,0.76-0.214 c2.66-0.741,5.231-1.376,7.706-1.908c-1.81-0.454-3.759-0.917-5.846-1.388c-1.301-0.293-2.657-0.59-4.071-0.89 c-1.497-0.317-3.05-0.638-4.678-0.963c-2.201,0.935-4.311,1.816-6.344,2.652c-1.05,0.432-2.075,0.849-3.081,1.257 c-0.053,0.021-0.104,0.042-0.156,0.063c0.194,2.172,0.348,4.354,0.442,6.533c0.068-0.026,0.135-0.052,0.203-0.078 C965.96,1183.806,968.308,1182.955,970.606,1182.173z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M963.303,1204.206c2.877,0.964,5.416,0.862,7.573,0.079c4.284-1.556,7.065-5.783,8.018-9.607 c1.144-4.593-0.35-8.605-5.057-6.709c-2.465,0.993-5.813,3.614-10.12,8.611c-0.225,0.261-0.451,0.526-0.681,0.8 c-0.24,2.136-0.585,4.245-1.071,6.309C962.418,1203.887,962.864,1204.059,963.303,1204.206z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M928.469,1192.011c-2.388,1.233-4.157,2.444-5.41,3.804c2.886-1.5,5.809-3.007,8.805-4.528 c-4.324,5.614-7.915,10.929-10.88,15.971c0.214,1.318,0.506,2.759,0.864,4.341c0.067-0.042,0.139-0.084,0.205-0.125 c10.91-6.81,22.6-10.49,25.67-24.11c0.204-0.903,0.363-2.039,0.48-3.337C939.191,1187.451,932.808,1189.771,928.469,1192.011z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1001.088,1074.007c-0.978-0.051-1.953-0.117-2.923-0.208c0.074,0.169,0.148,0.339,0.22,0.508 C999.281,1074.208,1000.181,1074.108,1001.088,1074.007z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1002.261,1089.774c-0.301-4.943-1.614-10.153-3.876-15.467c-2.363,0.261-4.687,0.516-6.97,0.764 c-4.832,0.525-9.49,1.024-13.96,1.496c7.403,6.566,15.505,13.606,24.367,21.139c0.299-1.65,0.469-3.345,0.503-5.08 c0.013-0.696-0.001-1.4-0.03-2.107C1002.284,1090.27,1002.276,1090.023,1002.261,1089.774z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M1033.027,1039.74c-3.539-1.814-6.901-3.431-10.092-4.859c-1.709,8.12-5.219,15.62-11.792,22.972 c14.262,3.455,31.706,0.662,47.382-3.473C1049.128,1048.492,1040.661,1043.652,1033.027,1039.74z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M925.575,1048.594c0.35-0.408,0.699-0.816,1.052-1.238c-0.632-0.45-1.245-0.745-1.846-0.866 C925.046,1047.205,925.311,1047.903,925.575,1048.594z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M934.778,1036.611c-2.731,3.955-5.475,7.545-8.151,10.745c2.155,1.534,4.523,4.871,7.332,9.353 c1.915-2.064,3.932-4.245,6.824-6.426c1.602-1.208,3.236-2.184,4.898-2.975C941.712,1043.49,938.082,1039.923,934.778,1036.611z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M915.487,1016.218c4.7,5.313,10.987,12.066,19.291,20.392c2.959-4.285,5.899-9.007,8.721-14.155 c-1.124-0.563-2.258-1.121-3.411-1.667c-4.751-2.249-9.75-4.337-14.978-6.245c-1.42-0.518-2.855-1.024-4.309-1.514 c-1.779-0.599-3.584-1.175-5.414-1.731c-0.351,0.144-0.7,0.287-1.046,0.425C914.724,1013.253,915.105,1014.749,915.487,1016.218z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M967.212,1101.611c-6.094-5.635-11.292-11.755-15.781-17.802c2.71,5.286,2.91,10.362,1.173,15.337 C957.162,1099.921,962.029,1100.741,967.212,1101.611z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M964.1,1073.889c0.943-1.439,1.812-3.008,2.597-4.67c0.254-0.537,0.497-1.084,0.734-1.638 c-1.63-1.477-3.225-2.93-4.778-4.353c-5.718,0.506-9.846,3.2-16.769,6.366c-0.956,0.437-2.013,0.925-3.141,1.442 c1.222,1.936,2.512,3.929,3.876,5.955c0.285,0.317,0.552,0.632,0.819,0.946C953.03,1077.034,958.612,1075.664,964.1,1073.889z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M920.729,1048.646c1.024-1.378,2.046-2.08,3.099-2.201c0.315-0.036,0.632-0.02,0.953,0.045 c0.601,0.122,1.214,0.417,1.846,0.866c2.676-3.2,5.42-6.791,8.151-10.745c-8.304-8.326-14.592-15.079-19.291-20.392 c-1.168-1.32-2.235-2.549-3.213-3.693c-1.351,0.506-2.662,0.964-3.935,1.375c0.89,3.104,1.71,6.705,2.298,10.75 c0.641,4.41,1.003,9.348,0.869,14.752c-0.065,2.632-0.25,5.375-0.576,8.219c-0.205,1.79-0.468,3.62-0.792,5.489 c2.412,1.146,4.719,2.28,6.907,3.4c0.156-0.453,0.312-0.888,0.466-1.307C918.609,1052.223,919.67,1050.071,920.729,1048.646z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M955.303,995.661c-2.365,6.919-5.057,13.366-7.948,19.328c-1.252,2.582-2.541,5.069-3.856,7.468 c-2.822,5.148-5.762,9.87-8.721,14.155c3.304,3.313,6.934,6.879,10.903,10.697c9.632-4.588,20.198-2.78,30.953-1.475 c9.51,1.15,12.58,3.59,19.74-4.1c4.64-5,7.03-13.65,8.24-20.15c2.71-14.56-4.37-23.92-7.22-37.62c0.1,0.54,0.14,0.79,0.14,0.85 c-0.1-0.17-0.94-4.04-0.27-1.49c-4.03-15.26,18.49-1.07,21.36,3.96c3.96,6.92,4.8,12.99,5.3,20.93 c0.551,8.588,0.688,16.344-0.428,23.581c2.216-3.174,4.16-6.433,5.801-9.752c4.698-9.508,6.883-19.513,5.695-29.446 c-0.357-2.986-1.018-5.965-2.009-8.923c-0.541-1.614-1.181-3.221-1.921-4.819c-1.599-3.451-3.666-6.859-6.251-10.198 c-0.412-0.533-0.838-1.063-1.277-1.592c-0.953-1.15-1.975-2.291-3.054-3.422c-2.145-2.248-4.543-4.456-7.205-6.619 c-15.348-0.672-22.21-6.719-24.249-14.797c-1.715-0.804-3.48-1.596-5.304-2.375c-4.654-1.987-9.664-3.891-15.046-5.7 c-1.21,0.914-2.48,1.818-3.816,2.69c0.011,9.89-0.737,19.265-2.077,28.115c-0.412,2.724-0.879,5.398-1.399,8.022 c-0.523,2.64-1.093,5.233-1.715,7.769c2.083,0.219,4.204,0.437,6.365,0.653c-2.795,2.421-5.556,4.581-8.278,6.505 c-0.661,2.276-1.364,4.5-2.095,6.684C955.54,994.946,955.424,995.307,955.303,995.661z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M933.959,1056.709c-2.809-4.482-5.177-7.82-7.332-9.353c-0.352,0.421-0.702,0.83-1.052,1.238 c-2.536,2.958-4.999,5.573-7.317,7.825c-0.164,0.16-0.324,0.309-0.488,0.465c3.634,1.878,6.961,3.721,9.987,5.531 C930.234,1060.709,932.048,1058.768,933.959,1056.709z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M979.734,1067.618c-3.434-1.607-6.776-3.486-10.611-4.095c-2.448-0.39-4.549-0.466-6.471-0.296 c1.553,1.423,3.148,2.876,4.778,4.353c1.325,1.201,2.673,2.418,4.05,3.655C974.273,1070.129,977.027,1068.921,979.734,1067.618z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M942.742,1071.036c-0.514,0.236-1.043,0.478-1.588,0.727c2.103,1.77,3.92,3.512,5.465,5.228 C945.254,1074.964,943.964,1072.972,942.742,1071.036z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#39B54A",
                        d:
                          "M967.212,1101.611c2.199,2.033,4.513,4.004,6.955,5.884c6.333,4.877,13.513,9.147,21.693,12.357 c1.154,0.453,2.328,0.885,3.523,1.294c1.326,0.454,2.678,0.88,4.055,1.278c3.262,0.941,6.668,1.716,10.226,2.303 c2.18,0.36,4.417,0.648,6.713,0.86c4.853,0.449,9.965,0.564,15.363,0.28c-12.388-10.067-23.662-19.445-33.918-28.163 c-8.862-7.533-16.964-14.573-24.367-21.139c-2.045-1.814-4.034-3.59-5.974-5.332c-0.829,0.328-1.66,0.65-2.495,0.96 c-1.619,0.601-3.249,1.163-4.887,1.693c-5.487,1.775-11.07,3.146-16.662,4.049c1.684,1.989,3.006,3.944,3.994,5.872 C955.92,1089.856,961.118,1095.976,967.212,1101.611z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M955.503,941.692c3.434-1.321,6.541-3.012,9.356-4.85c1.336-0.872,2.607-1.777,3.816-2.69 c2.311-1.745,4.4-3.523,6.294-5.164c3.74-3.242,6.724-5.954,9.176-6.844c1.467,0.313,2.861,0.613,4.191,0.902 c0.761,0.165,1.498,0.326,2.216,0.483c1.09-3.477,2.498-6.912,4.036-10.131c2.795-5.851,6.011-10.983,8.499-14.344 c2.604-3.519,4.407-5.097,4.084-3.519c5.762-0.926,10.302-1.873,13.734-2.822c3.904-1.08,6.368-2.164,7.546-3.229 c1.9-1.716,0.458-3.379-3.679-4.889c-4.631-1.689-12.637-3.185-23.115-4.345c-2.248-0.249-4.608-0.482-7.075-0.699 c-6.655,5.174-25.587,16.809-48.802,40.224c2.141-10.111,3.732-24.844,4.854-40.034c-10.186,0.787-22.254,1.578-36.411,2.238 c0.912,2.647,1.817,5.252,2.716,7.813c6.89-1.814,14.711-2.82,23.533-2.825c-6.495,5.77-12.625,11.407-18.429,16.898 c6.604,17.503,13.232,31.828,20.969,40.537c0.974-0.056,1.929-0.145,2.863-0.265 C949.345,943.692,952.546,942.829,955.503,941.692z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M1086.966,938.409c-0.162,0.629-0.326,1.258-0.494,1.884c1.296-0.478,2.606-0.966,3.934-1.468 C1089.237,938.684,1088.095,938.546,1086.966,938.409z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M969.761,878.097c-0.063-0.002-0.126-0.004-0.189-0.006c-4.873-0.163-9.947-0.272-15.188-0.319 c-1.194-0.011-2.397-0.018-3.608-0.023c-0.047,0.664-0.095,1.328-0.144,1.991C957.956,879.175,964.312,878.61,969.761,878.097z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M989.026,942.226c2.038,8.078,8.901,14.126,24.249,14.797c3.554,0.156,7.57,0.019,12.079-0.444 c10.752-1.103,24.349-4.081,41.405-9.496c1.475-2.456,2.614-4.439,2.986-5.5c0.564-1.611,1.102-3.308,1.624-5.044 c-2.64-0.314-5.138-0.609-7.51-0.888c-3.914-0.46-7.478-0.875-10.719-1.249c-2.54-0.293-4.881-0.561-7.046-0.807 c-44.236-5.031-13.728-0.81-52.877-9.482c-0.147-0.033-0.297-0.066-0.446-0.099c-0.716-0.158-1.455-0.321-2.218-0.488 C988.525,929.993,987.606,936.601,989.026,942.226z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M993.456,875.982c-4.012,0.105-11.456,0.957-23.074,2.056c-0.207,0.02-0.41,0.039-0.62,0.059 c-5.45,0.513-11.805,1.078-19.128,1.644c-1.122,15.19-2.713,29.923-4.854,40.034c23.215-23.414,42.147-35.05,48.802-40.224 C998.15,876.776,998.188,875.858,993.456,875.982z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M950.633,879.741c0.049-0.663,0.097-1.327,0.144-1.991c0.102-1.429,0.199-2.861,0.292-4.291 c1.594-1.975,2.846-3.593,3.84-4.901c6.127-8.069,2.458-4.41,8.711-0.354c1.917,1.244,4.77,2.524,9.123,3.516 c0.165,0.038,0.331,0.075,0.5,0.112c0.922,0.2,1.91,0.387,2.967,0.558c4.788,0.777,11.01,1.23,19.133,1.093 c2.3-0.039,4.749-0.123,7.364-0.263c4.053-0.216,8.501-0.562,13.375-1.057c7.746-0.786,16.58-1.954,26.658-3.593 c5.412-0.88,11.176-1.893,17.331-3.059c-5.367,0.222-10.88,0.29-16.499,0.245c-0.381-0.003-0.763-0.008-1.145-0.012 c-10.22-0.109-20.781-0.583-31.456-1.188c-2.175-0.123-4.354-0.252-6.536-0.384c-0.816-0.049-1.632-0.1-2.448-0.15 c-5.321-0.328-10.653-0.67-15.969-1c-1.473-0.091-2.943-0.181-4.413-0.27c-0.525-0.032-1.049-0.063-1.574-0.095 c-1.319-0.079-2.636-0.156-3.951-0.231c-3.903-0.224-7.788-0.43-11.642-0.609c-0.078-0.004-0.155-0.007-0.233-0.01 c-1.909-0.088-3.81-0.168-5.702-0.24c-0.933-0.036-1.864-0.068-2.792-0.099c-1.318-0.044-2.631-0.084-3.939-0.119 c0.314-6.193,0.553-12.171,0.722-17.637c-0.772,0.783-1.574,1.497-2.407,2.119c-0.021,0.429-0.041,0.86-0.062,1.299 c-0.201,4.221-0.41,8.926-0.628,14.162c-1.254-0.028-2.503-0.05-3.746-0.067c-2.225-0.031-4.432-0.045-6.62-0.04 c-7.002,0.017-13.8,0.235-20.315,0.734c-3.753,0.287-7.411,0.668-10.96,1.158c2.217,6.467,4.363,12.793,6.468,18.904 C928.379,881.318,940.447,880.528,950.633,879.741z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M955.251,758.883c-0.351,4.148-0.721,8.389-1.113,12.734c-6.367,16.514-34.788,27.6-31.916-4.303 c-2.39,1.258-4.69,1.958-6.845,1.979c-0.974,17.308,1.76,29.271,6.794,37.314c2.222,3.551,4.894,6.336,7.893,8.479 c4.33,3.096,9.342,4.853,14.675,5.637c10.478-21.742,26.774-30.181,51.524-29.5c-0.69-9.153,0.694-17.923,0.622-26.746 C981.132,762.408,967.375,760.511,955.251,758.883z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M977.455,831.61c3.599-1.106,7.118-2.204,10.559-3.294c15.291-4.844,29.019-9.529,41.169-14.042 c-1.019-0.563-2.043-1.107-3.08-1.61c-23.083-11.219-39.952-9.211-54.645,5.823c2.081-0.535,4.124-1.125,6.106-1.751 c5.627-1.779,10.765-3.841,14.952-5.712c2.033-0.909,3.84-1.771,5.369-2.534c-1.766,1.042-3.987,2.381-6.722,4.073 c-2.083,1.288-4.467,2.783-7.159,4.496c-1.307,0.832-2.689,1.716-4.147,2.655c-4.028,2.594-8.641,5.608-13.887,9.089 c-0.113,0.075-0.225,0.149-0.338,0.224c-1.439,0.956-2.922,1.943-4.457,2.97c-0.137,0.092-0.279,0.187-0.417,0.279 c-1.052,1.67-2.198,3.524-3.444,5.363c0.936-0.273,1.868-0.546,2.794-0.819C966.082,835.065,971.865,833.328,977.455,831.61z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M1063.059,800.259c7.942-3.747,14.585-7.344,19.936-10.781c4.175-2.682,7.561-5.267,10.157-7.751 c7.978-7.634,8.496-14.315,1.537-19.927c-3.774-3.044-9.742-5.775-17.918-8.172c-2.598-0.762-5.423-1.489-8.466-2.183 c-4.277-0.975-8.992-1.883-14.148-2.722c-14.118,3.198-29.057,3.403-42.653,1.13c-0.108,4.657-0.078,9.105-0.096,13.448 c3.635,1.677,7.219,3.168,10.738,4.407c-3.687-0.458-7.255-0.909-10.76-1.355c-0.105,9.033-0.613,17.701-3.252,26.94 c13.237,2.337,25.728,7.541,36.824,14.859c3.842-1.563,7.481-3.103,10.919-4.619 C1058.377,802.429,1060.772,801.338,1063.059,800.259z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M973.046,738.997c-1.568,0.016-3.226,0.059-4.982,0.131c1.72,0.999,3.443,2.008,5.166,3.023 c6.623,0.208,12.986,0.461,19.087,0.759c-0.3-0.67-0.607-1.329-0.928-1.971C987.891,739.693,981.97,738.905,973.046,738.997z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M940.514,713.285c-7.878,7.63-10.948,1.933-11.29-12.013c-1.463,1.469-2.973,3.012-4.529,4.63 c-0.158,0.165-0.315,0.326-0.474,0.492c-0.797,0.831-1.603,1.678-2.424,2.549c-1.359,1.441-2.755,2.942-4.183,4.493 c-1.014,1.102-2.04,2.222-3.089,3.381c0.17,0.352,0.344,0.695,0.517,1.041c6.68,0.397,13.724,2.259,21,5.066 C937.414,719.845,938.905,716.631,940.514,713.285z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M996.166,755.482c-0.247-1.497-0.558-2.999-0.973-4.509c-0.362-1.32-0.765-2.57-1.189-3.788 c-1.325,1.246-3.524,2.444-6.385,3.435C990.48,752.281,993.331,753.911,996.166,755.482z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M964.532,676.493c-1.794,3.295-3.505,6.365-5.136,9.22c-0.119,10.362-0.584,22.13-1.367,35.297 c0.704-1.434,1.383-2.866,2.037-4.29c1.146-2.495,2.213-4.966,3.185-7.383c-1.933-2.924-2.385-5.914,0.891-8.454 c0.806-0.623,1.664-0.962,2.547-1.118C970.715,686.841,970.905,677.13,964.532,676.493z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C7B299",
                        d:
                          "M959.416,677.702c0.067-0.117,0.135-0.234,0.202-0.35c-0.068,0.025-0.135,0.049-0.204,0.075 C959.414,677.519,959.415,677.61,959.416,677.702z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M958.029,721.01c0.783-13.168,1.248-24.935,1.367-35.297c1.631-2.854,3.342-5.924,5.136-9.22 c2.457-4.512,5.069-9.445,7.846-14.818c-1.094-0.068-2.221-0.147-3.377-0.235c-3.34,5.526-6.461,10.823-9.385,15.912 c-0.067,0.117-0.135,0.234-0.202,0.35c-0.001-0.092-0.002-0.183-0.002-0.275c-0.048-6.217-0.245-11.845-0.598-16.881 c-9.559-0.918-19.512-2.012-26.637-2.397c-1.935,17.586-3.21,32.671-2.954,43.123c0.342,13.946,3.412,19.643,11.29,12.013 c-1.61,3.346-3.1,6.56-4.473,9.639c6.9,2.662,14.007,6.173,21.212,10.097c0.091-1.318,0.179-2.623,0.265-3.916 C957.701,726.352,957.872,723.651,958.029,721.01z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M901.768,674.745c0.125-0.193,0.25-0.385,0.374-0.577c-1.158-1.355-2.305-2.691-3.445-4.015 c-0.696,0.468-1.384,0.94-2.067,1.413c0.257,3.133,0.673,6.245,1.214,9.318C899.176,678.775,900.485,676.727,901.768,674.745z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M905.429,707.684c-2.359-6.329-4.588-13.171-6.25-20.297c-0.5-2.144-0.95-4.313-1.335-6.503 c-5.502,8.71-11.419,18.504-17.77,29.382c-0.03,0.052-0.061,0.104-0.091,0.156c-0.054,0.093-0.108,0.186-0.162,0.278 c-0.091,0.156-0.182,0.312-0.273,0.469c-0.362,4.439-0.831,9.009-1.423,13.726c2.724,1.782,5.285,3.44,7.684,4.973 c6.94-7.775,14.936-11.347,23.665-11.982c-1.073-2.577-2.17-5.286-3.251-8.106C905.957,709.087,905.692,708.389,905.429,707.684z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M878.429,713.091c-0.039,0.067-0.078,0.135-0.117,0.202c-0.074,0.127-0.148,0.255-0.222,0.382 c-0.65,1.12-1.304,2.252-1.963,3.394c-0.642,1.113-1.288,2.236-1.938,3.37c-0.26,0.452-0.517,0.899-0.778,1.355 c1.438,0.951,2.822,1.86,4.178,2.748C877.886,720.65,878.166,716.832,878.429,713.091z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M922.222,767.315c-2.873,31.902,25.549,20.817,31.916,4.303c0.392-4.345,0.762-8.587,1.113-12.734 c-11.698-1.571-21.881-2.89-30.836-3.864C923.248,759.685,922.542,763.765,922.222,767.315z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M935.139,632.847c0.34-2.803,0.684-5.638,1.032-8.499c-1.619-1.042-3.637-2.172-6.202-3.088 c-8.304,1.717-15.321,3.095-21.346,4.069c-0.68,0.931-1.337,1.867-1.953,2.811c-0.706,1.081-1.365,2.171-1.989,3.267 c-4.053,7.116-6.419,14.521-7.54,21.99c8.193-3.852,16.13-5.513,24.226-6.286C926.528,640.726,931.107,635.971,935.139,632.847z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M904.389,670.739c1.565-2.37,3.094-4.645,4.584-6.816c-2.091,1.107-4.143,2.303-6.149,3.555 C903.341,668.558,903.861,669.642,904.389,670.739z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M933.512,646.455c4.417-0.116,8.937-0.165,13.622-0.341c-3.062-5.125-5.629-10.516-7.691-16.091 c-1.359,0.713-2.793,1.654-4.304,2.825C934.577,637.48,934.031,642.026,933.512,646.455z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M986.375,633.708c-4.083,6.312-7.921,12.376-11.543,18.217c0.804,0.093,1.598,0.179,2.379,0.282 C980.104,646.474,983.153,640.321,986.375,633.708z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M884.45,626.397c-0.139,0.098-0.278,0.193-0.417,0.291c0.261,0.589,0.525,1.183,0.79,1.781 c1.214-0.559,2.404-1.09,3.565-1.589C887.009,626.783,885.701,626.622,884.45,626.397z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M881.687,628.367c-0.267,0.192-0.534,0.381-0.801,0.574c-2.059,1.492-4.112,3.015-6.155,4.57 c2.41-1.294,4.728-2.479,6.963-3.565C881.693,629.413,881.689,628.894,881.687,628.367z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M980.126,578.95c-0.475,0.153-0.954,0.311-1.431,0.467c0.83,3.804,1.684,7.433,2.562,10.886 c0.254,0.999,0.509,1.991,0.767,2.961c-0.209,0.393-0.434,0.826-0.688,1.32c0.34-0.053,0.667-0.105,1.005-0.158 c2.253,8.324,4.648,15.574,7.151,21.838c6.499,16.268,13.725,25.903,21.089,30.5c7.69,4.801,15.528,4.115,22.845-0.244 c2.782-1.658,5.489-3.845,8.083-6.463c13.412-13.539,23.812-38.577,26.1-61.28c0.238-2.363,0.388-4.7,0.445-6.997 c0.002-0.102,0.006-0.204,0.008-0.306c1.319-1.467,1.256-2.726-0.004-3.725c-0.139-5.54-0.87-10.773-2.281-15.465 c-6.158,4.819-11.839,9.129-17.081,12.98c-12.773,0.49-30.758,3.126-51.618,8.692c-5.024,1.34-10.217,2.854-15.542,4.545 C981.066,578.651,980.598,578.798,980.126,578.95z M1008.164,590.911c-13.886,6.521-19.258,5.066-21.662,2.858 c7.635-1.224,14.668-2.448,21.136-3.664c1.2-0.226,2.382-0.451,3.543-0.676C1010.137,589.96,1009.124,590.461,1008.164,590.911z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M916.974,606.138c-1.991,1.092-3.982,2.21-5.974,3.353c7.236,1.288,15.211,2.756,24.004,4.429 c-0.996-5.335-1.555-10.76-1.667-16.218C927.909,600.327,922.446,603.137,916.974,606.138z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M973.434,581.182c1.767-0.608,3.52-1.195,5.261-1.764c-0.503-2.307-0.996-4.683-1.48-7.122 c-0.156-0.784-0.312-1.562-0.466-2.36c-0.152-0.793-0.302-1.606-0.452-2.413c-6.397-0.504-13.037-1.677-19.871-3.646 c-0.73,2.319-1.382,4.652-1.982,6.967c-1.736,6.722-2.78,12.859-3.198,18.792C958.797,586.474,966.218,583.664,973.434,581.182z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M929.969,621.26c2.565,0.916,4.583,2.046,6.202,3.088c0.638,0.41,1.214,0.806,1.736,1.171 c-0.582-1.845-1.11-3.707-1.583-5.584C934.126,620.397,932.008,620.839,929.969,621.26z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M865.943,473.271c-0.019-0.004-0.038-0.007-0.057-0.011c-0.957-0.185-1.914-0.37-2.881-0.55 c0.409,1.275,0.715,2.132,1.012,2.536c0.298-0.024,0.597-0.048,0.898-0.074C865.195,474.817,865.524,474.186,865.943,473.271z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M940.737,558.041c0.459-1.117,0.933-2.231,1.436-3.337c0.36-0.792,0.97-1.794,1.738-2.938 c-7.637-0.927-14.676-2.202-21.112-3.704C928.868,552.053,934.856,555.355,940.737,558.041z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1042.583,496.96c-1.708,1.213-3.175,2.459-4.447,3.724c0.505,0.517,1.014,1.036,1.526,1.56 C1040.665,500.621,1041.64,498.874,1042.583,496.96z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M904.182,482.615c-3.768-1.11-7.628-2.195-11.589-3.243c-2.007-0.531-4.044-1.051-6.102-1.562 c-4.791-1.19-9.72-2.322-14.792-3.382c-2.347,0.314-4.603,0.556-6.784,0.742c-0.346,0.437-0.619,0.454-0.898,0.074 c-2.734,0.218-5.351,0.353-7.876,0.442c0.028,0.044,0.056,0.086,0.083,0.129c6.709,10.521,13.439,19.945,20.157,28.376 c1.099,1.379,2.197,2.738,3.295,4.063c3.621,4.372,7.237,8.461,10.842,12.275c2.417,2.557,4.83,4.984,7.236,7.301 c15.691-4.256,33.847-6.717,54.686-6.185c-3.062-3.286-6.577-6.552-7.868-8.023c-5.1-5.8-9.89-13.5-15.86-18 c-2.103-1.58-11.77-6.262-16.707-10.629C909.446,484.19,906.836,483.396,904.182,482.615z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M1047.873,541.57c5.457-5.705,8.981-11.437,10.191-16.163c1.452-5.676-0.43-9.9-6.326-10.87 c-4.225-4.286-8.242-8.376-12.075-12.291c-2.789,4.514-5.821,7.94-9.141,10.424c1.568-3.885,3.636-8.026,7.615-11.984 c-14.046-14.36-25.472-26.216-34.739-35.833c1.511,11.473,2.597,26.489,3.596,46.293c2.162-0.407,4.388-0.746,6.751-0.891 c3.041,9.17,1.332,15.564-2.93,19.796C1022.551,533.001,1034.898,536.804,1047.873,541.57z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8C6239",
                        d:
                          "M976.296,567.523c0.496,0.039,0.991,0.074,1.484,0.105c0.318,0.02,0.635,0.037,0.952,0.054 c4.819,0.255,9.494,0.135,14.003-0.304c23.073-2.247,41.8-12.823,53.292-23.95c-33.008,8.467-61.57,10.81-85.447,9.71 c-1.651,3.46-3.004,7.08-4.155,10.739C963.259,565.845,969.9,567.019,976.296,567.523z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M962.798,410.832c-1.883,3.502-3.224,6.7-4.111,9.595c2.868,0.718,5.552,1.342,8.068,1.921 c0.654-1.82,1.334-3.628,2.04-5.421c0.413-1.051,0.834-2.097,1.264-3.136c-1.647-1.562-2.969-3.069-4.001-4.532 c-0.683-0.197-1.368-0.386-2.057-0.571c-0.314,0.541-0.615,1.075-0.905,1.602C962.998,410.47,962.895,410.653,962.798,410.832z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M870.29,388.792c0.586,0.828,1.171,1.654,1.752,2.47c0.494-4.056,1.194-7.89,2.08-11.53 c-2.333-1.634-4.709-3.333-7.129-5.103c-0.764,2.516-1.349,4.866-1.75,6.977c0.369,0.531,0.731,1.042,1.098,1.568 c0.299,0.198,0.591,0.389,0.892,0.589c-0.24-0.113-0.474-0.221-0.714-0.334C867.788,385.244,869.045,387.032,870.29,388.792z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M982.164,426.425c1.117,0.405,2.178,0.841,3.189,1.316c0.08-0.138,0.158-0.28,0.237-0.421 c0.359-0.641,0.706-1.306,1.039-1.995c-1.333-0.75-2.599-1.487-3.8-2.212c-0.066,0.34-0.133,0.676-0.201,1.012 C982.475,424.896,982.322,425.674,982.164,426.425z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M988.297,380.484c-0.407,5.002-0.859,9.769-1.349,14.334c1.375-0.231,2.701-0.444,3.969-0.635 c-0.44-4.325-1.239-8.966-2.452-13.926c1.416-1.948,2.86-3.813,4.328-5.589c-8.977,8.385-15.928,16.009-21.204,22.853 c0.14,0.04,0.279,0.08,0.419,0.121c2.213-0.454,4.327-0.875,6.345-1.265C981.452,390.681,984.788,385.334,988.297,380.484z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M992.792,374.668c5.311-4.96,11.338-10.188,18.136-15.674c0.003-0.002,0.005-0.004,0.008-0.006 c0.61-0.492,1.216-0.983,1.839-1.479c-0.684,0.35-1.367,0.728-2.049,1.125c-0.112,0.065-0.223,0.128-0.335,0.194 C1004.337,362.428,998.393,367.888,992.792,374.668z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M1003.396,464.851c-0.306-2.322-0.63-4.493-0.974-6.536c-2.79-16.593-6.915-24.334-13.88-28.822 c-0.609-0.393-1.241-0.76-1.895-1.107c-0.422-0.224-0.854-0.439-1.295-0.646c-1.508,2.609-3.219,4.808-5.034,6.6 c0.646-2.5,1.26-5.139,1.845-7.916c-3.696-1.341-7.991-2.369-12.998-3.522c-0.786-0.181-1.589-0.365-2.41-0.554 c-1.686,4.689-3.196,9.452-4.502,14.234c-0.188,0.687-0.37,1.374-0.55,2.061c-2.535-1.772-4.213-4.893-4.374-9.312 c-0.093-2.542,0.319-5.513,1.358-8.904c-4.429-1.109-9.295-2.444-14.643-4.182c-3.939-1.28-8.139-2.779-12.623-4.57 c-1.374-0.549-2.775-1.126-4.203-1.732c-0.545-0.231-1.093-0.465-1.646-0.705c-0.489-0.212-0.985-0.432-1.48-0.652 c-9.995,2.415-21.015,5.122-33.182,8.139c0.523,0.673,1.04,1.329,1.558,1.989c7.09,9.036,13.74,16.924,19.953,23.589 c3.686,3.954,7.217,7.47,10.607,10.57c8.785-3.151,19.18-6.74,31.473-10.813c-9.935,5.77-18.98,10.545-27.261,14.501 c6.272,5.25,12.012,8.901,17.25,10.898c4.448,1.696,8.537,2.208,12.28,1.487c-0.211,3.874-0.232,7.662-0.05,11.333 c0.335,6.781,1.366,13.154,3.193,18.894c0.167,0.526,0.342,1.045,0.523,1.56c0.131,0.374,0.264,0.748,0.402,1.116 c7.417,4.843,15.739,9.746,24.385,11.323c8.095,1.477,14.553-0.671,21.769-2.029 C1005.993,491.34,1004.908,476.324,1003.396,464.851z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M874.122,379.732c-0.885,3.64-1.586,7.474-2.08,11.53c-0.028,0.233-0.056,0.467-0.083,0.702 c-1.003,8.713-1.064,18.441,0.038,29.467c6.593-1.645,12.891-3.213,18.913-4.706c12.167-3.017,23.187-5.724,33.182-8.139 c1.555-0.376,3.083-0.744,4.588-1.105c1.008-0.242,2.005-0.481,2.992-0.717c3.197-0.764,6.283-1.496,9.255-2.194 c-10.283-1.039-20.473-1.143-29.663-0.667c-5.63,0.3-33.59,5.43-23.85-7.6c6.42-8.58,31.28-4.15,39.37-3.81 c-3.19-6.34-3.25-13.99-5.9-20.59c-2.72-6.79-7.84-12.21-10.3-19.09c0.1,0.809-0.008,0.725-0.643-1.994 c-3.435,0.659-6.952,1.318-10.568,1.977c-5.137-1.573-8.791-2.836-11.148-3.895C882.019,357.73,877.056,367.667,874.122,379.732z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M934.463,361.413c6.2,9.09,20.01,29.56,2.21,31.41c9.291,0,18.429,0.894,27.24,2.777 c4.225-11.896,21.695-23.288,22.217-42.925c0.122-4.578-0.673-9.602-2.777-15.187c-0.521-1.382-1.13-2.802-1.816-4.255 c-15.235,5.115-35.113,10.231-60.354,15.365C927.231,353.209,933.58,360.113,934.463,361.413z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M929.114,306.057c-3.685,3.71-7.407,7.268-11.092,10.769c-0.056,0.053-0.113,0.107-0.169,0.16 c-1.706,1.621-3.404,3.23-5.086,4.837c9.475-1.829,20.13,0.26,31.77,8.467c9.031-3.002,18.55-6.726,28.149-11.417 c-2.932-3.914-6.416-8.048-10.532-12.425c-3.427-0.956-6.85-1.755-10.271-2.315c-6.476-1.065-12.963-1.537-19.43-1.494 C931.345,303.794,930.231,304.933,929.114,306.057z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M1029.911,440.53c-5.928-10.833-7.123-20.264-7.646-27.823c-0.379-5.482-0.408-9.978-1.63-13.307 c-2.292-6.243-8.79-8.382-29.719-5.217c-1.267,0.192-2.593,0.405-3.969,0.635c-2.654,0.445-5.516,0.964-8.597,1.558 c-2.018,0.389-4.132,0.811-6.345,1.265c15.114,4.419,29.033,12.021,40.767,23.412c1.37,1.33,2.71,2.7,4.01,4.13 c5.857,6.415,10.906,13.464,15.531,20.845c0.436,0.171,0.86,0.34,1.301,0.512C1032.209,444.493,1030.983,442.489,1029.911,440.53 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M957.478,269.378c-2.78,5.081-5.781,9.779-8.942,14.174c-0.624,0.868-1.255,1.723-1.891,2.568 c-1.384,1.839-2.794,3.628-4.227,5.368c3.873,0.498,7.749,1.106,11.626,1.776c5.349,0.926,10.566,2.052,15.719,3.316 c-0.15-0.678-0.383-1.434-0.686-2.263C967.055,288.777,961.928,279.971,957.478,269.378z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M962.618,258.918c0.006-0.013,0.011-0.025,0.017-0.038c-3.357-1.474-6.804-2.954-10.324-4.439 c1.374,5.241,3.203,10.263,5.167,14.937C959.292,266.062,961.013,262.586,962.618,258.918z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M966.18,249.918c1.595-4.478,3.028-9.218,4.274-14.252c-1.892-5.762-2.757-13.268-2.465-22.074 C960.479,225.507,955.652,245.853,966.18,249.918z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M962.584,202.973c-0.892,1.036-1.735,2.079-2.52,3.127c-2.717,3.631-4.802,7.331-6.361,11.06 c-0.608,1.455-1.136,2.915-1.589,4.377c-0.01,0.032-0.02,0.063-0.03,0.095c3.657-4.06,8.851-8.074,16.096-11.856 c0.301-4.425,0.877-9.139,1.741-14.09C967.144,198.069,964.71,200.502,962.584,202.973z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#0071BC",
                        d:
                          "M970.06,413.791c2.619,2.484,6.067,5.108,10.498,7.917c0.731,0.463,1.487,0.931,2.272,1.405 c1.201,0.725,2.467,1.462,3.8,2.212c1.528,0.86,3.134,1.735,4.842,2.63c4.631,2.428,9.948,4.993,16.005,7.71 c-4.164-4.72-8.688-9.095-13.672-12.992c-7.816-6.113-17.419-10.441-27.744-13.415 C967.091,410.722,968.412,412.229,970.06,413.791z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M1015.91,289.613c-6.015,5.567-12.276,10.522-18.661,14.936c0.098,0.032,0.196,0.062,0.295,0.094 c4.226,1.363,14.881,3.031,23.111,6.413C1025.262,303.97,1023.057,296.837,1015.91,289.613z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M972.687,318.874c-9.599,4.691-19.117,8.415-28.149,11.417c2.386,1.683,4.814,3.621,7.281,5.837 c-20.978,6.804-42.684,8.77-63.106,7.897c-4.597,1.355-5.321,2.651-0.716,4.771c0.076,0.035,0.147,0.069,0.226,0.105 c2.357,1.059,6.011,2.321,11.148,3.895c3.616-0.659,7.133-1.318,10.568-1.977c-0.064-0.274-0.131-0.566-0.207-0.896 c-0.01-0.18-0.02-0.35-0.02-0.51c0-0.02,0-0.03,0-0.05c-0.234-7.661,5.469-5.342,11.47-0.765 c25.24-5.134,45.119-10.25,60.354-15.365c3.785-1.271,7.285-2.542,10.509-3.813c5.004-1.974,9.351-3.948,13.068-5.923 c1.31-0.696,2.537-1.393,3.694-2.09c-8.677-1.75-17.287-4.809-25.855-7.928c-0.021,0.012-0.043,0.025-0.064,0.037 C979.49,315.428,976.083,317.213,972.687,318.874z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M1049.368,195.507c-2.457,2.369-4.846,4.639-7.179,6.829c-3.798,3.564-7.438,6.901-10.917,10.008 c-4.345,3.882-8.442,7.409-12.31,10.618c-0.219,0.182-0.439,0.365-0.657,0.545c-2.703,2.232-5.291,4.303-7.768,6.223 c-11.966,14.769-21.949,20.068-29.237,18.324c-1.231,0.502-2.4,0.927-3.507,1.277c-3.207,1.012-5.906,1.406-8.152,1.288 c-1.304-0.068-2.453-0.311-3.464-0.701c-10.528-4.065-5.7-24.411,1.809-36.326c0.041-1.247,0.105-2.519,0.193-3.816 c-7.246,3.781-12.439,7.796-16.096,11.856c-9.851,10.938-8.547,22.209-6.121,30.155c2.14,0.887,4.256,1.772,6.347,2.654 c3.52,1.486,6.967,2.966,10.324,4.439c1.617,0.71,3.212,1.418,4.786,2.125c5.02,2.255,9.816,4.496,14.337,6.725 c5.536,2.729,10.656,5.441,15.277,8.136c3.511,2.048,6.736,4.086,9.625,6.116c2.923,2.055,5.501,4.101,7.703,6.14 c0.537,0.497,1.055,0.994,1.546,1.49c0.279-0.259,0.559-0.516,0.837-0.777c4.093-3.842,8.066-7.975,11.881-12.419 c5.127-5.97,9.968-12.504,14.424-19.662c0.848-1.362,1.681-2.748,2.501-4.156c1.516-2.603,2.983-5.283,4.394-8.047 c6.299-12.328,11.515-26.277,15.282-42.063c0.138-8.146,2.112-18.078,3.388-26.119 C1061.812,183.322,1055.398,189.694,1049.368,195.507z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#662D91",
                        d:
                          "M945.964,251.787c-3.413-1.414-6.885-2.834-10.405-4.26c-8.437-3.418-17.145-6.871-25.964-10.363 c-1.557-0.616-3.118-1.234-4.681-1.853c-0.776-0.307-1.553-0.615-2.331-0.923c-0.177-0.07-0.354-0.14-0.531-0.21 c0.055,0.448,0.115,0.9,0.16,1.338c0.193,0.116,0.386,0.233,0.578,0.349c0.313,0.189,0.628,0.38,0.937,0.567 c10.268,6.213,18.337,11.165,24.643,15.017c0.356,0.218,0.712,0.435,1.057,0.646c1.733,1.058,3.321,2.025,4.784,2.91 C955.118,267.663,949.414,263.087,945.964,251.787z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M970.609,192.009c-0.095,0.478-0.188,0.953-0.277,1.427c-0.143,0.755-0.279,1.505-0.409,2.249 c-0.864,4.951-1.44,9.665-1.741,14.09c-0.088,1.298-0.152,2.569-0.193,3.816c-0.292,8.806,0.573,16.312,2.465,22.074 c0.793,2.414,1.766,4.521,2.909,6.29c0.777,1.201,1.632,2.246,2.563,3.123c0.823-0.764,1.878-1.737,3.166-2.936 c4.366-4.065,11.403-10.73,21.117-20.666c0.104-0.106,0.206-0.211,0.311-0.318c1.172-1.2,2.386-2.452,3.635-3.747 c5.642-5.852,12.069-12.691,19.282-20.62c13.121-14.425,28.843-32.464,47.166-54.755c0.466-0.567,0.932-1.134,1.402-1.707 c-0.29-8.425-2.01-16.789-6.591-25.437c-7.378-13.922-18.264-24.399-30.954-32.356c-0.837,0.12-1.656,0.252-2.456,0.397 c-5.389,0.973-9.955,2.479-13.879,4.329c-1.719,0.811-3.315,1.688-4.803,2.614c-0.166,0.103-0.332,0.206-0.495,0.31 c-0.058,0.037-0.119,0.073-0.176,0.111c11.564,4.851,24.255,11.202,38.096,19.413c-19.298-2-35.934-4.908-50.255-8.398 c-1.969,2.335-3.7,4.623-5.348,6.701c0.455,4.069,1.151,8.027,2.85,10.417c2.42,3.39,9.83,4.52,12.99,8.31 c11.14,13.32,7.87,43.26-4.29,54.17c-9.798,8.795-22.806,9.795-35.573,8.616C970.942,190.362,970.773,191.188,970.609,192.009z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M932.915,79.703c-3.071-3.185-6.318-6.61-9.758-10.292c-0.965,2.026-1.879,4.013-2.768,5.98 c2.596,2.127,5.243,4.26,7.938,6.386C929.641,81.043,931.17,80.342,932.915,79.703z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1096.636,109.663c0.275-0.349,0.552-0.701,0.827-1.051c0.285-0.362,0.569-0.723,0.855-1.087 c3.413-4.344,6.893-8.805,10.446-13.398c-0.43-0.144-0.849-0.277-1.276-0.418c-0.108-0.036-0.215-0.07-0.322-0.106 c-2.534,1.128-5.009,2.291-7.363,3.48c-7.6,3.84-12.17,9.37-20.29,11.8c0.772,2.965,4.18,10.789,6.259,14.456 C1089.311,118.923,1092.93,114.368,1096.636,109.663z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1013.647,225.742c-4.003,1.875-7.702,3.685-11.103,5.407c-11.464,5.806-19.507,10.601-24.127,13.417 c-0.678,0.414-1.287,0.786-1.817,1.112c0.46,0.38,0.938,0.718,1.431,1.019c1.02,0.624,2.111,1.08,3.27,1.357 c7.288,1.744,17.271-3.555,29.237-18.324C1011.561,228.468,1012.596,227.144,1013.647,225.742z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M976.6,245.678c-0.229-0.189-0.453-0.39-0.674-0.599C972.803,247.978,973.027,247.867,976.6,245.678z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M941.486,88.424c-0.439,0.186-0.87,0.363-1.294,0.533c0.091,0.669,0.178,1.352,0.264,2.038 c4.425,3.226,8.958,6.372,13.591,9.377c-1.357-1.218-2.765-2.508-4.232-3.883C947.221,94.057,944.45,91.374,941.486,88.424z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M903.665,151.086c2.462,18.338,11.889,29.595,24.267,34.994c0.532,0.232,1.069,0.452,1.611,0.662 c2.532,0.982,5.175,1.731,7.898,2.256c7.676,1.479,15.98,1.18,24.191-0.676c-2.549-0.393-5.053-0.818-7.48-1.228 c-3.81-0.64-19.64-1.16-20.11-5.64c-1.27-12.16,23.74-3.52,26.7-3.33c15.82,0.98,40.46-13.18,32.63-33.15 c-1.59-4.07-5.27-3.08-6.77-5.88c-4.02-7.44-4.2-12.1-5.12-21.22c-0.027-0.27-0.06-0.543-0.089-0.814 c-0.593-0.023-1.208-0.09-1.848-0.203c-1.975-0.347-4.189-1.137-6.721-2.449c-36.943,24.182-52.395,30.858-67.272,22.249 c-0.5,1.852-1.395,3.834-2.505,5.753C903.092,145.459,903.299,148.354,903.665,151.086z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M978.993,62.183c0.188,0.309,0.357,0.62,0.542,0.929c0.256-0.217,0.514-0.437,0.771-0.658 C979.869,62.365,979.43,62.271,978.993,62.183z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M939.7,66.758c-0.515,2.623-0.908,5.353-1.166,8.193c1.092,0.814,2.241,1.631,3.441,2.449 c-1.248,0.204-2.437,0.436-3.565,0.695c-0.028-0.143-0.055-0.289-0.083-0.43c-0.009,0.15-0.013,0.304-0.021,0.455 c-0.413,0.096-0.819,0.194-1.216,0.297c-1.506,0.388-2.899,0.82-4.174,1.287c-1.745,0.639-3.273,1.34-4.588,2.074 c3.942,3.109,7.988,6.198,12.129,9.217c-0.086-0.686-0.173-1.369-0.264-2.038c0.424-0.17,0.855-0.347,1.294-0.533 c3.028-1.285,6.416-2.976,10.15-5.127c2.154,1.182,4.429,2.356,6.843,3.516c5.325,2.56,11.295,5.053,17.975,7.417 c-1.839-5.663-4.131-11.248-6.866-16.556c-1.781-0.26-3.515-0.478-5.194-0.649c-0.858-0.088-1.703-0.165-2.535-0.231 c1.393-0.964,2.825-1.986,4.291-3.062c0.302-0.222,0.606-0.446,0.911-0.673c-5.615-9.614-12.778-18.038-21.414-23.961 C943.025,54.35,940.984,60.224,939.7,66.758z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M936.751,73.587c0.279,0.219,0.568,0.439,0.855,0.659c-0.326-1.463-0.661-2.865-1.006-4.207 c-3.358-13.073-7.545-20.549-11.025-23.934c-2.284,1.084-4.54,2.165-6.744,3.239C919.589,54.885,924.521,63.986,936.751,73.587z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M937.606,74.246c0.246,1.106,0.487,2.242,0.721,3.418c0.054-0.917,0.127-1.819,0.208-2.714 C938.219,74.716,937.912,74.481,937.606,74.246z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FFFF00",
                        d:
                          "M1050.746,109.712c-13.841-8.211-26.532-14.563-38.096-19.413c-6.62-2.777-12.867-5.059-18.747-6.912 c-1.756-0.554-3.479-1.069-5.17-1.548c1.879,4.775,3.513,9.695,4.95,14.884c0.24,0.875,0.423,1.897,0.579,3.001 c2.024,0.543,4.103,1.073,6.228,1.59C1014.812,104.804,1031.448,107.712,1050.746,109.712z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M894.703,1046.25c0.322-10.71-8.074-16.792-16.927-19.63c0.631,4.27,1.445,8.876,2.448,13.855 C885.353,1042.437,890.185,1044.362,894.703,1046.25z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M838.726,1064.519c-5.2-0.673-10.218-1.246-15.08-1.737c1.143,2.72,2.292,5.481,3.436,8.276 c0.962,2.351,1.921,4.726,2.872,7.121c8.294-10.678,19.277-22.581,33.69-35.98c-5.428-5.481-11.42-11.727-18.064-20.055 c-2.343,2.226-4.212,4.117-5.035,5.329c-5.33,7.85-8.36,16.16-12.46,24.67c-1.034,2.15-2.038,4.367-3.027,6.612 C829.858,1060.851,834.433,1062.789,838.726,1064.519z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M884.45,626.397c1.25,0.225,2.559,0.386,3.939,0.483c0.459,0.032,0.923,0.06,1.398,0.079 c3.401,0.132,7.241-0.087,11.691-0.614c2.219-0.263,4.595-0.603,7.144-1.016c6.026-0.974,13.042-2.352,21.346-4.069 c2.039-0.422,4.157-0.864,6.356-1.325c-0.501-1.99-0.943-3.995-1.32-6.015c-8.793-1.673-16.768-3.141-24.004-4.429 c-2.456-0.437-4.825-0.853-7.111-1.249c-6.767,4.997-14.112,10.113-21.365,15.029c0.438,0.994,0.879,1.995,1.33,3.014 C884.051,626.325,884.25,626.361,884.45,626.397z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M881.652,623.862c-0.637,0.431-1.273,0.86-1.908,1.287c0.629,0.227,1.271,0.43,1.927,0.614 C881.666,625.123,881.659,624.492,881.652,623.862z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#8CC63F",
                        d:
                          "M847.766,478.387c0.283-0.332,0.566-0.664,0.847-0.997c-3.034,1.52-6.416,2.884-10.15,4.071 c-3.603,4.272-6.739,8.211-9.439,11.84c3.711-2.272,6.838-3.585,9.514-4.111C841.586,485.54,844.717,481.965,847.766,478.387z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M819.392,478.877c5.336-6.171,2.04-14.957-1.72-22.234c-0.158,1.255-0.299,2.525-0.399,3.831 c-0.465,6.065-0.95,12.626-1.306,19.48c1.005-0.344,1.998-0.659,2.98-0.946C819.095,478.965,819.245,478.919,819.392,478.877z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M821.694,439.232c-0.38,1.182-0.749,2.37-1.098,3.57c1.882-0.226,3.684-0.473,5.416-0.737 C824.539,441.01,823.1,440.067,821.694,439.232z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M841.857,431.544c-2.322,0.924-4.687,1.681-7.052,2.29c0.315,1.973,0.735,4.075,1.267,6.31 c3.709-0.873,6.962-1.851,9.796-2.908C844.628,435.397,843.287,433.496,841.857,431.544z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M864.915,475.171c2.181-0.187,4.438-0.428,6.784-0.742c3.582-0.48,7.375-1.133,11.423-2.019 c2.924-0.64,5.983-1.404,9.195-2.315c4.007-1.137,8.252-2.504,12.77-4.151c6.211-2.263,12.939-5.054,20.274-8.495 c0.624-0.293,1.247-0.584,1.88-0.886c8.281-3.955,17.326-8.731,27.261-14.501c-12.293,4.073-22.688,7.661-31.473,10.813 c-6.359,2.281-11.876,4.334-16.643,6.172c-11.922,4.596-19.189,7.857-23.421,10.042c1.139-2.545-0.393-6.114-10.804-9.718 c-3.282,6.851-5.072,11.395-6.204,13.872c-0.004,0.009-0.009,0.019-0.013,0.028C865.524,474.186,865.195,474.817,864.915,475.171 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M864.915,475.171c-0.301,0.026-0.6,0.05-0.898,0.074C864.296,475.625,864.569,475.608,864.915,475.171z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M864.017,475.245c-0.297-0.404-0.603-1.261-1.012-2.536c-0.386-1.205-0.867-2.786-1.521-4.723 c-2.617,2.864-5.916,5.496-9.934,7.822c1.5-0.029,3.028-0.066,4.591-0.121C858.666,475.599,861.283,475.463,864.017,475.245z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M855.022,641.484c-0.268-5.038-0.633-8.854-0.88-11.022c-0.418-2.831-0.295-2.594,0,0 c0.288,1.948,0.834,5.354,1.757,10.447c3.27-2.144,6.842-4.481,10.601-6.955c-3.765-4.099-7.386-7.999-10.852-11.702 c-1.426,2.287-2.702,4.5-3.734,6.612c-2.438,4.988-4.783,10.063-7.065,15.184c3.406-0.859,6.783-1.693,10.057-2.487 C854.944,641.535,854.983,641.51,855.022,641.484z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M843.132,647.942c-0.306,0.701-0.613,1.4-0.917,2.102c2.336-1.636,5.465-3.727,9.158-6.161 C848.392,645.175,845.648,646.529,843.132,647.942z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M862.708,646.202c0.289-1.254,0.667-2.518,1.146-3.791c-0.365,0.177-0.718,0.348-1.074,0.52 c-2.767,1.339-5.277,2.545-7.543,3.622c0.125,3.9,0.175,8.299,0.081,13.071c2.306-0.234,4.696-0.482,7.157-0.742 C861.777,654.825,861.699,650.577,862.708,646.202z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M850.71,648.687c-4.451,2.076-7.65,3.494-9.772,4.336c-1.176,2.755-2.337,5.519-3.482,8.289 c0.022-0.002,0.045-0.004,0.067-0.006C841.681,657.299,846.073,653.098,850.71,648.687z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M872.869,690.698c-1.596,0.703-3.112,1.05-4.485,0.876c-7.53-0.95-7.32-5.39-3.61-10.89 c0.997-1.478,2.253-3.034,3.676-4.618c-0.775-1.698-1.576-3.475-2.34-5.321c-3.872-1.584-5.834-5.198-10.927-6.437 c-0.383,9.955-1.422,21.214-3.648,32.752C866.537,697.446,871.996,695.087,872.869,690.698z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M854.836,562.707c-1.052,0.032-2.099,0.073-3.141,0.122c-1.534,2.092-2.797,7.577-4.363,16.468 c-0.086-5.481,0.678-11.152,2.028-16.34c-6.87,0.428-13.335,1.299-18.552,2.866c-0.434,0.432-0.857,0.86-1.274,1.287 c0.06,0.103,0.117,0.208,0.177,0.312c4.704,5.132,11.545,11.572,18.693,20.428c2.226,1.544,4.586,2.977,7.107,4.273 c1.438-3.178,4.813-7.453,8.907-11.009C860.017,570.952,857.068,564.829,854.836,562.707z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M857.587,546.065c-0.349-0.162-0.705-0.334-1.051-0.492c-3.15,1.948-6.111,3.941-8.886,5.951 c1.871,0.421,3.694,0.831,5.45,1.226C854.449,550.043,855.968,547.751,857.587,546.065z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M873.79,554.706c0.333,0.917,0.661,1.886,0.98,2.925c2.09,0.473,4.036,0.915,5.84,1.327 C878.294,557.458,876.018,556.037,873.79,554.706z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M871.748,630.488c0.976-0.647,1.96-1.301,2.951-1.961c1.667-1.11,3.351-2.238,5.046-3.378 c0.635-0.427,1.271-0.856,1.908-1.287c-0.01-0.894-0.022-1.779-0.036-2.655c-3.771-8.597-7.046-16.257-9.903-22.981 c-2.6,4.211-5.487,8.401-8.312,12.478C866.452,616.588,869.292,623.149,871.748,630.488z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M847.649,551.524c-4.91-1.104-10.216-2.298-15.95-3.591c-4.587,2.461-7.058,4.714-7.895,7.052 c1.509,3.963,3.269,7.773,5.312,11.39c0.549-0.192,1.112-0.377,1.693-0.551C835.417,561.236,841.007,556.334,847.649,551.524z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FF00",
                        d:
                          "M881.616,621.206c0.299,0.681,0.603,1.372,0.908,2.065c7.253-4.916,14.598-10.032,21.365-15.029 c7.336-5.418,13.992-10.695,19.118-15.429c0.097-0.089,0.196-0.179,0.291-0.268c-0.035-0.032-0.069-0.062-0.104-0.094 c-12.673-11.635-24.601-21.162-35.645-28.841c-3.358-0.216-7.209-0.45-11.338-0.637c0.791,3.326,1.519,7.121,2.168,11.427 c0.861,0,1.7,0.103,2.504,0.334c-0.123,2.493-0.647,5.052-1.46,7.65C880.598,592.794,881.377,605.613,881.616,621.206z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M823.949,793.512c0.182-0.595,0.356-1.19,0.522-1.785c-0.476-0.663-0.938-1.316-1.383-1.956 c-2.378-3.42-4.334-6.525-5.934-9.341c-0.811-1.427-1.532-2.779-2.169-4.06c-0.191,0.008-0.384,0.016-0.576,0.025 c0.017,8.654,0.189,17.264,0.381,25.707C817.354,799.364,820.394,796.505,823.949,793.512z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M822.747,816.527c-1.479,0.344-2.953,0.691-4.421,1.041c-1.321,5.049-2.358,9.606-3.04,13.189 c0.002,0.636,0.007,1.277,0.008,1.909c0.88-0.369,1.783-0.742,2.687-1.115C819.217,828.033,820.793,823.112,822.747,816.527z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M922.738,820.609c-0.198-0.832-0.594-1.688-1.169-2.545c-4.03-6.003-16.995-12.016-34.375-9.813 c1.04,2.425,2.058,4.857,3.056,7.294C901.054,815.728,912.311,817.835,922.738,820.609z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#2E3192",
                        d:
                          "M819.532,813.114c1.372,0.122,2.75,0.218,4.131,0.299c1.379-4.728,2.928-10.208,4.657-16.517 c-0.876-1.136-1.71-2.243-2.506-3.322C823.425,800.034,821.292,806.82,819.532,813.114z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M903.917,976.607c-0.141,0.009-0.285,0.017-0.425,0.026c-3.872,0.269-7.331,0.824-10.381,1.741 c-2.235,0.672-4.25,1.54-6.043,2.636c3.129,4.288,6.808,8.064,10.967,11.124c12.115,1.034,25.7,2.857,40.951,5.606 c3.145-1.064,6.368-2.458,9.658-4.202c2.983-1.58,6.021-3.451,9.11-5.633c2.723-1.924,5.483-4.084,8.278-6.505 c-2.161-0.216-4.282-0.434-6.365-0.653c-1.719-0.181-3.409-0.362-5.076-0.542c-2.23-0.241-4.414-0.48-6.549-0.714 c-0.556-0.061-1.108-0.121-1.657-0.181c-2.566-0.281-5.061-0.553-7.486-0.81c0.77,1.2,1.542,2.405,2.315,3.617 c-3.735-1.613-7.392-3.106-10.975-4.493C920.019,976.658,911.243,976.14,903.917,976.607z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M846.013,997.579c0.238-0.063,0.474-0.129,0.72-0.186c0.043-0.01,0.095-0.019,0.142-0.029 c-0.222,0.004-0.444,0.007-0.666,0.009C846.143,997.442,846.079,997.511,846.013,997.579z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M846.209,997.373c1.485-1.542,2.888-3.121,4.191-4.753c-2.378,0.334-4.657,0.717-6.836,1.147 c-0.584,1.161-1.188,2.366-1.807,3.604C843.233,997.383,844.723,997.391,846.209,997.373z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M847.254,984.4c-3.463,4.021-6.594,7.591-9.444,10.665c1.839-0.469,3.756-0.903,5.753-1.297 c2.431-4.832,4.57-9.005,6.456-12.59c-0.396,0.462-0.787,0.919-1.175,1.371C848.307,983.176,847.776,983.793,847.254,984.4z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M940.472,886.966c-8.822,0.004-16.643,1.011-23.533,2.825c1.712,4.873,3.408,9.577,5.105,14.073 C927.847,898.373,933.977,892.737,940.472,886.966z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M828.246,998.066c0.123-0.047,0.244-0.095,0.368-0.142c-1.925-3.098-3.895-6.388-5.911-9.895 c-1.787-3.107-3.61-6.385-5.47-9.844c-0.257,1.53-0.445,2.982-0.559,4.328c-0.581,6.834,0.753,13.264,2.712,19.604 c1.059-0.578,2.153-1.141,3.295-1.685C824.157,999.254,826.056,998.519,828.246,998.066z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M863.642,1042.2c1.983-1.844,4.03-3.715,6.145-5.616c3.62,1.314,7.087,2.61,10.437,3.891 c-1.003-4.979-1.817-9.585-2.448-13.855c-0.832-5.631-1.344-10.671-1.53-15.169c-5.596-4.868-8.364-12.435-9.82-20.173 c-3.172,3.501-7.745,5.015-12.811,5.654c4.931,0.167,10.422,1.394,10.429,5.371c0.007,3.343-11.39,13.119-18.465,19.841 C852.222,1030.473,858.214,1036.719,863.642,1042.2z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M866.417,991.228c0.003,0.017,0.006,0.034,0.01,0.05c0.016-0.017,0.031-0.035,0.047-0.052 C866.454,991.227,866.435,991.227,866.417,991.228z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF0000",
                        d:
                          "M878.746,991.108c1.816-4.546,4.589-7.817,8.322-10.098c-1.136-1.557-2.198-3.182-3.186-4.864 c-0.09-0.153-0.181-0.306-0.27-0.46c-1.453-2.524-2.734-5.173-3.837-7.914c-0.551-1.369-1.059-2.76-1.518-4.171 c-1.276-0.18-2.538-0.346-3.781-0.496c-1.225,1.863-2.647,3.614-4.238,5.227c1.757,11.703-0.009,18.708-3.765,22.894 C870.345,991.074,874.434,991.033,878.746,991.108z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M856.091,641.968c-0.345,0.131-0.685,0.263-1.024,0.396c0.034,0.678,0.065,1.375,0.095,2.094 c0.397-0.376,0.782-0.742,1.182-1.122C856.257,642.867,856.173,642.413,856.091,641.968z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M825.997,749.75c-1.712-12.506-4.602-24.799-6.595-36.492c-2.504,12.251-3.83,25.106-4.47,38.14 c0.431,0.096,0.876,0.192,1.315,0.289C818.585,751.032,821.777,750.392,825.997,749.75z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M836.478,774.439c-0.071-0.068-0.145-0.137-0.215-0.204c-0.397,0.739-0.821,1.498-1.233,2.248 c0.853,0.06,1.681,0.127,2.477,0.202C837.256,775.912,836.908,775.164,836.478,774.439z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M841.199,778.737c0.414,0.359,0.844,0.725,1.276,1.091c0.976-0.648,1.979-1.304,2.998-1.964 c-0.912-0.197-1.875-0.38-2.904-0.545C842.114,777.786,841.66,778.254,841.199,778.737z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M827.145,776.17c0.253-3.335,0.322-6.675,0.245-10.011c-2.654-1.681-5.465-3.192-8.003-4.57 c-1.569,1.455-3.205,2.856-4.91,4.2c-0.056,3.537-0.076,7.075-0.069,10.606c0.193-0.008,0.385-0.017,0.576-0.025 C819.461,776.184,823.502,776.121,827.145,776.17z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M854.142,630.462c0.247,2.168,0.612,5.985,0.88,11.022c0.001,0.016,0.002,0.032,0.002,0.047 c0.317-0.077,0.632-0.153,0.946-0.229c-0.024-0.132-0.048-0.264-0.072-0.394C854.976,635.816,854.43,632.41,854.142,630.462z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M854.142,630.462C853.847,627.868,853.724,627.632,854.142,630.462L854.142,630.462z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M855.237,646.553c-0.023-0.714-0.048-1.415-0.076-2.095c-1.508,1.43-2.992,2.84-4.452,4.229 c-4.637,4.411-9.029,8.612-13.186,12.619c5.341-0.461,11.254-1.019,17.794-1.682 C855.412,654.852,855.363,650.453,855.237,646.553z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00A99D",
                        d:
                          "M851.192,698.779c0.117-0.574,0.231-1.148,0.341-1.72c2.227-11.538,3.265-22.797,3.648-32.752 c-4.027-0.979-10.025-0.463-20.473,3.72c-0.76,1.879-1.515,3.758-2.265,5.637c-1.125,2.813-2.236,5.621-3.34,8.424 C838.223,684.218,846.594,689.355,851.192,698.779z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M839.148,962.789c0.774,1.259,1.547,2.517,2.348,3.805c2.505,4.026,5.142,8.19,7.927,12.507 c0.636-0.108,1.267-0.235,1.895-0.375c5.653-10.582,8.787-15.24,10.588-15.956c0.015-0.239,0.033-0.475,0.045-0.716 C853.37,961.661,845.767,962.005,839.148,962.789z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M830.574,948.478c1.125,1.931,2.284,3.898,3.484,5.91c3.23-2.948,6.743-6.291,10.54-10.071 c-4.402-0.221-8.844-0.503-13.202-0.796c-0.684,0.908-1.348,1.857-1.993,2.841c-0.008,0.02-0.015,0.04-0.022,0.06 C829.774,947.102,830.173,947.789,830.574,948.478z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF00FF",
                        d:
                          "M874.476,963.105c-1.806-0.217-3.578-0.404-5.313-0.56c0.447,2.048,0.802,3.973,1.075,5.787 C871.829,966.719,873.251,964.968,874.476,963.105z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M877.772,343.285c-12.325-5.461-23.162-10.033-32.619-13.825c-3.147,1.993-6.063,4.105-8.627,6.327 c0.907,0.247,1.821,0.492,2.747,0.733C850.851,339.527,863.911,342.008,877.772,343.285z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M882.492,343.669c-1.582-0.113-3.157-0.239-4.72-0.384c1.243,0.551,2.506,1.113,3.78,1.682 C881.861,344.532,882.175,344.099,882.492,343.669z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M881.552,344.968c-0.254,0.358-0.506,0.718-0.755,1.08c0.685-0.167,1.37-0.334,2.06-0.498 C882.416,345.352,881.989,345.163,881.552,344.968z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M861.506,416.082c3.705-5.696,6.179-12.941,6.721-22.107c0.047-0.801,0.091-1.607,0.108-2.438 c-0.566,0.328-1.064,0.488-1.499,0.505c-0.577,0.023-1.039-0.214-1.391-0.68c-0.985-1.307-1.1-4.41-0.404-8.624 c-12.919-6.055-25.079-11.377-36.519-16.027c1.984,6.076,4.408,12.36,4.551,18.103c0.134,5.299,0.014,11.571-0.627,17.662 c3.266,1.873,6.329,3.815,9.173,5.815C848.541,404.877,858.184,409.294,861.506,416.082z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M856.928,421.776c-4.101-4.655-9.213-9.198-15.308-13.485c-5.478,2.702-9.244,10.316-6.815,25.543 c2.365-0.609,4.73-1.366,7.052-2.29C847.349,429.359,852.581,426.215,856.928,421.776z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M866.993,374.629c1.361-4.485,3.285-9.492,5.737-14.596c1.082-2.253,2.267-4.523,3.551-6.776 c1.39-2.441,2.896-4.859,4.515-7.209c-8.357,2.033-16.37,4.255-23.884,6.703c-5.59,1.821-10.906,3.766-15.878,5.855 c-1.453,0.61-2.874,1.233-4.267,1.868c-1.302,0.594-2.575,1.199-3.822,1.814c9.408,5.503,20.099,12.122,32.16,20.072 c0.043-0.247,0.089-0.499,0.137-0.753C865.644,379.496,866.229,377.145,866.993,374.629z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M951.819,336.127c-2.467-2.216-4.895-4.154-7.281-5.837c-11.64-8.207-22.295-10.296-31.77-8.467 c-3.283,0.634-6.425,1.738-9.417,3.222c10.249,3.523,21.555,7.695,34.027,12.619c-16.41-0.388-31.984-1.746-46.29-3.84 c-3.118,2.967-5.988,6.305-8.596,9.844c2.06,0.146,4.134,0.267,6.222,0.356C909.135,344.897,930.842,342.932,951.819,336.127z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M840.726,1415.586c1.238,0.956,2.454,1.917,3.65,2.881c0.12-0.635,0.243-1.252,0.368-1.843 C843.402,1416.281,842.063,1415.934,840.726,1415.586z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M819.691,1322.791c-1.866-0.92-3.793-1.827-5.781-2.72c-1.036,1.809-2.145,3.767-3.337,5.895 c2.058,0.878,4.233,1.766,6.495,2.657C817.784,1326.633,818.655,1324.685,819.691,1322.791z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M855.428,1429.107c0.205-0.176,0.41-0.354,0.615-0.54c-3.622-3.364-7.519-6.753-11.668-10.1 c-0.713,3.76-1.339,8.248-1.92,13.173C845.441,1434.66,850.414,1433.396,855.428,1429.107z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M865.58,1415.63c0.238-0.468,0.471-0.944,0.7-1.426c0.375-0.791,0.736-1.6,1.082-2.428 c-4.983-0.645-9.935-1.49-14.914-2.52c0.036,0.052,0.074,0.112,0.11,0.167C856.747,1411.443,861.088,1413.513,865.58,1415.63z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M859.09,1425.432c1.153-1.336,2.282-2.824,3.363-4.444c-1.751-0.417-3.501-0.838-5.249-1.263 C857.807,1421.433,858.436,1423.337,859.09,1425.432z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M856.387,1349.82c-7.976-3.539-14.29-7.355-19.142-11.443c-3.721,4.151-7.331,7.649-10.719,10.583 c4.151,3.36,7.887,6.539,11.123,9.563c-6.162-21.205,14.377-10.079,23.889,3.599c0.872-0.46,1.727-0.914,2.567-1.363 C862.024,1357.095,859.47,1353.436,856.387,1349.82z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#754C24",
                        d:
                          "M856.401,1335.744c2.941,2.893,5.936,5.821,8.985,8.785c5.072,1.389,9.491,2.487,12.851,3.189 c7.815,1.634,9.867,1.115,0.925-2.929C874.629,1342.74,867.266,1339.783,856.401,1335.744z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M809.585,1327.734c0.335-0.601,0.665-1.192,0.988-1.769c1.192-2.127,2.3-4.085,3.337-5.895 c1.323-2.31,2.529-4.378,3.619-6.211c1.417-2.384,2.645-4.381,3.71-6.052c-0.772-2.294-1.353-4.334-1.695-5.783 c-9.047,8.342-15.238,17.282-17.354,28.068c1.448,1.109,2.875,2.201,4.282,3.276 C807.562,1331.38,808.6,1329.502,809.585,1327.734z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M837.424,1283.36c-1.568,1.35-3.158,2.47-4.773,3.392c0.519,1.343,1.031,2.686,1.537,4.032 C835.132,1288.626,836.205,1286.164,837.424,1283.36z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M841.552,1279.193c1.583,0.126,3.266,0.408,5.046,0.859c-0.58-1.7-1.124-3.468-1.63-5.306 C843.839,1276.379,842.701,1277.857,841.552,1279.193z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M840.966,1303.307c3.476-2.021,7.414-5.11,11.81-9.548c0.882,1.514,1.794,2.942,2.732,4.289 c2.703-0.688,5.552-1.284,8.562-1.773c-1.237,2.699-2.492,5.285-3.76,7.772c6.283,6.793,13.13,10.563,19.005,12.048 c1.635,0.413,3.192,0.647,4.642,0.723c5.067,0.265,8.798-1.428,9.785-4.402c1.751-5.277-5.155-14.569-28.656-24.067 c-2.202-0.312-4.45-0.547-6.735-0.679c0.511-0.597,1.027-1.213,1.548-1.844c-4.926-2.925-9.357-4.776-13.303-5.775 c0.93,2.726,1.945,5.286,3.039,7.667c-5.033,0.371-10.18,1.385-15.348,3.325c1.659,4.42,3.237,8.852,4.689,13.285 C839.625,1303.981,840.288,1303.64,840.966,1303.307z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#736357",
                        d:
                          "M888.013,1293.601c-5.98-8.285-11.208-16.585-15.743-24.647c-4.401,6.638-8.526,12.217-12.37,16.872 c0.716,0.425,1.438,0.865,2.175,1.336c1.037,0.396,2.033,0.792,3.012,1.187C873.612,1289.556,881.44,1291.878,888.013,1293.601z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M812.911,282.096c-0.063,0.078-0.126,0.155-0.189,0.233c0.095,0.196,0.201,0.395,0.299,0.591 c0.391-0.303,0.793-0.605,1.219-0.905C813.798,282.044,813.357,282.073,812.911,282.096z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M839.3,308.667c-0.319-0.036-0.63-0.068-0.942-0.1c0.073-0.172,0.148-0.339,0.22-0.515 c-0.371,0.148-0.732,0.287-1.092,0.425c-2.417-0.232-4.624-0.364-6.646-0.414c3.541,3.149,7.365,5.109,11.953,5.485 c1.661-1.162,3.343-2.386,5.044-3.667C844.759,309.36,841.917,308.959,839.3,308.667z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M868.787,266.657c0.753-0.658,0.78-1.034-0.05-0.985c-0.097,0.014-0.19,0.029-0.287,0.043 c-10.165,1.495-18.959,3.224-26.477,5.138c-0.493,0.125-0.977,0.252-1.459,0.379c-0.037,0.01-0.073,0.019-0.11,0.029 c-11.983,3.169-20.579,6.822-26.164,10.755c10.011-0.626,19.192-2.266,27.066-4.287 C856.155,273.917,866.353,268.782,868.787,266.657z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F15A24",
                        d:
                          "M891.088,333.825c14.306,2.094,29.88,3.452,46.29,3.84c-12.472-4.924-23.778-9.097-34.027-12.619 c-1.159-0.399-2.305-0.789-3.438-1.171c-0.107-0.036-0.216-0.073-0.323-0.109c-9.592-3.229-18.21-5.864-25.944-7.992 c-7.06,2.693-14.621,5.933-21.598,9.678C863.468,328.837,876.629,331.708,891.088,333.825z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M890.218,1156.607c-0.921,0.272-1.836,0.596-2.746,0.972c0.613,0.799,1.229,1.614,1.846,2.445 c0.007-0.013,0.013-0.027,0.02-0.041C889.621,1158.88,889.915,1157.753,890.218,1156.607z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M829.957,1140.568c-0.005-0.034-0.01-0.068-0.015-0.102c0.003,0.03,0.006,0.061,0.008,0.091 C829.952,1140.561,829.955,1140.565,829.957,1140.568z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M823.698,1086.728c-1.486-3.544-3.423-6.699-5.975-9.326c-0.663,1.892-1.308,3.799-1.936,5.718 c2.222,2.132,4.363,4.067,6.411,5.84C822.685,1088.222,823.184,1087.478,823.698,1086.728z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M859.063,1266.874c9.01-1.488,6.113-7.334-3.224-13.806c-0.898,2.336-1.801,4.532-2.709,6.602 C854.738,1262.401,856.704,1264.828,859.063,1266.874z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M838.076,1201.19c-1.44,2.693-2.701,5.452-3.744,8.286c0.065-13.004-0.275-24.76-0.912-35.347 c-2.4,6.767-9.024,13.502-17.679,18.895c-1.007,3.07-2.543,6.249-4.738,9.585c12.357,1.716,21.376,7.159,28.484,13.5 C838.471,1211.766,837.953,1206.788,838.076,1201.19z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M832.321,1161.538c0.063,0.103,0.126,0.205,0.186,0.308c-0.012-0.133-0.024-0.264-0.036-0.397 C832.421,1161.479,832.371,1161.508,832.321,1161.538z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M882.114,1174.69c0.298-0.626,0.602-1.258,0.91-1.896c-0.645-3.568-1.475-7.34-2.528-11.29 c-0.379,0.271-0.757,0.548-1.133,0.835C880.483,1166.646,881.396,1170.765,882.114,1174.69z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M920.118,1169.416c-0.611-0.792-1.225-1.543-1.841-2.26c-0.562,1.192-1.117,2.366-1.666,3.523 C917.765,1170.27,918.933,1169.85,920.118,1169.416z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M913.143,1171.883c1.329-2.011,2.642-4.035,3.939-6.072c-1.162-1.258-2.332-2.385-3.508-3.396 c-0.844-0.725-1.691-1.393-2.541-1.996c-1.15-0.816-2.304-1.517-3.461-2.117c-1.954-1.014-3.915-1.728-5.874-2.164 c-0.552-0.123-1.103-0.226-1.654-0.306c-3.008-0.433-6.002-0.226-8.95,0.532c-0.589,1.224-1.176,2.434-1.757,3.619 c-0.004,0.017-0.009,0.034-0.013,0.05c3.616,4.864,7.293,10.235,10.907,15.89 C904.296,1174.775,908.592,1173.434,913.143,1171.883z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M906.251,1550.033c3.95-5.042,9.587-15.174,19.22-32.361c0.626-1.117,1.271-2.267,1.932-3.444 c2.305-4.108,4.825-8.587,7.584-13.458c1.399-2.47,2.858-5.037,4.385-7.712c0.614-1.075,1.239-2.168,1.874-3.278 c1.448-2.529,2.946-5.136,4.508-7.844c-4.428,2.128-8.662,4.404-12.716,6.809c-5.451,3.233-10.57,6.702-15.391,10.353 c-6.125,4.639-11.765,9.576-16.969,14.717c-0.549,0.542-1.094,1.086-1.633,1.632c0.209,0.164,0.415,0.322,0.624,0.487 c-0.415,0.045-0.822,0.093-1.234,0.139c-3.47,3.551-6.743,7.189-9.833,10.885c0.491,0.522,0.989,1.05,1.492,1.583 c8.102,5.2,11.021,14.271,9.411,25.226C901.456,1554.648,903.423,1553.643,906.251,1550.033z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M858.78,1489.27c-0.246-0.584-0.502-1.177-0.795-1.805c-0.371,0.344-0.734,0.682-1.102,1.024 c0.603,0.293,1.208,0.588,1.817,0.892C858.727,1489.345,858.754,1489.308,858.78,1489.27z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M851.027,1524.459c0.256,0.534,0.505,1.065,0.743,1.593c8.04-1.761,14.993-2.442,20.93-2.217 c-1.323-1.087-2.722-2.177-4.198-3.267C862.091,1521.804,856.273,1523.119,851.027,1524.459z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#22B573",
                        d:
                          "M858.867,1489.466c-0.055-0.028-0.111-0.057-0.166-0.084c-0.42,0.586-0.84,1.173-1.261,1.76 c0.037,0.048,0.075,0.098,0.112,0.147c0.444-0.584,0.89-1.172,1.339-1.769C858.883,1489.503,858.874,1489.484,858.867,1489.466z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M852.41,1484.664c0.099-0.063,0.199-0.127,0.298-0.19c-6.772-10.454-0.754-7.413,1.876-1.2 c2.303-1.487,4.683-3.056,7.148-4.716c-3.484-1.579-6.698-2.987-9.682-4.246c-5.173-2.183-9.625-3.903-13.415-5.193 c-0.443,3.982-0.914,7.819-1.43,11.39c4.353,1.4,8.888,3.11,13.601,5.171C851.336,1485.347,851.873,1485.006,852.41,1484.664z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M864.986,1446.96c-4.548,0.252-9.068,0.866-13.508,1.797c5.275,3.169,10.677,6.012,16.092,8.96 C866.676,1453.884,865.815,1450.301,864.986,1446.96z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M889.689,1449.366c-5.318-1.401-10.735-2.195-16.162-2.446c4.621,5.551,8.206,10.59,10.64,14.71 c11.042,1.659,23.443,3.563,37.371,5.694c-0.965-0.927-1.944-1.816-2.935-2.674c-0.278-0.24-0.558-0.474-0.838-0.709 C909.144,1456.696,899.591,1451.976,889.689,1449.366z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M825.992,1534.075c0.589-0.785,1.179-1.571,1.769-2.36c-4.76,1.813-8.405,3.454-11.018,4.748 c0.12,0.424,0.251,0.838,0.378,1.255C820.167,1536.406,823.128,1535.188,825.992,1534.075z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M829.558,1523.938c-0.985-0.544-1.986-1.091-3.008-1.643c-4.367,0.494-8.46,0.763-12.297,0.839 c0.068,0.702,0.142,1.404,0.23,2.108c0.473,3.751,1.176,7.251,2.076,10.549C819.61,1533.349,824.003,1529.524,829.558,1523.938z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M837.324,1528.38c0.607,0.359,1.205,0.717,1.795,1.072c4.48-1.403,8.698-2.534,12.651-3.4 c-0.239-0.528-0.487-1.059-0.743-1.593C845.93,1525.761,841.371,1527.085,837.324,1528.38z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#998675",
                        d:
                          "M827.761,1531.715c2.797-1.065,5.979-2.189,9.563-3.336c-1.591-0.942-3.233-1.895-4.944-2.862 C830.838,1527.595,829.298,1529.662,827.761,1531.715z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M869.955,134.316c-1.119,1.598-2.346,3.22-3.696,4.865c0.846,4.683,0.173,9.69-2.248,13.715 c0.197,0.194,0.395,0.388,0.602,0.583c3.063-2.23,6.155-4.433,9.271-6.627c1.565-1.1,3.983-3.25,6.755-5.705 c-0.559-0.386-1.121-0.771-1.689-1.153C876.068,138.058,873.065,136.17,869.955,134.316z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M887.063,173.329c0.827,0.423,1.602,0.819,2.312,1.181c-0.373-7.018-0.51-13.265-0.472-18.674 c-4.216,2.524-8.72,4.769-13.101,7.144C879.201,165.857,882.988,169.219,887.063,173.329z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M873.73,166.252c-0.618-0.342-1.247-0.692-1.887-1.05c-2.031,1.188-4.008,2.431-5.88,3.781 c-0.912,0.659-1.797,1.326-2.673,1.996c4.285,0.935,8.09,1.786,11.45,2.549C874.432,171.181,874.095,168.758,873.73,166.252z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M893.363,176.578c2.443,1.323,2.599,1.658-0.078,1.155c-0.048,0.684-0.1,1.386-0.152,2.086 c3.265,3.695,6.663,7.893,10.155,12.708c1.103,1.521,2.214,3.098,3.334,4.747c2.992,4.404,6.037,9.265,9.113,14.673 c0.635-6.798,0.562-13.025-0.13-18.779c-0.179-1.488-0.397-2.947-0.659-4.372c-1.936-10.551-6.109-19.412-12.002-27.166 c-2.341-3.08-4.944-5.992-7.798-8.757c-0.237-0.23-0.484-0.454-0.725-0.682c-0.012,0.009-0.025,0.017-0.037,0.026 C894.337,158.724,894.029,166.824,893.363,176.578z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M889.51,176.927c-0.023-0.38-0.047-0.765-0.068-1.141c-0.803-0.847-1.597-1.667-2.379-2.457 c-2.643-1.354-5.865-3.021-9.587-5.03c1.151,2.249,2.262,4.456,3.33,6.619C884.418,175.752,887.301,176.427,889.51,176.927z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M852.121,153.417c-0.093,0.08-0.182,0.16-0.276,0.24c0.99,2.197,1.91,4.31,2.772,6.351 c0.859-0.25,1.67-0.552,2.431-0.901c0.633-0.48,1.266-0.96,1.902-1.437C856.746,156.327,854.467,154.911,852.121,153.417z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M836.942,158.888c2.226,2.653,5.134,5.44,8.827,8.384c0.244,0.05,0.478,0.099,0.72,0.149 c2.776-2.28,5.589-4.504,8.429-6.69c-0.101-0.242-0.198-0.479-0.301-0.723C850.117,161.319,844.273,161.202,836.942,158.888z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M824.438,1315.88c-0.066-0.141-0.133-0.282-0.198-0.424c0.019,0.195,0.041,0.389,0.064,0.583 C824.348,1315.986,824.393,1315.933,824.438,1315.88z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M865.386,1344.529c-3.05-2.964-6.044-5.892-8.985-8.785c-1.891-1.86-3.756-3.703-5.603-5.534 c-0.978-0.97-1.951-1.936-2.917-2.898c-0.334-0.333-0.669-0.665-1.001-0.997c-3.247,4.543-6.479,8.542-9.634,12.061 c4.852,4.088,11.166,7.904,19.142,11.443c4.857,2.155,10.332,4.208,16.465,6.158c0.947-0.531,1.87-1.054,2.768-1.568 C872.145,1351.075,868.73,1347.779,865.386,1344.529z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M859.447,1242.864c-0.181,0.554-0.362,1.097-0.543,1.639c0.265-0.348,0.53-0.695,0.796-1.044 C859.615,1243.26,859.53,1243.062,859.447,1242.864z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M853.489,1236.226c-6.187-2.838-11.546-9.616-14.002-20.119c-7.109-6.34-16.127-11.783-28.484-13.5 c-1.357,2.061-2.968,4.183-4.864,6.377c3.311,16.833,8.5,33.471,15.385,50.307C830.6,1252.073,841.159,1244.381,853.489,1236.226 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M814.886,1168.728c-1.957-6.563-4.653-13.296-6.423-20.801c-1.832-0.474-3.77-0.921-5.825-1.337 c-0.625,7.681-0.875,15.24-0.745,22.705C805.718,1169.836,810.036,1169.773,814.886,1168.728z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M916.611,1170.679c0.549-1.157,1.104-2.332,1.666-3.523c1.576-3.345,3.199-6.819,4.874-10.439 c0.532-1.149,1.067-2.306,1.609-3.483c-0.758,1.301-1.527,2.596-2.301,3.887c-1.754,2.923-3.548,5.82-5.377,8.691 c-1.297,2.037-2.611,4.061-3.939,6.072c-2.463,3.727-4.976,7.409-7.522,11.046c-0.184,0.263-0.37,0.526-0.554,0.788 c0.967,1.604,1.925,3.221,2.871,4.847c0.906-1.822,1.833-3.701,2.778-5.634C912.599,1179.076,914.565,1174.991,916.611,1170.679z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M833.42,1174.128c-0.258-4.284-0.564-8.378-0.913-12.282c-0.06-0.103-0.123-0.205-0.186-0.308 c-6.451,3.829-12.248,6.073-17.435,7.19c2.381,7.985,3.666,15.721,0.854,24.295C824.396,1187.63,831.02,1180.895,833.42,1174.128 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M828.848,251.887c0.197,0.079,0.395,0.16,0.591,0.239c0.398-0.284,0.797-0.57,1.198-0.858 C830.038,251.479,829.441,251.687,828.848,251.887z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M865.53,204.469c2.104,0.779,3.894,1.622,5.394,2.52c-1.001-4.048-2.108-8.746-3.336-14.163 c-1.125-0.464-2.224-0.911-3.299-1.341c0.65,5.342,0.26,9.279-0.889,12.069c0.137,0.104,0.264,0.204,0.403,0.308 C864.403,204.061,864.973,204.264,865.53,204.469z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M891.137,132.392c0.454-0.333,0.903-0.654,1.344-0.957C892.048,130.923,891.584,131.256,891.137,132.392z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M877.072,196.875c-0.222-3.732-0.553-7.746-0.998-12.068c-3.731-1.77-7.559-3.175-11.186-4.163 c0.96,4.415,1.859,8.47,2.701,12.182C870.57,194.057,873.729,195.404,877.072,196.875z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M864.062,233.89c1.609-1.21,3.111-2.437,4.483-3.67c2.865-2.576,5.164-5.182,6.674-7.736 c-0.228-0.682-0.463-1.416-0.709-2.216c-5.38,3.305-11.529,7.553-17.981,12.174c-0.627,0.449-1.256,0.901-1.888,1.357 c-7.899,5.692-16.177,11.852-24.003,17.469c2.423-0.858,4.888-1.813,7.356-2.85c3.311-1.391,6.625-2.928,9.849-4.576 c3.762-1.923,7.398-3.994,10.756-6.157C860.521,236.446,862.351,235.177,864.062,233.89z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M864.289,191.486c-0.402-3.306-1.199-7.144-2.467-11.587c-2.892-0.617-5.581-0.934-7.898-0.924 c-2.209,2.099-4.302,4.254-6.304,6.468C852.362,186.933,857.89,188.921,864.289,191.486z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M890.963,194.859c-0.5-0.492-1.019-0.974-1.552-1.447c0.648,1.502,1.262,2.967,1.86,4.417 c-0.083-0.774-0.16-1.533-0.238-2.295C891.01,195.31,890.985,195.082,890.963,194.859z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M889.375,174.511c0.023,0.426,0.043,0.844,0.067,1.275c0.021,0.375,0.046,0.761,0.068,1.141 c0,0.005,0,0.009,0.001,0.014c0.329,5.528,0.803,11.507,1.451,17.918c0.222,0.219,0.44,0.439,0.655,0.662 c0.053,0.055,0.11,0.109,0.162,0.164c0.005-0.057,0.01-0.111,0.016-0.167c0.54-5.631,0.979-10.848,1.337-15.698 c0.052-0.7,0.104-1.402,0.152-2.086c0.027-0.392,0.052-0.769,0.078-1.155c0.666-9.754,0.974-17.854,1.022-24.361 c-1.743,1.289-3.583,2.483-5.481,3.62C888.865,161.246,889.002,167.493,889.375,174.511z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M846.488,79.566c-0.151-1.611-0.288-3.176-0.41-4.698c-0.083-1.029-0.16-2.041-0.23-3.03 c-0.07-0.145-0.139-0.291-0.213-0.434c-0.158-0.172-0.315-0.343-0.474-0.516c-1.857,2.092-3.584,4.367-5.166,6.855 C842.285,78.372,844.454,78.98,846.488,79.566z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#7AC943",
                        d:
                          "M972.825,114.407c0.86-0.563,1.729-1.134,2.612-1.715c-5.951-2.966-11.778-6.278-17.464-9.822 c-1.316-0.82-2.625-1.653-3.926-2.497c-4.632-3.005-9.166-6.151-13.591-9.377c-4.141-3.02-8.187-6.109-12.129-9.217 c-2.695-2.125-5.342-4.259-7.938-6.386c-7.022-5.753-13.67-11.451-19.891-16.776c-16.838,8.827-30.876,17.07-42.384,24.176 c2.112,0.675,4.134,1.528,6.032,2.55c8.453,3.337,11.08,5.889,9.755,8.239c3.412,4.534,5.377,10.157,5.204,16.646 c4.194,5.038,7.935,9.469,11.405,13.271c1.942,2.127,3.799,4.055,5.605,5.785c1.161-0.552,2.207-0.882,3.079-0.898 c6.407-0.109,7.602,3.671,6.359,8.273C920.43,145.265,935.882,138.589,972.825,114.407z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M861.933,1588.463c-0.115-2.489-0.179-5.124-0.072-7.776c-1.994,1.044-4.192,2.006-6.554,2.893 C857.471,1585.191,859.683,1586.813,861.933,1588.463z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M899.504,1553.766c1.609-10.955-1.309-20.026-9.411-25.226c0.408,0.432,0.811,0.86,1.227,1.298 c-2.453-1.442-4.874-2.814-7.267-4.127c-3.254-1.069-7.035-1.711-11.353-1.875c-5.937-0.225-12.89,0.456-20.93,2.217 c-3.952,0.866-8.171,1.997-12.651,3.4c27.613,16.652,36.61,29.331,34.481,38.776c2.162,4.774,3.603,9.908,6.333,14.426 c1.131,1.873,2.373,3.586,3.701,5.176c1.355-1.815,2.632-3.63,3.826-5.439C894.106,1572.328,898.228,1562.456,899.504,1553.766z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#006837",
                        d:
                          "M825.992,1534.075c-2.864,1.113-5.825,2.331-8.871,3.643c0.581,1.908,1.228,3.75,1.946,5.522 C821.36,1540.227,823.671,1537.167,825.992,1534.075z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M852.497,1486.435c-0.564-0.254-1.129-0.51-1.689-0.755c-4.714-2.061-9.248-3.771-13.601-5.171 c-1.439,9.956-3.231,17.828-5.75,20.934c18.657-0.922,23.923-6.943,24.198-12.704c-0.318-0.438-0.621-0.861-0.911-1.27 C853.991,1487.116,853.241,1486.771,852.497,1486.435z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M899.668,1515.934c-0.209-0.165-0.416-0.323-0.624-0.487c-0.671-0.527-1.341-1.051-2.008-1.566 c-4.695-3.625-9.284-6.944-13.766-9.985c-8.523-5.783-16.651-10.544-24.356-14.406c-0.007,0.01-0.015,0.02-0.022,0.03 c-0.449,0.597-0.895,1.185-1.339,1.769c4.777,6.298,12.133,15.12,23.146,27.154c5.539-0.868,11.449-1.667,17.737-2.371 C898.846,1516.026,899.253,1515.979,899.668,1515.934z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M858.7,1489.382c0.055,0.028,0.111,0.057,0.166,0.084c0.015,0.008,0.031,0.016,0.046,0.023 c3.024-4.019,6.166-8.336,9.416-12.962c-0.121-0.053-0.242-0.105-0.362-0.158c-3.009,4.248-6.077,8.558-9.186,12.9 C858.754,1489.308,858.727,1489.345,858.7,1489.382z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M856.884,1488.49c-0.407-0.198-0.816-0.4-1.221-0.592c0.009,0.279,0.006,0.56-0.007,0.841 c0.549,0.756,1.143,1.557,1.784,2.403c0.421-0.587,0.841-1.174,1.261-1.76C858.092,1489.078,857.487,1488.783,856.884,1488.49z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M827.761,1531.715c1.537-2.054,3.077-4.12,4.62-6.198c1.711,0.967,3.353,1.92,4.944,2.862 c4.047-1.295,8.606-2.619,13.702-3.92c5.246-1.34,11.064-2.655,17.475-3.891c1.364-0.263,2.751-0.523,4.169-0.778 c-15.354-7.557-29.387-12.791-42.186-17.419c-1.219,0.848-2.594,0.666-4.16-0.806c0.641,0,1.266-0.006,1.881-0.017 c-4.381-1.58-8.616-3.1-12.706-4.631c-1.378,8.634-2.112,17.331-1.247,26.218c3.836-0.076,7.93-0.345,12.297-0.839 c1.022,0.552,2.023,1.099,3.008,1.643c-5.555,5.585-9.947,9.41-12.998,11.854c0.061,0.224,0.12,0.45,0.183,0.672 C819.356,1535.169,823.001,1533.528,827.761,1531.715z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M839.119,1529.452c-0.59-0.356-1.188-0.713-1.795-1.072c-3.584,1.147-6.766,2.271-9.563,3.336 c-0.59,0.789-1.18,1.575-1.769,2.36c-2.321,3.092-4.632,6.151-6.925,9.165c7.008,17.296,20.331,28.502,36.24,40.34 c2.362-0.887,4.56-1.849,6.554-2.893c0.292-7.237,1.894-14.603,7.492-19.484c1.804,2.15,3.122,4.539,4.248,7.025 C875.73,1558.783,866.732,1546.104,839.119,1529.452z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M842.225,1433.636c0.076-0.672,0.152-1.339,0.23-1.996c0.581-4.925,1.207-9.413,1.92-13.173 c-1.196-0.965-2.412-1.925-3.65-2.881c-9.186-2.394-18.259-4.919-27.117-7.62c2.878,12.955,8.756,17.353,21.344,28.777 c2.084,1.891,4.219,3.618,6.388,5.245C841.629,1439.122,841.921,1436.324,842.225,1433.636z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M837.749,1458.451c-4.574-3.149-9.208-6.376-14.075-9.568c-0.034,0.619-0.078,1.237-0.122,1.855 C828.064,1453.346,832.789,1455.922,837.749,1458.451z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M884.167,1461.63c-2.435-4.12-6.019-9.159-10.64-14.71c-0.49-0.589-0.993-1.183-1.506-1.783 c-2.83-3.306-6.01-6.771-9.517-10.314c-0.139-0.14-0.276-0.28-0.416-0.421c-0.172-0.172-0.345-0.345-0.519-0.518 c0.053,0.193,0.108,0.39,0.161,0.585c0.062,0.224,0.123,0.443,0.185,0.67c0.88,3.212,1.8,6.735,2.764,10.588 c0.102,0.406,0.204,0.819,0.307,1.232c0.829,3.341,1.69,6.924,2.584,10.757c4.732,2.576,9.473,5.234,14.144,8.276 c2.518,1.641,4.593,3.384,6.182,5.089C888.011,1469.266,886.725,1465.958,884.167,1461.63z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M852.558,1409.422c-0.037-0.054-0.074-0.114-0.11-0.167c-0.137-0.028-0.275-0.056-0.412-0.085 C852.208,1409.254,852.385,1409.339,852.558,1409.422z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M857.204,1419.726c-4.166-1.012-8.323-2.044-12.46-3.102c-0.125,0.591-0.248,1.209-0.368,1.843 c4.15,3.347,8.046,6.736,11.668,10.1c1.92,1.783,3.761,3.558,5.525,5.317c-0.865-3.118-1.691-5.93-2.478-8.452 C858.436,1423.337,857.807,1421.433,857.204,1419.726z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M828.206,1501.549c-0.615,0.01-1.24,0.017-1.881,0.017c1.567,1.472,2.942,1.654,4.16,0.806 c12.799,4.628,26.832,9.862,42.186,17.419c3.716,1.829,7.509,3.794,11.381,5.92c2.393,1.314,4.814,2.685,7.267,4.127 c-0.416-0.439-0.819-0.866-1.227-1.298c-0.503-0.532-1.001-1.061-1.492-1.583c-2.824-3.002-5.454-5.838-7.904-8.514 c-11.013-12.034-18.369-20.856-23.146-27.154c-0.037-0.049-0.075-0.099-0.112-0.147c-0.641-0.847-1.234-1.647-1.784-2.403 c-0.276,5.761-5.541,11.782-24.198,12.704c2.518-3.106,4.311-10.978,5.75-20.934c0.516-3.571,0.987-7.408,1.43-11.39 c0.31-2.786,0.606-5.642,0.894-8.527c-5.566-2.215-10.995-4.394-16.264-6.528c-1.462,14.489-5.488,28.585-7.766,42.854 C819.59,1498.448,823.825,1499.969,828.206,1501.549z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M855.663,1487.898c-0.054-1.625-0.478-3.207-1.078-4.624c-2.63-6.213-8.649-9.254-1.876,1.2 c0.581,0.897,1.256,1.893,2.036,2.996c0.289,0.409,0.592,0.832,0.911,1.27C855.669,1488.458,855.672,1488.177,855.663,1487.898z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M819.691,1322.791c-1.036,1.894-1.906,3.842-2.624,5.831c-1.287,3.569-2.073,7.267-2.408,11.017 c4.236,3.26,8.211,6.361,11.867,9.321c3.388-2.934,6.998-6.432,10.719-10.583c3.154-3.52,6.386-7.518,9.634-12.061 c1.991-2.786,3.986-5.777,5.972-8.988c2.514-4.066,5.011-8.474,7.459-13.28c1.267-2.488,2.523-5.073,3.76-7.772 c-3.01,0.49-5.859,1.085-8.562,1.773c-5.45,1.388-10.28,3.165-14.542,5.259c-0.677,0.333-1.341,0.673-1.99,1.022 c0.782,2.389,1.536,4.777,2.237,7.164c2.47,8.42,3.91,20.85-8.58,15.13c-3.073-1.405-5.919-5.858-8.195-10.743 c-0.045,0.053-0.09,0.106-0.134,0.159C822.507,1318.19,820.972,1320.448,819.691,1322.791z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M891.676,1388.285c0.74-0.598,1.479-1.217,2.217-1.87c0.613-0.542,1.225-1.106,1.836-1.687 c0.58-0.551,1.158-1.119,1.735-1.705c9.13-9.269,17.954-22.966,25.83-42.135c3.645-8.871,7.087-18.908,10.26-30.234 c0.847-3.024,1.675-6.144,2.482-9.352c-2.383,2.637-8.729,4.815-21.228,6.979c-4.748,1.923-8.212,3.514-10.674,4.862 c-2.603,1.425-4.094,2.58-4.797,3.568c-1.279,1.797,0.029,3.046,1.901,4.382c0.987,0.705,2.13,1.435,3.134,2.283 c2.919,2.464,4.649,5.925-2.117,12.68c-0.47,0.469-0.979,0.953-1.533,1.454c-3.05,2.76-7.421,6.027-13.51,9.924 c-2.571,1.646-5.443,3.402-8.66,5.284c-0.944,0.552-1.927,1.118-2.93,1.691c-0.899,0.514-1.821,1.036-2.768,1.568 c-2.711,1.52-5.621,3.113-8.747,4.782c-0.84,0.449-1.696,0.903-2.567,1.363c-9.511-13.678-30.05-24.805-23.889-3.599 c14.003,13.086,18.598,23.279,6.526,32.771c8.561,3.477,17.345,5.661,25.228,6.38c1.207,0.109,2.435,0.203,3.672,0.288 c1.719-0.435,3.446-0.991,5.18-1.677C882.719,1394.516,887.216,1391.89,891.676,1388.285z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M841.552,1279.193c1.149-1.336,2.288-2.814,3.416-4.447c2.778-4.024,5.493-8.99,8.163-15.075 c0.908-2.07,1.811-4.266,2.709-6.602c0.213-0.554,0.426-1.12,0.638-1.69c0.812-2.176,1.62-4.467,2.425-6.875 c0.181-0.542,0.362-1.085,0.543-1.639c0.083,0.198,0.168,0.396,0.253,0.595c1.968,4.621,4.192,9.453,6.688,14.431 c1.815,3.619,3.774,7.316,5.882,11.064c4.535,8.062,9.763,16.362,15.743,24.647c3.784,5.243,7.871,10.479,12.273,15.645 c0.306,0.359,0.61,0.718,0.92,1.077c5.184-0.688,9.69-1.364,13.601-2.041c12.5-2.164,18.846-4.342,21.228-6.979 c1.841-2.038,1.323-4.349-0.554-7.142c-2.182-3.246-6.193-7.144-10.441-12.012c-1.735-1.989-3.509-4.14-5.215-6.475 c-2.843-3.891-5.492-8.295-7.45-13.312c-0.938-2.403-1.717-4.946-2.282-7.642c-0.139-0.662-0.263-1.335-0.376-2.016 c-0.088-0.538-0.168-1.081-0.239-1.63c-0.218-1.691-0.352-3.437-0.388-5.242c-3.199-2.855-6.736-6.211-10.651-10.137 c-8.232-5.347-14.065-10.407-17.987-15.398c-5.859,15.279-17.399,20.316-26.964,15.929 c-12.329,8.155-22.889,15.846-31.966,23.066c0.092,0.224,0.179,0.447,0.271,0.671c3.614,8.788,7.365,17.754,10.858,26.789 c1.615-0.922,3.205-2.042,4.773-3.392C838.817,1282.16,840.192,1280.773,841.552,1279.193z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M931.864,1191.286c-2.996,1.522-5.919,3.029-8.805,4.528c-2.904,1.509-5.77,3.01-8.565,4.497 c1.728,3.231,3.387,6.45,4.959,9.624c0.49-0.884,1.001-1.777,1.531-2.678C923.949,1202.216,927.541,1196.9,931.864,1191.286z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M913.432,1249.573c4.135,3.416,7.578,5.812,10.393,7.309c7.36,3.913,10.435,1.688,10.443-4.416 c0.002-1.906-0.29-4.184-0.849-6.779c-0.846-3.923-2.295-8.557-4.214-13.663c-7.82,1.47-15.642,1.521-19.781-1.22 c-10.926-7.231,3.29-13.86,11.204-18.475c-0.385-0.794-0.777-1.592-1.174-2.393c-1.573-3.174-3.232-6.393-4.959-9.624 c-2.098-3.922-4.294-7.859-6.557-11.748c-0.946-1.626-1.904-3.242-2.871-4.847c-0.098-0.162-0.195-0.326-0.293-0.488 c-1.496-2.474-3.013-4.915-4.541-7.306c-3.614-5.655-7.291-11.026-10.907-15.89c0.004-0.017,0.009-0.034,0.013-0.05 c-0.007,0.014-0.013,0.028-0.02,0.041c-0.617-0.83-1.233-1.645-1.846-2.445c-0.794-1.035-1.583-2.042-2.368-3.02 c-1.83,1.282-3.651,2.579-5.458,3.893c0.297,1.028,0.582,2.047,0.85,3.052c1.053,3.95,1.882,7.722,2.528,11.29 c-0.308,0.637-0.612,1.269-0.91,1.896c-0.718-3.925-1.631-8.043-2.75-12.351c-0.264-1.015-0.539-2.039-0.826-3.075 c-16.644,12.213-31.868,25.857-40.462,41.926c-0.123,5.598,0.396,10.576,1.411,14.918c2.456,10.503,7.815,17.281,14.002,20.119 c9.565,4.387,21.105-0.65,26.964-15.929c3.922,4.991,9.755,10.051,17.987,15.398c3.914,3.926,7.451,7.282,10.651,10.137 c0.632,0.564,1.25,1.108,1.855,1.632C911.799,1248.204,912.631,1248.912,913.432,1249.573z M884.392,1182.38 c1.116,10.782,0.466,18.818-0.492,22.917c-0.033,0.144-0.068,0.281-0.102,0.415c0.016-0.145,0.03-0.291,0.045-0.437 c0.589-5.791,0.586-12.375-0.173-19.776c0.17-0.957,0.355-1.952,0.55-2.974c0.041-0.213,0.08-0.422,0.122-0.639 C884.359,1182.052,884.375,1182.215,884.392,1182.38z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M891.095,1156.364c0.57-1.184,1.142-2.381,1.716-3.602c0.773-1.646,1.547-3.329,2.319-5.048 c0.001-0.002,0.002-0.004,0.003-0.006c-1.021,0.683-2.042,1.371-3.064,2.062c-0.228,0.821-0.45,1.629-0.668,2.43 c-0.411,1.504-0.804,2.971-1.183,4.408c-0.302,1.146-0.597,2.272-0.88,3.376C889.919,1158.798,890.506,1157.588,891.095,1156.364 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M806.642,1132.374c-0.004,0.352-0.002,0.7,0,1.049c6.892,1.715,14.168,3.36,21.875,4.912 c-8.84-13.923-13.567-25.146-15.552-32.768C808.442,1115.73,806.737,1124.52,806.642,1132.374z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M817.088,1097.355c-3.524-5.048-5.945-3.496-5.115,3.233c0.176,1.43,0.5,3.094,0.991,4.978 c0.485-1.091,1.008-2.2,1.559-3.323C815.307,1100.648,816.163,1099.018,817.088,1097.355z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M815.741,1193.023c2.811-8.574,1.527-16.31-0.854-24.295c-4.851,1.045-9.169,1.108-12.992,0.567 c0.104,5.948,0.451,11.836,1.018,17.683c3.492,2.024,7.176,4.152,11.083,6.401c-2.251,2.562-5.624,3.822-9.821,4.101 c0.557,3.848,1.211,7.682,1.964,11.505c1.896-2.194,3.508-4.316,4.864-6.377C813.198,1199.273,814.734,1196.094,815.741,1193.023 z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M832.321,1161.538c0.05-0.03,0.1-0.059,0.15-0.089c0.012,0.133,0.025,0.264,0.036,0.397 c0.349,3.905,0.655,7.998,0.913,12.282c0.637,10.587,0.977,22.343,0.912,35.347c1.043-2.834,2.303-5.593,3.744-8.286 c8.594-16.069,23.818-29.713,40.462-41.926c0.369-0.271,0.738-0.542,1.108-0.812c1.806-1.314,3.628-2.611,5.458-3.893 c1.483-1.039,2.971-2.068,4.462-3.087c0.834-0.571,1.669-1.138,2.503-1.703c1.022-0.691,2.043-1.379,3.064-2.062 c6.049-4.049,12.06-7.958,17.8-11.772c-15.884-10.892-28.982-23.284-15.169-28.633c7.61-2.94,19.27,12.99,24.42,17.42 c1.074,0.922,2.154,1.807,3.237,2.679c2.743-1.953,5.361-3.888,7.817-5.813c3.56-2.789,6.778-5.557,9.559-8.323 c4.705-4.679,8.142-9.354,9.807-14.12c1.737-4.975,1.537-10.051-1.173-15.337c-0.988-1.927-2.309-3.883-3.994-5.872 c-0.267-0.315-0.534-0.63-0.819-0.946c-1.545-1.716-3.362-3.458-5.465-5.228c-13.339,6.086-35.718,15.728-48.021,12.341 c-26.96-7.43,24.11-17.05,28.33-18.54c2.581-0.912,4.593-1.975,6.294-3.148c-3.026-1.81-6.354-3.653-9.987-5.531 c-0.24-0.124-0.482-0.249-0.726-0.373c-2.187-1.12-4.494-2.254-6.907-3.4c-4.707-2.236-9.834-4.52-15.435-6.861 c-4.518-1.888-9.35-3.813-14.479-5.775c-3.35-1.281-6.817-2.577-10.437-3.891c-2.115,1.901-4.162,3.772-6.145,5.616 c-14.413,13.398-25.396,25.302-33.69,35.98c-2.284,2.94-4.365,5.788-6.255,8.548c-0.514,0.75-1.013,1.494-1.499,2.231 c-1.908,2.895-3.606,5.691-5.11,8.396c1.424,2.041,3.028,5.16,4.671,9.453c2.864,7.486,5.843,18.538,8.183,33.659 c0.005,0.033,0.01,0.068,0.015,0.102c-0.002-0.004-0.005-0.007-0.007-0.011c-0.48-0.735-0.951-1.464-1.409-2.185 c-7.325,1.042-14.458,1.875-21.381,2.511c0.319,2.429,0.768,4.772,1.304,7.043c1.77,7.505,4.465,14.238,6.423,20.801 C820.073,1167.611,825.87,1165.367,832.321,1161.538z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M898.408,1016.322c3.024-0.463,6.326-1.257,9.931-2.421c1.273-0.411,2.584-0.869,3.935-1.375 c0.68-0.255,1.369-0.521,2.07-0.801c0.346-0.138,0.695-0.28,1.046-0.425c0.908-0.374,1.83-0.764,2.772-1.18 c1.789-0.79,3.637-1.653,5.551-2.6c5.166-2.556,10.79-5.692,16.918-9.485c-0.553-0.101-1.094-0.196-1.643-0.295 c-15.251-2.749-28.836-4.572-40.951-5.606c-6.892-0.588-13.308-0.921-19.289-1.026c-4.313-0.076-8.401-0.034-12.274,0.118 c-0.016,0.017-0.031,0.035-0.047,0.052c1.456,7.738,4.224,15.305,9.82,20.173 C881.135,1015.704,888.187,1017.888,898.408,1016.322z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M866.426,991.278c-0.003-0.017-0.006-0.034-0.01-0.05c0.019-0.001,0.038-0.001,0.056-0.002 c3.755-4.186,5.521-11.191,3.765-22.894c-0.272-1.815-0.627-3.74-1.075-5.787c-2.476-0.222-4.88-0.384-7.212-0.491 c-0.012,0.241-0.031,0.477-0.045,0.716c-1.8,0.716-4.934,5.374-10.588,15.956c-0.418,0.783-0.853,1.603-1.299,2.452 c-1.886,3.585-4.024,7.758-6.456,12.59c2.18-0.43,4.458-0.813,6.836-1.147c-1.303,1.631-2.705,3.211-4.191,4.753 c0.222-0.003,0.444-0.005,0.666-0.009c1.334-0.28,3.944-0.526,6.74-0.431C858.681,996.294,863.254,994.779,866.426,991.278z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#603813",
                        d:
                          "M841.757,997.372c0.618-1.237,1.222-2.443,1.807-3.604c-1.998,0.394-3.914,0.828-5.753,1.297 c-3.304,0.843-6.365,1.8-9.196,2.859c-0.124,0.046-0.244,0.095-0.368,0.142c-2.19,0.454-4.089,1.189-5.565,2.366 c-1.142,0.544-2.236,1.107-3.295,1.685c1.785,5.776,4.089,11.477,5.958,17.336c7.494-7.964,9.218-18.822,20.67-21.874 c0.066-0.068,0.13-0.137,0.196-0.206C844.723,997.391,843.233,997.383,841.757,997.372z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M828.835,947.761c0.198-0.45,0.377-0.896,0.546-1.338c0.008-0.02,0.015-0.04,0.022-0.06 c-1.698,2.592-3.254,5.423-4.655,8.366c0.714-0.982,1.36-1.949,1.941-2.901C827.539,950.44,828.253,949.084,828.835,947.761z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M827.653,963.737c-0.519,0.479-1.077,0.949-1.662,1.411c1.34-0.331,2.747-0.646,4.221-0.943 c2.747-0.552,5.724-1.036,8.936-1.416c6.619-0.783,14.223-1.128,22.803-0.735c2.332,0.107,4.736,0.269,7.212,0.491 c1.735,0.156,3.507,0.343,5.313,0.56c1.243,0.15,2.504,0.316,3.781,0.496c1.001,0.141,2.01,0.291,3.031,0.452 c1.665,0.263,3.358,0.553,5.077,0.87c1.358,0.251,2.732,0.517,4.124,0.803c11.997,2.467,25.253,6.285,39.753,11.898 c3.583,1.387,7.24,2.88,10.975,4.493c-0.774-1.213-1.545-2.417-2.315-3.617c-0.706-1.099-1.41-2.192-2.112-3.281 c-1.198-1.856-2.393-3.696-3.583-5.521c-1.216-0.735-2.366-1.376-3.402-1.796c-6.57-2.68-13.01-3.98-19.84-6.25 c-13.74-4.55-26.38-9.83-39.1-16.86c-5.57-3.08-11.42-7.2-17.4-9.43c-8.59-3.2-4.71-4.9-12.92-0.33 c-3.321,1.846-6.39,4.83-9.147,8.488c4.358,0.293,8.799,0.575,13.202,0.796c-3.797,3.78-7.31,7.123-10.54,10.071 c-0.718,0.656-1.425,1.295-2.115,1.912c-2.823,2.523-5.417,4.732-7.773,6.649c-0.554,0.451-1.092,0.881-1.621,1.301 c-0.785,0.623-1.544,1.214-2.272,1.771c-0.037,0.114-0.075,0.229-0.112,0.343C822.598,965.516,825.084,964.645,827.653,963.737z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M907.729,944.504c3.104,1.266,6.239,2.497,9.404,3.689c0.78,0.293,1.551,0.584,2.318,0.873 c-0.672-0.986-1.342-1.966-2.011-2.94C914.141,945.626,910.903,945.084,907.729,944.504z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF7BAC",
                        d:
                          "M848.821,909.119c2.164-25.593-17.643-41.554-31.916-56.944c0.772,4.549,1.8,8.917,3.099,13.089 c5.158,16.6,14.316,30.312,26.207,41.875C847.071,907.786,847.939,908.444,848.821,909.119z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M852.334,767.999c0.017,0.023,0.034,0.047,0.051,0.07c3.358-2.822,6.652-5.192,10.033-7.148 c-0.465-0.71-0.936-1.415-1.408-2.118C857.755,761.815,854.754,764.963,852.334,767.999z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M852.306,746.825c-0.824-1.045-1.659-2.078-2.504-3.1c-0.375,1.126-0.773,2.271-1.194,3.434 C849.81,747.048,851.036,746.937,852.306,746.825z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M830.691,788.147c-0.281,1.046-0.559,2.082-0.831,3.09c2.202-2.512,4.304-4.877,6.326-7.103 C834.256,785.498,832.427,786.835,830.691,788.147z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M832.052,783.043c0.205-0.771,0.412-1.557,0.621-2.347c-1.715,3.009-3.544,6.103-5.49,9.281 c-0.168,0.427-0.334,0.857-0.5,1.288c1.275-1.023,2.613-2.063,4.008-3.118C831.135,786.492,831.588,784.793,832.052,783.043z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M818.326,817.567c-1.065,0.254-2.128,0.509-3.187,0.766c0.077,4.214,0.131,8.359,0.146,12.423 C815.968,827.174,817.005,822.616,818.326,817.567z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M825.814,793.573c0.286-0.774,0.575-1.545,0.869-2.308c-0.189,0.152-0.38,0.304-0.566,0.455 c-1.079,1.74-2.184,3.5-3.333,5.291c0.422-1.164,0.807-2.33,1.165-3.498c-3.554,2.993-6.595,5.852-9.16,8.59 c0.08,3.544,0.162,7.054,0.237,10.529c1.497,0.183,2.998,0.348,4.506,0.483C821.292,806.82,823.425,800.034,825.814,793.573z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M917.441,946.126c5.659,0.858,11.501,1.594,17.527,2.191c3.996,0.396,8.071,0.731,12.227,1 c0.399,0.026,0.794,0.055,1.195,0.08c-0.478-0.349-0.95-0.725-1.419-1.115c-1.354-1.127-2.671-2.432-3.959-3.881 c-7.737-8.709-14.365-23.034-20.969-40.537c-1.697-4.496-3.392-9.2-5.105-14.073c-0.9-2.561-1.804-5.165-2.716-7.813 c-2.105-6.112-4.251-12.437-6.468-18.904c-1.703-4.966-3.45-10.014-5.253-15.112c-0.647-1.828-1.298-3.66-1.96-5.499 c-0.632-1.755-1.274-3.515-1.921-5.277c-0.962-2.618-1.941-5.242-2.94-7.869c-0.099-0.26-0.199-0.521-0.298-0.781 c-13.406,1.054-22.414,10.162-31.599,21.968c-7.51,9.66-20.84,19.44-24.02,12.51c-1.14-2.49-0.98-7.13,1.23-14.7 c7.476-25.666,27.436-33.14,49.257-32.769c-0.998-2.438-2.017-4.87-3.056-7.294c-5.712-13.322-12.075-26.39-19.347-38.623 c-1.111,4.572-2.134,9.494-3.059,14.803c-15.975,3.012-19.988-0.996-17.771-7.564c-0.523,0.335-1.032,0.666-1.544,0.997 c-1.019,0.66-2.022,1.316-2.998,1.964c-1.849,1.228-3.617,2.435-5.315,3.622c-1.142,2.785-3.561,5.828-7.673,9.164 c-0.397,1.466-0.787,2.896-1.167,4.281c-1.73,6.31-3.278,11.789-4.657,16.517c4.085,0.239,8.208,0.294,12.361,0.148 c12.324-2.642,24.909-5.027,37.521-7.034c-12.608,4.406-25.195,6.601-37.521,7.034c-4.464,0.957-8.893,1.947-13.276,2.967 c-1.954,6.585-3.531,11.507-4.767,15.023c-0.791,2.248-1.445,3.932-1.966,5.094c-0.225,0.501-0.424,0.898-0.601,1.215 c0.207,4.977,0.715,9.742,1.492,14.316c14.273,15.39,34.08,31.351,31.916,56.944c-0.881-0.675-1.75-1.333-2.61-1.981 c16.38,15.928,37.962,27.763,61.519,37.366C910.903,945.084,914.141,945.626,917.441,946.126z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M836.573,783.709c-0.129,0.141-0.257,0.282-0.387,0.425c-2.021,2.226-4.124,4.591-6.326,7.103 c-0.942,1.074-1.895,2.165-2.875,3.294c0.898-0.65,1.727-1.288,2.502-1.917c4.112-3.336,6.531-6.379,7.673-9.164 c0.091-0.221,0.175-0.442,0.25-0.66C837.134,783.091,836.851,783.404,836.573,783.709z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M871.117,757.961c0.134-0.414,0.268-0.826,0.404-1.233c-3.167,1.109-6.17,2.495-9.103,4.193 c-3.381,1.956-6.675,4.326-10.033,7.148c-0.099,0.083-0.198,0.162-0.297,0.247c-2.405,3.062-4.21,5.999-5.071,8.55 c-2.217,6.568,1.796,10.577,17.771,7.564c0.925-5.309,1.948-10.231,3.059-14.803 C868.863,765.445,869.954,761.561,871.117,757.961z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M819.387,761.588c2.538,1.378,5.349,2.889,8.003,4.57c-0.127-5.489-0.648-10.969-1.393-16.409 c-4.22,0.642-7.411,1.282-9.751,1.936c-0.185,0.052-0.361,0.103-0.536,0.155c-0.284,0.084-0.554,0.169-0.811,0.254 c-0.107,2.262-0.196,4.528-0.265,6.797C815.987,759.734,817.62,760.629,819.387,761.588z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M1011.408,763.302c-0.004,1.022-0.011,2.04-0.022,3.052c3.505,0.447,7.074,0.898,10.76,1.355 C1018.627,766.469,1015.042,764.978,1011.408,763.302z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#1B1464",
                        d:
                          "M837.508,776.685c0.614,1.884,0.655,3.913-0.098,6.105c1.293-1.409,2.554-2.76,3.79-4.054 c0.461-0.483,0.916-0.951,1.37-1.418c3.309-3.404,6.445-6.397,9.519-9.002c0.083-0.106,0.161-0.211,0.246-0.317 c2.42-3.037,5.421-6.185,8.676-9.195c2.928-2.709,6.059-5.302,9.164-7.601c1.57-1.163,3.132-2.253,4.656-3.24 c-0.874,2.045-1.718,4.209-2.53,6.5c-0.263,0.742-0.522,1.498-0.779,2.266c0.58-0.203,1.165-0.398,1.756-0.582 c0.163-0.051,0.328-0.099,0.493-0.148c3.972-1.197,8.23-1.989,12.954-2.425c5.167-0.476,10.9-0.529,17.426-0.228 c2.986,0.138,6.139,0.348,9.483,0.626c3.393,0.283,6.975,0.632,10.783,1.047c8.954,0.974,19.138,2.293,30.836,3.864 c12.124,1.628,25.88,3.525,41.634,5.595c-0.025-2.987-0.22-5.98-0.719-8.995c-2.835-1.571-5.686-3.201-8.547-4.862 c-4.781-2.777-9.588-5.642-14.389-8.469c-1.723-1.015-3.446-2.024-5.166-3.023c-0.162-0.094-0.325-0.189-0.488-0.283 c-2-1.16-3.997-2.304-5.989-3.424c-1.448-0.814-2.893-1.615-4.334-2.4c-7.205-3.924-14.312-7.435-21.212-10.097 c-7.276-2.807-14.32-4.669-21-5.066c-1.886-0.112-3.743-0.105-5.568,0.028c-8.728,0.635-16.724,4.206-23.665,11.982 c-2.752,3.083-5.339,6.822-7.738,11.307c-0.643,1.201-1.271,2.457-1.886,3.766c-3.584,0.258-6.984,0.511-10.215,0.761 c-4.949,0.382-9.498,0.756-13.663,1.124c-1.271,0.112-2.497,0.223-3.698,0.334c-2.924,8.078-6.961,17.048-12.302,26.993 c0.06,0.095,0.114,0.191,0.171,0.287C836.908,775.164,837.256,775.912,837.508,776.685z M881.594,744.155 c0.302-0.14,0.599-0.274,0.891-0.399c4.333-1.858,7.618-2.114,8.685,0.152c-2.547,0.169-5.017,0.336-7.417,0.501 c-0.659,0.045-1.301,0.09-1.95,0.135c-0.398,0.028-0.799,0.055-1.193,0.083C880.944,744.461,881.271,744.305,881.594,744.155z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M855.067,642.364c0.339-0.133,0.68-0.265,1.024-0.396c1.958-0.745,4.005-1.466,6.151-2.163 c-2.027,0.478-4.125,0.979-6.272,1.498c-0.314,0.076-0.629,0.152-0.946,0.229c-0.04,0.01-0.079,0.019-0.119,0.029 c-3.273,0.794-6.651,1.628-10.057,2.487c-0.577,1.295-1.148,2.593-1.716,3.894c2.516-1.414,5.26-2.767,8.241-4.059 C852.565,643.367,853.797,642.86,855.067,642.364z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M881.314,656.802c-0.071,2.466-0.152,4.984-0.244,7.547c2.692-2.188,5.302-4.171,7.549-5.784 c-0.699-0.796-1.393-1.582-2.085-2.366C884.762,656.406,883.026,656.606,881.314,656.802z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M825.997,749.75c0.745,5.44,1.266,10.92,1.393,16.409c0.077,3.336,0.008,6.676-0.245,10.011 c-0.105,1.388-0.242,2.775-0.414,4.16c-0.075,0.605-0.156,1.21-0.245,1.815c-0.468,3.204-1.129,6.4-2.016,9.582 c-0.166,0.596-0.34,1.191-0.522,1.785c-0.358,1.168-0.743,2.335-1.165,3.498c1.149-1.791,2.255-3.551,3.333-5.291 c0.364-0.587,0.71-1.162,1.066-1.743c1.946-3.178,3.775-6.271,5.49-9.281c0.811-1.423,1.597-2.827,2.357-4.213 c0.412-0.75,0.836-1.509,1.233-2.248c0.015-0.028,0.029-0.055,0.044-0.083c5.34-9.944,9.377-18.915,12.302-26.993 c0.421-1.163,0.818-2.307,1.194-3.434c1.34-4.02,2.381-7.798,3.172-11.363c1.065-4.799,1.657-9.196,1.836-13.217 c0.112-2.51,0.065-4.873-0.129-7.096c-0.063-0.719-0.14-1.423-0.233-2.112c-0.57-4.249-1.694-7.952-3.258-11.158 c-4.598-9.424-12.969-14.561-22.088-16.692c-0.878,2.229-1.752,4.456-2.62,6.676c-3.044,7.775-5.344,15.99-7.082,24.495 C821.395,724.951,824.285,737.244,825.997,749.75z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#B3B3B3",
                        d:
                          "M855.181,664.307c5.093,1.238,7.055,4.853,10.927,6.437c1.794,0.734,4.001,1.03,7.12,0.451 c1.938-1.834,3.991-3.644,6.038-5.359c-0.32-2.978-0.702-5.865-1.135-8.671c-5.543,0.628-10.754,1.198-15.656,1.717 c-2.461,0.26-4.852,0.509-7.157,0.742c-6.54,0.663-12.453,1.221-17.794,1.682c-0.022,0.002-0.045,0.004-0.067,0.006 c-0.924,2.236-1.841,4.474-2.748,6.715C845.157,663.844,851.154,663.327,855.181,664.307z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M881.687,628.367c0.002,0.527,0.006,1.046,0.008,1.579c0.015,6.415-0.057,13.264-0.22,20.551 c1.663,1.865,3.35,3.765,5.059,5.702c0.692,0.784,1.385,1.57,2.085,2.366c2.616-1.878,4.739-3.259,5.904-3.872 c0.61-0.32,1.218-0.625,1.825-0.92c-4.099-8.789-7.807-16.953-11.157-24.477c-0.124-0.279-0.244-0.549-0.367-0.827 c-0.266-0.597-0.529-1.192-0.79-1.781c-0.059-0.133-0.12-0.27-0.179-0.403c-0.451-1.019-0.892-2.019-1.33-3.014 c-0.305-0.693-0.609-1.384-0.908-2.065c0.013,0.877,0.026,1.761,0.036,2.655c0.007,0.63,0.014,1.262,0.019,1.901 C881.678,626.621,881.683,627.493,881.687,628.367z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M887.635,527.97c0.215,0.13,0.439,0.268,0.659,0.403c2.467-0.736,5.017-1.493,7.654-2.274 C893.107,526.747,890.342,527.369,887.635,527.97z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M879.018,529.862c-0.644,0.14-1.289,0.279-1.925,0.417c0.713,0.29,1.451,0.555,2.216,0.794 c0.326-0.099,0.651-0.197,0.98-0.297C879.846,530.466,879.42,530.161,879.018,529.862z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M877.589,724.543c-0.242,3.168-0.493,6.375-0.758,9.645c0.482-3.158,0.913-6.255,1.294-9.294 c0.592-4.717,1.061-9.288,1.423-13.726c0.012-0.147,0.021-0.291,0.033-0.437c0.005-0.06,0.009-0.12,0.014-0.18 c0.008-0.096,0.014-0.19,0.022-0.285c0.686-8.747,0.94-16.96,0.824-24.676c-0.109,0.092-0.218,0.184-0.327,0.275 c-0.409,7.743-0.904,15.875-1.488,24.401c-0.064,0.937-0.13,1.88-0.196,2.827C878.166,716.832,877.886,720.65,877.589,724.543z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M902.142,674.168c3.02,3.533,6.098,7.167,9.237,10.911c-2.435-4.932-4.759-9.706-6.99-14.341 c-0.528-1.097-1.048-2.181-1.565-3.261c-1.397,0.872-2.775,1.766-4.127,2.676C899.838,671.477,900.985,672.813,902.142,674.168z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M866.5,633.954c2.93,3.19,5.949,6.503,9.057,9.946c-1.12-4.741-2.401-9.205-3.808-13.412 c-2.456-7.339-5.295-13.9-8.346-19.785c-2.764,3.99-5.459,7.868-7.754,11.549C859.114,625.954,862.734,629.855,866.5,633.954z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M876.211,562.972c-6.703-0.304-14.135-0.485-21.375-0.265c2.231,2.122,5.181,8.244,9.584,18.407 c4.328-3.76,9.458-6.713,13.959-6.714C877.729,570.094,877.002,566.298,876.211,562.972z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M873.79,554.706c-1.162-3.195-2.404-5.667-3.693-7.501c-0.551-0.784-1.111-1.452-1.676-2.01 c-3.596-3.547-7.432-2.675-10.834,0.87c-1.619,1.687-3.138,3.979-4.487,6.685c8.519,1.915,15.688,3.526,21.671,4.881 C874.451,556.592,874.124,555.623,873.79,554.706z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M881.616,621.206c-0.24-15.594-1.019-28.412-2.193-38.824c-1.622,5.185-4.43,10.528-7.71,15.842 C874.57,604.95,877.845,612.61,881.616,621.206z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M829.713,567.422c4.673,7.968,10.78,14.94,18.693,20.428 C841.258,578.994,834.417,572.554,829.713,567.422z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M831.699,547.933c-3.504-0.79-7.16-1.615-10.986-2.48c0.89,3.255,1.914,6.439,3.092,9.532 C824.641,552.647,827.112,550.394,831.699,547.933z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M849.361,562.958c-1.35,5.188-2.115,10.859-2.028,16.34c1.566-8.891,2.829-14.376,4.363-16.468 C850.913,562.867,850.135,562.909,849.361,562.958z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#F7931E",
                        d:
                          "M881.07,664.349c0.091-2.564,0.173-5.082,0.244-7.547c0.061-2.138,0.115-4.239,0.161-6.304 c-2.006-2.25-3.98-4.45-5.919-6.597c0.992,4.199,1.858,8.617,2.576,13.264c0.433,2.807,0.815,5.693,1.135,8.671 C879.87,665.331,880.471,664.836,881.07,664.349z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M882.54,559.399c-0.625-0.143-1.267-0.29-1.929-0.441c-1.804-0.412-3.75-0.854-5.84-1.327 c-5.983-1.355-13.152-2.966-21.671-4.881c-1.756-0.395-3.579-0.805-5.45-1.226c-6.642,4.81-12.232,9.712-16.84,14.3 c5.217-1.567,11.682-2.438,18.552-2.866c0.774-0.048,1.552-0.091,2.335-0.128c1.041-0.05,2.089-0.09,3.141-0.122 c7.24-0.22,14.672-0.039,21.375,0.265c4.129,0.187,7.98,0.421,11.338,0.637C902.79,564.592,907.854,565.203,882.54,559.399z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M919.088,547.152c1.214,0.311,2.45,0.614,3.711,0.909c6.437,1.503,13.475,2.778,21.112,3.704 c4.409-6.569,14.177-17.933,13.742-22.592c-0.159-1.711-2.51-4.627-5.213-7.527c-20.839-0.531-38.995,1.929-54.686,6.185 c-2.399,0.651-4.742,1.341-7.026,2.071c-0.842-0.542-1.653-1.052-2.434-1.53c-0.22-0.135-0.444-0.273-0.659-0.403 c-4.312-2.599-7.651-4.21-10.045-5.034c-5.591-1.924-6.001,0.442-1.451,4.58c0.805,0.732,1.765,1.518,2.878,2.345 c0.403,0.3,0.828,0.604,1.271,0.914c0.437,0.305,0.893,0.615,1.369,0.929c0.802,0.181,1.631,0.336,2.489,0.461 c-0.376,0.139-0.752,0.277-1.125,0.418C890.719,537.406,902.806,542.982,919.088,547.152z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M1046.027,543.428c1.351-0.347,2.693-0.68,4.058-1.047c-0.742-0.277-1.475-0.54-2.213-0.811 c-12.975-4.765-25.322-8.569-37.059-11.521c-4.09,4.061-10.53,6.132-17.4,6.734c-12.98,1.15-19.43-3.63-27.83,7.86 c-1.94,2.654-3.581,5.515-5.003,8.494C984.457,554.238,1013.02,551.895,1046.027,543.428z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M829.117,566.375c0.139,0.246,0.277,0.491,0.419,0.735c0.417-0.426,0.84-0.855,1.274-1.287 C830.228,565.999,829.666,566.183,829.117,566.375z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#A67C52",
                        d:
                          "M831.699,547.933c5.734,1.293,11.041,2.487,15.95,3.591c2.776-2.01,5.737-4.003,8.886-5.951 c3.649-2.256,7.553-4.45,11.72-6.537c0.847-0.424,1.705-0.844,2.573-1.259c0.817-0.39,1.643-0.776,2.479-1.158 c3.103-1.414,6.339-2.765,9.713-4.036c-0.473-0.297-0.924-0.588-1.364-0.879c-0.811-0.183-1.592-0.395-2.349-0.632 c-0.765-0.239-1.503-0.504-2.216-0.794c-0.547-0.223-1.078-0.461-1.596-0.712c-2.844-1.378-5.26-3.166-7.352-5.224 c-0.592-0.583-1.159-1.188-1.702-1.811c-0.284-0.326-0.562-0.658-0.834-0.993c-11.169-13.792-12.104-35.289-27.071-32.347 c-2.675,0.526-5.803,1.839-9.514,4.111c-0.97,0.594-1.979,1.251-3.031,1.98c-1.664,1.152-3.436,2.48-5.323,3.991 c-1.641,1.315-3.371,2.77-5.195,4.374c0.239,14.132,1.613,28.549,5.236,41.806C824.539,546.318,828.195,547.143,831.699,547.933z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M835.62,482.309c0.968-0.272,1.919-0.553,2.844-0.847c3.734-1.187,7.116-2.551,10.15-4.071 c1.018-0.51,1.996-1.037,2.936-1.581c4.018-2.326,7.317-4.958,9.934-7.822c5.87-6.424,8.261-14.027,7.375-22.051 c-0.246-2.226-0.738-4.483-1.484-6.757c-0.585-1.782-1.326-3.574-2.213-5.368c-1.152-2.33-2.554-4.661-4.208-6.98 c-2.28,3.72-6.987,7.385-15.086,10.405c-2.835,1.057-6.087,2.034-9.796,2.908c-0.533-2.235-0.953-4.337-1.267-6.31 c-2.429-15.227,1.337-22.841,6.815-25.543c-2.844-2-5.907-3.942-9.173-5.815c-0.504,4.796-1.331,9.479-2.613,13.488 c-2.646,8.264-5.684,15.632-8.139,23.269c1.406,0.835,2.845,1.778,4.319,2.833c-1.732,0.265-3.534,0.511-5.416,0.737 c-1.276,4.395-2.306,8.941-2.924,13.84c3.76,7.277,7.056,16.063,1.72,22.234c-0.387,0.448-0.813,0.884-1.295,1.302 c-0.647,0.563-1.392,1.094-2.222,1.598c-0.066,1.369-0.125,2.75-0.178,4.14C823.142,485.175,829.779,483.949,835.62,482.309z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FF1D25",
                        d:
                          "M861.506,416.082c-3.322-6.788-12.965-11.205-19.886-7.791c6.094,4.286,11.207,8.83,15.308,13.485 c1.474,1.673,2.817,3.36,4.027,5.056C863.239,423.104,863.092,419.324,861.506,416.082z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#C69C6D",
                        d:
                          "M879.467,292.617c-7.055,1.34-16.214,5.617-27.944,14.69c-2.145,2.129-4.256,4.223-6.335,6.286 c4.361-0.15,9.396-1.608,15.466-4.68c10.865-5.504,22.05-10.149,33.721-13.709C891.061,292.74,886.23,291.333,879.467,292.617z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M831.926,264.241c0.263-0.183,0.526-0.365,0.787-0.544c3.707-2.522,7.3-4.562,10.733-6.352 c-0.485-0.165-0.982-0.343-1.472-0.513c-1.488-0.518-3-1.06-4.536-1.627c-0.107-0.04-0.214-0.079-0.321-0.118 c-0.359-0.133-0.711-0.26-1.072-0.395c-1.349-0.506-2.719-1.033-4.105-1.575c-0.827-0.324-1.662-0.656-2.501-0.992 c-0.196-0.078-0.394-0.159-0.591-0.239c-1.436-0.579-2.89-1.175-4.364-1.79c-4.458-1.863-9.08-3.889-13.867-6.079 c-2.251,6.234-3.452,12.488-3.129,19.042c2.308,0.585,2.243,0.629,0.048,1.04c0.425,5.769,2.053,11.785,5.186,18.232 c0.063-0.078,0.126-0.156,0.189-0.233C819.4,274.109,825.81,268.5,831.926,264.241z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M835.735,201.773c-0.313,0.054-0.64,0.109-0.988,0.167c-0.102,0.149-0.205,0.295-0.307,0.444 c0.525-0.174,1.022-0.333,1.489-0.477C835.864,201.862,835.799,201.818,835.735,201.773z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#9E005D",
                        d:
                          "M874.741,173.528c0.523,3.977,0.967,7.733,1.333,11.279c0.446,4.322,0.777,8.336,0.998,12.068 c3.603,1.586,7.407,3.308,11.447,5.192c-7.363,5.791-6.2,39.187-12.474,22.745c-0.568,2.997-1.305,5.63-2.197,7.964 c-0.18,0.472-0.366,0.932-0.559,1.38c-2.648,6.151-6.469,10.112-11.165,13.307c-0.33,0.225-0.664,0.446-1.002,0.664 c-0.934,0.6-1.9,1.175-2.896,1.735c-4.405,2.479-9.393,4.675-14.779,7.483c1.209,0.412,2.396,0.802,3.572,1.18 c7.63,2.455,14.547,4.19,20.711,5.16c8.867,1.396,16.164,1.196,21.745-0.762c3.073-1.078,5.639-2.676,7.646-4.848 c4.278-4.629,6.066-11.821,5.155-21.811c-0.008-0.088-0.013-0.174-0.022-0.262c-0.016-0.165-0.024-0.322-0.041-0.489 c-0.045-0.437-0.105-0.89-0.16-1.338c-0.097-0.782-0.192-1.563-0.32-2.377c-0.644-4.105-1.705-8.643-3.156-13.587 c-1.123-3.826-2.493-7.91-4.113-12.253c-0.976-2.618-2.033-5.32-3.193-8.13c-0.599-1.45-1.212-2.916-1.86-4.417 c-1.492-3.456-3.116-7.051-4.874-10.784c-1.177-2.5-2.433-5.083-3.731-7.71c-1.068-2.163-2.179-4.37-3.33-6.619 c-0.819-1.599-1.654-3.216-2.515-4.86c-0.509,0.279-1.018,0.559-1.523,0.844c0.099,0.661,0.196,1.319,0.291,1.969 C874.095,168.758,874.432,171.181,874.741,173.528z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M843.123,106.309c-4.411-2.693-9.492-3.52-12.467-1.843c4.337-3.892,7.673-7.459,10.189-10.74 c-3.697,2.385-6.965,4.504-9.829,6.321c-0.971,3.875-1.746,7.85-2.306,11.889C833.565,109.816,838.448,107.965,843.123,106.309z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M864.011,152.896c2.421-4.025,3.094-9.032,2.248-13.715c1.35-1.645,2.576-3.267,3.696-4.865 c1.26-1.8,2.377-3.569,3.36-5.306c0.902-1.594,1.695-3.161,2.375-4.697c0.365-0.825,0.697-1.641,1.001-2.449 c1.552-4.124,2.317-8.016,2.414-11.638c0.173-6.488-1.792-12.111-5.204-16.646c-2.204,3.909-15.341,7.258-30.778,12.728 c10.146,6.193,16.726,22.268-14.021,40.536c0.553,3.351,1.253,6.661,2.118,9.902c1.998,0.853,3.908,1.569,5.723,2.141 c7.331,2.314,13.175,2.43,17.675,1.119c-0.862-2.041-1.782-4.154-2.772-6.351c0.094-0.08,0.182-0.16,0.276-0.24 c0.168-0.145,0.332-0.288,0.498-0.433c1.919-1.662,3.719-3.308,5.405-4.937c0.493,2.401,0.975,4.737,1.446,7.009 c0.031,0.149,0.062,0.3,0.093,0.449c0.102,0.493,0.204,0.985,0.305,1.473c0.857-0.64,1.721-1.272,2.583-1.906 c0.11-0.129,0.212-0.263,0.318-0.394C863.225,154.109,863.639,153.515,864.011,152.896z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M861.821,179.898c1.268,4.444,2.065,8.281,2.467,11.587c1.075,0.431,2.174,0.877,3.299,1.341 c-0.841-3.713-1.74-7.768-2.701-12.182c-0.421-1.934-0.853-3.938-1.298-6.013c-0.235-1.096-0.472-2.206-0.714-3.342 c-1.026,0.792-2.026,1.594-3.005,2.402c0.559,1.647,1.063,3.225,1.517,4.737C861.535,178.923,861.684,179.419,861.821,179.898z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M854.919,160.73c0.708-0.544,1.419-1.084,2.13-1.624c-0.762,0.349-1.572,0.651-2.431,0.901 C854.721,160.252,854.817,160.488,854.919,160.73z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M870.923,206.99c1.384,5.595,2.566,9.957,3.587,13.278c0.246,0.8,0.482,1.534,0.709,2.216 c0.289,0.865,0.564,1.643,0.826,2.329c6.273,16.442,5.111-16.954,12.474-22.745c-4.04-1.884-7.844-3.606-11.447-5.192 c-3.343-1.472-6.501-2.818-9.484-4.048C868.815,198.244,869.922,202.941,870.923,206.99z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M864.146,85.342c-1.898-1.022-3.92-1.875-6.032-2.55c-0.128,0.079-0.256,0.158-0.384,0.237 C860.163,83.842,862.293,84.61,864.146,85.342z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M835.928,201.907c0.258,0.18,0.518,0.358,0.779,0.535c1.517,1.021,3.088,1.972,4.676,2.821 c9.073,4.852,18.699,6.353,22.017-1.708c1.148-2.79,1.539-6.728,0.889-12.069c-6.399-2.564-11.927-4.553-16.669-6.043 c-4.506,4.984-8.562,10.273-12.469,15.913c0.194,0.14,0.388,0.28,0.584,0.417C835.799,201.818,835.864,201.862,835.928,201.907z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M840.845,93.726c-2.516,3.281-5.852,6.848-10.189,10.74c2.975-1.676,8.056-0.849,12.467,1.843 c15.437-5.47,28.574-8.82,30.778-12.728c1.325-2.349-1.302-4.902-9.755-8.239c-1.853-0.731-3.983-1.5-6.415-2.313 c0.127-0.079,0.256-0.158,0.384-0.237c11.508-7.106,25.546-15.349,42.384-24.176c5.782-3.031,11.879-6.127,18.332-9.272 c2.204-1.074,4.46-2.155,6.744-3.239c1.508-0.716,3.02-1.431,4.563-2.151c0.909-0.424,1.845-0.85,2.766-1.275 c-9.321-3.142-19.901-3.573-31.69-0.196c0,0,0,0-0.01,0c0,0,0,0.01-0.01,0.01c-0.27,0.13-2.91,1-1.65,0.54 c-20.503,7.093-40.763,12.61-54.264,27.719c0.123,0.214,0.241,0.432,0.354,0.652c0.074,0.143,0.144,0.289,0.213,0.434 c0.27,0.562,0.509,1.14,0.711,1.737c0.637,1.883,0.913,3.945,0.694,6.213c-0.256-0.074-0.504-0.147-0.764-0.222 c-2.033-0.586-4.202-1.194-6.494-1.822c-2.017,3.174-3.805,6.683-5.31,10.61c-1.439,3.752-2.659,7.669-3.668,11.693 C833.88,98.23,837.148,96.111,840.845,93.726z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M843.123,106.309c-4.674,1.656-9.558,3.507-14.414,5.627c-1.593,11.476-1.501,23.439,0.392,34.909 C859.849,128.576,853.269,112.501,843.123,106.309z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M822.747,816.527c4.383-1.019,8.813-2.01,13.276-2.967c-4.153,0.146-8.276,0.091-12.361-0.148 c-1.381-0.081-2.759-0.177-4.131-0.299c-1.509-0.135-3.01-0.3-4.506-0.483c0.041,1.913,0.079,3.815,0.114,5.703 c1.059-0.257,2.122-0.512,3.187-0.766C819.794,817.217,821.268,816.87,822.747,816.527z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#CCCCCC",
                        d:
                          "M873.544,806.526c-12.611,2.007-25.197,4.392-37.521,7.034 C848.349,813.126,860.936,810.932,873.544,806.526z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M838.726,1064.519c-4.293-1.73-8.867-3.668-13.669-5.764c-0.581,1.319-1.154,2.65-1.719,3.998 c0.103,0.01,0.203,0.019,0.307,0.029C828.507,1063.273,833.525,1063.846,838.726,1064.519z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#FBB03B",
                        d:
                          "M828.541,1138.373c0.032-0.005,0.064-0.009,0.096-0.013c-0.041-0.008-0.08-0.017-0.121-0.025 c-7.706-1.552-14.983-3.197-21.875-4.912c-0.61-0.152-1.213-0.304-1.816-0.457c-0.222-0.056-0.448-0.112-0.67-0.169 c-0.392,2.83-0.733,5.642-1.023,8.437c1.335-0.109,2.677-0.225,4.028-0.349C814.083,1140.248,821.216,1139.415,828.541,1138.373z "
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M840.726,1415.586c1.337,0.349,2.676,0.695,4.018,1.038c4.137,1.058,8.294,2.09,12.46,3.102 c1.748,0.425,3.498,0.845,5.249,1.263c2.769,0.66,5.54,1.312,8.31,1.956c3.177,0.739,6.354,1.468,9.527,2.189 c0.932,0.212,1.863,0.423,2.794,0.633c2.887,0.653,5.77,1.3,8.645,1.941c-2.302-1.043-4.564-2.073-6.799-3.096 c-0.681-0.311-1.344-0.617-2.018-0.927c-6.015-2.759-11.791-5.444-17.332-8.056c-4.492-2.117-8.833-4.187-13.022-6.208 c-0.173-0.083-0.35-0.168-0.523-0.252c-12.79-2.671-25.774-6.575-39.972-11.588c0.388,4.03,0.889,7.428,1.545,10.383 C822.467,1410.667,831.54,1413.192,840.726,1415.586z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M837.65,1358.522c-3.236-3.024-6.973-6.202-11.123-9.563c-3.656-2.96-7.632-6.06-11.867-9.321 c-0.025-0.019-0.051-0.039-0.076-0.058c-2.61-2.009-5.32-4.08-8.112-6.214c-1.407-1.075-2.834-2.167-4.282-3.276 c-1.124,5.725-1.102,11.97,0.254,18.922c0.664,3.412,1.776,6.672,3.248,9.776c5.158-2.709,10.438-5.438,15.845-8.18 c-4.563,4.403-8.98,8.699-13.261,12.891c7.781,12.446,21.522,21.953,35.901,27.792 C856.248,1381.801,851.653,1371.608,837.65,1358.522z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#93278F",
                        d:
                          "M807.488,263.059c0.017,0.347,0.023,0.691,0.048,1.04C809.731,263.688,809.796,263.644,807.488,263.059z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#D4145A",
                        d:
                          "M813.995,1193.379c-3.907-2.249-7.591-4.377-11.083-6.401c0.341,3.515,0.758,7.015,1.262,10.502 C808.371,1197.201,811.744,1195.941,813.995,1193.379z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#ED1E79",
                        d:
                          "M839.53,1460.592c1.083,0.431,2.154,0.859,3.248,1.292c-1.673-1.13-3.348-2.276-5.029-3.433 c-4.96-2.53-9.685-5.105-14.197-7.713c-0.08,1.111-0.174,2.219-0.286,3.325C828.535,1456.198,833.964,1458.377,839.53,1460.592z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#999999",
                        d:
                          "M821.536,1350.61c-5.406,2.742-10.687,5.471-15.845,8.18c0.765,1.614,1.629,3.185,2.583,4.712 C812.556,1359.308,816.974,1355.013,821.536,1350.61z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#00FFFF",
                        d:
                          "M825.991,965.147c0.585-0.462,1.143-0.931,1.662-1.411c-2.569,0.908-5.055,1.779-7.488,2.626 c-0.328,1.023-0.633,2.038-0.919,3.043c2.104-1.089,4.017-2.247,5.703-3.471C825.306,965.675,825.654,965.413,825.991,965.147z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M883.161,275.847c-2.635,2.624-5.229,5.206-7.784,7.749c-7.849,7.811-15.327,15.246-22.448,22.316 c7.322-5.912,14.973-12.958,22.866-21.34c2.481-2.635,4.986-5.402,7.512-8.308c1.089-1.253,2.18-2.521,3.277-3.826 C885.432,273.585,884.297,274.715,883.161,275.847z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M865.041,382.738c0.494,0.231,0.982,0.458,1.478,0.691c0.239,0.113,0.474,0.221,0.714,0.334 c-0.301-0.2-0.593-0.391-0.892-0.589c-0.414-0.274-0.824-0.544-1.235-0.815c-12.062-7.95-22.752-14.569-32.16-20.072 c-2.265-1.325-4.463-2.591-6.581-3.79c-0.013-0.008-0.027-0.016-0.041-0.023c0.458,2.651,1.28,5.421,2.199,8.237 C839.962,371.361,852.122,376.682,865.041,382.738z"
                      }
                    }),
                    _vm._v(" "),
                    _c("path", {
                      attrs: {
                        fill: "#808080",
                        d:
                          "M851.523,307.307c0.466-0.463,0.937-0.93,1.406-1.396c-1.716,1.385-3.413,2.706-5.092,3.971 c-1.701,1.281-3.384,2.505-5.044,3.667c0.774,0.063,1.575,0.072,2.395,0.044C847.267,311.531,849.378,309.437,851.523,307.307z"
                      }
                    })
                  ]),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M1213.933,1004.863c0.36,0.08,0,4.91-0.17,2.89c-0.01-0.11-0.02-0.23-0.02-0.37c-0.02-0.28-0.03-0.57-0.04-0.85 c0-0.02,0-0.05,0-0.07c-0.01-0.14-0.01-0.28-0.01-0.43c0-0.26-0.01-0.51-0.01-0.77 C1213.763,1005.133,1213.853,1004.993,1213.933,1004.863z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M1213.683,1005.263c0.11-0.31,0.19-0.43,0.25-0.4C1213.853,1004.993,1213.763,1005.133,1213.683,1005.263z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M1213.703,1006.533c0.01,0.28,0.02,0.57,0.04,0.85C1213.723,1007.153,1213.713,1006.873,1213.703,1006.533z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M1210.853,350.093c-0.22-0.37-0.45-0.74-0.69-1.1C1210.423,349.393,1210.653,349.763,1210.853,350.093z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M1211.073,350.443c3.91,6.69-4.34,0.02-1.2-1.42c0.08-0.03,0.16-0.06,0.25-0.09c0.01,0.02,0.03,0.04,0.04,0.06 c0.24,0.36,0.47,0.73,0.69,1.1C1210.933,350.213,1211.013,350.323,1211.073,350.443z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M1070.583,239.343c2.77-1.03,2.32,3.95,0.24,0.44C1070.753,239.653,1070.663,239.503,1070.583,239.343z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M997.263,981.323c0.04,0.21,0.09,0.43,0.13,0.64c0.1,0.54,0.14,0.79,0.14,0.85 C997.433,982.643,996.593,978.773,997.263,981.323z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M917.453,474.633c0.03-0.01,0.05-0.01,0.06-0.01C917.503,474.633,917.483,474.633,917.453,474.633z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M917.453,474.633c-0.02,0.01-0.04,0.01-0.06,0.01s-0.05,0.01-0.08,0.01c-0.02,0.01-0.04,0.01-0.06,0.01 c-0.06,0-0.12,0-0.18,0.01C917.263,474.653,917.383,474.633,917.453,474.633z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M916.433,474.743c0.1-0.01,0.2-0.03,0.31-0.04c0.11-0.01,0.22-0.02,0.33-0.03c0.06-0.01,0.12-0.01,0.18-0.01 c-0.4,0.06-1.15,0.15-1.77,0.22C915.783,474.833,916.103,474.783,916.433,474.743z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M916.433,474.743c-0.33,0.04-0.65,0.09-0.95,0.14h-0.01c-0.34,0.04-0.64,0.07-0.82,0.09 C914.913,474.933,915.473,474.863,916.433,474.743z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M909.713,347.363c0-1.34,0.7,2.17,0.87,3.45c-0.34-0.94-0.63-1.9-0.85-2.89c-0.01-0.18-0.02-0.35-0.02-0.51 C909.713,347.393,909.713,347.383,909.713,347.363z"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d:
                        "M910.583,350.813c0.11,0.89-0.03,0.71-0.85-2.89C909.953,348.913,910.243,349.873,910.583,350.813z"
                    }
                  })
                ])
              ]),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M2138.176,111.899c0.01,0,0.01-0.01,0.02,0c-0.27,0.13-2.91,1-1.65,0.54c0.12-0.04,0.28-0.1,0.48-0.17s0.43-0.15,0.72-0.25 c0.13-0.04,0.25-0.07,0.38-0.11C2138.146,111.909,2138.166,111.899,2138.176,111.899z"
                }
              })
            ]
          ),
          _vm._v(" "),
          _vm._m(0)
        ])
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col d-flex align-items-center col-md-6" },
      [
        _c("div", [
          _c("h2", { staticClass: "mb-5" }, [
            _vm._v("What you can measure with the Tachistoscope?")
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "\n                        With the help of the tachistoscope, perception experiments can measure different effects of advertising materials, packaging designs and other motifs, which in reality are not perceived cognitively but only fleetingly and unconsciously. In this way it is possible to analyze which information is perceived and processed by the viewer at all.\n                        The diffuse impression, the emotional impression of the motif and the effects of colors and shapes become measurable.\n                        Particularly striking areas or details of an image template are easy to identify. By using the tachistoscope in the pre-test, individual elements of the advertising material can be subsequently optimized within the advertising effectiveness analysis.\n                    "
            )
          ])
        ])
      ]
    )
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HomeMainComponent.vue?vue&type=template&id=6e28316c&scoped=true&":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/HomeMainComponent.vue?vue&type=template&id=6e28316c&scoped=true& ***!
  \********************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "container" }, [
    _c("div", { staticClass: "row justify-content-center" }, [
      _c("div", { staticClass: "col-md-12" }, [
        _c("div", { staticClass: "row mt-5" }, [
          _vm._m(0),
          _vm._v(" "),
          _c(
            "svg",
            {
              attrs: {
                width: "800px",
                height: "600px",
                viewBox: "0 0 800 600",
                version: "1.1",
                xmlns: "http://www.w3.org/2000/svg",
                "xmlns:xlink": "http://www.w3.org/1999/xlink"
              }
            },
            [
              _c("title", [_vm._v("Artboard")]),
              _vm._v(" "),
              _c("desc", [_vm._v("Created with Sketch.")]),
              _vm._v(" "),
              _c(
                "defs",
                [
                  _c(
                    "filter",
                    {
                      attrs: {
                        x: "-41.4%",
                        y: "-41.4%",
                        width: "182.9%",
                        height: "182.9%",
                        filterUnits: "objectBoundingBox",
                        id: "filter-1"
                      }
                    },
                    [
                      _c("feGaussianBlur", {
                        attrs: { stdDeviation: "50", in: "SourceGraphic" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "filter",
                    {
                      attrs: {
                        x: "-27.1%",
                        y: "-27.1%",
                        width: "154.2%",
                        height: "154.2%",
                        filterUnits: "objectBoundingBox",
                        id: "filter-2"
                      }
                    },
                    [
                      _c("feGaussianBlur", {
                        attrs: { stdDeviation: "50", in: "SourceGraphic" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "filter",
                    {
                      attrs: {
                        x: "-41.4%",
                        y: "-41.4%",
                        width: "182.9%",
                        height: "182.9%",
                        filterUnits: "objectBoundingBox",
                        id: "filter-3"
                      }
                    },
                    [
                      _c("feGaussianBlur", {
                        attrs: { stdDeviation: "50", in: "SourceGraphic" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "filter",
                    {
                      attrs: {
                        x: "-41.4%",
                        y: "-41.4%",
                        width: "182.9%",
                        height: "182.9%",
                        filterUnits: "objectBoundingBox",
                        id: "filter-4"
                      }
                    },
                    [
                      _c("feGaussianBlur", {
                        attrs: { stdDeviation: "50", in: "SourceGraphic" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "filter",
                    {
                      attrs: {
                        x: "-41.4%",
                        y: "-41.4%",
                        width: "182.9%",
                        height: "182.9%",
                        filterUnits: "objectBoundingBox",
                        id: "filter-5"
                      }
                    },
                    [
                      _c("feGaussianBlur", {
                        attrs: { stdDeviation: "50", in: "SourceGraphic" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "filter",
                    {
                      attrs: {
                        x: "-41.4%",
                        y: "-41.4%",
                        width: "182.9%",
                        height: "182.9%",
                        filterUnits: "objectBoundingBox",
                        id: "filter-6"
                      }
                    },
                    [
                      _c("feGaussianBlur", {
                        attrs: { stdDeviation: "50", in: "SourceGraphic" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "filter",
                    {
                      attrs: {
                        x: "-41.4%",
                        y: "-41.4%",
                        width: "182.9%",
                        height: "182.9%",
                        filterUnits: "objectBoundingBox",
                        id: "filter-7"
                      }
                    },
                    [
                      _c("feGaussianBlur", {
                        attrs: { stdDeviation: "50", in: "SourceGraphic" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.9999914%",
                        y1: "99.9999672%",
                        x2: "49.9999914%",
                        y2: "-2.44357469e-05%",
                        id: "linearGradient-8"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#042637", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0C5357", offset: "28.23%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#157F78", offset: "60.44%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#1A9B8C", offset: "85.45%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#1CA593", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "12.9860287%",
                        y1: "9.86264551%",
                        x2: "108.731056%",
                        y2: "78.9253661%",
                        id: "linearGradient-9"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00A39F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00A8A5", offset: "19.77%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00B7B7", offset: "47.27%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00CFD5", offset: "79.16%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000508836799%",
                        y1: "50.0018634%",
                        x2: "100.000509%",
                        y2: "50.0018634%",
                        id: "linearGradient-10"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3A64D3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#043753", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000201450443%",
                        y1: "50.0022135%",
                        x2: "99.9989927%",
                        y2: "50.0022135%",
                        id: "linearGradient-11"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3A64D3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#043753", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000615814106%",
                        y1: "49.9986378%",
                        x2: "118.778225%",
                        y2: "49.9986378%",
                        id: "linearGradient-12"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3A64D3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#043753", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-5.15536875%",
                        y1: "50.0008189%",
                        x2: "100.000429%",
                        y2: "50.0008189%",
                        id: "linearGradient-13"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3A64D3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#043753", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "radialGradient",
                    {
                      attrs: {
                        cx: "51.3541261%",
                        cy: "35.7738471%",
                        fx: "51.3541261%",
                        fy: "35.7738471%",
                        r: "203.474062%",
                        gradientTransform:
                          "translate(0.513541,0.357738),scale(0.261804,1.000000),translate(-0.513541,-0.357738)",
                        id: "radialGradient-14"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#231F20", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#242228", offset: "12.25%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#25293F", offset: "31.71%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#283665", offset: "55.96%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2C4799", offset: "83.77%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2E52BA", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "radialGradient",
                    {
                      attrs: {
                        cx: "49.2084162%",
                        cy: "57.7634333%",
                        fx: "49.2084162%",
                        fy: "57.7634333%",
                        r: "81.416091%",
                        gradientTransform:
                          "translate(0.492084,0.577634),scale(0.782037,1.000000),translate(-0.492084,-0.577634)",
                        id: "radialGradient-15"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#231F20", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#242228", offset: "12.25%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#25293F", offset: "31.71%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#283665", offset: "55.96%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2C4799", offset: "83.77%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2E52BA", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "19.3246089%",
                        y1: "28.7429182%",
                        x2: "84.2448542%",
                        y2: "67.5740731%",
                        id: "linearGradient-16"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#042637", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#1CA593", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "radialGradient",
                    {
                      attrs: {
                        cx: "49.9997083%",
                        cy: "28.6012852%",
                        fx: "49.9997083%",
                        fy: "28.6012852%",
                        r: "71.5448281%",
                        gradientTransform:
                          "translate(0.499997,0.286013),scale(0.700577,1.000000),translate(-0.499997,-0.286013)",
                        id: "radialGradient-17"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: {
                          "stop-color": "#FFFFFF",
                          "stop-opacity": "0.25",
                          offset: "0%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#FDFDFD",
                          "stop-opacity": "0.1783",
                          offset: "28.68%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#F5F8F8",
                          "stop-opacity": "0.1434",
                          offset: "42.64%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#E8EFEF",
                          "stop-opacity": "0.1165",
                          offset: "53.41%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#D6E2E3",
                          "stop-opacity": "0.0936",
                          offset: "62.56%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#BDD1D2",
                          "stop-opacity": "0.0733",
                          offset: "70.69%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#A0BCBE",
                          "stop-opacity": "0.0548",
                          offset: "78.07%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#7CA4A6",
                          "stop-opacity": "0.0377",
                          offset: "84.91%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#53878A",
                          "stop-opacity": "0.0217",
                          offset: "91.31%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#26676B",
                          "stop-opacity": "0.0071",
                          offset: "97.14%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#0D565A",
                          "stop-opacity": "0",
                          offset: "100%"
                        }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "8.47490694%",
                        y1: "18.9719807%",
                        x2: "79.2996816%",
                        y2: "69.2045194%",
                        id: "linearGradient-18"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3EC6A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.9998837%",
                        y1: "100%",
                        x2: "49.9998837%",
                        y2: "0%",
                        id: "linearGradient-19"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#043753", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3A64D3", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0007724%",
                        x2: "2986.0217%",
                        y2: "50.0007724%",
                        id: "linearGradient-20"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#043753", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3A64D3", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-79.526356%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-21"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7558CE", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "1.85359982e-13%",
                        y1: "49.999853%",
                        x2: "100%",
                        y2: "49.999853%",
                        id: "linearGradient-22"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#005DA5", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0A444D", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0007615%",
                        x2: "100.00041%",
                        y2: "50.0007615%",
                        id: "linearGradient-23"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00A39F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "2.45363745e-13%",
                        y1: "49.9998715%",
                        x2: "100%",
                        y2: "49.9998715%",
                        id: "linearGradient-24"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#45959F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0E4A5F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-25"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#005DA5", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0A444D", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9986785%",
                        x2: "100%",
                        y2: "49.9986785%",
                        id: "linearGradient-26"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00A39F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00A7A4", offset: "20.77%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00B3B2", offset: "45.27%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00C6CA", offset: "71.64%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00E1EB", offset: "99.17%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.999686%",
                        x2: "100%",
                        y2: "49.999686%",
                        id: "linearGradient-27"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00AFAF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9991698%",
                        x2: "99.9982609%",
                        y2: "49.9991698%",
                        id: "linearGradient-28"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7182E2", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9926847%",
                        x2: "99.9994301%",
                        y2: "49.9926847%",
                        id: "linearGradient-29"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00A39F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#019E9A", offset: "23.51%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#05908D", offset: "51.23%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0B7877", offset: "80.96%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#106565", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9998059%",
                        x2: "100%",
                        y2: "49.9998059%",
                        id: "linearGradient-30"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3EC6A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50%",
                        y1: "99.9970629%",
                        x2: "50%",
                        y2: "-0.00195809673%",
                        id: "linearGradient-31"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7558CE", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0041659%",
                        y1: "100.000544%",
                        x2: "50.0041659%",
                        y2: "0%",
                        id: "linearGradient-32"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7558CE", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "19.6085575%",
                        y1: "52.8481305%",
                        x2: "85.2077642%",
                        y2: "43.2594047%",
                        id: "linearGradient-33"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000226732046%",
                        y1: "49.9996531%",
                        x2: "99.9995525%",
                        y2: "49.9996531%",
                        id: "linearGradient-34"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "31.0075205%",
                        y1: "44.5058097%",
                        x2: "70.4549416%",
                        y2: "56.857076%",
                        id: "linearGradient-35"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0012941%",
                        x2: "100%",
                        y2: "50.0012941%",
                        id: "linearGradient-36"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3EC6A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00240652931%",
                        y1: "49.997999%",
                        x2: "100.006626%",
                        y2: "49.997999%",
                        id: "linearGradient-37"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9993553%",
                        x2: "100%",
                        y2: "49.9993553%",
                        id: "linearGradient-38"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3EC6A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9964445%",
                        x2: "100%",
                        y2: "49.9964445%",
                        id: "linearGradient-39"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-7.43231391e-05%",
                        y1: "50.0018838%",
                        x2: "100.0007%",
                        y2: "50.0018838%",
                        id: "linearGradient-40"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000270811981%",
                        y1: "50.0002579%",
                        x2: "99.9995807%",
                        y2: "50.0002579%",
                        id: "linearGradient-41"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3EC6A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00089950707%",
                        y1: "50.0070285%",
                        x2: "99.9998201%",
                        y2: "50.0070285%",
                        id: "linearGradient-42"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7D59D0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000293448757%",
                        y1: "49.9993865%",
                        x2: "100.000734%",
                        y2: "49.9993865%",
                        id: "linearGradient-43"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "18.9680348%",
                        y1: "34.1902913%",
                        x2: "80.5022653%",
                        y2: "65.9643285%",
                        id: "linearGradient-44"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#6EFFFB", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000135399559%",
                        y1: "49.9998066%",
                        x2: "99.999107%",
                        y2: "49.9998066%",
                        id: "linearGradient-45"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3EC6A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00197433827%",
                        y1: "49.9981268%",
                        x2: "99.996943%",
                        y2: "49.9981268%",
                        id: "linearGradient-46"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.317767459%",
                        y1: "79.3275592%",
                        x2: "100.316416%",
                        y2: "20.6697129%",
                        id: "linearGradient-47"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3369FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#305DDB", offset: "11.91%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2C4799", offset: "35.62%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#283665", offset: "57.13%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#25293F", offset: "75.71%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#242228", offset: "90.62%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#231F20", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.321145079%",
                        y1: "79.3207393%",
                        x2: "100.313714%",
                        y2: "20.663575%",
                        id: "linearGradient-48"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3369FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#305DDB", offset: "11.91%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2C4799", offset: "35.62%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#283665", offset: "57.13%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#25293F", offset: "75.71%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#242228", offset: "90.62%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#231F20", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "31.8301469%",
                        y1: "13.0956384%",
                        x2: "64.3803845%",
                        y2: "73.4531212%",
                        id: "linearGradient-49"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-1.38109056%",
                        y1: "55.2647734%",
                        x2: "99.3104637%",
                        y2: "48.1138255%",
                        id: "linearGradient-50"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "14.3095495%",
                        y1: "32.684454%",
                        x2: "85.6905946%",
                        y2: "67.3159656%",
                        id: "linearGradient-51"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00FFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100.000691%",
                        y2: "50%",
                        id: "linearGradient-52"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C7A0F6", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "27.0551939%",
                        y1: "11.9108%",
                        x2: "81.0327907%",
                        y2: "79.5573333%",
                        id: "linearGradient-53"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "5.9765389%",
                        y1: "3.71078276%",
                        x2: "95.121742%",
                        y2: "88.0204885%",
                        id: "linearGradient-54"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00FFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#25ECED", offset: "8.2%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#58D1D4", offset: "21.06%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#84BBBF", offset: "34.17%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#A8A8AD", offset: "47.29%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C49A9F", offset: "60.41%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#D88F96", offset: "73.54%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E48990", offset: "86.72%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00107888907%",
                        y1: "50.0003985%",
                        x2: "99.9997102%",
                        y2: "50.0003985%",
                        id: "linearGradient-55"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7D59D0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00284605324%",
                        y1: "50.0006875%",
                        x2: "100.003196%",
                        y2: "50.0006875%",
                        id: "linearGradient-56"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3369FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000148423074%",
                        y1: "49.999964%",
                        x2: "100.000682%",
                        y2: "49.999964%",
                        id: "linearGradient-57"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#042637", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2335E0", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0006555%",
                        x2: "100%",
                        y2: "50.0006555%",
                        id: "linearGradient-58"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00C4C8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#07C2C6", offset: "1.73%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#42B3B8", offset: "17.06%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#75A5AB", offset: "32.34%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#9E9AA0", offset: "47.25%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#BE9298", offset: "61.7%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#D58C93", offset: "75.58%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E3888F", offset: "88.63%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "radialGradient",
                    {
                      attrs: {
                        cx: "66.3323178%",
                        cy: "55.4787313%",
                        fx: "66.3323178%",
                        fy: "55.4787313%",
                        r: "105.300067%",
                        gradientTransform:
                          "translate(0.663323,0.554787),scale(1.000000,0.833966),rotate(-67.937167),translate(-0.663323,-0.554787)",
                        id: "radialGradient-59"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E48990", offset: "13.28%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#D88F96", offset: "26.46%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C49A9F", offset: "39.59%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#A8A8AD", offset: "52.71%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#84BBBF", offset: "65.83%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#58D1D4", offset: "78.94%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#25ECED", offset: "91.8%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00FFFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "21.7637318%",
                        y1: "63.7915388%",
                        x2: "87.4179348%",
                        y2: "31.0500526%",
                        id: "linearGradient-60"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3369FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#305DDB", offset: "11.91%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2C4799", offset: "35.62%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#283665", offset: "57.13%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#25293F", offset: "75.71%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#242228", offset: "90.62%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#231F20", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00226793496%",
                        y1: "49.9994191%",
                        x2: "99.9983622%",
                        y2: "49.9994191%",
                        id: "linearGradient-61"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#DD8A91", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-7.17582753e-13%",
                        y1: "49.9997035%",
                        x2: "99.9985597%",
                        y2: "49.9997035%",
                        id: "linearGradient-62"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.9995062%",
                        y1: "100.000217%",
                        x2: "49.9995062%",
                        y2: "0.000347770393%",
                        id: "linearGradient-63"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#042637", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2335E0", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-1.63362347e-05%",
                        y1: "50.0000202%",
                        x2: "99.9993692%",
                        y2: "50.0000202%",
                        id: "linearGradient-64"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00201391148%",
                        y1: "49.9978453%",
                        x2: "100.001704%",
                        y2: "49.9978453%",
                        id: "linearGradient-65"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00464745718%",
                        y1: "49.9963693%",
                        x2: "100.004647%",
                        y2: "49.9963693%",
                        id: "linearGradient-66"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "29.4552313%",
                        y1: "25.2789967%",
                        x2: "87.8399512%",
                        y2: "91.435353%",
                        id: "linearGradient-67"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#05C5DA", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5860C4", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00122664513%",
                        y1: "49.9996604%",
                        x2: "99.9995861%",
                        y2: "49.9996604%",
                        id: "linearGradient-68"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#05C5DA", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5860C4", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000930342848%",
                        y1: "50.0010907%",
                        x2: "99.9995292%",
                        y2: "50.0010907%",
                        id: "linearGradient-69"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000138859944%",
                        y1: "50.0040965%",
                        x2: "99.9990778%",
                        y2: "50.0040965%",
                        id: "linearGradient-70"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00780197177%",
                        y1: "49.9952161%",
                        x2: "99.9964536%",
                        y2: "49.9952161%",
                        id: "linearGradient-71"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00351666901%",
                        y1: "50.0085719%",
                        x2: "100.00211%",
                        y2: "50.0085719%",
                        id: "linearGradient-72"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00339097999%",
                        y1: "49.9970278%",
                        x2: "100.004069%",
                        y2: "49.9970278%",
                        id: "linearGradient-73"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00428632662%",
                        y1: "49.9910474%",
                        x2: "99.9957137%",
                        y2: "49.9910474%",
                        id: "linearGradient-74"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00464360344%",
                        y1: "50.0032531%",
                        x2: "100.006965%",
                        y2: "50.0032531%",
                        id: "linearGradient-75"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0001835%",
                        x2: "100%",
                        y2: "50.0001835%",
                        id: "linearGradient-76"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#042637", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00448177814%",
                        y1: "49.9955205%",
                        x2: "99.9958929%",
                        y2: "49.9955205%",
                        id: "linearGradient-77"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7D59D0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.0082828737%",
                        y1: "50.0018896%",
                        x2: "100.011183%",
                        y2: "50.0018896%",
                        id: "linearGradient-78"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7D59D0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000701513668%",
                        y1: "50.0001737%",
                        x2: "99.9994205%",
                        y2: "50.0001737%",
                        id: "linearGradient-79"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7D59D0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000596955446%",
                        y1: "50.0000799%",
                        x2: "100%",
                        y2: "50.0000799%",
                        id: "linearGradient-80"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#042637", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00240659883%",
                        y1: "50.0001473%",
                        x2: "100%",
                        y2: "50.0001473%",
                        id: "linearGradient-81"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7D59D0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00329373746%",
                        y1: "50.0014387%",
                        x2: "99.9984885%",
                        y2: "50.0014387%",
                        id: "linearGradient-82"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7D59D0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9984554%",
                        x2: "99.9997116%",
                        y2: "49.9984554%",
                        id: "linearGradient-83"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7C1DA5", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3C2068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000219537745%",
                        y1: "50.0001575%",
                        x2: "99.9994137%",
                        y2: "50.0001575%",
                        id: "linearGradient-84"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#042637", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000695601977%",
                        y1: "50.0001002%",
                        x2: "100%",
                        y2: "50.0001002%",
                        id: "linearGradient-85"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7D59D0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.003461006%",
                        y1: "49.997562%",
                        x2: "99.996539%",
                        y2: "49.997562%",
                        id: "linearGradient-86"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#3369FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7C18A1", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00203539311%",
                        y1: "49.9995546%",
                        x2: "99.9988635%",
                        y2: "49.9995546%",
                        id: "linearGradient-87"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C16846", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#D27565", offset: "26.53%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#DE7F7B", offset: "53.08%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E58589", offset: "78.14%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-2.68059852%",
                        y1: "50.0001858%",
                        x2: "99.9999056%",
                        y2: "50.0001858%",
                        id: "linearGradient-88"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#042637", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2335E0", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000434469035%",
                        y1: "49.9998648%",
                        x2: "100%",
                        y2: "49.9998648%",
                        id: "linearGradient-89"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00AFAF", offset: "21.82%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00B4B5", offset: "39.89%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00C1C5", offset: "63.42%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00D8E0", offset: "89.85%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000605345685%",
                        y1: "49.9996567%",
                        x2: "99.9997172%",
                        y2: "49.9996567%",
                        id: "linearGradient-90"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#34BBFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7182E2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "6.75780401e-05%",
                        y1: "50.0004295%",
                        x2: "100.0001%",
                        y2: "50.0004295%",
                        id: "linearGradient-91"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C55DD7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "49.7%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E9B6F2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.9997831%",
                        y1: "99.9999274%",
                        x2: "49.9997831%",
                        y2: "-0.00017880222%",
                        id: "linearGradient-92"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7558CE", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00170438564%",
                        y1: "50.0021628%",
                        x2: "100.002778%",
                        y2: "50.0021628%",
                        id: "linearGradient-93"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00CFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5979FC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000226154347%",
                        y1: "50.0002357%",
                        x2: "99.999527%",
                        y2: "50.0002357%",
                        id: "linearGradient-94"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C55DD7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "49.7%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E9B6F2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000359389039%",
                        y1: "50.0001101%",
                        x2: "100%",
                        y2: "50.0001101%",
                        id: "linearGradient-95"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7558CE", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-96"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00CFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5979FC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000935394332%",
                        y1: "50.0005835%",
                        x2: "100.003476%",
                        y2: "50.0005835%",
                        id: "linearGradient-97"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00CFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5979FC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0003848%",
                        y1: "100.000761%",
                        x2: "50.0003848%",
                        y2: "0%",
                        id: "linearGradient-98"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C55DD7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "19.5484509%",
                        y1: "9.63776491%",
                        x2: "76.2606602%",
                        y2: "79.8391428%",
                        id: "linearGradient-99"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C55DD7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "49.7%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E9B6F2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "27.1101584%",
                        y1: "7.79148268%",
                        x2: "70.1489045%",
                        y2: "73.8843319%",
                        id: "linearGradient-100"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#231F20", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#262228", offset: "10.18%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2F2A3F", offset: "26.37%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3D3865", offset: "46.53%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#504A99", offset: "69.89%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#6962DB", offset: "95.64%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#6D66E7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "26.6602766%",
                        y1: "8.91327733%",
                        x2: "68.0693649%",
                        y2: "77.4454339%",
                        id: "linearGradient-101"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#231F20", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#262228", offset: "10.18%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2F2A3F", offset: "26.37%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3D3865", offset: "46.53%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#504A99", offset: "69.89%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#6962DB", offset: "95.64%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#6D66E7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9993811%",
                        x2: "100.001616%",
                        y2: "49.9993811%",
                        id: "linearGradient-102"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7558CE", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000496342125%",
                        y1: "49.9998607%",
                        x2: "100.000089%",
                        y2: "49.9998607%",
                        id: "linearGradient-103"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00AFAF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "29.0809824%",
                        y1: "89.2329814%",
                        x2: "64.7863435%",
                        y2: "7.74949413%",
                        id: "linearGradient-104"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00A39F", offset: "26.67%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00658713313%",
                        y1: "50.0028229%",
                        x2: "100.005123%",
                        y2: "50.0028229%",
                        id: "linearGradient-105"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#9F36AD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C5188E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00214429139%",
                        y1: "49.9993067%",
                        x2: "100.00257%",
                        y2: "49.9993067%",
                        id: "linearGradient-106"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7558CE", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E868EF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00247428501%",
                        y1: "50%",
                        x2: "100.005412%",
                        y2: "50%",
                        id: "linearGradient-107"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C5188E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#9F36AD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-108"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-109"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#9F36AD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C5188E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.000565%",
                        y1: "100%",
                        x2: "50.000565%",
                        y2: "0%",
                        id: "linearGradient-110"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: {
                          "stop-color": "#00FFFF",
                          "stop-opacity": "0.25",
                          offset: "0%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#09FEFC",
                          "stop-opacity": "0.2713",
                          offset: "8.54%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#21FBF3",
                          "stop-opacity": "0.3062",
                          offset: "22.47%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#49F6E6",
                          "stop-opacity": "0.3502",
                          offset: "40.08%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#80F0D2",
                          "stop-opacity": "0.4016",
                          offset: "60.66%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#C6E8BA",
                          "stop-opacity": "0.4586",
                          offset: "83.45%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#FDE1A7",
                          "stop-opacity": "0.5",
                          offset: "100%"
                        }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.000813%",
                        y1: "100%",
                        x2: "50.000813%",
                        y2: "0%",
                        id: "linearGradient-111"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E9B3F2", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9F7FF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50%",
                        y1: "100%",
                        x2: "50%",
                        y2: "0%",
                        id: "linearGradient-112"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E367F2", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0011673%",
                        y1: "100.004501%",
                        x2: "50.0011673%",
                        y2: "0.000900252071%",
                        id: "linearGradient-113"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50%",
                        y1: "100.00079%",
                        x2: "50%",
                        y2: "-0.00131696781%",
                        id: "linearGradient-114"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: {
                          "stop-color": "#00FFFF",
                          "stop-opacity": "0.25",
                          offset: "0%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#09FEFC",
                          "stop-opacity": "0.2713",
                          offset: "8.54%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#21FBF3",
                          "stop-opacity": "0.3062",
                          offset: "22.47%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#49F6E6",
                          "stop-opacity": "0.3502",
                          offset: "40.08%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#80F0D2",
                          "stop-opacity": "0.4016",
                          offset: "60.66%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#C6E8BA",
                          "stop-opacity": "0.4586",
                          offset: "83.45%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#FDE1A7",
                          "stop-opacity": "0.5",
                          offset: "100%"
                        }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0000054%",
                        y1: "100.00003%",
                        x2: "50.0000054%",
                        y2: "5.45086471e-05%",
                        id: "linearGradient-115"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C7A0F6", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8CE6FD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000127726254%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-116"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#B0E1FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000880746873%",
                        y1: "49.999733%",
                        x2: "100%",
                        y2: "49.999733%",
                        id: "linearGradient-117"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0001087%",
                        y1: "99.9999966%",
                        x2: "50.0001087%",
                        y2: "-0.000389120083%",
                        id: "linearGradient-118"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#6B49C0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5E7ED9", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0000548%",
                        x2: "100%",
                        y2: "50.0000548%",
                        id: "linearGradient-119"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#B0E1FF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0078952%",
                        x2: "100.000182%",
                        y2: "50.0078952%",
                        id: "linearGradient-120"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#B0E1FF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100.00016%",
                        y2: "50%",
                        id: "linearGradient-121"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#B0E1FF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0078939%",
                        x2: "100%",
                        y2: "50.0078939%",
                        id: "linearGradient-122"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#B0E1FF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000852798713%",
                        y1: "50.0005277%",
                        x2: "100%",
                        y2: "50.0005277%",
                        id: "linearGradient-123"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00234367676%",
                        y1: "50%",
                        x2: "99.9976563%",
                        y2: "50%",
                        id: "linearGradient-124"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C07EB0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#EE5C95", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-11.374425%",
                        y1: "50.0008551%",
                        x2: "99.9998686%",
                        y2: "50.0008551%",
                        id: "linearGradient-125"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C07EB0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#EE5C95", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "20.9668504%",
                        y1: "33.7064909%",
                        x2: "78.4322681%",
                        y2: "66.2935091%",
                        id: "linearGradient-126"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#8173CC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00172934694%",
                        y1: "49.9991647%",
                        x2: "100.000887%",
                        y2: "49.9991647%",
                        id: "linearGradient-127"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000114229824%",
                        y1: "50.0003567%",
                        x2: "100.000146%",
                        y2: "50.0003567%",
                        id: "linearGradient-128"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000189887836%",
                        y1: "49.998949%",
                        x2: "100.000455%",
                        y2: "49.998949%",
                        id: "linearGradient-129"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000772044517%",
                        y1: "50.0000589%",
                        x2: "99.9996582%",
                        y2: "50.0000589%",
                        id: "linearGradient-130"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#6E5EEF", offset: "31.02%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8467E5", offset: "72.87%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000265646704%",
                        y1: "49.9996403%",
                        x2: "99.9999884%",
                        y2: "49.9996403%",
                        id: "linearGradient-131"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00182327429%",
                        y1: "50.0000926%",
                        x2: "99.9988783%",
                        y2: "50.0000926%",
                        id: "linearGradient-132"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00306836688%",
                        y1: "49.9983416%",
                        x2: "99.9962528%",
                        y2: "49.9983416%",
                        id: "linearGradient-133"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0011423%",
                        y1: "100%",
                        x2: "50.0011423%",
                        y2: "0%",
                        id: "linearGradient-134"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E9B6F2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-135"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F1D1F8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0005396%",
                        x2: "100%",
                        y2: "50.0005396%",
                        id: "linearGradient-136"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000156145294%",
                        y1: "50.0058285%",
                        x2: "99.9997504%",
                        y2: "50.0058285%",
                        id: "linearGradient-137"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000149261529%",
                        y1: "50.0004982%",
                        x2: "100%",
                        y2: "50.0004982%",
                        id: "linearGradient-138"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#7523AF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#6D2EB2", offset: "12.3%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#594CBA", offset: "33.98%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#387CC7", offset: "62.5%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0ABED8", offset: "96.44%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#05C5DA", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50%",
                        y1: "99.9978483%",
                        x2: "50%",
                        y2: "-123.710535%",
                        id: "linearGradient-139"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#170389", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3B0E9F", offset: "42.21%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5215AD", offset: "77.67%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5A18B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-6.66481888e-05%",
                        y1: "50.0000382%",
                        x2: "100.000113%",
                        y2: "50.0000382%",
                        id: "linearGradient-140"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#170389", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#1C058C", offset: "7.72%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5A18B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00141907713%",
                        y1: "49.996591%",
                        x2: "99.9992905%",
                        y2: "49.996591%",
                        id: "linearGradient-141"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#170389", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#1C058C", offset: "7.72%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5A18B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00175762824%",
                        y1: "50.0003064%",
                        x2: "99.9949672%",
                        y2: "50.0003064%",
                        id: "linearGradient-142"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#170389", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#1C058C", offset: "7.72%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5A18B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.0072715985%",
                        y1: "50.0002911%",
                        x2: "99.9917509%",
                        y2: "50.0002911%",
                        id: "linearGradient-143"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F6E2FB", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF9BBB", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00371832823%",
                        y1: "49.9921854%",
                        x2: "100.001399%",
                        y2: "49.9921854%",
                        id: "linearGradient-144"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F6E2FB", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF9BBB", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-47.0907618%",
                        y1: "50.0016442%",
                        x2: "100.00152%",
                        y2: "50.0016442%",
                        id: "linearGradient-145"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF9BBB", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F6E2FB", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "14.6463439%",
                        y1: "14.6468524%",
                        x2: "85.3572155%",
                        y2: "85.3574697%",
                        id: "linearGradient-146"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00261636755%",
                        y1: "50.0025079%",
                        x2: "99.9998096%",
                        y2: "50.0025079%",
                        id: "linearGradient-147"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-4.70441272e-13%",
                        y1: "50.0009375%",
                        x2: "100%",
                        y2: "50.0009375%",
                        id: "linearGradient-148"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0002323%",
                        x2: "100%",
                        y2: "50.0002323%",
                        id: "linearGradient-149"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C07EB0", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#EE5C95", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "22.480074%",
                        y1: "37.351825%",
                        x2: "77.5227954%",
                        y2: "62.6497868%",
                        id: "linearGradient-150"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000967128891%",
                        y1: "50.0003658%",
                        x2: "99.9995264%",
                        y2: "50.0003658%",
                        id: "linearGradient-151"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00220691018%",
                        y1: "50.0002502%",
                        x2: "100.002481%",
                        y2: "50.0002502%",
                        id: "linearGradient-152"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000885873933%",
                        y1: "49.9982802%",
                        x2: "99.9971525%",
                        y2: "49.9982802%",
                        id: "linearGradient-153"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0000603%",
                        y1: "100.003727%",
                        x2: "50.0000603%",
                        y2: "0.00372675437%",
                        id: "linearGradient-154"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#A482FF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9904772%",
                        x2: "111.492696%",
                        y2: "49.9904772%",
                        id: "linearGradient-155"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0056076%",
                        y1: "100.000351%",
                        x2: "50.0056076%",
                        y2: "0%",
                        id: "linearGradient-156"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#8173CC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "5.14391113e-05%",
                        y1: "50.000244%",
                        x2: "100.000237%",
                        y2: "50.000244%",
                        id: "linearGradient-157"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000146112812%",
                        y1: "50.0002119%",
                        x2: "99.9993628%",
                        y2: "50.0002119%",
                        id: "linearGradient-158"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#8173CC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000136248811%",
                        y1: "50.0000731%",
                        x2: "100.000182%",
                        y2: "50.0000731%",
                        id: "linearGradient-159"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000840244455%",
                        y1: "49.9981082%",
                        x2: "99.9997613%",
                        y2: "49.9981082%",
                        id: "linearGradient-160"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#8173CC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00032502356%",
                        y1: "49.9994298%",
                        x2: "100.000242%",
                        y2: "49.9994298%",
                        id: "linearGradient-161"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8173CC", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00197363227%",
                        y1: "50%",
                        x2: "100.001974%",
                        y2: "50%",
                        id: "linearGradient-162"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000991080278%",
                        y1: "50.0019822%",
                        x2: "100.002478%",
                        y2: "50.0019822%",
                        id: "linearGradient-163"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50%",
                        y1: "99.9991127%",
                        x2: "50%",
                        y2: "-0.000932911088%",
                        id: "linearGradient-164"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E58589", offset: "21.86%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#DE7F7B", offset: "46.92%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#D27565", offset: "73.47%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C16846", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000563161376%",
                        y1: "49.9990932%",
                        x2: "100.000549%",
                        y2: "49.9990932%",
                        id: "linearGradient-165"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000644140891%",
                        y1: "50.000196%",
                        x2: "100.000133%",
                        y2: "50.000196%",
                        id: "linearGradient-166"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.9994626%",
                        y1: "100.001793%",
                        x2: "49.9994626%",
                        y2: "0.00218114573%",
                        id: "linearGradient-167"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.9967021%",
                        y1: "99.9959432%",
                        x2: "49.9967021%",
                        y2: "-0.00878654068%",
                        id: "linearGradient-168"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.9939816%",
                        y1: "100.00031%",
                        x2: "49.9939816%",
                        y2: "0.00249601413%",
                        id: "linearGradient-169"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0101948%",
                        y1: "100.003855%",
                        x2: "50.0101948%",
                        y2: "-0.00114929939%",
                        id: "linearGradient-170"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00123712896%",
                        y1: "49.9977392%",
                        x2: "100.000021%",
                        y2: "49.9977392%",
                        id: "linearGradient-171"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000568755954%",
                        y1: "49.9994805%",
                        x2: "99.9992406%",
                        y2: "49.9994805%",
                        id: "linearGradient-172"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00394048705%",
                        y1: "49.9995364%",
                        x2: "100.000018%",
                        y2: "49.9995364%",
                        id: "linearGradient-173"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00230378736%",
                        y1: "50.0009033%",
                        x2: "100.000593%",
                        y2: "50.0009033%",
                        id: "linearGradient-174"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00032700328%",
                        y1: "49.9998493%",
                        x2: "100.000001%",
                        y2: "49.9998493%",
                        id: "linearGradient-175"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00502357506%",
                        y1: "50.0009542%",
                        x2: "99.9992572%",
                        y2: "50.0009542%",
                        id: "linearGradient-176"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "43.7545291%",
                        y1: "50.5846219%",
                        x2: "59.7373529%",
                        y2: "44.3673657%",
                        id: "linearGradient-177"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000190412223%",
                        y1: "49.999825%",
                        x2: "99.9997188%",
                        y2: "49.999825%",
                        id: "linearGradient-178"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#20B5DF", offset: "29.98%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#6A4EC2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00583707042%",
                        y1: "50.0022651%",
                        x2: "99.9917707%",
                        y2: "50.0022651%",
                        id: "linearGradient-179"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#5A18B2", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7A50C9", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000418254387%",
                        y1: "50.0005665%",
                        x2: "100.000192%",
                        y2: "50.0005665%",
                        id: "linearGradient-180"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E58589", offset: "21.86%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#DE7F7B", offset: "46.92%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#D27565", offset: "73.47%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C16846", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00214934531%",
                        y1: "50.0013793%",
                        x2: "99.9924181%",
                        y2: "50.0013793%",
                        id: "linearGradient-181"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0001357%",
                        x2: "100.00238%",
                        y2: "50.0001357%",
                        id: "linearGradient-182"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00206858826%",
                        y1: "50.0017158%",
                        x2: "100.0066%",
                        y2: "50.0017158%",
                        id: "linearGradient-183"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "9.05169878e-05%",
                        y1: "50.000391%",
                        x2: "99.9999547%",
                        y2: "50.000391%",
                        id: "linearGradient-184"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#05C5DA", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0ABED8", offset: "3.56%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#387CC7", offset: "37.5%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#594CBA", offset: "66.02%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#6D2EB2", offset: "87.7%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#7523AF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000747959733%",
                        y1: "50.0001875%",
                        x2: "99.9998478%",
                        y2: "50.0001875%",
                        id: "linearGradient-185"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E58589", offset: "21.86%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#DE7F7B", offset: "46.92%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#D27565", offset: "73.47%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C16846", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0004585%",
                        y1: "100.000517%",
                        x2: "50.0004585%",
                        y2: "0.00324942546%",
                        id: "linearGradient-186"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#170389", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#1C058C", offset: "7.72%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5A18B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "45.1763882%",
                        y1: "42.1291167%",
                        x2: "52.3025981%",
                        y2: "58.0752452%",
                        id: "linearGradient-187"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00121874716%",
                        y1: "49.9972917%",
                        x2: "100.002161%",
                        y2: "49.9972917%",
                        id: "linearGradient-188"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00171906634%",
                        y1: "50.0001259%",
                        x2: "100.00033%",
                        y2: "50.0001259%",
                        id: "linearGradient-189"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "23.4582892%",
                        y1: "61.0633892%",
                        x2: "69.3976421%",
                        y2: "42.3575957%",
                        id: "linearGradient-190"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "36.7719884%",
                        y1: "44.5043963%",
                        x2: "73.8071213%",
                        y2: "67.1242217%",
                        id: "linearGradient-191"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00235141553%",
                        y1: "49.9955254%",
                        x2: "99.9951901%",
                        y2: "49.9955254%",
                        id: "linearGradient-192"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00148621372%",
                        y1: "49.9998313%",
                        x2: "100.002224%",
                        y2: "49.9998313%",
                        id: "linearGradient-193"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00726934425%",
                        y1: "49.9984942%",
                        x2: "99.9971307%",
                        y2: "49.9984942%",
                        id: "linearGradient-194"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FEEFD0", offset: "45.33%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE5B2", offset: "80.21%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00401920669%",
                        y1: "50.0027797%",
                        x2: "100.000491%",
                        y2: "50.0027797%",
                        id: "linearGradient-195"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00177460892%",
                        y1: "50.0026703%",
                        x2: "99.9962105%",
                        y2: "50.0026703%",
                        id: "linearGradient-196"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00146332473%",
                        y1: "50.0028551%",
                        x2: "99.9995881%",
                        y2: "50.0028551%",
                        id: "linearGradient-197"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000827197552%",
                        y1: "49.9991769%",
                        x2: "99.9989763%",
                        y2: "49.9991769%",
                        id: "linearGradient-198"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9990332%",
                        x2: "99.9993386%",
                        y2: "49.9990332%",
                        id: "linearGradient-199"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#728390", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00812708629%",
                        y1: "50.0004277%",
                        x2: "99.9929607%",
                        y2: "50.0004277%",
                        id: "linearGradient-200"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00113895216%",
                        y1: "49.9965978%",
                        x2: "99.9991458%",
                        y2: "49.9965978%",
                        id: "linearGradient-201"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00140500877%",
                        y1: "50.0003118%",
                        x2: "100.000562%",
                        y2: "50.0003118%",
                        id: "linearGradient-202"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C5188E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#9F36AD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00152831029%",
                        y1: "50.0012374%",
                        x2: "100.000399%",
                        y2: "50.0012374%",
                        id: "linearGradient-203"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00521656671%",
                        y1: "50.0036252%",
                        x2: "99.9998481%",
                        y2: "50.0036252%",
                        id: "linearGradient-204"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C5188E", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#9F36AD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "11.549292%",
                        y1: "62.4364313%",
                        x2: "95.2313778%",
                        y2: "41.2823214%",
                        id: "linearGradient-205"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#05C5DA", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5860C4", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00182539302%",
                        y1: "49.9992308%",
                        x2: "100.00051%",
                        y2: "49.9992308%",
                        id: "linearGradient-206"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00207965211%",
                        y1: "49.9998292%",
                        x2: "100.000072%",
                        y2: "49.9998292%",
                        id: "linearGradient-207"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "30.3175485%",
                        y1: "29.7850164%",
                        x2: "78.3649604%",
                        y2: "70.2695569%",
                        id: "linearGradient-208"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000530212407%",
                        y1: "50.0007309%",
                        x2: "99.9978897%",
                        y2: "50.0007309%",
                        id: "linearGradient-209"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#A281FF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00106684154%",
                        y1: "50.0049698%",
                        x2: "99.9998584%",
                        y2: "50.0049698%",
                        id: "linearGradient-210"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#9F36AD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8D3399", offset: "10.71%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#602A65", offset: "40.36%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3F243F", offset: "66.2%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2A2028", offset: "86.95%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#231F20", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "18.1465364%",
                        y1: "25.9092409%",
                        x2: "65.6248664%",
                        y2: "99.5311001%",
                        id: "linearGradient-211"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#728390", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "23.4636396%",
                        y1: "9.75265142%",
                        x2: "94.8960394%",
                        y2: "75.9091425%",
                        id: "linearGradient-212"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#728390", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00340395323%",
                        y1: "49.9962665%",
                        x2: "99.9990502%",
                        y2: "49.9962665%",
                        id: "linearGradient-213"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#653271", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5B2F65", offset: "11.29%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3D263F", offset: "49.6%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#2A2128", offset: "80.53%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#231F20", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "radialGradient",
                    {
                      attrs: {
                        cx: "50.0002027%",
                        cy: "49.9997753%",
                        fx: "50.0002027%",
                        fy: "49.9997753%",
                        r: "50.0004163%",
                        gradientTransform:
                          "translate(0.500002,0.499998),scale(1.000000,0.999992),translate(-0.500002,-0.499998)",
                        id: "radialGradient-214"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: {
                          "stop-color": "#4E40AF",
                          "stop-opacity": "0",
                          offset: "0%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#5446B2",
                          "stop-opacity": "0.0438",
                          offset: "10.96%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#6558B9",
                          "stop-opacity": "0.1047",
                          offset: "26.17%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#8076C6",
                          "stop-opacity": "0.1755",
                          offset: "43.87%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#A69FD7",
                          "stop-opacity": "0.2538",
                          offset: "63.45%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#D6D3ED",
                          "stop-opacity": "0.3373",
                          offset: "84.32%"
                        }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: {
                          "stop-color": "#FFFFFF",
                          "stop-opacity": "0.4",
                          offset: "100%"
                        }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000421789653%",
                        y1: "49.9997664%",
                        x2: "100.000211%",
                        y2: "49.9997664%",
                        id: "linearGradient-215"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00337749431%",
                        y1: "50%",
                        x2: "100.003111%",
                        y2: "50%",
                        id: "linearGradient-216"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#05C5DA", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0011477%",
                        y1: "99.9989263%",
                        x2: "50.0011477%",
                        y2: "2.12563707e-05%",
                        id: "linearGradient-217"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000641477965%",
                        y1: "49.9984077%",
                        x2: "99.9961511%",
                        y2: "49.9984077%",
                        id: "linearGradient-218"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000209752616%",
                        y1: "50.0007922%",
                        x2: "100.000741%",
                        y2: "50.0007922%",
                        id: "linearGradient-219"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00407146439%",
                        y1: "50.0004734%",
                        x2: "99.9960265%",
                        y2: "50.0004734%",
                        id: "linearGradient-220"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00029679753%",
                        y1: "49.9998994%",
                        x2: "100.001152%",
                        y2: "49.9998994%",
                        id: "linearGradient-221"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C7A0F6", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-222"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100.001765%",
                        y2: "50%",
                        id: "linearGradient-223"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#EA8124", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#DE852E", offset: "9.57%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#BE8E47", offset: "26.9%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8A9D70", offset: "50%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43B3A9", offset: "77.68%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#05C5DA", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "30.9921095%",
                        y1: "45.4742764%",
                        x2: "72.2110789%",
                        y2: "55.2883934%",
                        id: "linearGradient-224"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#07E2EA", offset: "1.65%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#48E2D9", offset: "17.92%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#80E2CA", offset: "33.96%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#ADE2BE", offset: "49.36%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#D1E2B4", offset: "64%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#EAE2AE", offset: "77.7%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FAE2A9", offset: "90.08%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FFE2A8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.9997469%",
                        y1: "99.9998899%",
                        x2: "49.9997469%",
                        y2: "0.000166692506%",
                        id: "linearGradient-225"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000638409374%",
                        y1: "50%",
                        x2: "100.002998%",
                        y2: "50%",
                        id: "linearGradient-226"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "35.5482691%",
                        y1: "17.0391407%",
                        x2: "73.5171861%",
                        y2: "80.4775548%",
                        id: "linearGradient-227"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C7A0F6", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00125786176%",
                        y1: "49.9990914%",
                        x2: "100.000639%",
                        y2: "49.9990914%",
                        id: "linearGradient-228"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00141675874%",
                        y1: "50.000327%",
                        x2: "99.999436%",
                        y2: "50.000327%",
                        id: "linearGradient-229"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000268505031%",
                        y1: "50.0011207%",
                        x2: "99.9996644%",
                        y2: "50.0011207%",
                        id: "linearGradient-230"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.999299%",
                        y1: "100.000877%",
                        x2: "49.999299%",
                        y2: "0.00034965897%",
                        id: "linearGradient-231"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00423165276%",
                        y1: "49.9937814%",
                        x2: "100.007254%",
                        y2: "49.9937814%",
                        id: "linearGradient-232"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00141637041%",
                        y1: "49.9987958%",
                        x2: "99.9985836%",
                        y2: "49.9987958%",
                        id: "linearGradient-233"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000194627171%",
                        y1: "50.0002678%",
                        x2: "100.000172%",
                        y2: "50.0002678%",
                        id: "linearGradient-234"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000490554445%",
                        y1: "50.0002758%",
                        x2: "99.9991058%",
                        y2: "50.0002758%",
                        id: "linearGradient-235"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00283674638%",
                        y1: "49.9907251%",
                        x2: "99.9954722%",
                        y2: "49.9907251%",
                        id: "linearGradient-236"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00244004277%",
                        y1: "49.9981455%",
                        x2: "99.9971927%",
                        y2: "49.9981455%",
                        id: "linearGradient-237"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000217712834%",
                        y1: "49.9987769%",
                        x2: "100.001463%",
                        y2: "49.9987769%",
                        id: "linearGradient-238"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.0073697877%",
                        y1: "50.0066911%",
                        x2: "99.9988068%",
                        y2: "50.0066911%",
                        id: "linearGradient-239"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00239899274%",
                        y1: "49.9962241%",
                        x2: "100.002153%",
                        y2: "49.9962241%",
                        id: "linearGradient-240"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000472630099%",
                        y1: "50.0008743%",
                        x2: "99.9961092%",
                        y2: "50.0008743%",
                        id: "linearGradient-241"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0001522%",
                        x2: "100.000213%",
                        y2: "50.0001522%",
                        id: "linearGradient-242"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "13.6860236%",
                        y1: "22.7863963%",
                        x2: "81.5963615%",
                        y2: "80.6189993%",
                        id: "linearGradient-243"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#DBEFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F7EBFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0002572%",
                        y1: "99.9999489%",
                        x2: "50.0002572%",
                        y2: "-0.000663207132%",
                        id: "linearGradient-244"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F7EBFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#DBEFFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0001336%",
                        y1: "100.000769%",
                        x2: "50.0001336%",
                        y2: "-0.000192758242%",
                        id: "linearGradient-245"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F7EBFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#DBEFFF", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "2.21471141%",
                        y1: "2.21551138%",
                        x2: "97.7864885%",
                        y2: "97.7872885%",
                        id: "linearGradient-246"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "2.21071157%",
                        y1: "2.21311148%",
                        x2: "97.7880885%",
                        y2: "97.7904884%",
                        id: "linearGradient-247"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "2.21471141%",
                        y1: "2.21471141%",
                        x2: "97.7864885%",
                        y2: "97.7860886%",
                        id: "linearGradient-248"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "2.72155752%",
                        y1: "7.86811052%",
                        x2: "97.2790088%",
                        y2: "92.1330251%",
                        id: "linearGradient-249"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#706AED", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.01%",
                        x2: "100.000945%",
                        y2: "50.01%",
                        id: "linearGradient-250"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F1D1F8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "49.996875%",
                        y1: "100%",
                        x2: "49.996875%",
                        y2: "0.000515463918%",
                        id: "linearGradient-251"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.003125%",
                        y1: "50%",
                        x2: "99.996875%",
                        y2: "50%",
                        id: "linearGradient-252"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50%",
                        y1: "100%",
                        x2: "50%",
                        y2: "0.000660066007%",
                        id: "linearGradient-253"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#1AA9E8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3D80EF", offset: "42.23%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5662F4", offset: "79.09%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5F57F6", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0011215%",
                        x2: "100%",
                        y2: "50.0011215%",
                        id: "linearGradient-254"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50%",
                        y1: "100%",
                        x2: "50%",
                        y2: "0.000809716599%",
                        id: "linearGradient-255"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50.0016349%",
                        x2: "100%",
                        y2: "50.0016349%",
                        id: "linearGradient-256"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50%",
                        y1: "100%",
                        x2: "50%",
                        y2: "0.00056022409%",
                        id: "linearGradient-257"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C7A0F6", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-258"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50%",
                        y1: "100%",
                        x2: "50%",
                        y2: "0.00110497238%",
                        id: "linearGradient-259"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-260"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "10.1417989%",
                        y1: "26.309819%",
                        x2: "89.8593298%",
                        y2: "73.6904326%",
                        id: "linearGradient-261"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000921658986%",
                        y1: "50%",
                        x2: "100.000922%",
                        y2: "50%",
                        id: "linearGradient-262"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F1D1F8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00281241211%",
                        y1: "49.9998443%",
                        x2: "100.001875%",
                        y2: "49.9998443%",
                        id: "linearGradient-263"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000759918841%",
                        y1: "50.0003674%",
                        x2: "99.999848%",
                        y2: "50.0003674%",
                        id: "linearGradient-264"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000579918578%",
                        y1: "50.0001973%",
                        x2: "100.00116%",
                        y2: "50.0001973%",
                        id: "linearGradient-265"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000288971406%",
                        y1: "49.9987705%",
                        x2: "100.000144%",
                        y2: "49.9987705%",
                        id: "linearGradient-266"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C7A0F6", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00122949812%",
                        y1: "50%",
                        x2: "100%",
                        y2: "50%",
                        id: "linearGradient-267"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "21.6531131%",
                        y1: "21.7506265%",
                        x2: "73.849882%",
                        y2: "73.8422249%",
                        id: "linearGradient-268"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#1AA9E8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3D80EF", offset: "42.23%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5662F4", offset: "79.09%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5F57F6", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "9.33842006%",
                        y1: "24.5261241%",
                        x2: "90.6624053%",
                        y2: "75.4739046%",
                        id: "linearGradient-269"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C91C91", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000584521861%",
                        y1: "50.01%",
                        x2: "100%",
                        y2: "50.01%",
                        id: "linearGradient-270"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FFFFFF", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F1D1F8", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "50.0001734%",
                        y1: "100.000546%",
                        x2: "50.0001734%",
                        y2: "0.000576370804%",
                        id: "linearGradient-271"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#9F36AD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000216604934%",
                        y1: "50.0006276%",
                        x2: "100.000162%",
                        y2: "50.0006276%",
                        id: "linearGradient-272"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000452831897%",
                        y1: "50%",
                        x2: "100.000113%",
                        y2: "50%",
                        id: "linearGradient-273"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000370362266%",
                        y1: "50.0013097%",
                        x2: "100.000897%",
                        y2: "50.0013097%",
                        id: "linearGradient-274"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "17.1653686%",
                        y1: "21.5238209%",
                        x2: "81.9260098%",
                        y2: "72.5188955%",
                        id: "linearGradient-275"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000745332373%",
                        y1: "49.9998208%",
                        x2: "100.00199%",
                        y2: "49.9998208%",
                        id: "linearGradient-276"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-3.71777399e-05%",
                        y1: "50.0030105%",
                        x2: "99.999382%",
                        y2: "50.0030105%",
                        id: "linearGradient-277"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#706AED", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9996454%",
                        x2: "100.00105%",
                        y2: "49.9996454%",
                        id: "linearGradient-278"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9951302%",
                        x2: "100.000945%",
                        y2: "49.9951302%",
                        id: "linearGradient-279"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#706AED", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "16.6378286%",
                        y1: "20.9501593%",
                        x2: "85.3076355%",
                        y2: "97.0685839%",
                        id: "linearGradient-280"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FE6A77", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00117462304%",
                        y1: "50.0016528%",
                        x2: "100.00387%",
                        y2: "50.0016528%",
                        id: "linearGradient-281"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#C16846", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#D27565", offset: "26.53%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#DE7F7B", offset: "53.08%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E58589", offset: "78.14%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000386598549%",
                        y1: "50.0019665%",
                        x2: "99.9994571%",
                        y2: "50.0019665%",
                        id: "linearGradient-282"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000107812836%",
                        y1: "50.0009567%",
                        x2: "100%",
                        y2: "50.0009567%",
                        id: "linearGradient-283"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000167038901%",
                        y1: "50.000052%",
                        x2: "100.000676%",
                        y2: "50.000052%",
                        id: "linearGradient-284"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "21.7233224%",
                        y1: "13.8559051%",
                        x2: "68.3381149%",
                        y2: "79.3978243%",
                        id: "linearGradient-285"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0%",
                        y1: "49.9984197%",
                        x2: "100%",
                        y2: "49.9984197%",
                        id: "linearGradient-286"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000306980421%",
                        y1: "50.0026372%",
                        x2: "99.9999307%",
                        y2: "50.0026372%",
                        id: "linearGradient-287"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00209324324%",
                        y1: "50.0021256%",
                        x2: "99.9975727%",
                        y2: "50.0021256%",
                        id: "linearGradient-288"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#EC9895", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.000621421079%",
                        y1: "50.0011168%",
                        x2: "100.00065%",
                        y2: "50.0011168%",
                        id: "linearGradient-289"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#5A55F8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#8C6AE2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00356206121%",
                        y1: "50.0002709%",
                        x2: "100.001906%",
                        y2: "50.0002709%",
                        id: "linearGradient-290"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000136507616%",
                        y1: "50.0005956%",
                        x2: "100.00036%",
                        y2: "50.0005956%",
                        id: "linearGradient-291"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#FDE1A7", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#F9A144", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "8.97041682%",
                        y1: "21.7052882%",
                        x2: "91.0286979%",
                        y2: "78.2966452%",
                        id: "linearGradient-292"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#00E2EC", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#0090B2", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "8.97075862%",
                        y1: "21.7036861%",
                        x2: "91.029931%",
                        y2: "78.2963139%",
                        id: "linearGradient-293"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#706AED", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "10.921229%",
                        y1: "38.5120936%",
                        x2: "76.1187341%",
                        y2: "64.5318183%",
                        id: "linearGradient-294"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#706AED", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "43.519422%",
                        y1: "22.2383315%",
                        x2: "55.1116882%",
                        y2: "74.3552379%",
                        id: "linearGradient-295"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "14.2192197%",
                        y1: "40.2514446%",
                        x2: "76.074564%",
                        y2: "61.9846077%",
                        id: "linearGradient-296"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#706AED", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#271068", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "42.3484198%",
                        y1: "17.3034291%",
                        x2: "58.9953851%",
                        y2: "78.7627336%",
                        id: "linearGradient-297"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#994574", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000421373157%",
                        y1: "49.9995821%",
                        x2: "99.9995754%",
                        y2: "49.9995821%",
                        id: "linearGradient-298"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "32.3414819%",
                        y1: "23.6495066%",
                        x2: "63.9761196%",
                        y2: "89.296847%",
                        id: "linearGradient-299"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#1AA9E8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3D80EF", offset: "42.23%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5662F4", offset: "79.09%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5F57F6", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "0.00269392021%",
                        y1: "50.0004497%",
                        x2: "100.003608%",
                        y2: "50.0004497%",
                        id: "linearGradient-300"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#EC9895", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#FF57BD", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "30.8085905%",
                        y1: "26.0776043%",
                        x2: "63.3122767%",
                        y2: "80.273023%",
                        id: "linearGradient-301"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000700054074%",
                        y1: "50.0006333%",
                        x2: "99.9991136%",
                        y2: "50.0006333%",
                        id: "linearGradient-302"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#CB2090", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "5.04926611%",
                        y1: "3.72734726%",
                        x2: "83.6611382%",
                        y2: "80.2057965%",
                        id: "linearGradient-303"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#CB2090", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#43256F", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.00154536469%",
                        y1: "50.0009875%",
                        x2: "100.000304%",
                        y2: "50.0009875%",
                        id: "linearGradient-304"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#1AA9E8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3D80EF", offset: "42.23%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5662F4", offset: "79.09%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5F57F6", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000393863605%",
                        y1: "50.000519%",
                        x2: "99.9982276%",
                        y2: "50.000519%",
                        id: "linearGradient-305"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#F4BEA3", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#E8878E", offset: "100%" }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "linearGradient",
                    {
                      attrs: {
                        x1: "-0.000276708065%",
                        y1: "50.0002666%",
                        x2: "100.001753%",
                        y2: "50.0002666%",
                        id: "linearGradient-306"
                      }
                    },
                    [
                      _c("stop", {
                        attrs: { "stop-color": "#1AA9E8", offset: "0%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#3D80EF", offset: "42.23%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5662F4", offset: "79.09%" }
                      }),
                      _vm._v(" "),
                      _c("stop", {
                        attrs: { "stop-color": "#5F57F6", offset: "100%" }
                      })
                    ],
                    1
                  )
                ],
                1
              ),
              _vm._v(" "),
              _c(
                "g",
                {
                  attrs: {
                    id: "Artboard",
                    stroke: "none",
                    "stroke-width": "1",
                    fill: "none",
                    "fill-rule": "evenodd"
                  }
                },
                [
                  _c(
                    "g",
                    {
                      attrs: {
                        id: "Background",
                        transform: "translate(-130.000000, -60.000000)",
                        opacity: "0.600000024"
                      }
                    },
                    [
                      _c("circle", {
                        attrs: {
                          id: "Oval",
                          fill: "#127570",
                          filter: "url(#filter-1)",
                          cx: "181",
                          cy: "181",
                          r: "181"
                        }
                      }),
                      _vm._v(" "),
                      _c("circle", {
                        attrs: {
                          id: "Oval",
                          fill: "#127570",
                          filter: "url(#filter-2)",
                          cx: "476.5",
                          cy: "341",
                          r: "276.5"
                        }
                      }),
                      _vm._v(" "),
                      _c("circle", {
                        attrs: {
                          id: "Oval",
                          fill: "#4D3EAD",
                          filter: "url(#filter-3)",
                          cx: "471",
                          cy: "609",
                          r: "181"
                        }
                      }),
                      _vm._v(" "),
                      _c("circle", {
                        attrs: {
                          id: "Oval",
                          fill: "#4D3EAD",
                          filter: "url(#filter-4)",
                          cx: "471",
                          cy: "489",
                          r: "181"
                        }
                      }),
                      _vm._v(" "),
                      _c("circle", {
                        attrs: {
                          id: "Oval",
                          fill: "#4D3EAD",
                          filter: "url(#filter-5)",
                          cx: "761",
                          cy: "259",
                          r: "181"
                        }
                      }),
                      _vm._v(" "),
                      _c("circle", {
                        attrs: {
                          id: "Oval",
                          fill: "#9ED1FB",
                          filter: "url(#filter-6)",
                          cx: "762",
                          cy: "231",
                          r: "181"
                        }
                      }),
                      _vm._v(" "),
                      _c("circle", {
                        attrs: {
                          id: "Oval",
                          fill: "#F6EBFF",
                          filter: "url(#filter-7)",
                          cx: "503",
                          cy: "499",
                          r: "181"
                        }
                      })
                    ]
                  ),
                  _vm._v(" "),
                  _c(
                    "g",
                    {
                      attrs: {
                        id: "Support",
                        transform: "translate(-33.000000, 9.000000)",
                        "fill-rule": "nonzero"
                      }
                    },
                    [
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "background_x5F_2",
                            transform: "translate(135.000000, 174.000000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M71.592907,5.31428571 C91.9269921,12.7287771 121.012407,27.3579429 134.489294,30.8360366 C154.529784,36.0083246 199.128979,33.1611429 201.819767,53.1428571 C203.333628,64.3853349 195.127849,70.8925714 179.30093,75.0377143 C166.412932,78.4129234 152.012348,78.7802469 148.709302,85.6662857 C144.885349,93.6377143 158.056744,98.6331429 155.932326,108.836571 C153.634554,119.873705 128.117313,125.704539 101.122326,122.866286 C71.8053488,119.784 47.4620609,111.550258 46.1342993,95.7625783 C45.3563372,86.5165714 57.1400623,71.474592 37.0711047,69.2982857 C25.9752663,68.0951314 13.5962791,65.8971429 4.53648349,52.4039589 C-2.10997256,42.5053577 -0.768614651,26.5276389 7.0679407,16.5253029 C20.1819767,-0.212571429 46.5247674,-3.82628571 71.592907,5.31428571 Z",
                                id: "Path",
                                fill: "url(#linearGradient-8)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M201.819767,53.1428571 C199.524121,36.0946286 166.724372,35.6639589 144.696276,32.6926354 L182.927738,73.9999406 C196.366385,69.8250377 203.213386,63.4908343 201.819767,53.1428571 Z",
                                id: "Path",
                                fill: "url(#linearGradient-9)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M189.44248,71.5672731 L147.416381,33.0421029 C143.282687,32.5357577 139.448537,31.9703177 136.156963,31.2348206 L136.156113,31.2348206 L174.798862,76.099296 C176.306775,75.7753371 177.813837,75.4271451 179.30093,75.0377143 C183.141879,74.0318263 186.529477,72.8856411 189.44248,71.5672731 Z",
                                id: "Path",
                                fill: "#3369FF"
                              }
                            }),
                            _vm._v(" "),
                            _c("polygon", {
                              attrs: {
                                id: "Path",
                                fill: "url(#linearGradient-10)",
                                points:
                                  "170.450177 53.3558537 157.891464 53.3558537 168.219113 64.763712 182.941759 64.763712"
                              }
                            }),
                            _vm._v(" "),
                            _c("polygon", {
                              attrs: {
                                id: "Path",
                                fill: "url(#linearGradient-11)",
                                points:
                                  "157.122 52.505568 169.519257 52.505568 159.00296 42.902016 148.428029 42.902016"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M169.373947,66.0391406 L177.850377,75.4024869 L177.850377,75.4024869 C178.335594,75.2842971 178.819537,75.1635566 179.30093,75.0377143 C183.422302,73.9582766 187.021492,72.7168594 190.072582,71.2752 L184.338777,66.0391406 L169.373947,66.0391406 Z",
                                id: "Path",
                                fill: "url(#linearGradient-12)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M147.65814,42.0517303 L158.071615,42.0517303 L148.326057,33.1517897 C144.705623,32.7194194 141.297631,32.2496366 138.258862,31.6688914 L138.258862,31.6688914 L147.65814,42.0517303 Z",
                                id: "Path",
                                fill: "url(#linearGradient-13)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M139.999186,83.5405714 C126.481935,86.4889371 107.515551,85.3321234 100.697442,84.816 C93.8793328,84.2998766 71.486686,81.7337143 69.8933721,90.5554286 C68.6446388,97.4712274 78.3910465,103.628571 94.1117442,103.947429 C112.868661,104.327931 136.337963,96.3314194 153.483296,98.9872869 C150.485316,94.3936183 146.3427,90.5996434 148.709302,85.6662857 C149.416309,84.1923154 150.634875,83.018496 152.235412,82.04832 C148.882655,82.0487451 144.852633,82.4819657 139.999186,83.5405714 Z",
                                id: "Path",
                                fill: "url(#radialGradient-14)",
                                opacity: "0.4"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M50.7629826,75.8952274 C51.4449209,76.054656 52.0100163,76.4053989 52.354597,76.8824091 C52.6991777,77.3589943 52.7816051,77.905728 52.5870084,78.4210011 L51.9054949,80.2257326 L54.3557993,80.7992503 L55.0377377,78.9945189 C55.3920907,78.0570789 55.2718486,77.0681966 54.7135514,76.182624 C54.802777,76.1103497 54.894127,76.0385006 54.9825028,75.965376 C55.3861423,75.629088 55.77831,75.2834469 56.1598556,74.9284526 C56.922097,74.2167634 57.6431247,73.465536 58.314016,72.664992 C59.6473012,71.063904 60.8114826,69.2608731 61.4743012,67.1547154 C61.7984874,66.1160914 62.0143284,64.9103863 61.8588209,63.617952 C61.7130858,62.3284937 61.1233472,60.921696 60.0802577,59.7959177 C59.6927637,59.3703497 59.256833,58.990272 58.7886112,58.6556846 C61.3438619,55.0457966 63.2235474,52.335936 63.4491607,51.8678537 C64.3698837,49.955136 62.0330233,49.3169966 62.0330233,49.3169966 L49.4279979,49.3169966 L23.4072691,66.70704 C27.9705202,68.1720823 32.6234219,68.8161737 37.0711047,69.2987109 C43.0398712,69.9457783 46.1908088,71.7318034 47.6927728,74.1636206 C50.1779177,70.7123109 53.1542281,66.5688686 55.8522398,62.7863726 C55.8726342,62.8029531 55.8968526,62.817408 55.9168221,62.8339886 C56.2822221,63.1451931 56.5452251,63.5444023 56.6875612,64.0966629 C56.8264981,64.6527497 56.8213995,65.3134217 56.6748147,66.0637989 C56.3901426,67.5488229 55.6606172,69.0716846 54.6906077,70.5056914 C54.2045407,71.224608 53.6581402,71.9256686 53.0654274,72.5999451 C52.7692835,72.9370834 52.4612428,73.2682697 52.1442795,73.5896777 L51.6620365,74.063712 C51.653114,74.07264 51.6429167,74.081568 51.6335693,74.090496 C51.57621,74.075616 51.5205502,74.0573349 51.4623412,74.0437303 C50.1711195,73.7418789 48.8569542,73.8426377 47.7390851,74.2439726 C48.0955626,74.8383223 48.356866,75.4709349 48.5365919,76.1341577 C49.1662695,75.8178514 49.9752481,75.7111406 50.7629826,75.8952274 Z",
                                id: "Path",
                                fill: "url(#radialGradient-15)",
                                opacity: "0.4"
                              }
                            })
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "background_x5F_1_1_",
                            transform: "translate(41.000000, 14.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M28.8084897,11.3392722 C41.9229579,2.46881217 69.4222998,-2.84215304 90.8953043,1.91347826 C115.375304,7.335 127.615304,19.6663043 152.627478,17.8591304 C173.521903,16.3496087 212.869565,17.0086957 227.557565,18.9221739 C242.245565,20.8356522 270.912284,23.3869565 270.983074,48.0495652 C271.031917,65.1998583 255.73511,68.2405878 248.205913,72.0743478 C239.514874,76.4995852 229.331194,79.1967391 229.331194,89.5082609 C229.331194,97.8 238.468408,101.42923 243.948522,105.666522 C250.547478,110.76913 259.166141,117.641494 255.443053,129.903913 C252.674897,139.020999 243.173677,146.352597 233.299083,147.058883 C229.127691,147.357386 214.296217,149.434573 197.300285,142.225437 C187.466563,138.054055 178.95178,129.12449 175.93627,120.974348 C169.949101,104.7927 169.255997,107.314239 160.928966,108.643043 C140.327875,111.930399 128.572792,121.50587 117.077835,135.644348 C105.572661,149.795157 91.6075659,162.7392 73.8653134,162.220435 C52.046183,161.582609 52.8201767,141.688388 43.4249656,130.32913 C31.2914003,115.65913 4.34594504,103.150085 0.709281391,67.0427504 C-1.70295652,43.0885539 6.38608696,26.5050757 28.8084897,11.3392722 Z",
                              id: "Path",
                              fill: "url(#linearGradient-16)"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(116.226783, 10.630435)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M14.7237621,20.8356522 C22.4160167,20.8356522 28.7161043,14.8991922 29.2929809,7.36348957 C18.5571172,6.98632174 10.1125816,3.92348087 1.33000904,0.388223478 C0.544946087,2.17923913 0.106434783,4.15607478 0.106434783,6.23623826 C0.106434783,14.2992104 6.65047096,20.8356522 14.7237621,20.8356522 Z",
                                  id: "Path",
                                  fill: "url(#radialGradient-17)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M14.7237621,15.7330435 C19.7270483,15.7330435 23.8247875,11.8720696 24.2007151,6.97101391 C17.6136793,6.18648783 11.8219242,4.40780348 6.09317843,2.25110087 C5.53120278,3.46339565 5.21530435,4.81261043 5.21530435,6.23623826 C5.21530435,11.4812948 9.47226991,15.7330435 14.7237621,15.7330435 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-18)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M11.5307186,7.01608696 C12.768768,7.01608696 13.7905419,6.07933304 13.9263527,4.87851913 C13.7841558,4.83812348 13.6436619,4.79432609 13.5023165,4.75308 C13.4256835,5.77785391 12.5754824,6.59086957 11.5307186,6.59086957 C10.4352918,6.59086957 9.54379409,5.70088957 9.54379409,4.60638 C9.54379409,4.23431478 9.65320904,3.89031391 9.83201948,3.59223652 C9.69280278,3.54503739 9.55358609,3.49783826 9.41479513,3.45021391 C9.22576696,3.79378957 9.11805496,4.18754087 9.11805496,4.60638 C9.11805496,5.93518435 10.2002838,7.01608696 11.5307186,7.01608696 Z",
                                  id: "Path",
                                  fill: "#CFDBA8"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M18.498791,12.710173 C17.5932438,12.710173 16.8235075,12.3223748 16.3871249,11.6462791 C15.6190915,10.4556704 16.1516911,8.74246957 17.5736598,7.82697652 C18.1488334,7.45703739 18.7921252,7.26143739 19.4345656,7.26143739 C20.3405384,7.26143739 21.1102748,7.64923565 21.5462317,8.32575652 C22.314265,9.51636522 21.7820911,11.2295661 20.3596967,12.1446339 C19.7845231,12.5149983 19.1408056,12.710173 18.498791,12.710173 Z M19.4341398,7.68665478 C18.8738671,7.68665478 18.3101885,7.85886783 17.8039847,8.18415913 C16.5791332,8.97251217 16.1035826,10.4220783 16.7447457,11.4153861 C17.1010894,11.9677435 17.7401238,12.2845304 18.4983652,12.2845304 C19.0586379,12.2845304 19.6227423,12.1123174 20.1285203,11.7870261 C21.3533718,10.998673 21.8289224,9.54910696 21.1877593,8.55579913 C20.8318414,8.00344174 20.192807,7.68665478 19.4341398,7.68665478 Z",
                                  id: "Shape",
                                  fill: "#FDE1A7"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M8.44538713,13.42794 L8.19420104,13.0843643 C8.71573148,12.7037948 9.01502609,12.121247 9.01502609,11.4851217 C9.01502609,10.3910374 8.12352835,9.50063217 7.02810157,9.50063217 C6.65302539,9.50063217 6.28390957,9.60991304 5.96077357,9.8165687 L5.73130017,9.45853565 C6.12298017,9.20808261 6.57170922,9.07541478 7.02810157,9.07541478 C8.35853635,9.07541478 9.44076522,10.1563174 9.44076522,11.4851217 C9.44076522,12.2585922 9.07803548,12.9665791 8.44538713,13.42794 Z",
                                  id: "Path",
                                  fill: "#D5DCA8"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M37.677913,9.78 L31.3280139,9.78 C30.4399221,10.2860087 29.5965329,10.8060496 28.808064,11.3392722 C12.2940689,22.5093078 3.56301078,34.4519635 1.06817948,49.5378261 L37.677913,49.5378261 L37.677913,9.78 Z",
                              id: "Path",
                              fill: "url(#linearGradient-19)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M255.443053,118.893334 L255.443053,129.903913 C256.741131,125.629203 256.535925,122.011453 255.443053,118.893334 Z",
                              id: "Path",
                              fill: "url(#linearGradient-20)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M44.4897391,21.0482609 L44.4897391,4.32828783 C38.2909774,6.19754348 32.8615263,8.59789565 28.8084897,11.3392722 C21.34656,16.3866026 15.4803005,21.5929643 11.0521878,27.1735174 L39.8066087,25.7256522 C42.3929739,25.7256522 44.4897391,23.6314565 44.4897391,21.0482609 Z",
                              id: "Path",
                              fill: "url(#linearGradient-21)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M40.5869885,18.8511626 L40.5869885,5.61414522 C36.0115701,7.25293304 31.9849294,9.19022348 28.808064,11.338847 C23.902272,14.6572435 19.6827715,18.0432496 16.1091172,21.5593722 L38.4582929,20.9768243 C39.6341843,20.9772496 40.5869885,20.025613 40.5869885,18.8511626 Z",
                              id: "Path",
                              fill: "#052D3C"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(228.621913, 20.410435)"
                              }
                            },
                            [
                              _c(
                                "g",
                                {
                                  attrs: {
                                    transform: "translate(0.425739, 68.885217)",
                                    id: "Path"
                                  }
                                },
                                [
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M14.9008696,16.3708696 C9.42075548,12.1335783 0.283542261,8.50434783 0.283542261,0.212608696 L0.283542261,58.0842704 C2.02268661,57.9673357 3.37525983,57.8261635 4.25143096,57.7632313 C14.1255986,57.0569452 23.6272445,49.7257722 26.3954003,40.6082609 L26.3954003,29.5976817 C24.3522783,23.771353 19.1995576,19.6947939 14.9008696,16.3708696 Z",
                                      fill: "url(#linearGradient-22)"
                                    }
                                  }),
                                  _vm._v(" "),
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M7.344,22.8426783 L7.344,57.3222809 C16.047385,55.49172 23.9184501,48.7673322 26.3954003,40.6078357 C29.6846609,29.7745722 23.3415736,23.1496852 17.2684049,18.233747 L10.3241739,19.8657313 C8.67826643,19.8661565 7.344,21.1987878 7.344,22.8426783 Z",
                                      fill: "url(#linearGradient-23)"
                                    }
                                  }),
                                  _vm._v(" "),
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M8.62121739,22.8426783 C8.62121739,21.9046487 9.38499339,21.1418087 10.3241739,21.1418087 L10.4727569,21.1418087 L18.4996424,19.2551191 C17.6639165,18.5441557 16.8213788,17.8684852 15.9962963,17.22258 L10.1632445,18.5934809 C7.88979757,18.6785243 6.06678261,20.551607 6.06678261,22.8426783 L6.06678261,57.5582765 C6.92592417,57.4264591 7.77825391,57.2440409 8.62121739,57.0182504 L8.62121739,22.8426783 L8.62121739,22.8426783 Z",
                                      fill: "#3369FF"
                                    }
                                  })
                                ]
                              ),
                              _vm._v(" "),
                              _c("g", [
                                _c("path", {
                                  attrs: {
                                    d:
                                      "M28.5951944,5.72682783 L28.5951944,33.1669565 L41.76288,33.1669565 C42.1507283,31.5043565 42.3670038,29.6742209 42.3611635,27.6391304 C42.329113,16.455913 36.4172995,9.81954522 28.5951944,5.72682783 Z",
                                    id: "Path",
                                    fill: "#003451"
                                  }
                                }),
                                _vm._v(" "),
                                _c("path", {
                                  attrs: {
                                    d:
                                      "M29.8017391,33.1669565 L29.8017391,6.39101739 C23.8839652,2.99820783 16.6876967,1.20506609 10.0755423,0.0739878261 L10.0755423,33.1669565 L29.8017391,33.1669565 Z",
                                    id: "Path",
                                    fill: "url(#linearGradient-24)"
                                  }
                                }),
                                _vm._v(" "),
                                _c("rect", {
                                  attrs: {
                                    id: "Rectangle",
                                    fill: "#003451",
                                    x: "5.60528139",
                                    y: "21.7570983",
                                    width: "1.27721739",
                                    height: "9.78"
                                  }
                                }),
                                _vm._v(" "),
                                _c("rect", {
                                  attrs: {
                                    id: "Rectangle",
                                    fill: "#003451",
                                    x: "19.3711304",
                                    y: "14.67",
                                    width: "1.27721739",
                                    height: "9.78"
                                  }
                                }),
                                _vm._v(" "),
                                _c("path", {
                                  attrs: {
                                    d:
                                      "M26.8211395,48.4837122 C34.1766344,45.2057113 42.3972313,40.219187 42.3611625,27.6391304 C42.352103,24.3879183 41.841216,21.5240791 40.9352431,18.9923348 L26.8211395,18.9923348 L26.8211395,48.4837122 L26.8211395,48.4837122 Z",
                                    id: "Path",
                                    fill: "#003451"
                                  }
                                }),
                                _vm._v(" "),
                                _c("path", {
                                  attrs: {
                                    d:
                                      "M0.709281391,32.1740739 L0.709281391,69.0978261 C0.709281391,58.7863043 10.8929614,56.0891504 19.584,51.663913 C21.5900828,50.6425409 24.1492007,49.6747461 26.8211395,48.4837122 L26.8211395,18.9919096 L0.709281391,32.1740739 Z",
                                    id: "Path",
                                    fill: "url(#linearGradient-25)"
                                  }
                                }),
                                _vm._v(" "),
                                _c("polygon", {
                                  attrs: {
                                    id: "Path",
                                    fill: "url(#linearGradient-26)",
                                    points:
                                      "0.709281391 35.0804348 26.8211395 21.8986957 26.8211395 18.9923348 0.709281391 32.1740739"
                                  }
                                }),
                                _vm._v(" "),
                                _c(
                                  "g",
                                  {
                                    attrs: {
                                      transform: "translate(0.000000, 5.102609)"
                                    }
                                  },
                                  [
                                    _c("path", {
                                      attrs: {
                                        d:
                                          "M1.17078261,18.5501087 C1.17078261,19.0195487 1.224,20.1978261 2.02226087,19.878913 L23.0963478,9.67369565 C23.7170755,9.42579391 23.9478261,8.8143313 23.9478261,8.3448913 L23.9478261,2.01978261 C23.9478261,1.55034261 23.5574233,1.02775043 23.0963478,1.16934783 L2.02226087,11.3745652 C1.410048,11.720267 1.17078261,12.3933861 1.17078261,12.8628261 L1.17078261,18.5501087 Z",
                                        id: "Path",
                                        fill: "url(#linearGradient-27)"
                                      }
                                    }),
                                    _vm._v(" "),
                                    _c("path", {
                                      attrs: {
                                        d:
                                          "M1.77277774,20.7833504 C1.772352,20.7833504 1.772352,20.7833504 1.77277774,20.7833504 C1.33554365,20.7833504 0.319304348,20.5656391 0.319304348,18.5501087 L0.319304348,12.8628261 C0.319304348,12.1692965 0.655638261,11.1691852 1.60333357,10.6342617 L1.65101635,10.6091739 L22.7838553,0.375892174 L22.8460132,0.356757391 C22.9784181,0.315936522 23.1146546,0.295526087 23.2508911,0.295526087 C24.1772995,0.295526087 24.7997301,1.18720696 24.7997301,2.02020783 L24.7997301,8.34531652 C24.7997301,9.05968174 24.4438122,10.0347052 23.4441767,10.450993 L2.33901078,20.668967 C2.14785391,20.7446557 1.95754852,20.7833504 1.77277774,20.7833504 Z M2.42245565,12.1259243 C2.12954713,12.3036652 2.02226087,12.6616983 2.02226087,12.8628261 L2.02226087,18.5501087 C2.02226087,18.7040374 2.02949843,18.8277757 2.03971617,18.9251504 L22.7800237,8.88406696 C23.087833,8.76117913 23.0963478,8.38698783 23.0963478,8.3448913 L23.0963478,2.11460609 L2.42245565,12.1259243 Z",
                                        id: "Shape",
                                        fill: "url(#linearGradient-28)"
                                      }
                                    })
                                  ]
                                ),
                                _vm._v(" "),
                                _c("path", {
                                  attrs: {
                                    d:
                                      "M26.8211395,18.9923348 L26.8211395,21.8986957 L41.7624543,21.8986957 C41.5427729,20.8837017 41.2660424,19.9154817 40.9356689,18.9923348 L26.8211395,18.9923348 Z",
                                    id: "Path",
                                    fill: "url(#linearGradient-29)"
                                  }
                                }),
                                _vm._v(" "),
                                _c(
                                  "g",
                                  {
                                    attrs: {
                                      transform:
                                        "translate(13.623652, 30.615652)",
                                      id: "Path"
                                    }
                                  },
                                  [
                                    _c("path", {
                                      attrs: {
                                        d:
                                          "M8.51478261,1.38195652 L2.12869565,4.35847826 C1.65867965,4.35847826 1.27721739,4.73947304 1.27721739,5.20891304 L1.27721739,23.2840539 C2.84223443,22.5582078 4.42470678,21.8302357 5.96034783,21.0482609 C6.97318122,20.5328974 8.12906296,20.0307157 9.36626087,19.507273 L9.36626087,2.2323913 C9.36626087,1.7629513 8.98479861,1.38195652 8.51478261,1.38195652 Z",
                                        fill: "url(#linearGradient-30)"
                                      }
                                    }),
                                    _vm._v(" "),
                                    _c("polygon", {
                                      attrs: {
                                        fill: "url(#linearGradient-31)",
                                        points:
                                          "9.36626087 10.7660791 1.27721739 13.7489791 1.27721739 15.1092496 9.36626087 12.1259243"
                                      }
                                    }),
                                    _vm._v(" "),
                                    _c("path", {
                                      attrs: {
                                        d:
                                          "M8.51478261,0.318913043 L8.27849739,0.318913043 L1.8485593,3.31584522 C0.924279652,3.45148957 0.212443826,4.24877217 0.212443826,5.20891304 L0.212443826,23.7794322 C0.917042087,23.4494635 1.62887791,23.1211957 2.34113948,22.7899513 L2.34113948,5.42152174 L8.3014873,2.65420696 L8.3014873,19.9622557 C8.98096696,19.66758 9.69493148,19.3678017 10.4301831,19.0586687 L10.4301831,2.2323913 C10.4306087,1.17742696 9.57104139,0.318913043 8.51478261,0.318913043 Z",
                                        fill: "url(#linearGradient-32)"
                                      }
                                    })
                                  ]
                                )
                              ])
                            ]
                          )
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "robot_x5F_arm_x5F_2",
                            transform: "translate(113.000000, 226.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M2.93082968,20.70432 L2.22959613,18.28008 L4.45188774,17.66562 C5.70568645,17.31912 6.43828645,16.0398 6.0833729,14.81382 C5.72888903,13.58826 4.42138065,12.87258 3.16586323,13.21908 L0.971070968,13.8264 L0.268978065,11.40174 L2.46462968,10.794 C5.08909935,10.06992 7.82313677,11.56638 8.56476,14.12838 C9.30552387,16.69206 7.7750129,19.36578 5.15355097,20.08986 L2.93082968,20.70432 Z",
                              id: "Path",
                              fill: "url(#linearGradient-33)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.7813794,0.2016 C28.7114748,3.01938 24.56208,5.70738 20.27304,8.04888 C18.1310981,9.2106 13.4489032,11.7852 10.56276,12.31986 C9.66258581,12.48618 8.35765548,12.51306 7.60013419,12.41394 L7.60013419,12.4152 C7.15369935,12.94902 6.96378194,15.6114 8.51491742,16.62528 C8.69366323,16.63494 8.87069032,16.6425 9.04385032,16.64418 C9.83617548,16.64964 10.5786581,16.5753 11.2957897,16.4682 C12.7257561,16.24728 14.0521703,15.8886 15.3373355,15.47952 C17.9012206,14.65128 20.3001097,13.6122 22.6431406,12.50088 C27.3158826,10.26396 31.7540206,7.70952 36.0890361,5.04084 L32.7813794,0.2016 Z",
                              id: "Path",
                              fill: "url(#linearGradient-34)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M12.8211445,16.38588 C12.7940748,16.38588 12.7670052,16.38084 12.7403652,16.37076 C12.0752245,16.107 11.5978529,15.63198 11.3215703,14.95914 C10.9168142,13.97298 11.0461471,12.71718 11.3825845,11.98638 C11.4311381,11.88054 11.5578929,11.83224 11.6666013,11.88096 C11.77488,11.92842 11.8230039,12.05274 11.7744503,12.15858 C11.4822697,12.79278 11.3641084,13.93476 11.720311,14.8029 C11.9514774,15.36612 12.348929,15.7626 12.9014942,15.98142 C13.0114916,16.0251 13.0643419,16.14774 13.0200852,16.25484 C12.9865703,16.33632 12.905791,16.38588 12.8211445,16.38588 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M17.197409,15.0423 C17.1565897,15.0423 17.1153406,15.03096 17.0788181,15.00702 C16.2048542,14.43876 15.6518594,13.53198 15.5216671,12.45342 C15.4052245,11.49246 15.6428361,10.48614 16.0987239,10.00692 C16.1790735,9.92124 16.3152813,9.9162 16.4025058,9.996 C16.4893006,10.07496 16.4944568,10.20768 16.4136774,10.29252 C16.10388,10.61844 15.8357613,11.46978 15.9483368,12.40428 C16.0299755,13.07922 16.3337574,14.01834 17.3168594,14.65758 C17.4156852,14.72142 17.4423252,14.85204 17.3770142,14.94864 C17.3353355,15.00954 17.2670168,15.0423 17.197409,15.0423 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "robot_x5F_body",
                            transform: "translate(132.000000, 215.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M38.7815175,17.19942 L55.6284375,4.7775 C55.45701,3.96018 55.201365,3.28272 54.8691975,2.72454 C53.75043,0.84546 51.7646925,0.315 49.2159375,0.315 L28.7848575,0.315 C25.4794275,0.315 25.4896875,0.8925 19.900125,4.38942 L2.6492175,15.76218 L38.7815175,17.19942 Z",
                              id: "Path",
                              fill: "url(#linearGradient-35)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M54.0996975,1.7598 L54.0988425,1.75644 L34.948125,16.8 L39.864375,27.72 L56.90196,10.5 L55.6284375,4.7775 C55.34244,3.41292 54.81918,2.44146 54.0996975,1.7598 Z",
                              id: "Path",
                              fill: "url(#linearGradient-36)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M53.9851275,11.1111 C52.964685,8.76456 50.2017525,7.67508 47.81331,8.67762 L47.22336,8.925 C44.835345,9.92754 43.72641,12.64242 44.746425,14.98854 L47.1015225,20.40486 L54.6905025,12.7344 L53.9851275,11.1111 Z",
                              id: "Path",
                              fill: "url(#linearGradient-37)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M39.864375,27.72 L39.864375,20.57118 C39.864375,17.32374 37.184805,14.69118 33.879375,14.69118 L6.091875,14.69118 C2.786445,14.69118 0.106875,17.32374 0.106875,20.57118 L0.106875,27.72 L39.864375,27.72 Z",
                              id: "Path",
                              fill: "url(#linearGradient-38)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M14.74875,22.96014 L26.1488925,22.96014 C29.4543225,22.96014 32.1338925,20.32758 32.1338925,17.08014 L32.1338925,14.69118 L8.76375,14.69118 L8.76375,17.08014 C8.76375,20.32758 11.44332,22.96014 14.74875,22.96014 Z",
                              id: "Path",
                              fill: "url(#linearGradient-39)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "robot_x5F_head",
                            transform: "translate(140.000000, 185.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M39.1520291,11.4890625 C38.8835673,11.1111525 38.64276,10.7759925 38.4444982,10.50624 C35.3391055,6.2786925 33.3981818,3.33963 31.6963636,1.736505 C30.0626182,0.197505 28.0625564,0.1423575 27.1227273,0.1423575 L16.7522727,0.1423575 C15.0504545,0.1423575 14.5450145,1.8164475 14.96196,2.813805 L20.1312327,11.488635 L39.1520291,11.488635 L39.1520291,11.4890625 Z",
                              id: "Path",
                              fill: "url(#linearGradient-40)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M4.46386909,14.28021 C6.87832364,12.6826425 18.2400873,8.94672 33.1854545,9.9038925 C45.9844036,10.72341 50.5397455,15.201045 51.2672727,17.3141775 C51.9054545,19.1669625 51.5863636,21.0548025 50.5261309,22.389885 C49.4310109,23.769 43.3206327,29.773665 38.4304582,31.5593325 C33.5402836,33.345 42.54588,23.5120725 39.4255964,19.8073575 C36.3053127,16.1026425 32.2673236,12.509505 18.3655964,13.3948575 C4.46386909,14.28021 4.46386909,14.28021 4.46386909,14.28021 Z",
                              id: "Path",
                              fill: "url(#linearGradient-41)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M38.1858218,10.4652 C36.6775855,10.21554 35.0187382,10.0210275 33.1854545,9.9038925 C28.1102073,9.5789925 23.4497782,9.7961625 19.4113636,10.2860775 L14.5365055,12.89682 L20.4652145,13.2948225 C24.2687782,13.1682825 27.2588727,13.410675 29.6567345,13.911705 L32.5830109,14.1079275 L38.1858218,10.4652 Z",
                              id: "Path",
                              fill: "url(#linearGradient-42)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M10.6772073,30.3525 C10.93716,34.2440325 14.15232,37.3211775 18.0907527,37.3211775 L32.2605164,37.3211775 C36.1989491,37.3211775 39.4141091,34.2440325 39.6740618,30.3525 L10.6772073,30.3525 L10.6772073,30.3525 Z",
                              id: "Path",
                              fill: "url(#linearGradient-43)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M42.0498,26.0420175 C40.6309091,30.3529275 38.7776291,31.741875 36.6248291,32.3476425 C33.0795164,33.345 29.2504255,33.59466 21.0970145,33.59466 C14.4390764,33.59466 7.23315273,31.9201425 7.23315273,31.9201425 C2.19874909,30.709035 1.46271273,28.963125 0.496930909,24.8663925 C0.496930909,24.8663925 0.162098182,22.8058425 0.0714763636,21.7712925 C-0.425029091,16.1026425 2.68376727,14.7525975 6.52434545,13.5735525 C10.3534364,12.3979275 13.2605673,11.721195 20.4226691,11.685285 C28.5063055,11.6446725 35.8807091,13.89375 35.8807091,13.89375 C40.2284291,15.47037 42.4067564,17.1286425 42.6411818,21.1642425 C42.7228691,22.5861075 42.4135636,24.9365025 42.0498,26.0420175 Z",
                              id: "Path",
                              fill: "url(#linearGradient-44)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M4.36090909,17.9015625 C5.66960727,16.9670475 12.4092327,14.6782125 21.3437782,14.7491775 C30.2783236,14.8201425 37.5110509,16.9926975 38.5746873,19.41534 C39.6383236,21.8379825 38.1368945,27.224055 36.7188545,28.6489125 C35.3008145,30.07377 29.3563636,30.99375 21.9109091,30.673125 C14.4654545,30.3525 6.33586909,29.19141 4.96377818,27.4313925 C3.29727273,25.2938925 2.34,19.344375 4.36090909,17.9015625 Z",
                              id: "Path",
                              fill: "url(#linearGradient-45)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M50.5261309,22.389885 C51.5863636,21.0548025 51.9054545,19.1669625 51.2672727,17.3141775 C51.1302764,16.916175 50.85756,16.43481 50.4201927,15.9102675 C47.3922327,16.6036725 45.1300909,19.3208625 45.1300909,22.57371 L45.1300909,25.8513525 C45.1300909,26.3566575 45.1883782,26.8474275 45.2917636,27.3210975 C47.8508727,25.257555 49.9304945,23.13972 50.5261309,22.389885 Z",
                              id: "Path",
                              fill: "url(#linearGradient-46)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.4427273,28.179945 C20.6128473,28.179945 19.0348364,29.10762 18.2775273,30.4521075 C19.4853927,30.5470125 20.7068727,30.6213975 21.9109091,30.673125 C23.6123018,30.746655 25.2332836,30.7539225 26.74152,30.70647 C26.0493055,29.224755 24.3862036,28.179945 22.4427273,28.179945 Z",
                              id: "Path",
                              fill: "#FFFFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(9.360000, 20.520000)"
                              }
                            },
                            [
                              _c("polygon", {
                                attrs: {
                                  id: "Path",
                                  fill: "url(#linearGradient-47)",
                                  points:
                                    "6.73579636 1.7266725 5.53218545 0.5177025 3.61636364 2.4431625 1.70054182 0.5177025 0.496930909 1.7266725 2.41317818 3.6521325 0.496930909 5.577165 1.70054182 6.786135 3.61636364 4.8611025 5.53218545 6.786135 6.73579636 5.577165 4.81954909 3.6521325"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M5.53218545,6.999885 C5.47772727,6.999885 5.42326909,6.9789375 5.38157455,6.93747 L3.61593818,5.1637725 L1.85030182,6.93747 C1.76733818,7.0208325 1.63246909,7.0208325 1.54950545,6.93747 L0.34632,5.7285 C0.306327273,5.688315 0.284203636,5.6340225 0.284203636,5.577165 C0.284203636,5.5203075 0.306752727,5.466015 0.34632,5.42583 L2.11195636,3.6521325 L0.34632,1.8780075 C0.263356364,1.794645 0.263356364,1.6591275 0.34632,1.575765 L1.54950545,0.366795 C1.62949091,0.286425 1.77074182,0.286425 1.85030182,0.366795 L3.61593818,2.14092 L5.38157455,0.366795 C5.46156,0.286425 5.60281091,0.286425 5.68237091,0.366795 L6.88555636,1.575765 C6.96852,1.6591275 6.96852,1.794645 6.88555636,1.8780075 L5.11992,3.6521325 L6.88555636,5.42583 C6.92554909,5.466015 6.94767273,5.5203075 6.94767273,5.577165 C6.94767273,5.6340225 6.92512364,5.688315 6.88555636,5.7285 L5.68237091,6.93747 C5.64110182,6.9789375 5.58664364,6.999885 5.53218545,6.999885 Z M3.61636364,4.6473525 C3.67082182,4.6473525 3.72528,4.6683 3.76697455,4.7097675 L5.53261091,6.483465 L6.435,5.5767375 L4.66936364,3.80304 C4.5864,3.7196775 4.5864,3.58416 4.66936364,3.5007975 L6.435,1.7266725 L5.53261091,0.819945 L3.76697455,2.59407 C3.68698909,2.67444 3.54573818,2.67444 3.46617818,2.59407 L1.70054182,0.819945 L0.798152727,1.7266725 L2.56378909,3.5007975 C2.60378182,3.5409825 2.62590545,3.595275 2.62590545,3.6521325 C2.62590545,3.70899 2.60335636,3.7632825 2.56378909,3.8034675 L0.798152727,5.577165 L1.70054182,6.4838925 L3.46617818,4.710195 C3.50744727,4.6683 3.56190545,4.6473525 3.61636364,4.6473525 Z",
                                  id: "Shape",
                                  fill: "#7E59D1"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(28.080000, 21.375000)"
                              }
                            },
                            [
                              _c("polygon", {
                                attrs: {
                                  id: "Path",
                                  fill: "url(#linearGradient-48)",
                                  points:
                                    "6.84216 1.5479775 5.63854909 0.3390075 3.72272727 2.2644675 1.80690545 0.3390075 0.603294545 1.5479775 2.51954182 3.4734375 0.603294545 5.39847 1.80690545 6.60744 3.72272727 4.6824075 5.63854909 6.60744 6.84216 5.39847 4.92591273 3.4734375"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M5.63854909,6.82119 C5.58409091,6.82119 5.52963273,6.8002425 5.48793818,6.758775 L3.72230182,4.9850775 L1.95666545,6.758775 C1.87370182,6.8421375 1.73883273,6.8421375 1.65586909,6.758775 L0.452683636,5.549805 C0.412690909,5.50962 0.390567273,5.4553275 0.390567273,5.39847 C0.390567273,5.3416125 0.413116364,5.28732 0.452683636,5.247135 L2.21832,3.4734375 L0.452683636,1.6993125 C0.36972,1.61595 0.36972,1.4804325 0.452683636,1.39707 L1.65586909,0.1881 C1.73585455,0.10773 1.87710545,0.10773 1.95666545,0.1881 L3.72230182,1.962225 L5.48793818,0.1881 C5.56792364,0.10773 5.70917455,0.10773 5.78873455,0.1881 L6.99192,1.39707 C7.07488364,1.4804325 7.07488364,1.61595 6.99192,1.6993125 L5.22628364,3.4734375 L6.99192,5.247135 C7.03191273,5.28732 7.05403636,5.3416125 7.05403636,5.39847 C7.05403636,5.4553275 7.03148727,5.50962 6.99192,5.549805 L5.78873455,6.758775 C5.74746545,6.8002425 5.69300727,6.82119 5.63854909,6.82119 Z M3.72272727,4.4686575 C3.77718545,4.4686575 3.83164364,4.489605 3.87333818,4.5310725 L5.63897455,6.30477 L6.54136364,5.3980425 L4.77572727,3.624345 C4.69276364,3.5409825 4.69276364,3.405465 4.77572727,3.3221025 L6.54136364,1.5479775 L5.63897455,0.64125 L3.87333818,2.415375 C3.79335273,2.495745 3.65210182,2.495745 3.57254182,2.415375 L1.80690545,0.64125 L0.904516364,1.5479775 L2.67015273,3.3221025 C2.71014545,3.3622875 2.73226909,3.41658 2.73226909,3.4734375 C2.73226909,3.530295 2.70972,3.5845875 2.67015273,3.6247725 L0.904516364,5.39847 L1.80690545,6.3051975 L3.57254182,4.5315 C3.61381091,4.489605 3.66826909,4.4686575 3.72272727,4.4686575 Z",
                                  id: "Shape",
                                  fill: "#7E59D1"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M38.3457927,10.3715775 C35.2991127,6.21756 33.3794618,3.32253 31.6963636,1.7369325 C30.5663564,0.672885 29.2619127,0.3184875 28.2535855,0.200925 L36.9881673,11.1684375 L38.3457927,10.3715775 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "robot_x5F_arm_x5F_1",
                            transform: "translate(177.000000, 225.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M14.3340923,6.829488 C14.0391692,5.352912 13.2981231,3.803328 12.1524923,2.645136 C11.0147538,1.476576 9.58707692,0.73008 8.13863077,0.3672 C7.40963077,0.1836 6.66650769,0.09072 5.90053846,0.0928431755 C5.51672308,0.095472 4.15592308,0.230688 3.94989231,0.277776 C3.94324615,0.279072 3.9366,0.282528 3.92995385,0.284256 C2.49936923,0.552528 1.41313846,1.851552 1.41313846,3.416688 C1.41313846,5.176224 2.78473846,6.602688 4.4766,6.602688 C4.90403077,6.602688 5.31069231,6.511104 5.67996923,6.346512 C6.05173846,6.218208 6.507,6.113664 6.97804615,6.17544 C7.56332308,6.24888 8.08629231,6.462288 8.47550769,6.771168 C8.8668,7.08048 9.17003077,7.505568 9.3744,8.127216 C9.57544615,8.752752 9.6498,9.521712 9.59704615,10.41336 C9.49818462,12.178944 8.97230769,14.052528 8.20218462,15.857424 C7.81670769,16.762032 7.37016923,17.65368 6.87544615,18.522 C6.62829231,18.95616 6.36909231,19.384704 6.09992308,19.803744 L5.68869231,20.423664 C5.55535385,20.61936 5.39584615,20.840976 5.28576923,20.991312 L8.00653846,23.506416 C8.23873846,23.249376 8.4078,23.05152 8.59804615,22.824288 C8.78247692,22.603104 8.96150769,22.381056 9.13763077,22.156416 C9.48946154,21.708 9.82841538,21.25008 10.1557385,20.782656 C10.8108,19.847376 11.4201692,18.871056 11.9755385,17.845056 C13.0779692,15.794784 13.9918154,13.534128 14.3839385,10.993104 C14.5741846,9.739872 14.6394,8.307792 14.3340923,6.829488 Z",
                              id: "Path",
                              fill: "url(#linearGradient-49)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M6.4908,6.381936 C6.39276923,6.381936 6.30553846,6.30936 6.28684615,6.20568 C6.18009231,5.609088 6.23990769,3.544128 7.37556923,2.16864 C8.07092308,1.326672 9.02381538,0.922752 10.2151385,0.95904 C10.3297846,0.962928 10.4199231,1.06272 10.4157692,1.181952 C10.4120308,1.301184 10.3052769,1.382832 10.2014308,1.39104 C9.1476,1.355184 8.30021538,1.711584 7.69043077,2.449872 C6.66609231,3.690576 6.60170769,5.606064 6.69516923,6.126192 C6.71593846,6.243264 6.64158462,6.356448 6.52901538,6.378048 C6.51613846,6.381072 6.50326154,6.381936 6.4908,6.381936 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M9.45290769,8.624016 C9.4338,8.624016 9.41427692,8.621424 9.39516923,8.615376 C9.28509231,8.582112 9.22153846,8.462448 9.25352308,8.347536 C9.46578462,7.586784 10.5150462,6.5556 11.7391846,6.232464 C12.4810615,6.036336 13.5718615,6.018624 14.5484308,7.04592 C14.6290154,7.130592 14.6281846,7.267536 14.5467692,7.351344 C14.4649385,7.435584 14.3332615,7.434288 14.2530923,7.349616 C13.4148462,6.467904 12.4789846,6.483456 11.8413692,6.651072 C10.7713385,6.9336 9.82924615,7.835616 9.65229231,8.468496 C9.62612308,8.562672 9.54304615,8.624016 9.45290769,8.624016 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M13.5162,14.6232 C13.4273077,14.6232 13.3450615,14.563584 13.3176462,14.470704 C13.0995692,13.7376 12.6380769,13.21704 11.9456308,12.924144 C10.9898308,12.518928 9.80183077,12.669696 9.34532308,12.928464 C9.24396923,12.985056 9.11810769,12.946176 9.06369231,12.842064 C9.00886154,12.737088 9.04624615,12.606192 9.14676923,12.548736 C9.66641538,12.254112 10.9653231,12.042432 12.1022308,12.52368 C12.9039231,12.8628 13.4613692,13.492224 13.7143385,14.343264 C13.7484,14.457312 13.6869231,14.578272 13.5772615,14.613264 C13.5569077,14.620176 13.5361385,14.6232 13.5162,14.6232 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M11.6050154,19.035216 C11.5194462,19.035216 11.4396923,18.97992 11.4093692,18.89136 C11.0147538,17.734464 10.2658154,17.259696 9.70670769,17.064432 C8.86389231,16.77024 8.05763077,16.945632 7.83249231,17.099856 C7.73736923,17.16552 7.60776923,17.137872 7.54504615,17.03808 C7.48232308,16.938288 7.50849231,16.804368 7.60444615,16.738704 C7.94090769,16.508448 8.88507692,16.321824 9.8388,16.654896 C10.4851385,16.879968 11.3499692,17.426016 11.8006615,18.747072 C11.8388769,18.859392 11.7823846,18.982944 11.6743846,19.02312 C11.6511231,19.031328 11.6278615,19.035216 11.6050154,19.035216 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M10.1673692,29.73888 L7.70912308,29.31336 L8.10830769,26.82072 C8.22212308,26.109216 8.06261538,25.393824 7.65969231,24.8076 C7.25635385,24.220944 6.65778462,23.832144 5.97364615,23.713776 C4.563,23.47056 3.22172308,24.465024 2.9862,25.934256 L2.59241538,28.396656 L0.133753846,27.970704 L0.527953846,25.508736 C0.989030769,22.63032 3.61384615,20.677248 6.38321538,21.157632 C7.72407692,21.390048 8.89753846,22.151232 9.6876,23.301216 C10.4780769,24.451632 10.7900308,25.852608 10.5669692,27.247104 L10.1673692,29.73888 Z",
                              id: "Path",
                              fill: "url(#linearGradient-50)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "bulb_x5F_1",
                            transform: "translate(202.000000, 24.000000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M60.9792453,27.2328533 C60.9792453,28.91904 59.608603,30.2856533 57.9178732,30.2856533 L4.66608906,30.2856533 C2.97535925,30.2856533 1.60471698,28.91904 1.60471698,27.2328533 L1.60471698,4.44714667 C1.60471698,2.76096 2.97535925,1.39434667 4.66608906,1.39434667 L57.9174453,1.39434667 C59.6081751,1.39434667 60.9792453,2.76096 60.9792453,4.44714667 L60.9792453,27.2328533 L60.9792453,27.2328533 Z",
                                id: "Path",
                                fill: "url(#linearGradient-51)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M57.9178732,31.5656533 L4.66608906,31.5656533 C2.27013962,31.5656533 0.320943396,29.62176 0.320943396,27.2328533 L0.320943396,4.44714667 C0.320943396,2.05824 2.27056755,0.114346667 4.66608906,0.114346667 L57.9174453,0.114346667 C60.3133947,0.114346667 62.262591,2.05824 62.262591,4.44714667 L62.262591,27.2328533 C62.262591,29.62176 60.3133947,31.5656533 57.9178732,31.5656533 Z M4.66608906,2.67434667 C3.68571396,2.67434667 2.88849057,3.46965333 2.88849057,4.44714667 L2.88849057,27.2328533 C2.88849057,28.2103467 3.68571396,29.0056533 4.66608906,29.0056533 L57.9174453,29.0056533 C58.8978204,29.0056533 59.6950438,28.2103467 59.6950438,27.2328533 L59.6950438,4.44714667 C59.6950438,3.46965333 58.8978204,2.67434667 57.9174453,2.67434667 L4.66608906,2.67434667 Z",
                                id: "Shape",
                                fill: "url(#linearGradient-52)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M54.7743396,8.58666667 C54.7743396,9.08757333 54.3673834,9.49333333 53.865,9.49333333 L8.71896226,9.49333333 C8.21657887,9.49333333 7.80962264,9.08757333 7.80962264,8.58666667 L7.80962264,8.58666667 C7.80962264,8.08576 8.21657887,7.68 8.71896226,7.68 L53.865,7.68 C54.3673834,7.68 54.7743396,8.08576 54.7743396,8.58666667 L54.7743396,8.58666667 Z",
                                id: "Path",
                                fill: "#FDE1A7"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M25.9784423,13.9733333 L21.8956143,13.9733333 L19.1141049,13.9733333 L8.71896226,13.9733333 C8.21657887,13.9733333 7.80962264,14.3790933 7.80962264,14.88 C7.80962264,15.3809067 8.21657887,15.7866667 8.71896226,15.7866667 L19.1141049,15.7866667 L21.8956143,15.7866667 L25.9784423,15.7866667 C26.4808257,15.7866667 26.8877819,15.3809067 26.8877819,14.88 C26.8877819,14.3790933 26.4808257,13.9733333 25.9784423,13.9733333 Z",
                                id: "Path",
                                fill: "#FDE1A7"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M53.865,13.9733333 L47.2146249,13.9733333 L46.4298113,13.9733333 L43.2379223,13.9733333 C42.7355389,13.9733333 42.3285826,14.3790933 42.3285826,14.88 C42.3285826,15.3809067 42.7355389,15.7866667 43.2379223,15.7866667 L46.4298113,15.7866667 L47.2146249,15.7866667 L53.865,15.7866667 C54.3673834,15.7866667 54.7743396,15.3809067 54.7743396,14.88 C54.7743396,14.3790933 54.3673834,13.9733333 53.865,13.9733333 Z",
                                id: "Path",
                                fill: "#FDE1A7"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M37.4609411,13.9733333 L36.231086,13.9733333 L34.02,13.9733333 L31.185,13.9733333 C30.6826166,13.9733333 30.2756604,14.3790933 30.2756604,14.88 C30.2756604,15.3809067 30.6826166,15.7866667 31.185,15.7866667 L34.02,15.7866667 L36.231086,15.7866667 L37.4609411,15.7866667 C37.9633245,15.7866667 38.3702808,15.3809067 38.3702808,14.88 C38.3702808,14.3790933 37.9633245,13.9733333 37.4609411,13.9733333 Z",
                                id: "Path",
                                fill: "#FDE1A7"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M53.865,20.2666667 L52.6351449,20.2666667 L50.4240589,20.2666667 L47.5890589,20.2666667 C47.0866755,20.2666667 46.6797192,20.6724267 46.6797192,21.1733333 C46.6797192,21.67424 47.0866755,22.08 47.5890589,22.08 L50.4240589,22.08 L52.6351449,22.08 L53.865,22.08 C54.3673834,22.08 54.7743396,21.67424 54.7743396,21.1733333 C54.7743396,20.6724267 54.3673834,20.2666667 53.865,20.2666667 Z",
                                id: "Path",
                                fill: "#FDE1A7"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M40.9737736,20.2666667 L25.6219811,20.2666667 L13.4261321,20.2666667 L8.71896226,20.2666667 C8.21657887,20.2666667 7.80962264,20.6724267 7.80962264,21.1733333 C7.80962264,21.67424 8.21657887,22.08 8.71896226,22.08 L13.4261321,22.08 L25.6219811,22.08 L40.9737736,22.08 C41.476157,22.08 41.8831132,21.67424 41.8831132,21.1733333 C41.8831132,20.6724267 41.476157,20.2666667 40.9737736,20.2666667 Z",
                                id: "Path",
                                fill: "#FDE1A7"
                              }
                            })
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "bulb_x5F_2",
                            transform: "translate(212.000000, 46.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8847826,13.0133333 C25.8847826,5.82613333 20.1140609,0 12.9952174,0 C5.87637391,0 0.105652174,5.82613333 0.105652174,13.0133333 C0.105652174,20.2005333 5.87637391,26.0266667 12.9952174,26.0266667 C13.2124383,26.0266667 13.4279687,26.0206933 13.6426539,26.0100267 L13.6426539,26.0100267 L18.8424313,32 L18.8424313,24.6097067 L18.8424313,24.6097067 C23.0211861,22.4576 25.8847826,18.0744533 25.8847826,13.0133333 Z",
                              id: "Path",
                              fill: "url(#linearGradient-53)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M18.0644087,8.96597333 C18.0644087,9.64949333 17.9676313,10.2660267 17.7736539,10.816 C17.5796765,11.3659733 17.3070939,11.8408533 16.9563287,12.2410667 C16.6055635,12.64128 16.1846452,12.9617067 15.6935739,13.2036267 C15.2025026,13.4455467 14.659873,13.5995733 14.0652626,13.6661333 L13.9663722,16.10368 C13.95792,16.2538667 13.8404348,16.36608 13.6134939,16.4411733 C13.386553,16.5162667 13.0586087,16.5538133 12.6292383,16.5538133 C12.3566557,16.5538133 12.1276017,16.5474133 11.9420765,16.53504 C11.7565513,16.5226667 11.6099061,16.4996267 11.5025635,16.4663467 C11.3952209,16.4330667 11.3170383,16.3869867 11.2671704,16.32896 C11.2177252,16.2709333 11.1885652,16.19584 11.1805357,16.1041067 L11.068967,13.1541333 C11.0605148,12.8874667 11.073193,12.6711467 11.1061565,12.50432 C11.13912,12.3374933 11.1991304,12.2043733 11.2857652,12.1041067 C11.3724,12.00384 11.4818557,11.9351467 11.6137096,11.8980267 C11.7455635,11.8609067 11.9027739,11.8417067 12.084073,11.8417067 L12.2573426,11.8417067 C12.6947426,11.8417067 13.0725548,11.77088 13.3903565,11.6292267 C13.7081583,11.4875733 13.9701757,11.3002667 14.1764087,11.06688 C14.3826417,10.83392 14.533513,10.55872 14.6281774,10.2417067 C14.7232643,9.92512 14.7705965,9.58762667 14.7705965,9.22922667 C14.7705965,8.82901333 14.7148122,8.46250667 14.6032435,8.12928 C14.4916748,7.79605333 14.3226313,7.50848 14.0956904,7.26698667 C13.8687496,7.02549333 13.5839113,6.84032 13.2415983,6.71061333 C12.8988626,6.58133333 12.4965391,6.51690667 12.0346278,6.51690667 C11.6137096,6.51690667 11.2422365,6.55872 10.9202087,6.64192 C10.5981809,6.72512 10.3217948,6.81685333 10.0906278,6.91712 C9.85946087,7.01738667 9.66759652,7.10912 9.51503478,7.19232 C9.36247304,7.27552 9.24456522,7.31733333 9.16215652,7.31733333 C9.10425913,7.31733333 9.05058783,7.29856 9.00114261,7.26101333 C8.95169739,7.22346667 8.91028174,7.15477333 8.87731826,7.05493333 C8.84435478,6.95509333 8.81730783,6.81344 8.79702261,6.62997333 C8.77631478,6.44693333 8.76617217,6.21312 8.76617217,5.92981333 C8.76617217,5.63797333 8.77842783,5.42549333 8.80336174,5.29237333 C8.82829565,5.15925333 8.88196696,5.05088 8.96437565,4.96725333 C9.04678435,4.88405333 9.20357217,4.78592 9.43473913,4.67370667 C9.66590609,4.56149333 9.94229217,4.45696 10.26432,4.36138667 C10.5863478,4.26581333 10.9451426,4.18432 11.3415496,4.11776 C11.7379565,4.0512 12.1504226,4.01792 12.579793,4.01792 C13.5539061,4.01792 14.3872904,4.1536 15.0807913,4.42410667 C15.7742922,4.69504 16.341433,5.05984 16.7830591,5.51765333 C17.2246852,5.97589333 17.5488261,6.50112 17.7550591,7.09248 C17.9612922,7.68256 18.0644087,8.30762667 18.0644087,8.96597333 Z M14.3995461,19.6782933 C14.3995461,20.0200533 14.3729217,20.3076267 14.3192504,20.5405867 C14.2655791,20.7739733 14.1704922,20.96128 14.0344122,21.1029333 C13.8983322,21.2450133 13.7166104,21.34656 13.4896696,21.40928 C13.2627287,21.472 12.9842296,21.5031467 12.6537496,21.5031467 C12.3072104,21.5031467 12.0223722,21.472 11.7996574,21.40928 C11.5769426,21.34656 11.3973339,21.2450133 11.2612539,21.1029333 C11.1251739,20.96128 11.030087,20.7739733 10.9764157,20.5405867 C10.9227443,20.3076267 10.89612,20.0200533 10.89612,19.6782933 C10.89612,19.3284267 10.9227443,19.0344533 10.9764157,18.7972267 C11.030087,18.56 11.1251739,18.368 11.2612539,18.22208 C11.3973339,18.0765867 11.5769426,17.9720533 11.7996574,17.90976 C12.0223722,17.8474667 12.3072104,17.8158933 12.6537496,17.8158933 C12.983807,17.8158933 13.2623061,17.84704 13.4896696,17.90976 C13.717033,17.97248 13.8983322,18.0765867 14.0344122,18.22208 C14.1704922,18.368 14.2655791,18.5595733 14.3192504,18.7972267 C14.3729217,19.03488 14.3995461,19.3284267 14.3995461,19.6782933 Z",
                              id: "Shape",
                              fill: "#FDE1A7"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "right_hand",
                            transform: "translate(194.000000, 103.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M18.6676425,11.04 C16.3163925,6.08601231 15.6041775,5.59091077 13.5376425,3.60923077 C11.4711075,1.62755077 9.9671625,0.0959630769 9.5473575,0.283218462 C8.9907525,0.530769231 9.120285,1.98168 9.5832675,3.22028308 C10.04625,4.45888615 10.8298575,5.09580923 10.8298575,5.09580923 C10.8298575,5.09580923 9.44091,4.95441231 6.4838925,3.64489846 C3.526875,2.33538462 1.10466,0.283218462 0.6057675,0.778744615 C0.106875,1.27427077 1.1042325,2.97273231 1.1042325,2.97273231 C1.1042325,2.97273231 0.3078,2.46828923 0.106875,3.04364308 C0.0098325,3.32134154 0.465975,4.28054769 0.855,4.88350154 C1.2093975,5.43295385 2.1729825,6.40489846 2.1729825,6.40489846 C2.1729825,6.40489846 1.95966,6.82951385 2.5295175,7.74965538 C3.099375,8.66979692 5.77125,11.3588862 8.55,12.6594831 C10.6323525,13.6339754 12.7895175,13.8008492 12.7895175,13.8008492 C12.7895175,13.8008492 12.6142425,16.12944 12.6937575,19.96032 C14.638455,19.6974831 17.8545375,19.0083323 20.7752175,17.3701662 C20.0903625,14.8224738 19.36062,12.4998277 18.6676425,11.04 Z",
                              id: "Path",
                              fill: "url(#linearGradient-54)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M1.1914425,2.90904 C1.363725,3.12516923 1.589445,3.31836923 1.808325,3.50902154 C2.030625,3.6984 2.259765,3.88098462 2.492325,4.05932308 C2.9578725,4.41430154 3.4366725,4.75781538 3.928725,5.05971692 C4.029615,5.12043692 4.062105,5.25121846 4.0009725,5.35142769 C3.9394125,5.45163692 3.80817,5.48390769 3.7068525,5.42276308 C3.7034325,5.42064 3.697875,5.41724308 3.6948825,5.41469538 C3.1998375,5.06905846 2.7389925,4.69454769 2.28798,4.30602462 C2.063115,4.11155077 1.8420975,3.91240615 1.627065,3.70604308 C1.4137425,3.49670769 1.1982825,3.29161846 1.016595,3.03557538 C0.9819675,2.98674462 0.99351,2.92008 1.0426725,2.88568615 C1.0896975,2.85299077 1.1546775,2.86233231 1.1897325,2.90649231 L1.1914425,2.90904 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M2.1097125,6.31615385 C2.1678525,6.26944615 2.27259,6.19726154 2.372625,6.17263385 C2.4722325,6.14333538 2.577825,6.13356923 2.677005,6.14376 C2.8775025,6.16074462 3.054915,6.22910769 3.2212125,6.30341538 C3.55167,6.46179692 3.8522025,6.62994462 4.157865,6.83206154 C4.453695,7.03587692 4.7268675,7.25837538 5.00517,7.45836923 C5.27877,7.65411692 5.5758825,7.85028923 5.843925,7.89402462 L5.8537575,7.89529846 C5.970465,7.91440615 6.0495525,8.02353231 6.030315,8.13945231 C6.011505,8.25494769 5.90121,8.33392615 5.78493,8.31481846 C5.7798,8.31396923 5.77467,8.31312 5.76954,8.31184615 C5.3433225,8.21036308 5.060745,7.97045538 4.7773125,7.75432615 C4.498155,7.53182769 4.2386625,7.29828923 3.968055,7.09150154 C3.70044,6.89405538 3.39606,6.70382769 3.102795,6.54544615 C2.806965,6.39216 2.48463,6.28982769 2.2362525,6.49279385 C2.1900825,6.53058462 2.1208275,6.52421538 2.08278,6.47793231 C2.0447325,6.43164923 2.051145,6.36328615 2.0977425,6.32507077 C2.0977425,6.32507077 2.0977425,6.32507077 2.09817,6.32507077 L2.1097125,6.31615385 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M10.85337,5.02107692 C11.683575,5.21555077 12.4782975,5.59600615 13.1973525,6.05374154 L13.2016275,6.05628923 C13.301235,6.11955692 13.330305,6.25118769 13.26618,6.35012308 C13.202055,6.44905846 13.0699575,6.47793231 12.97035,6.41424 C12.9639375,6.41041846 12.9579525,6.40574769 12.9519675,6.40107692 C12.302595,5.88389538 11.5976475,5.44739077 10.806345,5.16884308 C10.765305,5.15440615 10.74393,5.10982154 10.7588925,5.06948308 C10.772145,5.03169231 10.8119025,5.01088615 10.8503775,5.01937846 L10.85337,5.02107692 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M36.08955,18.77904 C35.5538925,16.9846154 33.451875,16.7723077 33.451875,16.7723077 C32.4186075,18.0461538 23.7976425,30.8555262 23.7976425,30.8555262 C23.7976425,30.8555262 22.4151075,23.4646708 20.775645,17.3693169 C17.854965,19.0070585 14.6388825,19.6966338 12.694185,19.9594708 C12.7587375,23.0430277 12.988305,27.0989538 13.6094625,31.7047569 C14.90949,41.3469231 16.7789475,44.6308985 19.0241775,45.0801415 C21.5891775,45.5930769 27.5032125,42.9570646 32.4194625,39.6310523 C37.3357125,36.30504 36.6252075,20.57304 36.08955,18.77904 Z",
                              id: "Path",
                              fill: "url(#linearGradient-55)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M20.6247375,40.9779323 C20.28744,40.9779323 20.0099925,40.8925846 19.806075,40.7074523 C16.3574325,37.5835569 15.4750725,20.1271938 15.4391625,19.3858154 C15.4331775,19.2686215 15.524235,19.1692615 15.642225,19.1637415 C15.77304,19.1565231 15.86025,19.2486646 15.8658075,19.3658585 C15.874785,19.5454708 16.7746725,37.3873846 20.09421,40.3940862 C21.7601775,41.9069908 31.0600125,34.1569108 36.9018,28.5795877 C36.9860175,28.4984862 37.12239,28.5001846 37.2040425,28.5855323 C37.285695,28.6700308 37.2835575,28.8046338 37.1980575,28.8857354 C35.8052625,30.2152062 24.412815,40.9779323 20.6247375,40.9779323 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(12.397500, 21.655385)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M6.4103625,2.79142154 L6.1188075,1.31503385 C6.011505,0.771950769 5.4809775,0.417396923 4.9337775,0.523975385 C4.9337775,0.523975385 2.4021225,1.30484308 0.4210875,1.59443077 C0.48222,2.74386462 0.565155,3.96888 0.679725,5.26947692 C2.5363575,5.17011692 5.613075,3.96888 5.613075,3.96888 C6.1607025,3.86272615 6.517665,3.33535385 6.4103625,2.79142154 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-56)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M0.6801525,5.48178462 C0.5698575,5.48178462 0.4766625,5.39813538 0.4672575,5.28773538 C0.36081,4.08097846 0.2736,2.84195077 0.2081925,1.60547077 C0.2022075,1.49592 0.281295,1.40038154 0.3903075,1.38424615 C2.3320125,1.10060308 4.8457125,0.329076923 4.8705075,0.321433846 C4.9722525,0.300627692 5.05134,0.292984615 5.129145,0.292984615 C5.7118275,0.292984615 6.2162775,0.705710769 6.32871,1.27469538 L6.620265,2.75108308 C6.6831075,3.06996923 6.6172725,3.39395077 6.43473,3.66315692 C6.2521875,3.93236308 5.975595,4.11537231 5.6545425,4.17779077 C5.5647675,4.21643077 2.56158,5.38157538 0.6921225,5.48178462 C0.68742,5.48178462 0.684,5.48178462 0.6801525,5.48178462 Z M0.6450975,1.77489231 C0.705375,2.87167385 0.782325,3.96888 0.874665,5.04230769 C2.6911125,4.87500923 5.5062,3.78289846 5.53527,3.77143385 C5.7810825,3.72005538 5.96106,3.60116308 6.079905,3.42579692 C6.1983225,3.25043077 6.2415,3.03939692 6.20046,2.83218462 L5.908905,1.35579692 C5.8255425,0.935852308 5.4108675,0.644990769 4.9739625,0.732036923 C4.971825,0.734584615 2.5885125,1.46662154 0.6450975,1.77489231 Z",
                                  id: "Shape",
                                  fill: "#3369FF"
                                }
                              })
                            ]
                          )
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "boy_x5F_head",
                            transform: "translate(230.000000, 79.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M28.45568,33.7379157 C26.9866667,32.2686486 24.5333333,30.6097297 19.8933333,29.2718919 C15.2533333,27.9340541 1.81333333,29.2183784 0.266666667,32.9108108 C-1.28,36.6032432 5.13834667,41.9837059 10.56896,43.2534746 C15.9995733,44.5232432 29.29792,42.8108108 30.88,37.4594595 C31.2686933,36.1443114 28.45568,33.7379157 28.45568,33.7379157 Z",
                              id: "Path",
                              fill: "url(#linearGradient-57)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M20.9066667,26.8993168 C20.2133333,29.2183784 22.11584,38.7437838 22.89792,41.4549924 C20.64,43.1854054 17.4656,43.9273168 13.44,43.667027 C8.48,43.3459459 6.4,41.3839265 6.4,41.3839265 C6.4,41.3839265 9.22666667,38.0481081 9.88416,31.39488 C10.46656,25.4998314 20.9066667,26.8993168 20.9066667,26.8993168 Z",
                              id: "Path",
                              fill: "url(#linearGradient-58)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.85056,23.5973189 C25.0282667,20.6296735 27.4577067,15.6897341 23.6091733,10.3101276 C21.44,7.27783784 17.0645333,5.96226162 14.6666667,6.20756757 C8.8064,6.80691892 7.78709333,9.95351351 7.78709333,9.95351351 C5.08458667,12.9147373 0.960426667,26.5427027 6.61333333,30.9308108 C11.4769067,34.7062962 17.6174933,30.2073081 19.8481067,27.4841124 C20.2709333,27.8317362 20.81152,28.0402249 21.4007467,28.0402249 C22.7554133,28.0402249 23.8532267,26.9382746 23.8532267,25.5790314 C23.8528,24.7647697 23.4577067,24.0455481 22.85056,23.5973189 Z",
                              id: "Path",
                              fill: "url(#radialGradient-59)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M21.6891733,12.8077103 C20.1096533,12.842387 15.4043733,14.8921686 14.58688,13.4588627 C13.77792,12.0405405 16.93696,10.4077362 16.34688,9.39183568 C15.6266667,8.15203459 13.1682133,9.48088216 11.1466667,10.4085924 C8.64,11.559347 6.86762667,11.4985557 4.42666667,8.93675676 C2.10645333,6.50167784 2.00874667,3.53189189 3.30666667,2.56864865 C4.8256,1.44186811 6.54208,1.78392649 7.54688,2.3811373 C8.56277333,2.98562595 9.90506667,4.71218595 11.06688,3.87951568 C12.1245867,3.12133622 10.84032,1.10751568 12.34688,0.401137297 C13.8491733,-0.303528649 16.4445867,0.740198919 17.77792,2.53268757 C19.1112533,4.32517622 19.1441067,4.96819459 21.2535467,5.27086703 C24.05376,5.67243243 29.56288,7.2337427 29.8670933,14.5197146 C30.11584,20.4776951 26.21824,22.7903351 24.8004267,23.6855092 C23.3826133,24.5806832 25.0167467,18.3744 24.6404267,15.9110659 C24.4535467,14.6896735 23.3250133,12.7717492 21.6891733,12.8077103 Z",
                              id: "Path",
                              fill: "url(#linearGradient-60)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M11.0225067,17.3383784 C10.6043733,17.1286054 8.24874667,18.4801427 6.68458667,19.7285059 C5.28085333,20.849293 3.62368,21.4623438 3.8208,22.2188108 C4.01792,22.9752778 6.75584,23.8314941 6.75584,23.8314941 C6.75584,23.8314941 7.29642667,22.3296908 8.64042667,20.7277103 C10.06208,19.0328303 11.4491733,17.5524324 11.0225067,17.3383784 Z",
                              id: "Path",
                              fill: "url(#linearGradient-61)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M7.68938667,28.2979459 C7.55797333,28.2979459 7.41546667,28.2833903 7.26186667,28.2504259 C5.82613333,27.9430443 5.24714667,26.0957578 5.35253333,25.2326919 C5.36661333,25.1153903 5.47370667,25.0297686 5.59018667,25.0460368 C5.70709333,25.0601643 5.79072,25.1671914 5.77621333,25.284493 C5.69770667,25.9287957 6.13888,27.5723027 7.35104,27.8321643 C8.31957333,28.0380843 8.55168,27.3458335 8.56106667,27.3162941 C8.59690667,27.2037016 8.71466667,27.1394854 8.82944,27.177587 C8.94165333,27.2135481 9.00352,27.3338465 8.96768,27.4464389 C8.86442667,27.7705168 8.47402667,28.2979459 7.68938667,28.2979459 Z",
                              id: "Path",
                              fill: "#9F36AD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M13.6776533,22.0034724 C13.28768,22.457267 12.6045867,22.5073557 12.1531733,22.1156368 L12.1531733,22.1156368 C11.70048,21.7234897 11.65056,21.0385168 12.04096,20.5851503 L13.7745067,18.5713297 C14.16448,18.1175351 14.8475733,18.0674465 15.2989867,18.4591654 L15.2989867,18.4591654 C15.75168,18.8513124 15.8016,19.5362854 15.4112,19.9896519 L13.6776533,22.0034724 Z",
                              id: "Path",
                              fill: "#212F66"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M13.00992,21.2281686 C12.86656,21.3951308 12.6152533,21.4135395 12.44928,21.2696951 L12.44928,21.2696951 C12.2833067,21.1258508 12.26496,20.8741232 12.40832,20.7071611 L13.0453333,19.9669622 C13.18912,19.8004281 13.4395733,19.7815914 13.6055467,19.9258638 L13.6055467,19.9258638 C13.7719467,20.0697081 13.7902933,20.3218638 13.6465067,20.4883978 L13.00992,21.2281686 Z",
                              id: "Path",
                              fill: "#00E2EC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M7.65184,17.6864303 C7.26997333,18.1308065 6.60138667,18.1796108 6.15936,17.7964541 L6.15936,17.7964541 C5.71648,17.4128692 5.66741333,16.7420238 6.04970667,16.2980757 L7.74698667,14.3266378 C8.12885333,13.8822616 8.79744,13.8330292 9.23946667,14.2166141 L9.23946667,14.2166141 C9.68234667,14.6001989 9.73141333,15.2710443 9.34912,15.7149924 L7.65184,17.6864303 Z",
                              id: "Path",
                              fill: "#212F66"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M6.99818667,16.9278227 C6.85781333,17.0909319 6.61205333,17.1089124 6.44906667,16.968493 L6.44906667,16.968493 C6.28650667,16.8272173 6.26858667,16.5810551 6.40896,16.4175178 L7.03274667,15.6927308 C7.17354667,15.5296216 7.41845333,15.5116411 7.58144,15.6524886 L7.58144,15.6524886 C7.74442667,15.7937643 7.76234667,16.0403546 7.62154667,16.2034638 L6.99818667,16.9278227 Z",
                              id: "Path",
                              fill: "#00E2EC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.4445867,17.7309535 C28.2133333,12.1210249 21.6891733,12.8077103 21.6891733,12.8077103 C21.6891733,12.8077103 22.7733333,13.5658897 23.1470933,16.0185211 C23.59296,18.94464 22.75072,21.8450724 22.0462933,23.2073124 C22.7191467,23.3913989 23.2759467,23.8546119 23.5861333,24.4668065 C24.9860267,23.6662443 28.59008,21.2564238 28.4445867,17.7309535 Z",
                              id: "Path",
                              fill: "url(#linearGradient-62)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "boy_x5F_body",
                            transform: "translate(224.000000, 118.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M36.7414875,123.505047 C36.70857,117.390991 36.6936075,110.951745 36.6936075,107.759292 C36.6936075,100.754575 37.40625,77.9005189 36.765,71.4621226 C36.12375,65.0237264 34.6275,52.5001415 34.6275,52.5001415 C34.6275,52.5001415 22.4552925,53.9707075 14.95566,53.3975943 C6.9113925,52.7833019 2.95317,50.6313679 2.95317,50.6313679 C2.85228,52.4381604 2.1199725,70.425 3.0399525,80.9881132 C4.2506325,94.8846226 6.91353,114.191745 8.186625,122.954009 C9.9132975,123.577642 13.609035,124.170283 17.237655,123.271557 C17.5082625,113.810094 17.95671,101.0475 18.0973575,96.5801887 C18.3111075,89.7877358 19.3088925,77.9009434 19.3088925,77.9009434 C19.3088925,77.9009434 21.873465,95.0939151 23.29875,103.514009 C24.1695675,108.658019 25.4383875,116.809811 26.440875,123.522028 C28.72287,123.924481 32.8178925,124.060755 36.7414875,123.505047 Z",
                              id: "Path",
                              fill: "url(#linearGradient-63)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M1.2641175,49.3051415 C2.808675,50.8533962 8.2400625,55.2459906 27.9050625,52.5926887 C27.22833,45.8002358 25.151535,31.5564623 25.7213925,26.1084906 C26.29125,20.6605189 28.2051675,2.99801887 28.2051675,2.99801887 C28.2051675,2.99801887 21.731535,4.52801887 16.7438925,3.46669811 C11.75625,2.40537736 9.5473575,0.424528302 9.5473575,0.424528302 C9.5473575,0.424528302 5.450625,9.55188679 2.885625,27.1698113 C0.320625,44.7877358 1.2641175,49.3051415 1.2641175,49.3051415 Z",
                              id: "Path",
                              fill: "url(#linearGradient-64)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M14.4285525,53.5899057 C14.31612,53.5899057 14.2224975,53.5037264 14.21523,53.3908019 C13.7847375,46.6433491 15.9119775,9.45 16.531425,3.44504717 C16.543395,3.32830189 16.647705,3.24339623 16.765695,3.25528302 C16.88283,3.26716981 16.9687575,3.37160377 16.95636,3.48792453 C16.3377675,9.48650943 14.2122375,46.6306132 14.641875,53.3640566 C14.64957,53.4808019 14.5602225,53.5818396 14.441805,53.5890566 C14.4371025,53.5899057 14.4328275,53.5899057 14.4285525,53.5899057 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M19.55727,79.7739623 C19.4533875,79.7739623 19.36233,79.6983962 19.3465125,79.5931132 C19.1515725,78.3004245 18.88524,76.3709434 18.627885,74.5051415 C18.2615175,71.8467453 17.8459875,68.8334434 17.7545025,68.5825472 C17.62326,68.2441981 15.33186,66.1780189 14.3464725,65.3828774 C14.2549875,65.3090094 14.24088,65.1757075 14.3156925,65.084434 C14.3900775,64.9931604 14.5243125,64.9791509 14.616225,65.0538679 C15.0988725,65.4431604 17.9485875,67.8871698 18.1546425,68.4339623 C18.255105,68.700566 18.5607675,70.8928302 19.0515375,74.4482547 C19.308465,76.312783 19.57437,78.240566 19.7688825,79.5307075 C19.78641,79.6466038 19.70604,79.754434 19.5893325,79.7718396 C19.578645,79.7731132 19.5679575,79.7739623 19.55727,79.7739623 Z",
                              id: "Path",
                              fill: "#212F66"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M2.0173725,48.5600943 C3.45933,49.957217 5.51646,50.7646698 7.62318,51.2834434 C9.7465725,51.7971226 11.9738475,52.02 14.20839,52.0959906 C18.68859,52.2322642 23.217525,51.7903302 27.70371,51.1204245 L28.1059875,54.0649528 C23.480865,54.6079245 18.7993125,54.9237736 14.0822775,54.6342453 C11.7267525,54.4801415 9.3584025,54.1740566 7.027245,53.5334434 C5.8631625,53.2103774 4.7089125,52.8011321 3.596985,52.2471226 C2.49147,51.6965094 1.4051925,50.9786321 0.510435,50.0501887 L2.0173725,48.5600943 Z",
                              id: "Path",
                              fill: "url(#linearGradient-65)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M12.2679675,0.327735849 C12.27609,0.339198113 12.45222,0.477169811 12.6185175,0.577783019 C12.7920825,0.686037736 12.984885,0.793018868 13.1845275,0.894056604 C13.58424,1.09698113 14.0121675,1.27740566 14.4482175,1.43745283 C15.32331,1.75627358 16.2394425,1.98933962 17.165835,2.14004717 C19.0207575,2.44188679 20.92185,2.40325472 22.75326,2.03900943 L23.2726725,4.96570755 C21.078315,5.3070283 18.8266725,5.25608491 16.663095,4.80948113 C15.5810925,4.58617925 14.5200375,4.2690566 13.4931825,3.84495283 C12.9793275,3.63141509 12.4740225,3.39367925 11.9747025,3.11349057 C11.7250425,2.9729717 11.4770925,2.82226415 11.2248675,2.64990566 C10.970505,2.46523585 10.7238375,2.30816038 10.3946625,1.93669811 L12.2679675,0.327735849 Z",
                              id: "Path",
                              fill: "url(#linearGradient-66)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M17.7604875,54.9560377 C16.502355,54.9560377 15.2604675,54.9186792 14.0694525,54.8456604 C11.322765,54.6656604 9.0677025,54.3137264 6.970815,53.7376415 C5.667795,53.3759434 4.53321,52.950566 3.5016525,52.4368868 C2.24352,51.8098585 1.18503,51.0563208 0.3569625,50.1970755 C0.2765925,50.1138679 0.277875,49.9814151 0.36081,49.8999057 L1.8668925,48.4098113 C1.9494,48.3283019 2.08278,48.3270283 2.1669975,48.4085377 C3.3896475,49.5929717 5.1911325,50.4666509 7.6749075,51.0775472 C9.56574,51.5347642 11.705805,51.7988208 14.216085,51.8837264 C14.761575,51.900283 15.30963,51.9087736 15.8572575,51.9087736 C19.3593375,51.9087736 23.11407,51.5916509 27.67293,50.9107075 C27.72936,50.9017925 27.7875,50.9170755 27.832815,50.9506132 C27.8785575,50.985 27.90891,51.0355189 27.9161775,51.0919811 L28.318455,54.0365094 C28.3265775,54.0929717 28.31076,54.150283 28.275705,54.195283 C28.24065,54.2398585 28.188495,54.2691509 28.1316375,54.2755189 C24.17769,54.7395283 20.8820925,54.9560377 17.7604875,54.9560377 Z M0.8118225,50.0514623 C1.5838875,50.8147642 2.5517475,51.4884906 3.6931725,52.056934 C4.6995075,52.5591509 5.8092975,52.9747642 7.085385,53.3288208 C9.152775,53.8968396 11.380905,54.2441038 14.0968125,54.4219811 C15.277995,54.4945755 16.5104775,54.5315094 17.76006,54.5315094 C20.80728,54.5315094 24.02379,54.3239151 27.865305,53.8790094 L27.52074,51.3619811 C23.03712,52.0242453 19.3251375,52.3328774 15.8564025,52.3328774 C15.3040725,52.3328774 14.7525975,52.3243868 14.20155,52.3078302 C11.6609175,52.2216509 9.49221,51.9537736 7.5723075,51.4889151 C5.1124725,50.8835377 3.29346,50.0213208 2.0207925,48.855566 L0.8118225,50.0514623 Z",
                              id: "Shape",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M20.394315,5.40042453 C19.1216475,5.40042453 17.8519725,5.27136792 16.620345,5.0175 C15.49944,4.78613208 14.4200025,4.45754717 13.41153,4.04066038 C12.8468025,3.80589623 12.34278,3.56306604 11.8703925,3.29816038 C11.5938,3.14235849 11.343285,2.98740566 11.10474,2.82438679 L11.0068425,2.75391509 C10.777275,2.58962264 10.539585,2.41981132 10.235205,2.07636792 C10.1971575,2.03391509 10.1783475,1.97830189 10.182195,1.92141509 C10.1860425,1.86495283 10.2125475,1.81231132 10.255725,1.77537736 L12.1286025,0.166839623 C12.1747725,0.127358491 12.2363325,0.10995283 12.295755,0.116745283 C12.3560325,0.124386792 12.410325,0.157075472 12.444525,0.206745283 C12.444525,0.206745283 12.4449525,0.206320755 12.4449525,0.206320755 C12.45393,0.206320755 12.5962875,0.314575472 12.7305225,0.396084906 C12.8972475,0.50009434 13.0819275,0.603254717 13.282425,0.704716981 C13.6530675,0.892783019 14.070735,1.07193396 14.52303,1.23792453 C15.366915,1.54570755 16.2676575,1.77834906 17.201745,1.93033019 C19.0104975,2.22495283 20.90133,2.19099057 22.713075,1.83099057 C22.76865,1.81995283 22.827645,1.83141509 22.875525,1.86410377 C22.9229775,1.89636792 22.9554675,1.94603774 22.9653,2.0025 L23.4847125,4.92919811 C23.494545,4.98523585 23.4812925,5.04339623 23.448375,5.08924528 C23.41503,5.13551887 23.3641575,5.16693396 23.3073,5.17584906 C22.34628,5.32443396 21.3668775,5.40042453 20.394315,5.40042453 Z M10.7024625,1.95325472 C10.9068075,2.15957547 11.07738,2.28183962 11.256075,2.40962264 L11.351835,2.47839623 C11.57499,2.63080189 11.815245,2.77938679 12.0807225,2.92882075 C12.5381475,3.18523585 13.027635,3.42084906 13.576545,3.64882075 C14.5593675,4.05509434 15.613155,4.37561321 16.7071275,4.60146226 C18.7599825,5.02514151 20.926125,5.08839623 23.0247225,4.78825472 L22.5809775,2.28863208 C20.78676,2.61976415 18.920295,2.64099057 17.131635,2.34976415 C16.17147,2.19353774 15.243795,1.95367925 14.375115,1.6365566 C13.9061475,1.46504717 13.47309,1.27867925 13.087485,1.0829717 C12.8763,0.975990566 12.6800775,0.866462264 12.50523,0.757358491 C12.4688925,0.735707547 12.36843,0.670330189 12.27438,0.602830189 L10.7024625,1.95325472 Z",
                              id: "Shape",
                              fill: "#FFA2BA"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "boots",
                            transform: "translate(221.000000, 241.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M10.7384651,0.264130435 C10.831546,0.901846957 10.9173684,1.48800522 10.9946512,2.0073913 C11.9169209,8.22607826 12.3392009,10.9654278 12.026654,11.9036191 C10.060853,17.8023913 0.736534884,19.1234661 0.426976744,20.1444887 C0.160116279,21.0247826 0.612284651,21.98664 1.12081395,22.3454348 C2.88209302,23.5870591 15.3703088,22.7439548 17.0081916,22.4688365 C19.0004651,22.1341304 20.1746512,21.3417391 20.2105172,20.7078261 C20.2382707,20.215487 19.6413572,15.3546417 19.5700521,10.9878261 C19.5457144,9.49305913 19.6379414,5.48165739 19.7784167,0.580241739 C16.1542381,1.47490435 12.4630242,0.884942609 10.7384651,0.264130435 Z",
                              id: "Path",
                              fill: "url(#linearGradient-67)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8097674,19.6513043 C32.3076223,21.2010104 33.268747,21.3421617 34.976654,22.15188 C36.6845609,22.9615983 44.0503367,26.3069687 46.9324298,26.0605878 C49.8145228,25.814207 49.8854009,25.0044887 49.8499619,24.3 C49.8145228,23.5955113 48.0711767,21.7292713 45.5801944,19.8626087 C43.0892121,17.9959461 39.6375321,15.7070974 39.4599098,15.1788365 C39.362986,14.89104 39.2980856,8.08281391 39.2583767,0.812676522 C35.3391572,1.36629391 31.249147,1.23021391 28.9699451,0.82958087 C29.6074214,5.08440522 30.1368726,8.76025565 30.386227,10.7059461 C31.0271191,15.7070974 31.3119126,18.1015983 31.8097674,19.6513043 Z",
                              id: "Path",
                              fill: "url(#linearGradient-68)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M34.976654,22.15188 C36.6845609,22.9615983 44.0503367,26.3069687 46.9324298,26.0605878 C49.8145228,25.814207 49.8854009,25.0044887 49.8499619,24.3 C49.8427033,24.1546226 49.7590158,23.957687 49.6151247,23.724407 C48.9913116,24.1698365 47.7573488,24.7238765 45.6510726,24.4411513 C40.8574047,23.7983635 32.3746577,19.6005913 31.4972205,18.4405304 C31.5949981,18.9003287 31.6970456,19.2992713 31.8097674,19.6513043 C32.3076223,21.2010104 33.268747,21.3421617 34.976654,22.15188 Z",
                              id: "Path",
                              fill: "url(#linearGradient-69)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M1.12081395,22.3454348 C2.88209302,23.5870591 15.3703088,22.7439548 17.0081916,22.4688365 C19.0004651,22.1341304 20.1746512,21.3417391 20.2105172,20.7078261 C20.2186298,20.5692104 20.1763591,20.0827878 20.1110316,19.3584365 C18.9786893,19.8693704 16.6691721,20.6981061 12.8093023,21.1832609 C6.29790698,22.0022765 1.14728651,21.0247826 0.426976744,20.1444887 C0.160116279,21.0247826 0.612284651,21.98664 1.12081395,22.3454348 Z",
                              id: "Path",
                              fill: "url(#linearGradient-70)"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(32.877209, 5.071304)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M6.43112372,2.78245565 C6.42343814,1.93977391 6.41617953,1.05187304 6.40934791,0.132276522 L3.28430512,0.132276522 C1.76127907,0.132276522 0.517068837,1.30205739 0.411178605,2.78245565 L6.43112372,2.78245565 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-71)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M6.47125953,6.33913043 C6.46101209,5.59702957 6.45076465,4.76829391 6.44179814,3.87405391 L0.400504186,3.87405391 L0.400504186,6.33913043 L6.47125953,6.33913043 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-72)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M6.4883386,7.4307287 L0.400504186,7.4307287 C0.40648186,9.00241043 1.69424372,10.2744626 3.28387814,10.2744626 L6.69627628,10.2744626 C6.64034233,10.2093809 6.59721767,10.1502157 6.58227349,10.1071096 C6.5472614,10.0014574 6.51566512,9.00705913 6.4883386,7.4307287 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-73)"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(11.101395, 4.226087)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M4.24116,3.53934783 L4.24116,2.57368696 C4.24116,1.28177217 3.18311163,0.234970435 1.87869767,0.234970435 L0.256613023,0.234970435 C0.446617674,1.52477217 0.603745116,2.61425739 0.725860465,3.53934783 L4.24116,3.53934783 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-74)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M0.86420093,4.64869565 C1.05164372,6.26094783 1.08324,7.20336522 0.925258605,7.67753217 C0.824492093,7.97969739 0.70024186,8.26749391 0.562755349,8.54599304 L1.8782707,8.54599304 C3.18311163,8.54599304 4.24073302,7.4987687 4.24073302,6.20727652 L4.24073302,4.64869565 L0.86420093,4.64869565 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-75)"
                                }
                              })
                            ]
                          )
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "cloak_x5F_2",
                            transform: "translate(212.000000, 111.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M21.4854545,9.75546198 C20.1320836,13.9536475 17.9801345,24.7169987 16.9471309,36.1028571 C15.8422255,48.282124 15.21,54.7238136 15.1036364,70.8526048 C14.9598327,92.6514673 17.4649091,107.021259 17.2309091,107.52499 C16.8586364,108.326089 8.72181818,105.958681 5.53090909,104.24967 C2.34,102.540659 0,100.404396 0,100.404396 C0,100.404396 4.25454545,71.7784615 7.02,55.1156044 C9.78545455,38.4527473 14.04,22.6443956 14.3590909,18.2650549 C14.6781818,13.8857143 14.9972727,8.75868132 14.9972727,8.75868132 C14.9972727,8.75868132 16.2736364,7.2632967 18.6136364,7.58373626 C20.9536364,7.90417582 21.4854545,9.75546198 21.4854545,9.75546198 Z",
                              id: "Path",
                              fill: "url(#linearGradient-76)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M12.6619527,37.6025143 L12.58452,39.079527 C12.5560145,39.7870576 12.6398291,40.3937565 13.7387782,41.1589662 L16.2570436,42.9974347 C16.4114836,41.5533204 16.5684764,40.0583631 16.7237673,38.4702646 L13.9889455,36.3737354 C13.1716473,35.996044 12.6904582,36.8949837 12.6619527,37.6025143 Z",
                              id: "Path",
                              fill: "url(#linearGradient-77)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M15.9141273,23.3062101 C14.8909091,22.9114286 14.61564,23.8278857 14.5871345,24.534989 L14.5097018,26.0120018 C14.4811964,26.7195323 14.7947564,27.1651569 15.7328836,27.7889459 L17.7155018,29.1672633 C17.9031273,27.7222945 18.1035164,26.3097969 18.3124145,24.9442971 L15.9141273,23.3062101 Z",
                              id: "Path",
                              fill: "url(#linearGradient-78)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M18.135,0.373846154 C18.0286364,4.53956044 24.1977273,4.91340659 24.8890909,5.8392633 C25.8927382,7.18340044 22.1946873,14.6688686 21.06,14.5265934 C19.9253127,14.3843182 17.9520545,11.0355112 17.0713636,10.0938462 C16.2468327,9.21242374 15.4227273,8.27802198 15.4759091,7.74395604 C15.5290909,7.20989011 17.2172945,1.56630857 18.135,0.373846154 Z",
                              id: "Path",
                              fill: "url(#linearGradient-79)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M20.0610327,14.0989134 C20.0095527,14.0989134 19.9580727,14.0805415 19.9168036,14.042516 C19.8304364,13.9626198 19.8249055,13.8276079 19.9044655,13.7404484 C21.7892291,11.6823719 23.9292655,7.91656615 23.4544582,7.02830769 C23.3280982,6.79246418 22.67928,6.45792527 21.9917455,6.10330549 C20.11464,5.13515077 17.2781345,3.67266462 17.5210691,0.844251429 C17.53128,0.726756923 17.6393455,0.640024615 17.75124,0.649851429 C17.86824,0.659678242 17.9550327,0.763500659 17.9448218,0.880995165 C17.7265636,3.42314901 20.4103309,4.80702066 22.1861782,5.72305055 C23.03028,6.1584211 23.6403818,6.47287912 23.8288582,6.82578989 C24.5112873,8.10284835 21.8785745,12.215156 20.2176,14.0292712 C20.1759055,14.0754145 20.1184691,14.0989134 20.0610327,14.0989134 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "cloak_x5F_1",
                            transform: "translate(242.000000, 112.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M7.2975,13.8919355 C6.7725,15.9677419 4.05426,36.7304903 3.49986,58.0518968 C2.9463,79.3417935 3.41628,108.306852 4.2,109.432258 C5.04042,110.638994 12.84528,108.119497 17.92014,106.451613 C22.73292,104.869742 26.88,102.335342 26.88,102.335342 C26.88,102.335342 26.32014,77.6389935 26.32014,67.9872387 C26.32014,58.3354839 22.995,14.6903226 22.995,14.6903226 C22.995,14.6903226 20.0088,10.8695613 14.91,10.1129032 C9.8112,9.35624516 7.2975,13.8919355 7.2975,13.8919355 Z",
                              id: "Path",
                              fill: "url(#linearGradient-80)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M9.975,24.2011355 L1.52292,27.5543613 C0.38514,28.0146581 0.28728,28.6201548 0.31542,29.3252903 L0.39186,30.7973032 C0.42,31.5020129 0.84042,32.1841548 1.70184,32.0219226 L9.47394,28.6325032 C9.63354,27.0876774 9.80028,25.608 9.975,24.2011355 Z",
                              id: "Path",
                              fill: "url(#linearGradient-81)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.63268,38.3208774 L1.50822,40.5512516 C0.37044,41.0115484 0.27258,41.6170452 0.30072,42.3221806 L0.37716,43.7941935 C0.4053,44.4989032 0.82572,45.1810452 1.68714,45.0188129 L8.33742,42.6802839 C8.43024,41.2018839 8.52894,39.7469032 8.63268,38.3208774 Z",
                              id: "Path",
                              fill: "url(#linearGradient-82)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M1.23606,32.2373806 C1.14618,32.2373806 1.06344,32.1786194 1.0353,32.0874968 C0.987,31.9290968 0.95886,31.7604774 0.95172,31.5863226 L0.8757,30.1168645 C0.84672,29.3993806 0.92652,28.6580516 2.21466,28.1368645 L9.702,25.1664387 C9.81078,25.1234323 9.93216,25.1775097 9.97416,25.2873677 C10.01616,25.3972258 9.96324,25.5202839 9.8553,25.5632903 L2.36922,28.5332903 C1.33266,28.9522839 1.26966,29.4675097 1.29486,30.0972774 L1.37088,31.5667355 C1.37676,31.7068258 1.39818,31.8388258 1.43598,31.9618839 C1.47042,32.0742968 1.40868,32.1935226 1.2978,32.2280129 C1.27764,32.2344 1.25664,32.2373806 1.23606,32.2373806 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M1.22136,45.234271 C1.13148,45.234271 1.04874,45.1755097 1.0206,45.0843871 C0.9723,44.9259871 0.94416,44.7573677 0.93702,44.5832129 L0.861,43.1137548 C0.83202,42.396271 0.91182,41.6549419 2.19996,41.1337548 L8.56884,39.1392774 C8.67972,39.1047871 8.7969,39.1673806 8.83134,39.2797935 C8.86578,39.3922065 8.80362,39.5114323 8.69274,39.5459226 L2.33982,41.5344387 C1.31796,41.9483226 1.25496,42.4635484 1.28058,43.0933161 L1.3566,44.5627742 C1.36248,44.7028645 1.3839,44.8348645 1.4217,44.9579226 C1.45614,45.0703355 1.3944,45.1895613 1.28352,45.2240516 C1.26294,45.2312903 1.24194,45.234271 1.22136,45.234271 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.6121,109.443329 C8.50878,109.443329 8.4189,109.365832 8.40462,109.259381 C5.62716,88.728271 7.2975,27.2460774 11.98008,12.1776387 C12.01452,12.0656516 12.13254,12.0030581 12.24342,12.0384 C12.3543,12.0737419 12.4152,12.1933935 12.38034,12.3053806 C7.70952,27.3367742 6.04758,88.7027226 8.82042,109.201045 C8.83638,109.317716 8.75616,109.425019 8.64108,109.440774 C8.63142,109.443329 8.62176,109.443329 8.6121,109.443329 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M20.9202,105.534852 C20.82192,105.534852 20.73414,105.464168 20.7144,105.3624 C17.91972,90.6746323 20.09574,50.3741806 20.811,37.1316 L20.93028,34.9050581 C20.93658,34.7879613 21.03906,34.6964129 21.15078,34.7032501 C21.2667,34.7100387 21.35532,34.8101032 21.34944,34.9276258 L21.23016,37.1541677 C20.51574,50.3844 18.3414,90.6452516 21.12684,105.281497 C21.14868,105.39689 21.07434,105.508452 20.96052,105.531019 C20.94666,105.533574 20.93364,105.534852 20.9202,105.534852 Z",
                              id: "Path",
                              fill: "#9F36AD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.07318,60.6795484 C21.98616,61.9395097 15.6828,63.9416516 13.10778,65.0772774 C12.30264,65.4324 11.76,66.0574839 11.76,66.7630452 L11.76,73.3805032 C11.76,74.0860645 12.27198,74.4629032 12.96792,74.4629032 L26.32098,68.5446194 C26.32056,68.3542839 26.32014,68.1673548 26.32014,67.9872387 C26.32014,66.3776903 26.22732,63.8194452 26.07318,60.6795484 Z",
                              id: "Path",
                              fill: "url(#linearGradient-83)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M13.16196,74.5936258 C13.09056,74.5936258 13.02042,74.5561548 12.98094,74.4893032 C12.8709,74.3010968 12.81336,74.0809548 12.80916,73.8352645 L12.69198,67.2190839 C12.67854,66.4483742 13.21698,65.7355742 14.13258,65.3118968 C16.19226,64.3585161 20.68878,62.7924 24.09876,61.6469806 C24.20838,61.6095097 24.32808,61.6708258 24.3642,61.7819613 C24.40074,61.8935226 24.34068,62.0140258 24.23106,62.051071 C19.35612,63.6895742 15.92472,64.9512387 14.30772,65.6993806 C13.54878,66.0502452 13.10232,66.6157161 13.1124,67.2118452 L13.22958,73.8280258 C13.23252,73.9992 13.27074,74.1486581 13.3434,74.2725677 C13.40262,74.3734839 13.36944,74.5042065 13.26948,74.564671 C13.23546,74.5838323 13.1985,74.5936258 13.16196,74.5936258 Z",
                              id: "Path",
                              fill: "#9F36AD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M15.99528,73.3340903 C15.87936,73.3340903 15.78528,73.2387097 15.78528,73.1211871 L15.78528,68.4130452 C15.78528,67.5814452 16.46862,66.9474194 17.14608,66.6876774 L17.5161,66.543329 C18.36282,66.2103484 19.64214,65.7070452 20.5443,65.6286968 C20.93364,65.5954839 21.27048,65.6981032 21.51828,65.9288903 C21.77112,66.1639355 21.91014,66.5207613 21.91014,66.9337935 L21.91014,70.5923226 C21.91014,70.7098452 21.81606,70.8052258 21.70014,70.8052258 C21.58422,70.8052258 21.49014,70.7098452 21.49014,70.5923226 L21.49014,66.9337935 C21.49014,66.6374323 21.40152,66.398129 21.23478,66.2427097 C21.0756,66.0941032 20.84754,66.0302323 20.58042,66.0528 C19.7379,66.1264645 18.49218,66.6161419 17.66814,66.9401806 L17.29434,67.0862323 C16.75212,67.2936 16.20486,67.7849806 16.20486,68.4130452 L16.20486,73.1211871 C16.20528,73.2387097 16.1112,73.3340903 15.99528,73.3340903 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(0.840000, 0.000000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M1.26,6.17419355 C2.12604,5.29618065 5.67966,5.6691871 9.52014,5.03856774 C13.84236,4.32874839 15.75,3.67258065 16.03014,2.69663226 C16.38168,1.47286452 14.7,0.070683871 14.7,0.070683871 C14.7,0.070683871 18.55014,2.34193548 18.48,3.33534194 C18.40986,4.32874839 16.03014,10.8580645 16.03014,10.8580645 C16.03014,10.8580645 11.48028,13.0582065 8.26014,14.4774194 C5.04,15.8966323 1.89042,18.0256645 0.91014,17.5291742 C-0.07014,17.0326839 0.07014,7.38050323 1.26,6.17419355 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-84)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M1.7766,17.5172516 C1.51788,16.2943355 1.46622,15.0688645 1.4322,13.844671 C1.41036,12.6204774 1.43598,11.3954323 1.5498,10.1729419 C1.60944,9.56148387 1.68546,8.95087742 1.81776,8.3424 C1.88622,8.03837419 1.96434,7.73434839 2.09286,7.43287742 C2.16006,7.28256774 2.23398,7.13098065 2.36628,6.98748387 C2.49648,6.85207742 2.65734,6.76180645 2.80392,6.69665806 C3.40704,6.44543226 4.01142,6.37432258 4.61328,6.29299355 C5.21514,6.22060645 5.81532,6.17291613 6.41466,6.12692903 C7.61334,6.03665806 8.80908,5.95916129 9.99432,5.81183226 C11.17578,5.66237419 12.3543,5.4315871 13.50258,5.11436129 C14.07504,4.95170323 14.64162,4.76434839 15.183,4.52504516 C15.71388,4.2836129 16.26156,3.99789677 16.60386,3.56101935 C16.94868,3.12754839 16.78362,2.49394839 16.50726,1.99021935 C16.22754,1.47286452 15.84534,0.998090323 15.42954,0.568451613 C15.414,0.553548387 15.41274,0.528851613 15.42702,0.513096774 C15.44046,0.498193548 15.46398,0.497341935 15.47952,0.50883871 C15.95244,0.893767742 16.37916,1.34043871 16.70592,1.87482581 C16.86846,2.14138065 16.99572,2.43901935 17.04738,2.76476129 C17.1003,3.08454194 17.04276,3.4647871 16.8315,3.73176774 C16.4199,4.25763871 15.85248,4.53952258 15.3027,4.80011613 C14.74494,5.05176774 14.16828,5.2472129 13.58658,5.41710968 C12.42066,5.7488129 11.23626,5.98981935 10.03716,6.1512 C8.83932,6.3096 7.63854,6.39603871 6.44322,6.49567742 C5.84598,6.54592258 5.24916,6.59829677 4.65948,6.67366452 C4.07526,6.75414194 3.47256,6.84015484 2.96352,7.05944516 C2.69892,7.17228387 2.56872,7.31876129 2.45868,7.59425806 C2.3499,7.85229677 2.27598,8.14099355 2.21382,8.43011613 C2.09202,9.01176774 2.02104,9.61130323 1.96728,10.2116903 C1.86606,11.4137419 1.8312,12.6260129 1.8543,13.835729 C1.8858,15.0416129 1.93998,16.2628258 2.18568,17.4231484 L2.18694,17.4274065 C2.2113,17.5423742 2.13906,17.6556387 2.02566,17.6803355 C1.91268,17.7054581 1.80096,17.6322194 1.7766,17.5172516 L1.7766,17.5172516 Z",
                                  id: "Path",
                                  fill: "#3369FF"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M11.02458,13.5564 C11.00316,13.5564 10.98132,13.5529935 10.9599,13.5461806 C10.84944,13.5099871 10.78938,13.3899097 10.82508,13.2779226 C11.42442,11.4056516 13.14852,5.39965161 13.16574,5.3391871 C13.19766,5.22592258 13.31316,5.16034839 13.42614,5.1944129 C13.53786,5.2272 13.6017,5.34514839 13.56936,5.4584129 C13.55172,5.51887742 11.82552,11.5312645 11.2245,13.4094968 C11.19552,13.4993419 11.1132,13.5564 11.02458,13.5564 Z",
                                  id: "Path",
                                  fill: "#3369FF"
                                }
                              })
                            ]
                          )
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "left_hand",
                            transform: "translate(258.000000, 126.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M18.16458,57.0428594 C18.15954,56.6066961 17.9697,41.1947477 16.59042,32.0022581 C15.0339,21.6301355 10.00986,1.90741935 7.035,0.211935484 C5.52174,-0.650218065 0.23562,4.09798452 0.14028,14.9766329 C0.06972,23.0301813 2.79468,29.4603039 4.55028,36.7352013 C6.195,43.5506226 9.13836,54.4886129 9.59028,57.5048787 C9.6054,57.6053361 9.61842,57.6956206 9.63312,57.7918394 C11.61594,57.0827032 15.44046,56.8385535 18.16458,57.0428594 Z",
                              id: "Path",
                              fill: "url(#linearGradient-85)"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(13.860000, 44.930323)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M0.47712,0.527295484 L0.96348,5.14876065 L4.11768,4.98175548 L3.95346,1.16522129 C3.95346,1.16564516 3.01896,0.489147097 0.47712,0.527295484 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-86)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M0.96348,5.36069613 C0.85638,5.36069613 0.76608,5.27973677 0.75474,5.17122581 L0.26838,0.549760645 C0.26208,0.49041871 0.28056,0.431500645 0.32004,0.386570323 C0.3591,0.342487742 0.41538,0.316207742 0.47376,0.31536 L0.68208,0.313664516 C3.10842,0.313664516 4.03746,0.965578065 4.07568,0.993553548 C4.12818,1.03127806 4.16052,1.09146774 4.16346,1.15674387 L4.32768,4.97327806 C4.33272,5.08941871 4.24368,5.18818065 4.1286,5.19411484 L0.9744,5.36112 C0.97104,5.36069613 0.96726,5.36069613 0.96348,5.36069613 Z M0.71022,0.737535484 L1.15122,4.92665226 L3.89844,4.78126452 L3.7485,1.28941548 C3.48558,1.14699484 2.5725,0.741774194 0.71022,0.737535484 Z",
                                  id: "Shape",
                                  fill: "#3369FF"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M13.23,70.0446774 C14.10486,69.7619555 13.8075,65.9649194 13.8075,65.9649194 C13.8075,65.9649194 14.41188,66.2832465 15.30438,68.1376819 C16.19688,69.9921174 17.70384,73.1872568 18.5325,72.8528226 C19.0575,72.6408871 18.9525,71.1221574 18.9525,71.1221574 C18.9525,71.1221574 19.6875,71.051371 19.845,69.6208065 C20.02056,68.0270516 20.055,63.5276613 19.32,60.6665323 C18.585,57.8054032 18.165,57.063629 18.165,57.063629 C18.165,57.063629 18.165,57.0492174 18.16458,57.0428594 C15.44046,56.8385535 11.61594,57.0827032 9.63312,57.7922632 C10.1157,61.0340284 10.17072,61.7512181 10.45884,63.4225413 C10.87968,65.8665813 12.41898,70.3066297 13.23,70.0446774 Z",
                              id: "Path",
                              fill: "url(#linearGradient-87)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M17.8479,67.1335316 C18.23934,67.7345806 18.49974,68.3898852 18.70218,69.0579058 C18.90084,69.7271981 19.02516,70.41726 19.07052,71.1119845 C19.07514,71.1776845 19.02558,71.2349071 18.96006,71.2395697 C18.89664,71.2438084 18.8412,71.195911 18.83406,71.1327542 C18.7593,70.4596471 18.60936,69.7967129 18.38886,69.1600587 C18.16668,68.5267955 17.88444,67.9062484 17.50224,67.3755619 C17.43378,67.2810387 17.45436,67.1483671 17.5476,67.0792761 C17.64168,67.0101852 17.77272,67.0309548 17.84118,67.1250542 C17.84328,67.1271735 17.84622,67.1309884 17.8479,67.1335316 Z",
                              id: "Path",
                              fill: "#B75334"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M13.98726,63.74214 C13.92426,63.8807458 13.90536,64.0842039 13.89024,64.2779129 C13.8768,64.4741652 13.87302,64.6755039 13.87386,64.8764187 C13.87638,65.2790961 13.89864,65.6847406 13.92804,66.0899613 C13.93308,66.1518465 13.88688,66.2061019 13.82556,66.2111884 C13.76718,66.215851 13.71552,66.1734639 13.7067,66.1162413 C13.64412,65.7105968 13.58868,65.3036806 13.55298,64.8908303 C13.53534,64.684829 13.52232,64.4771323 13.5198,64.2660445 C13.52232,64.054109 13.51434,63.8404781 13.5933,63.5950568 L13.59582,63.587851 C13.63194,63.475949 13.75038,63.4149116 13.86126,63.4509406 C13.97172,63.4873935 14.0322,63.6069252 13.9965,63.7188271 C13.99314,63.7273045 13.9902,63.7345103 13.98726,63.74214 Z",
                              id: "Path",
                              fill: "#B75334"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M15.20106,57.1988439 C15.1998,57.1988439 15.19854,57.1988439 15.19728,57.1988439 C15.08178,57.1967245 14.98896,57.1005058 14.99106,56.9830935 C15.1284,48.7154903 10.29336,11.3262561 3.06054,3.08281355 C2.98326,2.99507226 2.99166,2.86112903 3.0786,2.78356065 C3.1647,2.70641613 3.29742,2.71404581 3.3747,2.8017871 C10.6701,11.1160161 15.54924,48.6879387 15.41106,56.9902994 C15.40896,57.10644 15.31572,57.1988439 15.20106,57.1988439 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "monitor",
                            transform: "translate(41.000000, 48.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M92.8116456,0.123891429 L3.20899443,7.92099 C0.480162532,15.6001371 -0.269111392,24.0943371 0.70647038,33.80157 C4.32654835,69.8297914 31.1491139,82.3114286 43.2273418,96.9492857 C43.5680749,97.36254 43.8939752,97.7876743 44.2092805,98.2221429 L92.8116456,78.8110714 L92.8116456,0.123891429 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M90.0438243,3.60642857 L1.96896304,12.0111043 C0.278011139,18.5977157 -0.0991686076,25.7842671 0.70647038,33.8011457 C4.16126734,68.1831386 28.7457585,81.1213071 41.4821438,94.9534457 L90.0438243,77.3672271 L90.0438243,3.60642857 Z",
                              id: "Path",
                              fill: "url(#linearGradient-88)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M45.9731256,84.1973786 C39.9882577,82.91943 30.4841757,76.9403957 28.8296704,65.7070071 C27.9405433,59.6698457 28.8466223,54.6929743 29.7226116,49.8794529 C30.5176557,45.5114314 31.2686248,41.3852529 30.6295382,36.7397486 C29.6548041,29.6588443 24.0572871,25.7316557 21.2335246,24.6442114 L21.994241,22.66407 C25.4600567,23.9988729 31.6212243,28.4038071 32.7286071,36.4499614 C33.4143114,41.4319243 32.5972299,45.9195943 31.8076952,50.2596129 C30.9622192,54.9038443 30.0879251,59.7063343 30.9261965,65.3972786 C32.4230491,75.5610429 41.0091858,80.96814 46.4151463,82.1226214 L45.9731256,84.1973786 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "hairs_x5F_2",
                            transform: "translate(99.000000, 44.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M49.6071429,6.29333333 C49.3928571,8.96 48.354,21.3021867 49.2141429,29.1554133 C50.9284286,44.8 44.0455714,48.0699733 43.0581429,53.8615467 C42.4157143,57.63072 45.4285714,60.16 45.4285714,60.16 C45.4285714,60.16 41.7141429,64.78208 24.6428571,61.93792 C7.57157143,59.09376 0.285857143,50.2045867 0.285857143,50.2045867 C0.285857143,50.2045867 17.7145714,31.0045867 19.8574286,18.3466667 C22.0002857,5.68874667 24.123,-0.342613333 35.5615714,0.255573333 C47.0001429,0.85376 49.6071429,6.29333333 49.6071429,6.29333333 Z",
                              id: "Path",
                              fill: "url(#linearGradient-89)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M45.4285714,60.16 C45.4285714,60.16 42.4157143,57.63072 43.0585714,53.8615467 C44.046,48.0699733 50.9288571,44.8 49.2145714,29.1554133 C48.354,21.3021867 49.3932857,8.96 49.6075714,6.29333333 C49.6075714,6.29333333 49.2634286,5.58165333 48.2884286,4.64597333 C47.67,9.24672 48.2142857,18.4384 48.2142857,22.1866667 C48.2142857,26.3466667 49.2857143,34.56 41.7857143,42.1333333 C34.9654286,49.02016 34.3478571,54.6730667 34.9362857,62.8599467 C43.3097143,62.7904 45.4285714,60.16 45.4285714,60.16 Z",
                              id: "Path",
                              fill: "#13E7ED"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.7312857,42.6218667 C26.9451429,37.65888 31.1785714,37.44 34.6071429,22.72 C36.8571429,13.0606933 35.3798571,6.12778667 32.0502857,0.30976 C23.6511429,1.10165333 21.759,7.11168 19.857,18.3466667 C17.7141429,31.0045867 0.285428571,50.2045867 0.285428571,50.2045867 C0.285428571,50.2045867 7.57114286,59.0933333 24.6424286,61.93792 C25.9024286,62.14784 27.081,62.3125333 28.1995714,62.44608 C32.3558571,54.2920533 26.5178571,47.5729067 26.7312857,42.6218667 Z",
                              id: "Path",
                              fill: "url(#linearGradient-90)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "body",
                            transform: "translate(82.000000, 73.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M43.5766962,25.07112 C42.7474508,22.906176 41.7602335,21.087216 40.5632432,19.928 C37.4748714,16.937104 31.2938465,16.511408 28.2551351,16.642 C28.2551351,16.642 26.7567568,17.384 23.423507,14.82728 C20.0902573,12.27056 14.5556757,2.226 9.41837838,0.53 C4.28108108,-1.166 0.18323027,1.534032 1.63366054,10.336272 C3.35337081,20.776 -2.56864865,33.637192 3.21081081,42.824 C9.33917838,52.564976 22.2192389,52.465336 25.1513514,51.198 C25.6543784,49.238272 27.9096519,43.160656 29.1113514,41.710576 L29.1113514,41.710576 C30.4624605,39.365432 36.8502616,26.91976 43.5766962,25.07112 Z",
                              id: "Path",
                              fill: "url(#linearGradient-91)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2551351,16.642 C28.2551351,16.642 26.7567568,17.384 23.423507,14.82728 C20.0902573,12.27056 14.5556757,2.226 9.41837838,0.53 C6.39764757,-0.467248 3.73824,0.057664 2.35288216,2.446904 C5.66301405,10.41344 14.4041254,26.293512 17.0172973,27.348 C19.7430616,28.447856 33.6073427,26.433856 41.8193124,21.487048 C41.4280216,20.88624 41.0101881,20.360904 40.5632432,19.928 C37.4748714,16.937104 31.2938465,16.511408 28.2551351,16.642 Z",
                              id: "Path",
                              fill: "url(#linearGradient-92)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M19.4489514,27.852984 C18.3183178,27.852984 17.4488303,27.7508 16.936813,27.543888 C16.8272173,27.499792 16.77456,27.375984 16.8195114,27.267864 C16.8640346,27.15932 16.9890422,27.107168 17.0982097,27.151688 C19.8881903,28.277408 33.6099114,26.187088 41.710573,21.307696 C41.8120346,21.247064 41.9430357,21.278864 42.0046832,21.378504 C42.0663308,21.478144 42.0337946,21.608736 41.9331892,21.669792 C35.2088951,25.720264 24.6127914,27.852984 19.4489514,27.852984 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M13.2478054,50.735416 C13.2019978,50.735416 13.1553341,50.720576 13.1159481,50.690472 C13.0230486,50.618392 13.0063524,50.485256 13.0791308,50.392824 C15.8965103,46.82232 16.4243676,36.562368 16.1974703,33.937808 C15.9838443,31.470128 16.36272,28.014952 17.6907114,25.859336 C20.3004584,21.622728 23.7133362,18.368952 26.0533751,16.29008 C26.1411373,16.21164 26.2764195,16.218848 26.3556195,16.306192 C26.4348195,16.393536 26.4271135,16.52752 26.3393514,16.605536 C24.0194335,18.6666 20.6369514,21.890696 18.0563157,26.079816 C16.7788411,28.1536 16.4166616,31.502352 16.6242941,33.901344 C16.8550443,36.564064 16.3053535,46.992344 13.4169081,50.653584 C13.3745254,50.707432 13.3115935,50.735416 13.2478054,50.735416 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(10.274595, 38.160000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M11.1761903,4.057256 C11.1248173,4.642376 10.6038097,5.07528 10.0130205,5.023976 L1.36823351,4.274344 C0.777872432,4.22304 0.340774054,3.707456 0.392575135,3.12276 L0.532994595,1.534032 C0.584367568,0.948912 1.10537514,0.516432 1.69573622,0.567312 L10.3405232,1.316944 C10.9313124,1.368248 11.3679827,1.883832 11.3166097,2.468528 L11.1761903,4.057256 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-93)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M10.1080605,5.240216 C10.0708151,5.240216 10.0327135,5.23852 9.99461189,5.235128 L1.34982486,4.485496 C1.00733838,4.455816 0.69696,4.295968 0.475628108,4.034784 C0.254296216,3.774024 0.14940973,3.443304 0.179377297,3.104104 L0.319796757,1.515376 C0.38016,0.825528 1.00819459,0.293408 1.71457297,0.35616 L10.35936,1.105792 C10.7018465,1.135472 11.012653,1.29532 11.2335568,1.556504 C11.4548886,1.817688 11.5597751,2.147984 11.5298076,2.487184 L11.3893881,4.075912 C11.3324497,4.728872 10.7690595,5.240216 10.1080605,5.240216 Z M1.60155243,0.775496 C1.16060108,0.775496 0.784722162,1.116816 0.746620541,1.552688 L0.606201081,3.141416 C0.58608,3.367832 0.656717838,3.588736 0.803987027,3.762576 C0.951684324,3.93684 1.15888865,4.043688 1.38749838,4.063192 L10.0322854,4.812824 C10.5070573,4.85268 10.9231784,4.499488 10.9634205,4.0386 L11.10384,2.449872 C11.1239611,2.223456 11.0533232,2.002552 10.9060541,1.828712 C10.7587849,1.654872 10.5511524,1.5476 10.3225427,1.528096 L1.67775568,0.778464 C1.65206919,0.776344 1.6263827,0.775496 1.60155243,0.775496 Z",
                                  id: "Shape",
                                  fill: "#00CFFF"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M20.9456173,52.216872 C15.6186681,52.216872 7.38828973,50.2652 2.84777514,43.048296 C-0.725643243,37.368392 0.135282162,29.909384 0.967524324,22.696296 C1.49752216,18.103104 2.04550054,13.353456 1.37508324,9.283904 C1.33698162,9.052824 1.49538162,8.834888 1.72870054,8.797152 C1.96116324,8.759416 2.18206703,8.916296 2.22016865,9.147376 C2.90985081,13.333104 2.3550227,18.142112 1.81817514,22.792544 C1.00262919,29.861472 0.159256216,37.170808 3.5747027,42.599704 C9.51984,52.049392 22.0068973,52.094336 24.9805362,50.809192 C25.1958746,50.715064 25.4497427,50.813008 25.5439265,51.0284 C25.6385384,51.242944 25.5396454,51.493104 25.3225946,51.586384 C24.4792216,51.951024 22.9089211,52.216872 20.9456173,52.216872 Z",
                              id: "Path",
                              fill: "#3369FF"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "hand",
                            transform: "translate(110.000000, 86.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M0.643815,27.94176 C1.9592325,29.31093 5.450625,41.7921429 7.2675,50.0657143 C9.084375,58.3392857 14.000625,65.9764286 20.73375,65.4460714 C27.466875,64.9157143 35.4825,53.1417857 41.788125,44.3378571 C48.09375,35.5339286 59.9034375,16.1228571 59.9034375,16.1228571 C59.9034375,16.1228571 65.2241025,16.7618314 71.47287,16.5208371 C78.3398025,16.2556586 81.920115,14.3722543 84.2179275,13.7099443 C86.8949325,12.9381686 89.5172175,12.6865671 89.93574,12.1982143 C90.3901725,11.6678571 89.9891775,11.1375 89.4548025,10.8723214 C90.79074,10.8192857 94.167135,9.17178429 94.2641775,8.27357143 C94.3445475,7.53107143 93.0911175,7.8111 93.0911175,7.8111 C93.0911175,7.8111 95.1191775,7.02702 94.93065,6.29427857 C94.7310075,5.51910857 89.3479275,5.83392857 87.79824,5.83392857 C86.2485525,5.83392857 82.781955,5.63706 79.67574,5.56875 C76.487445,5.49874286 73.031535,5.62178571 71.232615,5.88696429 C73.47699,5.14446429 77.11074,1.81467 76.5229275,0.477321429 C76.0954275,-0.495141429 72.728865,1.27285714 70.48449,1.75017857 C68.240115,2.2275 63.3277125,3.15414 59.137785,5.23271571 C54.7204275,7.425 51.1576425,10.9605729 45.5291775,18.52686 C39.9007125,26.0931471 23.1923025,43.38279 23.1923025,43.38279 C23.1923025,43.38279 20.80557,37.6901486 19.4516775,32.0331471 C18.4342275,27.7818043 17.3765925,18.06057 14.872725,11.5104471 C8.155845,13.3603329 1.7771175,25.8143914 0.4279275,28.1611157 L0.4279275,28.1611157 C0.50445,28.0690457 0.5766975,27.9943714 0.643815,27.94176 Z",
                              id: "Path",
                              fill: "url(#linearGradient-94)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M48.4498575,20.7191443 C44.3886075,26.0227157 42.0373575,31.6092857 38.9025,35.7104314 C35.7676425,39.8115771 25.2340425,54.1150971 19.941165,53.4438771 C15.60375,52.8944271 13.2525,47.8029986 11.4711075,40.7314286 C9.929115,34.6098343 8.5983075,23.2483114 5.0184225,20.5354286 C2.7304425,23.8715871 1.047375,27.08343 0.4275,28.16154 C0.5040225,28.0690457 0.5766975,27.9943714 0.643815,27.94176 C1.9592325,29.31093 5.450625,41.7921429 7.2675,50.0657143 C9.084375,58.3392857 14.000625,65.9764286 20.73375,65.4460714 C27.466875,64.9157143 35.4825,53.1417857 41.788125,44.3378571 C48.09375,35.5339286 59.9034375,16.1228571 59.9034375,16.1228571 C56.3586075,15.98157 52.5111075,15.4155729 48.4498575,20.7191443 Z",
                              id: "Path",
                              fill: "url(#linearGradient-95)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.998645,65.0930657 C22.93623,65.0930657 22.873815,65.0659114 22.83192,65.0137243 C16.9277175,57.7304357 20.6666325,45.9870557 23.029425,43.2448971 C23.106375,43.1562214 23.241465,43.1460386 23.3308125,43.2215614 C23.42016,43.2975086 23.4308475,43.4315829 23.354325,43.5206829 C21.0505275,46.1936829 17.406945,57.6443057 23.1649425,64.7472729 C23.2389,64.8384943 23.224365,64.9721443 23.1324525,65.0455457 C23.0931225,65.0777914 23.04567,65.0930657 22.998645,65.0930657 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M20.2998375,53.6785071 C20.168595,53.6785071 20.0399175,53.6704457 19.9142325,53.6547471 C15.99876,53.1583329 13.4119575,49.3087886 11.2641975,40.7827671 C10.89099,39.3015857 10.5306075,37.5149186 10.14885,35.6234529 C8.9873325,29.8688657 7.541955,22.7077714 4.8884625,20.6987786 C4.7944125,20.6279229 4.7764575,20.4946971 4.8482775,20.4013543 C4.91967,20.3084357 5.053905,20.2897671 5.147955,20.3614714 C7.9296975,22.4672014 9.33147,29.4123343 10.5682275,35.5398686 C10.94913,37.4262429 11.3086575,39.2082429 11.6793,40.68009 C13.749255,48.8976557 16.305705,52.7692629 19.9689525,53.2338557 C24.8463,53.8511914 34.51977,41.1268629 38.159505,36.3358286 L38.7327825,35.5827214 C40.18842,33.6785271 41.4816075,31.4391471 42.85089,29.0682386 C44.4518775,26.2959557 46.107585,23.4290571 48.2805675,20.59101 C52.1451675,15.5445557 55.9028925,15.72318 59.2173,15.8797414 C59.4502875,15.8907729 59.6819925,15.9018043 59.9128425,15.9111386 C60.0308325,15.9158057 60.122745,16.0146643 60.1178197,16.1317671 C60.112485,16.24887 60.0077475,16.34391 59.895315,16.335 C59.66361,16.32609 59.4306225,16.3146343 59.1963525,16.3036029 C55.82979,16.1440714 52.349085,15.9786 48.62043,20.8477029 C46.46412,23.6636871 44.81568,26.5182814 43.2215325,29.2791086 C41.84541,31.6623214 40.5453825,33.9131571 39.0730725,35.83899 L38.50065,36.5912486 C34.9100775,41.3169429 25.519185,53.6785071 20.2998375,53.6785071 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M89.6369175,10.9766957 C89.1085275,10.8421971 88.5561975,10.8337114 88.009425,10.8549257 C87.4617975,10.8803829 86.9137425,10.9308729 86.36868,11.0080929 C85.278555,11.1650786 84.1939875,11.3708571 83.115405,11.6088814 L79.8753825,12.34035 C79.6077675,12.3972043 79.320915,12.4544829 79.038765,12.4748486 C78.74721,12.4952143 78.4663425,12.4867286 78.183765,12.4599986 C77.6233125,12.3993257 77.06457,12.2856171 76.5511425,12.0420771 C76.5203625,12.0276514 76.5075375,11.9911629 76.5220725,11.9610386 C76.5357525,11.9326114 76.56867,11.9194586 76.59774,11.9296414 L76.600305,11.93049 C77.1111675,12.11166 77.660505,12.1850614 78.20172,12.21264 C78.4719,12.2262171 78.7467825,12.2207014 79.00713,12.1901529 C79.2777375,12.1604529 79.5316725,12.0879 79.804845,12.0289243 C80.8791525,11.7764743 81.9538875,11.4939 83.0423025,11.2736957 C84.129435,11.0479757 85.2234075,10.8379543 86.3331975,10.7233971 C87.43572,10.6160529 88.580565,10.5307714 89.6728275,10.8477129 C89.7087375,10.8578957 89.7292575,10.8952329 89.71857,10.9308729 C89.70831,10.9656643 89.6719725,10.9856057 89.6369175,10.9766957 Z",
                              id: "Path",
                              fill: "#668DE7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M84.32523,8.42801143 C85.8928725,8.38685571 87.445125,8.18829 89.0016525,7.99142143 C89.779275,7.88535 90.5577525,7.77461143 91.342215,7.69314857 C92.125395,7.61465571 92.920545,7.53786 93.7203975,7.63714286 C93.7571625,7.64181 93.7828125,7.67490429 93.7785375,7.71139286 C93.7742625,7.74406286 93.74733,7.76824714 93.715695,7.76952 L93.712275,7.76952 C92.9372175,7.80558429 92.1660075,7.95153857 91.3896675,8.05761 C90.6141825,8.17556143 89.83485,8.28502714 89.0520975,8.37752143 C87.49044,8.57311714 85.904415,8.70888857 84.32352,8.61427286 C84.2717925,8.61172714 84.2316075,8.56802571 84.2341725,8.51668714 C84.2367375,8.46789429 84.2777775,8.43013286 84.32523,8.42801143 Z",
                              id: "Path",
                              fill: "#668DE7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M0.4275,28.3736829 C0.39159,28.3736829 0.3552525,28.3647729 0.32148,28.34568 C0.21888,28.2875529 0.1833975,28.1581457 0.241965,28.0563171 C0.3561075,27.8581757 0.50616,27.5874814 0.68913,27.2565386 C2.6406675,23.7345429 8.5794975,13.0170857 14.8124475,11.2987286 C14.925735,11.2677557 15.0441525,11.33352 15.0757875,11.44638 C15.1074225,11.55924 15.0407325,11.6763429 14.9270175,11.70774 C8.8676325,13.3785771 2.9937825,23.9780829 1.06362,27.4610443 C0.87894,27.7941086 0.7280325,28.0669243 0.613035,28.2667629 C0.573705,28.3354971 0.501885,28.3736829 0.4275,28.3736829 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(14.107500, 49.641429)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M11.008125,4.66714286 C11.008125,6.30743143 9.66834,7.63714286 8.015625,7.63714286 L3.526875,7.63714286 C1.87416,7.63714286 0.534375,6.30743143 0.534375,4.66714286 L0.534375,3.39428571 C0.534375,1.75399714 1.87416,0.424285714 3.526875,0.424285714 L8.015625,0.424285714 C9.66834,0.424285714 11.008125,1.75399714 11.008125,3.39428571 L11.008125,4.66714286 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-96)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M8.015625,7.84928571 L3.526875,7.84928571 C1.758735,7.84928571 0.320625,6.42198857 0.320625,4.66714286 L0.320625,3.39428571 C0.320625,1.63944 1.758735,0.212142857 3.526875,0.212142857 L8.015625,0.212142857 C9.783765,0.212142857 11.221875,1.63944 11.221875,3.39428571 L11.221875,4.66714286 C11.221875,6.42198857 9.783765,7.84928571 8.015625,7.84928571 Z M3.526875,0.636428571 C1.994715,0.636428571 0.748125,1.87364571 0.748125,3.39428571 L0.748125,4.66714286 C0.748125,6.18778286 1.994715,7.425 3.526875,7.425 L8.015625,7.425 C9.547785,7.425 10.794375,6.18778286 10.794375,4.66714286 L10.794375,3.39428571 C10.794375,1.87364571 9.547785,0.636428571 8.015625,0.636428571 L3.526875,0.636428571 Z",
                                  id: "Shape",
                                  fill: "#00CFFF"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(32.917500, 28.851429)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M7.786485,9.03558857 C7.3064025,9.55236857 6.4950075,9.58503857 5.973885,9.10856571 C5.973885,9.10856571 0.587385,5.72785714 0.2894175,3.90597429 C0.92169,3.21778286 2.4311925,1.29916286 3.3041475,0.604607143 C4.5421875,2.54529 9.01683,5.83308 9.01683,5.83308 C9.537525,6.30955286 9.5704425,7.11484714 9.09036,7.63162714 L7.786485,9.03558857 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-97)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M6.84342,9.65759143 C6.4667925,9.65759143 6.10641,9.51800143 5.82939,9.26470286 C5.6365875,9.14802429 0.3885975,5.83435286 0.07866,3.94034143 L0.0619875,3.83936143 L0.13167,3.76341429 C0.315495,3.56357571 0.5732775,3.25936286 0.86868,2.91144857 C1.6121025,2.03487429 2.5372125,0.944035714 3.171195,0.43956 L3.357585,0.29106 L3.4854075,0.491322857 C4.687965,2.37684857 9.1001925,5.62984714 9.1446525,5.66251714 C9.4563,5.94594 9.6268725,6.31209857 9.6431175,6.70880571 C9.6593625,7.10508857 9.5191425,7.48397571 9.2481075,7.77546 L7.9442325,9.17899714 C7.6612275,9.48363429 7.2602325,9.65759143 6.84342,9.65759143 Z M0.5211225,3.96792 C0.90288,5.40837 4.645215,8.02366714 6.0880275,8.92951714 C6.56982,9.36016714 7.2456975,9.30543429 7.629165,8.89175571 L8.93304,7.48821857 C9.1266975,7.27989429 9.2267325,7.00962429 9.21519,6.72620143 C9.2036475,6.44320286 9.0813825,6.18141857 8.8719075,5.98921714 C8.7111675,5.87253857 4.657185,2.88344571 3.260115,0.9207 C2.6611875,1.4553 1.82286,2.44388571 1.1948625,3.18384 C0.93366,3.49314429 0.700245,3.76808143 0.5211225,3.96792 Z",
                                  id: "Shape",
                                  fill: "#00CFFF"
                                }
                              })
                            ]
                          )
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "head",
                            transform: "translate(104.000000, 44.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M20.25,37.4355 C18.1184211,39.409641 9.09459474,46.247859 9.09459474,46.247859 C9.09459474,46.247859 2.98421053,46.882359 0.568278947,46.388718 C-1.84765263,45.895077 12.5763158,28.5525 12.5763158,28.5525 L20.25,37.4355 Z",
                              id: "Path",
                              fill: "url(#linearGradient-98)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M43.9105263,6.02775 C44.3368421,10.645641 43.9105263,39.9735 28.8828947,40.50225 C17.6993526,40.89564 11.7236842,32.218641 11.7236842,32.218641 C11.7236842,32.218641 12.2565789,3.807 14.3881579,2.3265 C16.5197368,0.846 30.5881579,-0.423 35.2776316,0.6345 C39.9671053,1.692 43.9105263,6.02775 43.9105263,6.02775 Z",
                              id: "Path",
                              fill: "url(#linearGradient-99)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.7388158,11.221767 L25.7388158,16.840476 C25.7388158,18.052371 26.6447368,19.017234 27.9236842,18.964359 C29.5095789,18.898794 30.0079421,17.578611 30.2462526,16.390404 C30.4500316,15.373935 30.7782947,12.698883 30.9893211,10.890981 C29.3676158,10.71459 26.8826211,11.041146 25.7388158,11.221767 Z",
                              id: "Path",
                              fill: "url(#linearGradient-100)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.8600105,13.729734 L26.9644737,16.109109 C26.9644737,16.109109 27.2488263,17.766 28.6343526,17.343 C29.8246263,16.979643 29.8600105,13.729734 29.8600105,13.729734 Z",
                              id: "Path",
                              fill: "#5097FF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M39.3425526,11.94975 L39.3425526,17.504586 C39.3425526,18.635688 40.1879368,19.536255 41.3820474,19.487187 C42.8622158,19.425852 43.3273263,18.193653 43.5498632,17.084547 C43.74,16.135758 43.6662474,14.382846 43.8636316,12.695499 C42.2854105,12.108375 40.5264316,11.928177 39.3425526,11.94975 Z",
                              id: "Path",
                              fill: "url(#linearGradient-101)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M43.1094789,14.733513 L40.4066368,16.954263 C40.4066368,16.954263 40.6722316,18.500328 41.9652474,18.105669 C43.0762263,17.766423 43.1094789,14.733513 43.1094789,14.733513 Z",
                              id: "Path",
                              fill: "#5097FF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M36.5919632,11.31525 C37.0894737,12.58425 39.8426211,23.265 39.3809211,24.00525 C38.9192211,24.7455 34.1585526,24.983649 34.1585526,24.983649 C34.1585526,24.983649 35.1851211,22.785741 35.7039474,19.493532 C36.2637,15.942024 36.5919632,11.31525 36.5919632,11.31525 Z",
                              id: "Path",
                              fill: "url(#linearGradient-102)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2985684,29.425149 C26.5918737,29.055024 29.8425316,30.086298 32.6668737,30.297798 C33.8635421,30.387474 35.2516263,30.430197 35.2516263,30.430197 C35.2516263,30.430197 33.5463632,34.765947 30.5621526,34.686846 C27.3903632,34.601823 26.0052632,29.795274 26.2985684,29.425149 Z",
                              id: "Path",
                              fill: "#FFFFFF"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "hairs_x5F_1",
                            transform: "translate(74.000000, 29.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M51.2672727,21.3652316 C53.9616764,19.8086722 66.8674145,18.8892537 76.7945455,25.1146424 C78.7090909,18.6765904 74.9561564,1.37530746 53.8289345,0.247470448 C33.2918182,-0.848955224 24.9601418,11.8853731 16.4510509,24.4783504 C9.70887273,34.4556967 3.89929091,37.4160036 0.0880690909,38.1588394 C1.56014182,38.45088 3.73889455,40.2948107 5.67301091,44.0043206 C8.49292364,49.4121654 11.4876982,65.2634328 15.6001418,71.4540143 C19.3824327,77.1471081 23.9675564,78.1043051 23.9675564,78.1043051 C23.9675564,78.1043051 23.5633745,75.5200854 25.1647855,73.1846096 C27.8676982,69.2433349 39.7804255,61.2669761 44.4919091,51.6071391 C51.2698255,37.7088931 48.3601418,29.4303063 51.2672727,21.3652316 Z",
                              id: "Path",
                              fill: "url(#linearGradient-103)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M76.7945455,25.1150669 C77.4178364,23.0194209 77.4395345,19.7734406 76.4584364,16.3088543 C76.2303927,17.2571373 75.75048,18.1757069 74.7383236,18.2525373 C70.6403455,18.5628304 69.9906764,12.3926239 66.7963636,12.238963 C63.8534945,12.0976119 62.6834945,14.9271797 61.9036364,16.6959779 C61.1237782,18.4647761 59.3509091,19.8086722 57.29724,20.2441863 L57.2968145,20.2450352 C62.6439273,20.0434084 70.3459309,21.0710687 76.7945455,25.1150669 Z",
                              id: "Path",
                              fill: "#00FFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M49.0336364,18.8892537 C46.3592291,26.439437 47.9717018,30.563237 45.7363636,35.6561194 C42.5454545,42.9252985 30.0447491,44.2462728 28.6118182,49.77 C27.83196,52.7765749 30.7390909,52.7765749 30.2072727,55.9249254 C29.1096,62.4219797 18.4928073,61.6710788 13.9493782,68.3646663 C14.47992,69.5430161 15.0287564,70.5940227 15.5997164,71.4535899 C19.3820073,77.1466836 23.9671309,78.1038806 23.9671309,78.1038806 C23.9671309,78.1038806 23.5629491,75.5196609 25.16436,73.1841851 C27.8672727,69.2429104 39.78,61.2665516 44.4914836,51.6067146 C51.2698255,37.7093176 48.3601418,29.4307307 51.2672727,21.3656561 C53.0754545,13.5306484 57.2236364,9.12669313 57.2236364,9.12669313 C57.2236364,9.12669313 51.7080436,11.3390704 49.0336364,18.8892537 Z",
                              id: "Path",
                              fill: "#00FFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M15.3163636,40.2192537 C18.5255673,28.0724024 25.6710764,11.5691373 36.1636364,5.51820896 C46.6561964,-0.532719403 53.8336145,0.0713122388 61.9968109,1.83034746 C61.9968109,1.83034746 64.3772291,2.59143582 64.3772291,2.59143582 C61.4743527,1.32097433 57.98988,0.469472239 53.8289345,0.247470448 C33.2918182,-0.848955224 24.9601418,11.8853731 16.4510509,24.4783504 C9.70887273,34.4556967 3.89929091,37.4160036 0.0880690909,38.1588394 C1.56014182,38.45088 3.73889455,40.2948107 5.67301091,44.0043206 C6.75451636,46.0787427 7.8624,49.6910472 9.04856727,53.7040585 C9.04856727,53.7040585 12.0544036,52.5643361 15.3163636,40.2192537 Z",
                              id: "Path",
                              fill: "url(#linearGradient-104)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "headset",
                            transform: "translate(102.000000, 38.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M8.922528,26.1523125 L9.11736,26.5216725 L9.297504,26.8482825 C9.4176,27.059895 9.552384,27.28818 9.69192,27.501075 C9.969264,27.9341325 10.269072,28.3573575 10.592208,28.76562 C11.239776,29.58129 11.970288,30.34566 12.771216,31.0369275 C13.572144,31.72734 14.44392,32.347215 15.376176,32.851665 C16.306272,33.3505575 17.306784,33.7532625 18.324576,33.877665 L18.286128,34.842105 C17.057088,34.85835 15.887232,34.55397 14.780016,34.144425 C13.672368,33.727185 12.62304,33.178275 11.632032,32.537025 C10.641456,31.8944925 9.7092,31.1566275 8.846928,30.332835 C8.416224,29.9202975 8.005392,29.48382 7.614432,29.026395 C7.41528,28.797255 7.232544,28.568115 7.041168,28.3188825 L6.763824,27.947385 L6.519744,27.6075225 L8.922528,26.1523125 Z",
                              id: "Path",
                              fill: "url(#linearGradient-105)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M12.248928,0.4715325 C11.25792,1.8275625 10.316592,3.17718 9.59904,4.6063125 C8.865936,6.0247575 8.331984,7.4987775 7.99416,9.002295 C7.655472,10.5075225 7.529328,12.04182 7.527168,13.5795375 C7.5384,15.118965 7.698672,16.66224 7.92936,18.2042325 L3.950208,18.6676425 C3.792528,16.9157475 3.808512,15.1313625 4.032288,13.359375 C4.240512,11.587815 4.689792,9.828225 5.374512,8.1725175 C6.053616,6.5146725 6.997968,4.975245 8.125488,3.6350325 C8.69616,2.96856 9.306144,2.34783 9.94032,1.767285 C10.585728,1.1965725 11.250144,0.6604875 11.94264,0.170145 L12.248928,0.4715325 Z",
                              id: "Path",
                              fill: "url(#linearGradient-106)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.709024,35.7531075 C23.484816,36.67095 22.551264,37.2356775 21.62376,37.0142325 L17.424288,36.01089 C16.496784,35.789445 15.926112,34.8656175 16.149888,33.9473475 L16.162416,33.8951925 C16.386624,32.97735 17.320176,32.4126225 18.248112,32.6340675 L22.447152,33.63741 C23.374656,33.8592825 23.945328,34.78311 23.721552,35.7009525 L23.709024,35.7531075 Z",
                              id: "Path",
                              fill: "url(#linearGradient-107)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M16.768944,35.69796 C16.472592,35.0366175 16.67088,34.1371575 17.308512,33.6438225 C17.616528,33.3941625 18.015696,33.25266 18.42048,33.239835 C18.617904,33.2300025 18.839088,33.272325 19.008,33.31422 L19.537632,33.43563 C20.240928,33.607485 20.942928,33.78447 21.639312,33.9858225 C21.987936,34.08372 22.334832,34.1901675 22.681296,34.298325 C22.849776,34.3577475 23.03208,34.4090475 23.198832,34.4791575 C23.37336,34.553115 23.530608,34.655715 23.663664,34.7792625 C23.502528,34.69248 23.33448,34.630065 23.166432,34.58817 C22.988016,34.547985 22.81392,34.5321675 22.631616,34.5022425 C22.273488,34.4423925 21.916224,34.380405 21.560688,34.310295 C20.84832,34.175205 20.141568,34.0157475 19.436544,33.8507325 L18.909504,33.71949 C18.728064,33.6703275 18.590256,33.6472425 18.423936,33.6429675 C18.103392,33.633135 17.78328,33.7344525 17.508528,33.9105825 C17.2368,34.0901325 17.01432,34.3568925 16.889472,34.667685 C16.748208,34.989165 16.711056,35.33886 16.768944,35.69796 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "url(#linearGradient-108)",
                              cx: "6.912",
                              cy: "21.909375",
                              rx: "6.696",
                              ry: "6.62625"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M7.880976,15.3519525 C8.699616,15.5699775 9.470736,15.9675525 10.150272,16.4856825 C10.822464,17.0145 11.393568,17.67456 11.820816,18.420975 C12.680928,19.9167975 12.87576,21.762315 12.403584,23.4240075 C11.908512,25.0818525 10.742544,26.53065 9.220176,27.3561525 C8.46072,27.76869 7.625232,28.0358775 6.772896,28.138905 C5.920128,28.227825 5.053104,28.1718225 4.238352,27.938835 C5.902848,28.2265425 7.645968,27.9247275 9.053856,27.0714375 C10.464768,26.2301175 11.55384,24.87024 11.988864,23.3051625 C12.464064,21.7524825 12.283056,20.0245275 11.529648,18.57573 C10.782288,17.1192375 9.457776,15.9564375 7.880976,15.3519525 Z",
                              id: "Path",
                              fill: "#00CFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(2.592000, 18.810000)"
                              }
                            },
                            [
                              _c("ellipse", {
                                attrs: {
                                  id: "Oval",
                                  fill: "url(#linearGradient-109)",
                                  cx: "3.348",
                                  cy: "3.2596875",
                                  rx: "3.078",
                                  ry: "3.0459375"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M3.348,6.519375 C1.53144,6.519375 0.054,5.057325 0.054,3.2596875 C0.054,1.46205 1.53144,0 3.348,0 C5.16456,0 6.642,1.46205 6.642,3.2596875 C6.642,5.057325 5.16456,6.519375 3.348,6.519375 Z M3.348,0.4275 C1.769904,0.4275 0.486,1.69803 0.486,3.2596875 C0.486,4.821345 1.769904,6.091875 3.348,6.091875 C4.926096,6.091875 6.21,4.821345 6.21,3.2596875 C6.21,1.69803 4.926096,0.4275 3.348,0.4275 Z",
                                  id: "Shape",
                                  fill: "#00CFFF"
                                }
                              })
                            ]
                          )
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "tablet",
                            transform: "translate(165.000000, 57.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M38.3472,15.9653647 C38.3472,18.5704941 36.2558118,20.6822118 33.6752471,20.6822118 L5.5368,20.6822118 C2.95665882,20.6822118 0.864847059,18.5704941 0.864847059,15.9653647 L0.864847059,5.35214118 C0.864847059,2.74701176 2.95665882,0.635294118 5.5368,0.635294118 L33.6752471,0.635294118 C36.2558118,0.635294118 38.3472,2.74701176 38.3472,5.35214118 L38.3472,15.9653647 Z",
                              id: "Path",
                              fill: "url(#linearGradient-110)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.6295529,11.7177882 C32.6295529,14.2907294 30.5436706,16.3766118 27.9707294,16.3766118 L11.2413176,16.3766118 C8.66837647,16.3766118 6.58249412,14.2907294 6.58249412,11.7177882 L6.58249412,9.74117647 C6.58249412,7.16823529 8.66837647,5.08235294 11.2413176,5.08235294 L27.9707294,5.08235294 C30.5436706,5.08235294 32.6295529,7.16823529 32.6295529,9.74117647 L32.6295529,11.7177882 Z",
                              id: "Path",
                              fill: "url(#linearGradient-111)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.9707294,5.08235294 L16.7997176,5.08235294 C19.3726588,5.08235294 21.4585412,7.16823529 21.4585412,9.74117647 L21.4585412,11.7177882 C21.4585412,14.2907294 19.3726588,16.3766118 16.7997176,16.3766118 L27.9707294,16.3766118 C30.5436706,16.3766118 32.6295529,14.2907294 32.6295529,11.7177882 L32.6295529,9.74117647 C32.6295529,7.16823529 30.5436706,5.08235294 27.9707294,5.08235294 Z",
                              id: "Path",
                              fill: "url(#linearGradient-112)"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "url(#linearGradient-113)",
                              cx: "19.6060235",
                              cy: "37.1769882",
                              rx: "9.07072941",
                              ry: "2.35228235"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "#FDE1A7",
                              cx: "19.6060235",
                              cy: "36.7534588",
                              rx: "4.30687059",
                              ry: "1.11684706"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(0.000000, 14.823529)",
                                fill: "#FDE1A7"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M7.76456471,6.49397647 L5.52324706,6.49397647 C2.60385882,6.49397647 0.229129412,4.11924706 0.229129412,1.19985882 L0.229129412,0.3528 L1.49971765,0.3528 L1.49971765,1.19985882 C1.49971765,3.41830588 3.3048,5.22338824 5.52324706,5.22338824 L7.76456471,5.22338824 L7.76456471,6.49397647 Z",
                                  id: "Path"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M33.6883765,6.49397647 L31.2704471,6.49397647 L31.2704471,5.22338824 L33.6883765,5.22338824 C35.9068235,5.22338824 37.7119059,3.41830588 37.7119059,1.19985882 L37.7119059,0.3528 L38.9824941,0.3528 L38.9824941,1.19985882 C38.9824941,4.11924706 36.6077647,6.49397647 33.6883765,6.49397647 Z",
                                  id: "Path"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c("g", { attrs: { id: "Group", fill: "#FDE1A7" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M1.50014118,6.21190588 L0.229552941,6.21190588 L0.229552941,5.29411765 C0.229552941,2.37472941 2.60428235,0 5.52367059,0 L7.76498824,0 L7.76498824,1.27058824 L5.52367059,1.27058824 C3.30522353,1.27058824 1.50014118,3.07567059 1.50014118,5.29411765 L1.50014118,6.21190588 Z",
                                id: "Path"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M38.9824941,6.21190588 L37.7119059,6.21190588 L37.7119059,5.29411765 C37.7119059,3.07567059 35.9068235,1.27058824 33.6883765,1.27058824 L31.2704471,1.27058824 L31.2704471,0 L33.6883765,0 C36.6077647,0 38.9824941,2.37472941 38.9824941,5.29411765 L38.9824941,6.21190588 Z",
                                id: "Path"
                              }
                            })
                          ]),
                          _vm._v(" "),
                          _c("polygon", {
                            attrs: {
                              id: "Path",
                              fill: "url(#linearGradient-114)",
                              points:
                                "34.7649882 20.6737412 4.30602353 20.6737412 15.2991529 36.7534588 23.9031529 36.7534588"
                            }
                          })
                        ]
                      )
                    ]
                  ),
                  _vm._v(" "),
                  _c(
                    "g",
                    {
                      attrs: {
                        id: "Success",
                        transform: "translate(455.000000, 7.000000)"
                      }
                    },
                    [
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "background",
                            transform: "translate(36.000000, 36.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M196.550137,12.1832678 C202.973247,17.947106 209.529863,29.4558132 205.82137,47.0369539 C202.112877,64.6180946 200.229889,74.8669743 204.121489,83.8958154 C211.731781,101.554221 281.790316,131.85948 281.383696,179.975361 C280.918356,234.56943 225.059178,236.882738 210.688767,254.463878 C200.103337,267.414702 199.099726,302.580684 166.186849,323.400456 C137.507681,341.54188 80.4733742,344.458962 44.5019178,313.453232 C19.0060274,291.476806 20.2423463,264.642433 21.4782016,253.384489 C22.714057,242.126544 33.3500153,207.94418 16.1310181,182.82767 C-4.32688438,152.98646 -1.95113096,130.043996 5.10752219,105.600659 C11.8208219,82.3537643 30.0717074,46.0056812 75.714914,20.5111766 C126.243133,-7.71118084 179.707552,-2.93003589 196.550137,12.1832678 Z",
                              id: "Path",
                              fill: "url(#linearGradient-115)"
                            }
                          }),
                          _vm._v(" "),
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "#C7A0F6",
                              x: "167.577534",
                              y: "30.1891319",
                              width: "17.1517808",
                              height: "17.1170911"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M34.9989041,91.3756654 L10.1737874,91.3756654 C8.01498082,96.4695696 6.36052932,101.263206 5.10798575,105.600659 C1.60392329,117.734885 -0.74448,129.499444 0.279991233,141.921445 L34.9989041,141.921445 L34.9989041,91.3756654 Z",
                              id: "Path",
                              fill: "url(#linearGradient-116)"
                            }
                          }),
                          _vm._v(" "),
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "#FDE1A7",
                              x: "173.302521",
                              y: "30.1891319",
                              width: "5.70227178",
                              height: "5.69073764"
                            }
                          }),
                          _vm._v(" "),
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "#FF57BC",
                              x: "173.302521",
                              y: "41.615948",
                              width: "5.70227178",
                              height: "5.69073764"
                            }
                          }),
                          _vm._v(" "),
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "#FF9BBB",
                              x: "167.577534",
                              y: "35.9025399",
                              width: "5.70227178",
                              height: "5.69073764"
                            }
                          }),
                          _vm._v(" "),
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "#1AA9E8",
                              x: "179.027043",
                              y: "35.9025399",
                              width: "5.70227178",
                              height: "5.69073764"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M192.687278,84.4357414 L192.687278,59.683346 C192.687278,59.4279568 192.480066,59.2206844 192.223716,59.2206844 L189.133151,59.2206844 C188.876801,59.2206844 188.669589,59.4279568 188.669589,59.683346 L188.669589,84.4357414 L192.687278,84.4357414 Z",
                              id: "Path",
                              fill: "#05C5DA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M188.669589,84.4357414 L188.669589,57.370038 C188.669589,55.8372402 187.423999,54.5940684 185.888219,54.5940684 L183.106849,54.5940684 C181.57107,54.5940684 180.325479,55.8372402 180.325479,57.370038 L180.325479,84.4357414 L188.669589,84.4357414 Z",
                              id: "Path",
                              fill: "#FDE1A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "#C7A0F6",
                              x: "180.325479",
                              y: "60.3000739",
                              width: "8.34410959",
                              height: "2.62190327"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M169.259336,84.1271462 L177.725826,84.1271462 L169.30801,52.080428 C169.113314,51.3387814 168.353073,50.895089 167.609984,51.0894068 L162.379154,52.4579598 C161.635601,52.6522777 161.191509,53.4110427 161.386205,54.1526893 L169.259336,84.1271462 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M169.259336,84.1271462 L160.52398,50.8710306 C160.458618,50.6239693 160.205513,50.4759176 159.957972,50.5411529 L155.025212,51.8319787 C154.777207,51.8967513 154.62933,52.1498272 154.694229,52.3968885 L163.028604,84.1276088 L169.259336,84.1276088 L169.259336,84.1271462 Z",
                              id: "Path",
                              fill: "#FF9BBB"
                            }
                          }),
                          _vm._v(" "),
                          _c("polygon", {
                            attrs: {
                              id: "Rectangle",
                              fill: "#0090B2",
                              transform:
                                "translate(168.989567, 66.986572) rotate(-14.690778) translate(-168.989567, -66.986572) ",
                              points:
                                "164.892366 60.4682006 173.08055 60.4721011 173.086769 73.5049424 164.898584 73.5010419"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.8734247,108.725475 C19.2373447,110.367461 12.400274,111.038783 9.27123288,117.284715 C5.92756274,123.959071 9.96657534,127.058441 10.1983562,130.933232 C10.4013962,134.326392 7.98067726,137.019083 5.08990685,138.567148 L31.4063014,138.567148 L31.4063014,103.913795 C29.8774751,105.557169 27.6917819,107.373115 23.8734247,108.725475 Z",
                              id: "Path",
                              fill: "url(#linearGradient-117)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M145.867552,250.145858 C158.838007,250.627951 195.738904,254.001217 193.150839,271.428291 C190.888659,286.661887 170.397843,290.768934 151.121096,293.01932 C130.540813,295.421922 123.886849,293.674449 110.636867,303.197875 C97.9037556,312.349784 86.4542466,318.77384 67.0620723,309.98327 C52.5739167,303.415789 53.1005227,286.523551 55.7432877,283.264563 C63.1217984,274.165397 73.6325951,275.129121 80.0417984,272.353614 C85.2953425,270.078707 94.289829,259.31581 106.00125,254.772474 C117.712672,250.229137 138.184018,249.860395 145.867552,250.145858 Z",
                              id: "Path",
                              fill: "url(#linearGradient-118)",
                              opacity: "0.3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M154.520393,84.5514068 L154.520393,0.10733749 C153.552013,0.0842044106 152.572507,0.0735631939 151.584658,0.0726378707 L151.584658,84.5514068 L154.520393,84.5514068 Z",
                              id: "Path",
                              fill: "url(#linearGradient-119)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M20.1069863,104.619354 C23.4678082,102.82654 17.3256164,97.04327 23.0621918,94.729962 L8.80767123,94.729962 C7.96259836,96.8882783 7.20745644,98.9841354 6.53668274,101.002265 C6.99050959,100.807022 7.47215014,100.669149 7.99643836,100.628897 C13.2694521,100.224068 14.118697,107.814032 20.1069863,104.619354 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M148.30125,14.9592374 L148.30125,15.1133037 L199.366738,15.1133037 C198.447031,14.0121691 197.497657,13.0331772 196.550137,12.1832678 L151.08262,12.1832678 C149.546841,12.1832678 148.30125,13.4264395 148.30125,14.9592374 Z",
                              id: "Path",
                              fill: "url(#linearGradient-120)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M148.30125,48.3481369 L148.30125,48.5022032 L205.513101,48.5022032 C205.614621,48.0191845 205.717068,47.5320018 205.82137,47.0374166 C205.925671,46.5437567 206.018847,46.0561113 206.106924,45.5721673 L151.08262,45.5721673 C149.546841,45.5721673 148.30125,46.815339 148.30125,48.3481369 Z",
                              id: "Path",
                              fill: "url(#linearGradient-121)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M148.30125,86.0166561 L148.30125,86.1707224 L205.397211,86.1707224 C204.872923,85.390675 204.438565,84.6314473 204.121489,83.8958154 C204.02785,83.6783644 203.940237,83.4595255 203.853087,83.2402239 L151.08262,83.2402239 C149.546841,83.2406865 148.30125,84.4838583 148.30125,86.0166561 Z",
                              id: "Path",
                              fill: "url(#linearGradient-122)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M10.1983562,130.933232 C9.96657534,127.058441 5.92756274,123.959071 9.27123288,117.284715 C12.400274,111.038783 19.2373447,110.367461 23.8734247,108.725475 C27.6917819,107.373115 29.8774751,105.557169 31.4063014,103.913795 L31.4063014,94.729962 L23.0621918,94.729962 C17.3256164,97.04327 23.4678082,102.82654 20.1069863,104.619354 C14.118697,107.814032 13.2694521,100.224068 7.99643836,100.628897 C7.47168658,100.669149 6.99004603,100.807022 6.53668274,101.002265 C6.01100384,102.583643 5.53585315,104.119216 5.10798575,105.600196 C1.92099945,116.636989 -0.310586301,127.368424 0.0825139726,138.566686 L5.08990685,138.566686 C7.98067726,137.019083 10.4013962,134.326392 10.1983562,130.933232 Z",
                              id: "Path",
                              fill: "url(#linearGradient-123)"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "url(#linearGradient-124)",
                              cx: "19.9331507",
                              cy: "123.530646",
                              rx: "4.94481205",
                              ry: "4.93521125"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "flowerpot",
                            transform: "translate(59.000000, 307.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M1.26264414,10.8611337 C4.1958,21.2190632 10.2168993,32.6135747 22.0468966,42.9394737 C24.4913462,45.0729853 27.0363848,47.0407737 29.6613434,48.8600147 L36.2115683,10.8615979 L1.26264414,10.8615979 L1.26264414,10.8611337 Z",
                              id: "Path",
                              fill: "url(#linearGradient-125)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M36.2552028,11.6177968 C36.2552028,5.38484211 27.5319807,0.334231579 16.7721766,0.334231579 C9.66848276,0.334231579 3.45493241,2.53551789 0.0505241379,5.82444947 C0.983842759,10.5013705 2.50048552,15.4842063 4.88017241,20.5533853 C8.17113103,22.0240042 12.2934414,22.9008979 16.7721766,22.9008979 C27.5319807,22.9013621 36.2552028,17.85168 36.2552028,11.6177968 Z",
                              id: "Path",
                              fill: "#FF9BBB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.5343297,11.1029874 C32.5343297,6.20881579 25.4214497,2.24399368 16.6504593,2.24399368 C8.71679172,2.24399368 2.14268276,5.48650421 0.957202759,9.72660316 C1.44544966,11.5760179 2.03198897,13.4616411 2.72876276,15.3709389 C5.43180414,18.1079242 10.6518662,19.9615168 16.6504593,19.9615168 C25.421909,19.9615168 32.5343297,15.9971589 32.5343297,11.1029874 Z",
                              id: "Path",
                              fill: "url(#linearGradient-126)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "flower",
                            transform: "translate(47.000000, 229.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M19.531974,2.13714 C18.933684,3.42891 19.824882,4.697895 21.5061,5.390745 C23.416008,6.177525 24.868536,6.045 25.517184,7.778055 C26.165832,9.511575 25.700136,11.5041 26.842662,11.491604 C27.98565,11.479455 29.888628,6.735525 27.779136,3.260115 C25.65255,-0.24552 20.898108,-0.813285 19.531974,2.13714 Z",
                              id: "Path",
                              fill: "url(#linearGradient-127)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.492,71.435625 C31.416,68.878125 40.82925,55.509375 57.34575,54.230625 C72.265578,53.075565 78.159774,59.96547 76.692,63.0075 C75.71025,65.041875 72.1875,64.460625 70.74375,64.05375 C69.3,63.646875 66.766854,62.189565 65.08425,63.065625 C63.4095,63.9375 63.609084,66.1695 61.908,67.018125 C58.858338,68.539605 55.719048,65.99745 53.13,64.98375 C50.0115,63.763125 44.75625,62.65875 41.0025,66.14625 C36.406986,70.416345 35.446026,74.107515 34.008282,80.589615 C32.570538,87.071715 31.890936,90.27789 31.58925,90.675 C31.213644,91.169295 30.6075,91.72125 28.9905,91.081875 C27.3735,90.4425 29.4525,82.130625 29.27925,78.759375 C29.106,75.388125 30.492,71.435625 30.492,71.435625 Z",
                              id: "Path",
                              fill: "url(#linearGradient-128)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M34.3035,90.79125 C34.317822,90.19512 36.3825,86.29656 36.78675,82.595625 C37.31343,77.772645 39.70428,72.690195 41.86875,70.738125 C44.4675,68.39406 47.817924,67.26504 49.26075,69.0525 C50.511846,70.60281 49.280154,73.43187 47.817,74.865 C45.944052,76.699425 37.355934,81.766995 38.846346,84.55281 C39.654846,86.06406 41.130012,83.830665 41.811,82.770465 C43.004346,80.910465 45.017742,79.083015 46.277154,79.90281 C47.586,80.755155 47.162808,83.39031 44.313654,85.056405 C41.525022,86.68716 39.045006,88.03659 37.845654,89.396715 C36.711444,90.682905 37.807308,90.636405 37.191,91.372965 C36.48183,92.22066 34.265154,92.380155 34.3035,90.79125 Z",
                              id: "Path",
                              fill: "url(#linearGradient-129)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.176,90.733125 C22.932294,90.28068 22.23375,86.199375 20.79,84.165 C19.34625,82.130625 16.632,81.1425 16.632,79.689375 C16.632,78.23625 17.346714,76.955175 16.5165,75.155625 C15.76575,73.528125 12.8205,74.1675 12.705,71.551875 C12.5895,68.93625 13.91082,65.71194 14.920752,60.018015 C15.8235,54.928125 15.00114,53.17368 13.68675,52.370625 C12.06975,51.3825 11.72325,48.999375 12.936,45.628125 C13.780536,43.28127 13.30098,28.50822 8.14275,28.1325 C3.75375,27.81258 1.94502,35.68224 1.90575,39.699375 C1.848,45.599295 4.109952,47.066835 3.234,50.10375 C2.1945,53.7075 0.770154,54.211095 0.462,58.183125 C0.208362,61.455795 0.231,65.91375 7.0455,74.28375 C13.494096,82.20456 17.740338,85.605105 18.88425,87.245625 C20.289654,89.260935 20.84775,91.52781 22.176,90.733125 Z",
                              id: "Path",
                              fill: "url(#linearGradient-130)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8355,90.4425 C27.8355,87.53625 29.106,78.12 26.4495,73.12125 C23.793,68.1225 22.2915,63.0075 23.562,57.4275 C24.8325,51.8475 31.0695,41.094375 30.6075,37.374375 C30.1455,33.654375 28.23975,27.376875 31.647,15.22875 C34.22727,6.029655 40.082658,-0.215295 44.121,2.325 C46.893,4.06875 45.6225,10.57875 44.2365,13.02 C42.8505,15.46125 40.442094,19.721115 40.904094,22.162365 C41.366094,24.603615 42.886536,24.86913 42.757638,28.183185 C42.504462,34.700625 33.437712,44.698125 31.300962,53.59125 C29.527806,60.970335 28.875462,69.86625 30.723462,70.215 C32.571462,70.56375 30.59826,88.07007 29.73663,89.86683 C28.875,91.66359 27.8355,90.4425 27.8355,90.4425 Z",
                              id: "Path",
                              fill: "url(#linearGradient-131)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.253154,12.63312 C23.985654,13.795155 24.178308,16.585155 23.485308,18.52281 C22.792308,20.460465 22.154286,21.354195 22.330308,22.63062 C22.522962,24.025155 25.179462,24.490155 26.026308,27.35781 C26.873154,30.225465 25.487154,35.959845 24.024462,40.067655 C22.56177,44.175465 22.946616,47.197965 24.409308,47.430465 C25.872,47.662965 27.181308,45.647655 27.643308,43.16781 C28.105308,40.687965 27.884472,29.764185 34.419462,31.697655 C37.037616,32.472345 36.844962,36.92844 35.189616,40.067655 C33.91311,42.48798 29.60727,47.77875 27.41277,54.947655 C25.382742,61.579485 23.785608,66.84189 27.797616,67.657965 C31.22427,68.355 33.110616,64.480155 33.572616,62.00031 C34.034616,59.520465 35.60403,50.989575 43.197462,52.46781 C46.777962,53.164845 44.541882,61.916145 39.270462,66.495465 C35.676102,69.61794 31.11108,73.50627 29.799462,78.895155 C28.375116,84.74625 30.415308,90.752655 29.568462,91.915155 C28.721616,93.077655 25.410462,92.38062 25.487616,91.605465 C25.56477,90.83031 26.411616,89.28 24.794616,87.962655 C23.177616,86.64531 19.416936,84.822975 16.863462,83.002965 C14.309988,81.182955 14.553462,78.352965 15.862308,77.34531 C17.171154,76.337655 18.682818,77.606175 19.250154,78.27531 C20.366808,79.592655 22.946154,87.59484 26.026308,85.48281 C27.986574,84.138495 24.846822,77.554095 22.638462,74.55531 C19.327308,70.05969 11.896962,68.355 7.700616,62.69781 C4.74243,58.70997 6.480474,54.2376 8.47077,53.475465 C11.204424,52.42875 13.70985,54.920685 14.255934,57.43773 C14.98728,60.80805 16.462446,66.16485 20.405616,63.163275 C24.98727,59.67531 18.08961,53.10672 14.70777,49.368585 C8.432424,42.431715 5.429424,31.54281 10.857924,29.838585 C13.274646,29.079705 15.28527,32.47281 15.86277,36.348585 C16.52574,40.795845 19.775448,55.0281 22.638924,53.398275 C24.40977,52.390155 20.48277,48.98124 20.328924,46.113585 C20.175078,43.24593 20.559924,39.13812 19.173924,35.495775 C17.787924,31.85343 14.148288,22.21398 16.09377,16.50843 C17.864154,11.314845 21.482076,12.11604 22.253154,12.63312 Z",
                              id: "Path",
                              fill: "url(#linearGradient-132)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M60.435606,70.360545 C62.023962,71.11617 61.475106,73.52859 58.567278,75.67038 C55.816068,77.696385 51.870588,77.7759 51.773106,76.71198 C51.676086,75.647595 53.890452,75.583425 55.700106,73.848045 C57.50976,72.111735 58.321032,69.354285 60.435606,70.360545 Z",
                              id: "Path",
                              fill: "url(#linearGradient-133)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "monitor",
                            transform: "translate(193.000000, 138.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M88.34163,0.241266667 L86.179845,0.248733333 L86.179845,54.9108 L89.899845,54.9108 C91.44039,54.9108 92.689845,53.6573333 92.689845,52.1108 L92.689845,4.025 C92.689845,2.1 91.48875,0.241266667 88.34163,0.241266667 Z",
                              id: "Path",
                              fill: "#9180E6",
                              "fill-rule": "nonzero"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M52.3125,68.0166667 C58.70625,62.3004667 55.335,54.9112667 54.405,53.9 L39.69891,53.9 C40.62891,54.9112667 44.00016,62.3004667 37.60641,68.0166667 L52.3125,68.0166667 Z",
                              id: "Path",
                              fill: "url(#linearGradient-134)",
                              "fill-rule": "nonzero"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M52.88445,68.8538667 L51.693585,67.3199333 C53.879085,65.366 55.05321,63.0219333 55.182945,60.3535333 C55.32942,57.3398 54.07206,54.915 53.720985,54.5332667 L55.08762,53.2672 C55.85022,54.096 57.205695,57.0523333 57.040155,60.4445333 C56.8881,63.5870667 55.421025,66.5868 52.88445,68.8538667 Z",
                              id: "Path",
                              fill: "#9180E6",
                              "fill-rule": "nonzero"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M52.87422,68.8403333 C52.87422,68.8403333 52.515705,67.375 52.180905,66.8462667 L26.87421,66.8462667 C25.333665,66.8462667 24.08421,68.1002 24.08421,69.6462667 L24.08421,69.8016667 L52.87422,69.8016667 L52.87422,68.8403333 Z",
                              id: "Path",
                              fill: "#9180E6",
                              "fill-rule": "nonzero"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M0.154845,52.1112667 C0.154845,53.6578 1.4043,54.9112667 2.944845,54.9112667 L88.039845,54.9112667 C89.58039,54.9112667 90.829845,53.6578 90.829845,52.1112667 L90.829845,2.9554 C90.829845,1.40933333 89.58039,0.1554 88.039845,0.1554 L2.944845,3.6554 C1.4043,3.6554 0.154845,4.90933333 0.154845,6.4554 L0.154845,52.1112667 L0.154845,52.1112667 Z",
                              id: "Path",
                              fill: "url(#linearGradient-135)",
                              "fill-rule": "nonzero"
                            }
                          }),
                          _vm._v(" "),
                          _c("polygon", {
                            attrs: {
                              id: "Path",
                              fill: "url(#linearGradient-136)",
                              "fill-rule": "nonzero",
                              points:
                                "3.72 48.0666667 85.870155 46.6666667 85.870155 4.82206667 3.72 8.32206667"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M81.1239,11.7082 C81.15738,12.6238 80.352465,13.3970667 79.32621,13.4348667 L33.32748,15.1923333 C32.301225,15.2306 31.44144,14.5184667 31.40796,13.6028667 L31.36983,12.5664 C31.33635,11.6508 32.141265,10.8775333 33.167985,10.8392667 L79.16625,9.0818 C80.19297,9.044 81.05229,9.75566667 81.08577,10.6712667 L81.1239,11.7082 Z",
                              id: "Path",
                              fill: "url(#linearGradient-137)",
                              "fill-rule": "nonzero"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "text",
                            {
                              attrs: {
                                id: "https://tahi26.com",
                                transform:
                                  "translate(54.250000, 13.546262) rotate(-2.000000) translate(-54.250000, -13.546262) ",
                                "font-family":
                                  "BanglaSangamMN, Bangla Sangam MN",
                                "font-size": "3.01",
                                "font-weight": "normal",
                                fill: "#FFFFFF"
                              }
                            },
                            [
                              _c(
                                "tspan",
                                { attrs: { x: "42.8287549", y: "12.6295954" } },
                                [_vm._v("https://tahi26.com")]
                              )
                            ]
                          ),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M66.84375,38.85 C66.84375,39.3652 66.42711,39.7833333 65.91375,39.7833333 L25.11,40.4833333 C24.59664,40.4833333 24.18,40.0652 24.18,39.55 L24.18,21.1166667 C24.18,20.6014667 24.59664,20.1833333 25.11,20.1833333 L65.91375,19.4833333 C66.42711,19.4833333 66.84375,19.9014667 66.84375,20.4166667 L66.84375,38.85 Z",
                              id: "Path",
                              fill: "#FF9BBB",
                              "fill-rule": "nonzero"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "#FBBB6C",
                              "fill-rule": "nonzero",
                              cx: "11.008875",
                              cy: "13.5664667",
                              rx: "2.170155",
                              ry: "2.17793333"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "#5265F9",
                              "fill-rule": "nonzero",
                              cx: "18.307515",
                              cy: "13.4031333",
                              rx: "2.170155",
                              ry: "2.17793333"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "#EA4D81",
                              "fill-rule": "nonzero",
                              cx: "25.606155",
                              cy: "13.2398",
                              rx: "2.170155",
                              ry: "2.17793333"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "robot_arm",
                            transform: "translate(181.000000, 138.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M73.8217241,25.0108262 C67.3836207,24.9175862 44.6896552,25.4917241 37.0086207,24.5731034 C29.3275862,23.6544828 20.4925345,20.4131297 17.3405172,17.7982759 C17.1058966,17.6039876 16.9099138,17.4175076 16.7381379,17.2342428 C17.3018793,19.214789 18.0969828,21.0134483 17.5346379,23.8841379 C17.0872759,26.1682883 14.754569,29.4229614 11.5639138,30.789869 C12.9306724,31.4136124 14.3826207,32.02128 15.8275862,32.5343297 C21.6465517,34.6012262 33.2882069,35.6727972 41.0432586,35.6727972 C48.7983103,35.6727972 73.9399655,35.6727972 73.9399655,35.6727972 L73.8217241,25.0108262 Z",
                              id: "Path",
                              fill: "url(#linearGradient-138)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M73.8217241,25.0108262 C71.8991379,24.9828083 68.5218103,25.0145007 64.5332586,25.0484897 L64.5332586,25.0484897 C65.5215517,25.8936207 68.2564655,30.1803641 64.8232759,35.6732566 C70.0319483,35.6732566 73.9399655,35.6732566 73.9399655,35.6732566 L73.8217241,25.0108262 Z",
                              id: "Path",
                              fill: "url(#linearGradient-139)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M17.5346379,23.8841379 C18.0969828,21.0134483 17.3018793,19.2143297 16.7381379,17.2342428 C15.6581379,16.0822924 15.6278793,15.0557338 14.3728448,12.9755172 C13.0605517,10.7997641 12.3715862,8.9023531 12.2584655,7.69344828 C12.0257069,5.20536414 13.5712241,3.19817793 13.3771034,1.59059172 C13.1922931,0.0587917241 9.13391379,-0.53325931 7.79741379,1.72241379 C6.59498276,3.75118759 7.20946552,6.78355448 7.39008621,7.86568966 C7.64239655,9.37773931 7.44827586,9.99 7.44827586,9.99 C7.44827586,9.99 3.60775862,14.7553448 3.43318966,18.602069 C3.25862069,22.4487931 4.07327586,26.8696552 4.07327586,26.8696552 C4.07327586,26.8696552 7.42686207,28.9025628 11.5639138,30.789869 C14.754569,29.4229614 17.0872759,26.1682883 17.5346379,23.8841379 Z",
                              id: "Path",
                              fill: "url(#linearGradient-140)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M56.1013448,35.6732566 C54.5958621,31.7369669 50.7441724,28.9365517 46.2277241,28.9365517 C41.7736552,28.9365517 37.9666552,31.6611807 36.4188103,35.5115793 C38.4400862,35.6185986 40.3761724,35.6732566 42.1158103,35.6732566 C45.0532241,35.6732566 50.4858103,35.6732566 56.1013448,35.6732566 Z",
                              id: "Path",
                              fill: "url(#linearGradient-141)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M56.1013448,36.0177393 C55.9602931,36.0177393 55.8276207,35.9327669 55.7745517,35.7949738 C54.284431,31.8991034 50.4481034,29.2810345 46.2277241,29.2810345 C42.0185172,29.2810345 38.2957759,31.7764676 36.7432759,35.6388083 C36.6720517,35.8156428 36.4700172,35.9015338 36.2898621,35.8321779 C36.1106379,35.7619034 36.0231207,35.5616441 36.0938793,35.3848097 C37.7525172,31.2583655 41.7303621,28.592069 46.2277241,28.592069 C50.7367241,28.592069 54.8356034,31.3888097 56.4281379,35.5515393 C56.4961034,35.7292924 56.4048621,35.9281738 56.2242414,35.9952331 C56.1837414,36.0103903 56.1423103,36.0177393 56.1013448,36.0177393 Z",
                              id: "Path",
                              fill: "#AD7CF7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M48.7480345,36.0177393 C48.5981379,36.0177393 48.4598793,35.9222028 48.4137931,35.7733862 C48.0963103,34.7422345 47.1494483,34.0495945 46.0568793,34.0495945 C44.9643103,34.0495945 44.0174483,34.7422345 43.6999655,35.7733862 C43.6436379,35.9552731 43.4471897,36.05724 43.2642414,36.0030414 C43.0798966,35.9474648 42.9756207,35.7550138 43.0314828,35.5731269 C43.4388103,34.2498538 44.6542759,33.360629 46.0564138,33.360629 C47.4585517,33.360629 48.6740172,34.2498538 49.0813448,35.5731269 C49.1372069,35.7550138 49.032931,35.9474648 48.8485862,36.0030414 C48.8155345,36.0126869 48.7815517,36.0177393 48.7480345,36.0177393 Z",
                              id: "Path",
                              fill: "#AD7CF7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M0.989224138,16.5066952 C0.756465517,16.0473848 -0.320275862,12.8322124 1.89139655,11.1956897 C3.99134483,9.64184276 6.67039655,9.39703034 8.14701724,10.4493103 C9.26565517,11.2466731 11.015069,12.741269 11.0565,14.8701724 C11.0858276,16.362931 9.92156897,17.6834483 9.92156897,17.6834483 C9.92156897,17.6834483 10.9983103,18.8317241 10.9401207,20.267069 C10.8702931,21.9890234 9.71813793,23.022931 9.71813793,23.022931 C9.71813793,23.022931 10.3293621,26.0947986 8.5832069,26.7548276 C7.17036207,27.2890055 6.10991379,26.4388221 5.17887931,26.4677586 C4.36236207,26.4930207 4.40705172,27.0676179 4.40705172,27.0676179 C4.40705172,27.0676179 2.46817241,27.1773931 1.86206897,26.1806897 C1.07627586,24.8886497 1.6875,22.9655172 1.6875,22.9655172 C1.6875,22.9655172 0.297465517,21.0699434 0.232758621,19.0613793 C0.174568966,17.2530745 0.989224138,16.5066952 0.989224138,16.5066952 Z",
                              id: "Path",
                              fill: "url(#linearGradient-142)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.5832069,26.7548276 C10.3288966,26.0943393 9.71813793,23.022931 9.71813793,23.022931 C9.71813793,23.022931 10.8702931,21.9890234 10.9401207,20.267069 C10.9983103,18.8317241 9.92156897,17.6834483 9.92156897,17.6834483 C9.92156897,17.6834483 11.0853621,16.362931 11.0565,14.8701724 C11.015069,12.741269 9.26565517,11.2466731 8.14701724,10.4493103 C7.5492931,10.0235297 6.75325862,9.81362483 5.87948276,9.81362483 C6.51910345,10.5673531 7.15732759,12.0293379 6.83798276,13.405891 C6.40272414,15.2789586 4.77201724,15.5219338 4.77201724,15.5219338 C4.77201724,15.5219338 6.11037931,16.5925862 5.994,18.5446552 C5.87762069,20.4967241 4.65517241,21.2812262 4.65517241,21.2812262 C4.65517241,21.2812262 6.28494828,22.2191379 6.11037931,23.8841379 C5.93581034,25.5491379 4.70498276,26.5775338 4.70498276,26.5775338 L4.70498276,26.5779931 C4.8167069,26.5178234 4.968,26.4737297 5.17934483,26.4672993 C6.10991379,26.4392814 7.16989655,27.2890055 8.5832069,26.7548276 Z",
                              id: "Path",
                              fill: "url(#linearGradient-143)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M12.257069,7.66405241 C12.0392069,5.18974759 13.5702931,3.1922069 13.3771034,1.59105103 C13.1922931,0.0592510345 9.13391379,-0.5328 7.79741379,1.7228731 C6.6042931,3.73557103 7.19968966,6.73303034 7.38496552,7.83767172 C8.13817241,8.41180966 9.24982759,8.88995172 10.2800172,8.91888828 C11.0495172,8.94001655 11.7878276,8.23313793 12.257069,7.66405241 Z",
                              id: "Path",
                              fill: "url(#linearGradient-144)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.1872759,27.6008772 C25.4814828,24.9102372 24.597931,22.4400662 23.7506897,21.1806372 C20.9571207,20.08656 18.6542069,18.8882193 17.3400517,17.7982759 C17.105431,17.6039876 16.9094483,17.4175076 16.7376724,17.2342428 C17.3014138,19.214789 18.0965172,21.0134483 17.5341724,23.8841379 C17.0868103,26.1682883 14.7541034,29.4229614 11.5634483,30.789869 C12.9302069,31.4136124 14.3821552,32.02128 15.8271207,32.5343297 C17.4070862,33.0956069 19.4176552,33.5824759 21.6609828,33.9953959 C22.2601034,33.4547876 24.8195172,30.963029 25.1872759,27.6008772 Z",
                              id: "Path",
                              fill: "url(#linearGradient-145)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M64.8228103,36.0177393 C64.760431,36.0177393 64.6971207,36.0012041 64.6398621,35.9662966 C64.4755345,35.8666262 64.4247931,35.6544248 64.5258103,35.4922883 C67.8719483,30.1385669 65.1561207,26.0369255 64.3042241,25.3089186 C64.1585172,25.1844455 64.1426897,24.9667324 64.2693103,24.8229683 C64.395931,24.6792041 64.6165862,24.6635876 64.7618276,24.7880607 C65.7026379,25.5927724 68.7229138,30.0903393 65.1207414,35.8537655 C65.0546379,35.9594069 64.9401207,36.0177393 64.8228103,36.0177393 Z",
                              id: "Path",
                              fill: "#AD7CF7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M10.1831897,18.0711062 C10.0826379,18.0711062 9.98301724,18.0283903 9.91412069,17.9461738 C9.12041379,16.9981572 6.49675862,15.9417434 5.33203448,15.8057876 C4.27856897,15.684989 2.90855172,16.0156924 1.13493103,16.8199448 C0.959896552,16.8989462 0.752741379,16.8240786 0.671741379,16.6509186 C0.591206897,16.4782179 0.668017241,16.2733655 0.843051724,16.1939048 C2.73631034,15.3345352 4.22922414,14.9840814 5.4135,15.1218745 C6.74394828,15.2766621 9.531,16.4074841 10.4517931,17.5075324 C10.5746897,17.6540524 10.5537414,17.8713062 10.4047759,17.9925641 C10.3405345,18.0453848 10.2618621,18.0711062 10.1831897,18.0711062 Z",
                              id: "Path",
                              fill: "#AD7CF7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M9.87781034,23.5538938 C9.73536207,23.5538938 9.60175862,23.4675434 9.55008621,23.3283724 C9.30289655,22.6642097 7.30489655,21.6624538 5.60156897,21.5485448 C3.84936207,21.4337172 1.92025862,23.31 1.90117241,23.3288317 C1.76524138,23.4634097 1.54412069,23.463869 1.40725862,23.329291 C1.27086207,23.1947131 1.27086207,22.9765407 1.40725862,22.8419628 C1.49477586,22.7556124 3.57936207,20.7217862 5.64858621,20.8609572 C7.37937931,20.9767034 9.7982069,21.9968317 10.2055345,23.0904497 C10.2721034,23.2691214 10.179,23.4670841 9.99837931,23.5327655 C9.95881034,23.5474634 9.91784483,23.5538938 9.87781034,23.5538938 Z",
                              id: "Path",
                              fill: "#AD7CF7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M16.4080862,33.0753972 C16.281931,33.0753972 16.1599655,33.0078786 16.0980517,32.8893766 C16.0096034,32.7208097 16.0761724,32.5127421 16.2470172,32.4250138 C16.2823966,32.4066414 19.8468621,30.5349517 20.8998621,26.2711738 C21.4892069,23.8836786 20.9850517,21.3634428 20.2234655,19.9248828 C20.1345517,19.7563159 20.2006552,19.5482483 20.3715,19.4600607 C20.5428103,19.3723324 20.7532241,19.4375545 20.8426034,19.6061214 C21.6041897,21.0451407 22.2540517,23.6971986 21.5781207,26.4346883 C20.4478448,31.0126345 16.725569,32.9568952 16.5677586,33.0372745 C16.5165517,33.0629959 16.4616207,33.0753972 16.4080862,33.0753972 Z",
                              id: "Path",
                              fill: "#AD7CF7"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "completed",
                            transform: "translate(249.000000, 162.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("circle", {
                            attrs: {
                              id: "Oval",
                              fill: "url(#linearGradient-146)",
                              cx: "9.006",
                              cy: "9.136416",
                              r: "8.967696"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M14.28192,4.259496 C13.756608,3.89424 13.03476,4.023744 12.669048,4.549056 L8.3904,10.699128 L3.644808,6.632064 C3.314208,6.348432 2.81808,6.333384 2.46924,6.618384 C2.077992,6.938496 2.02008,7.515336 2.340192,7.90704 L7.532208,14.255016 C7.65168,14.399568 7.802616,14.529528 7.976808,14.625744 C8.718264,15.036144 9.652152,14.768016 10.062552,14.027016 L10.090824,13.9764 L14.634408,5.772048 C14.91576,5.259504 14.773032,4.601496 14.28192,4.259496 Z",
                              id: "Path",
                              fill: "url(#linearGradient-147)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "cup",
                            transform: "translate(280.000000, 181.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M19.851156,9.308052 C16.728192,9.308052 14.196312,11.542284 14.196312,14.300208 C14.196312,17.058132 16.728192,19.292364 19.851156,19.292364 C22.97412,19.292364 25.506,17.058132 25.506,14.300208 C25.506,11.542284 22.97412,9.308052 19.851156,9.308052 Z M19.529172,16.484364 C18.323136,16.484364 17.345016,15.506712 17.345016,14.300208 C17.345016,13.093704 18.323136,12.116052 19.529172,12.116052 C20.735208,12.116052 21.713328,13.093704 21.713328,14.300208 C21.713328,15.506712 20.735676,16.484364 19.529172,16.484364 Z",
                              id: "Shape",
                              fill: "url(#linearGradient-148)"
                            }
                          }),
                          _vm._v(" "),
                          _c("polygon", {
                            attrs: {
                              id: "Path",
                              fill: "url(#linearGradient-149)",
                              points:
                                "16.711812 25.506 3.822156 25.506 0.312156 5.358132 20.221812 5.358132"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "#FF9BBB",
                              cx: "10.278216",
                              cy: "5.358132",
                              rx: "9.96606",
                              ry: "5.327712"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "url(#linearGradient-150)",
                              cx: "10.278216",
                              cy: "4.9725",
                              rx: "7.339644",
                              ry: "3.373344"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "vapour",
                            transform: "translate(273.000000, 162.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M19.414215,24.374844 C19.43328,23.672844 17.243595,23.321844 17.747655,21.332844 C18.251715,19.343844 20.537655,18.095688 23.831715,17.316 C26.51244,16.681392 29.84835,15.71544 29.953905,12.908844 C30.03156,10.841688 28.17156,10.490688 27.00906,10.256688 C25.84656,10.022688 24.490155,9.320688 24.838905,8.111844 C25.187655,6.903 26.510115,4.713696 24.766365,3.466008 C22.55901,1.886508 16.15875,2.027844 14.376405,6.278688 C12.59406,10.529532 16.778595,11.192688 17.631405,11.426688 C18.484215,11.660688 20.319105,12.154428 19.530465,13.844844 C18.63906,15.755688 13.7082,18.056844 13.64031,21.294 C13.562655,24.9795 19.367715,26.084916 19.414215,24.374844 Z",
                              id: "Path",
                              fill: "url(#linearGradient-151)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M7.13031,0.351 C8.54484,0.5265 9.145155,1.969344 8.835465,3.782844 C8.48346,5.84298 7.595775,7.02 8.719215,8.501688 C9.842655,9.983376 11.780775,10.646532 11.160465,11.621844 C10.540155,12.597156 5.50281,11.7 3.681405,8.033688 C1.84419,4.336488 3.899955,-0.049608 7.13031,0.351 Z",
                              id: "Path",
                              fill: "url(#linearGradient-152)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M2.683515,13.338 C3.657225,13.820508 4.44168,15.5025 5.473515,15.707484 C6.19566,15.850692 7.20471,15.941484 7.188435,16.789968 C7.17402,17.53596 5.88039,17.959968 3.744645,17.798976 C1.67586,17.643132 -0.175305,15.875964 0.50406,14.230476 C0.96906,13.104 2.25711,13.126464 2.683515,13.338 Z",
                              id: "Path",
                              fill: "url(#linearGradient-153)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "table",
                            transform: "translate(205.000000, 206.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M111.850585,2.39985 L53.0846264,2.39985 L53.0846264,7.7247 C53.0846264,11.4525 56.18925,14.4747 60.0187173,14.4747 L112.111769,14.4747 C112.24028,12.8511 112.317018,11.1789 112.332273,9.44955 C112.353075,7.0542 112.180647,4.7061 111.850585,2.39985 Z",
                              id: "Path",
                              fill: "url(#linearGradient-154)"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "#5265F9",
                              cx: "76.7372727",
                              cy: "9.45",
                              rx: "2.15742682",
                              ry: "2.10015"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M99.6969723,14.81265 C99.5055914,14.81265 99.3502677,14.66145 99.3502677,14.47515 L99.3502677,4.4775 C99.3502677,4.2912 99.5055914,4.14 99.6969723,4.14 C99.8883532,4.14 100.043677,4.2912 100.043677,4.4775 L100.043677,14.47515 C100.043677,14.66145 99.8883532,14.81265 99.6969723,14.81265 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M0.134983636,0.225 L0.134983636,4.47795 L112.100212,4.47795 C111.959681,3.04335 111.754432,1.62585 111.488163,0.225 L0.134983636,0.225 Z",
                              id: "Path",
                              fill: "url(#linearGradient-155)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "armchair",
                            transform: "translate(86.000000, 194.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M61.321875,69.9733784 C61.42464,74.669653 61.225155,106.669806 60.837345,111.230656 C62.31558,113.074197 64.94469,111.076216 64.94469,111.076216 C64.94469,111.076216 67.075785,102.38027 68.044845,90.5922778 C68.88324,80.3941362 69.12969,70.2632432 69.12969,70.2632432 L61.321875,69.9733784 Z",
                              id: "Path",
                              fill: "url(#linearGradient-156)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M62.829405,92.0573708 C62.03193,92.0573708 61.3986,92.0040357 61.12983,91.9289027 C60.882915,91.8593351 60.738765,91.6033265 60.808515,91.3565935 C60.878265,91.1103243 61.135875,90.9670151 61.382325,91.0361189 C62.079825,91.233227 66.313185,91.2105016 67.78305,90.2096562 C67.995555,90.066347 68.284785,90.1201459 68.4294,90.3316314 C68.57448,90.5431168 68.51961,90.8315903 68.30757,90.9762908 C67.090665,91.8036811 64.569435,92.0573708 62.829405,92.0573708 Z",
                              id: "Path",
                              fill: "#7B7BEF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M21.39,0 C16.95855,0.599208649 2.04042,5.50047568 0.246915,15.7041827 C0.18972,16.0292951 0.76725,16.8390616 0.871875,17.16 C4.475625,28.2328378 20.750625,43.1318919 26.97,44.1754054 C27.24435,44.2217838 27.63495,44.5111849 27.91023,44.4045146 C32.197065,42.7492703 36.661065,34.536587 40.33875,31.8851351 C41.93742,30.7326324 21.39,0 21.39,0 Z",
                              id: "Path",
                              fill: "url(#linearGradient-157)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M1.96881,11.2982368 C0.964875,12.9131319 0.29202,14.7089027 0.11625,16.6962162 C-0.6975,25.8949038 20.646,45.7916919 27.08625,44.6391892 C27.813045,44.5093297 28.546815,44.1638108 29.28291,43.6666346 C15.96996,38.4764303 3.88554,19.1037178 1.96881,11.2982368 Z",
                              id: "Path",
                              fill: "url(#linearGradient-158)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M60.10125,52.1756757 C64.28625,52.1673276 85.45491,52.5573697 89.0475,54.7264865 C91.992345,56.5046335 92.62893,59.4533708 90.87309,62.2360735 C89.11725,65.0187762 80.79375,70.2052703 64.05375,70.3212162 C47.31375,70.4371622 36.61875,66.9008108 36.5025,62.8427027 C36.38625,58.7845946 38.2788,52.7150562 48.5925,51.7118919 C54.947655,51.0936681 57.77625,52.1803135 60.10125,52.1756757 Z",
                              id: "Path",
                              fill: "url(#linearGradient-159)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M64.4025,72.0024324 C81.1425,71.8864865 89.116785,65.0187762 90.87309,62.2360735 C91.64313,61.0153946 91.95282,59.7627146 91.8096,58.5911968 C87.30003,61.7273027 77.282535,64.9250919 63.937965,65.4709654 C50.830545,66.0070995 39.88491,64.0378735 36.5025,62.8051362 C36.5025,62.8171946 36.5025,62.8306443 36.5025,62.8427027 C36.61875,66.9008108 47.6625,72.1183784 64.4025,72.0024324 Z",
                              id: "Path",
                              fill: "url(#linearGradient-160)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.32179,134.749132 C27.589845,131.096371 35.514375,117.801081 51.8475,111.926796 C67.249695,106.387362 79.411305,111.053955 82.563075,113.422962 C85.714845,115.79197 80.5287,120.023997 77.88192,117.890128 C75.039375,115.598572 67.599375,113.337626 59.000595,115.713126 C47.70156,118.834391 37.49109,128.23668 37.42413,135.3066 C29.5275,140.140155 26.32179,134.749132 26.32179,134.749132 Z",
                              id: "Path",
                              fill: "url(#linearGradient-161)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M58.884345,114.102869 C48.93567,116.695884 35.54739,123.911896 33.470235,137.049036 C34.629945,136.758243 35.9445,136.211442 37.423665,135.306136 C37.490625,128.236216 47.701095,118.833928 59.00013,115.712663 C67.599375,113.337162 75.039375,115.598108 77.881455,117.889664 C78.90864,118.717982 80.317125,118.584876 81.47358,117.976855 C76.518075,112.700387 68.53449,111.588234 58.884345,114.102869 Z",
                              id: "Path",
                              fill: "#665EDB"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "url(#linearGradient-162)",
                              cx: "31.774845",
                              cy: "136.970656",
                              rx: "5.890155",
                              ry: "5.87474919"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "url(#linearGradient-163)",
                              cx: "82.563075",
                              cy: "118.102077",
                              rx: "4.69185",
                              ry: "4.67957838"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.774845,138.787297 C30.770445,138.787297 29.95344,137.972429 29.95344,136.970656 C29.95344,135.968883 30.770445,135.154015 31.774845,135.154015 C32.779245,135.154015 33.59625,135.968883 33.59625,136.970656 C33.59625,137.972429 32.779245,138.787297 31.774845,138.787297 Z M31.774845,135.849691 C31.155,135.849691 30.65094,136.352432 30.65094,136.970656 C30.65094,137.58888 31.155,138.091622 31.774845,138.091622 C32.39469,138.091622 32.89875,137.58888 32.89875,136.970656 C32.89875,136.352432 32.39469,135.849691 31.774845,135.849691 Z",
                              id: "Shape",
                              fill: "#7B7BEF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M82.563075,119.918718 C81.558675,119.918718 80.74167,119.10385 80.74167,118.102077 C80.74167,117.100304 81.558675,116.285436 82.563075,116.285436 C83.567475,116.285436 84.38448,117.100304 84.38448,118.102077 C84.38448,119.10385 83.567475,119.918718 82.563075,119.918718 Z M82.563075,116.981111 C81.94323,116.981111 81.43917,117.483853 81.43917,118.102077 C81.43917,118.720301 81.94323,119.223042 82.563075,119.223042 C83.18292,119.223042 83.68698,118.720301 83.68698,118.102077 C83.68698,117.483853 83.18292,116.981111 82.563075,116.981111 Z",
                              id: "Shape",
                              fill: "#7B7BEF"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "head",
                            transform: "translate(101.000000, 82.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M21.7143106,72.7455032 C21.9351388,75.7053095 21.1198447,88.0454179 16.8104329,94.0801547 C18.3380612,97.5134558 26.5641459,97.8003379 29.3505882,97.5617337 C35.6786682,97.02 40.1436847,93.5384211 40.1436847,93.5384211 C40.1436847,93.5384211 37.7364706,80.8501547 35.0189788,76.5947368 C32.9169176,75.9285947 30.0885459,75.6277863 27.4483906,74.7764242 C24.8082353,73.9250621 21.7143106,72.7455032 21.7143106,72.7455032 Z",
                              id: "Path",
                              fill: "url(#linearGradient-164)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M38.7460376,58.1808979 C35.4033318,52.5801979 30.4542635,48.41298 29.6613318,47.5815789 C29.6613318,47.5815789 15.2772141,44.8705895 11.3367812,55.7827863 C9.04603765,62.1271516 15.9178024,69.1673684 15.9178024,69.1673684 C15.9178024,69.1673684 16.5462776,69.4055084 17.5018024,69.9026779 C16.8025129,70.4917611 16.3575953,71.3709758 16.3575953,72.3546379 C16.3575953,74.1279221 17.8004329,75.5655821 19.5801035,75.5655821 C20.9418776,75.5655821 22.1037882,74.72304 22.5752612,73.5337326 C22.6297694,73.5866526 22.6852094,73.6358589 22.7392518,73.6897074 C25.0798447,76.0149379 34.0308424,80.7187832 39.3004376,75.8998137 C43.8707435,71.7205263 41.6205318,62.9980105 38.7460376,58.1808979 Z",
                              id: "Path",
                              fill: "url(#linearGradient-165)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M37.5813318,34.4676316 C35.8333412,33.3061768 32.1072141,35.3960526 30.1272141,37.4074768 C28.1472141,39.4189011 25.4292565,40.9275853 24.6917647,40.1152168 C23.9542729,39.3028484 25.8424941,38.4505579 24.9633741,37.3299537 C23.9929412,36.0919042 18.6352941,37.6395821 16.1894118,41.8174768 C13.7435294,45.9953716 11.8026635,51.6044274 9.74486118,52.2236842 C7.68705882,52.8429411 8.26941176,49.6319968 6.13427294,49.5544737 C3.99913412,49.4769505 1.28117647,52.2236842 0.621487059,54.3901547 C-0.359195294,57.6099189 0.582818824,59.9221516 2.09693647,60.0382042 C4.82234824,60.2470989 6.40634824,56.0538853 8.30854588,57.0208358 C9.60835765,57.6814074 8.73576,60.4634211 8.03693647,62.8619968 C7.33811294,65.2605726 8.23120941,68.4710526 11.0265035,70.6760526 C13.1173835,72.3253926 15.1174165,72.6703011 16.3752988,72.6874768 C16.3641176,72.5779232 16.3580612,72.4665126 16.3580612,72.3541737 C16.3580612,70.6509853 17.6895529,69.2616032 19.3718541,69.1534421 C19.5759106,68.3396811 19.6243624,67.4878547 19.3345835,66.7297989 C18.4028188,64.2926937 11.8571718,58.9742337 13.08384,56.2075389 C13.8213318,54.5442726 15.8013318,54.5052789 19.3732518,54.3892263 C22.9451718,54.2731737 25.1427388,54.5767674 25.5075247,53.1901705 C25.9347388,51.5654337 22.7276047,52.1610158 22.9451718,51.2947989 C23.2945835,49.9021674 29.1810071,51.0097737 34.2041506,45.7242726 C39.0563153,40.6184211 39.3283906,35.6281579 37.5813318,34.4676316 Z",
                              id: "Path",
                              fill: "url(#linearGradient-166)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.8647059,69.0127863 C30.8647059,69.0127863 33.27192,68.8192105 34.5917647,68.6646284 C35.9116094,68.5100463 39.21192,68.2779411 39.21192,68.2779411 C39.21192,68.2779411 38.0472141,71.9141021 35.3683906,72.2237305 C32.6895671,72.5333589 30.8647059,69.0127863 30.8647059,69.0127863 Z",
                              id: "Path",
                              fill: "#FFFFFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.3367624,63.5299958 C24.2552329,63.5299958 24.1764988,63.4872884 24.1336376,63.4116221 C23.5512847,62.3810747 23.6821976,61.1680926 24.4588235,60.3937895 C25.1567153,59.6984021 26.2370965,59.5178242 27.2121882,59.9346853 C27.3305224,59.9852842 27.3854965,60.1217621 27.3347153,60.2392074 C27.2839341,60.3571168 27.1460329,60.4118937 27.0290965,60.3612947 C26.2301082,60.0196358 25.3505224,60.1616842 24.7882024,60.7219863 C24.1606588,61.3472779 24.06096,62.3369747 24.5394212,63.1841589 C24.6027812,63.2960337 24.5627153,63.4371537 24.4509035,63.5002863 C24.4145647,63.5207116 24.3754306,63.5299958 24.3367624,63.5299958 Z",
                              id: "Path",
                              fill: "#212F66"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.3995718,56.5751937 C33.2952141,56.5751937 33.20064,56.5050979 33.1740847,56.3997221 C32.9812094,55.6379526 33.1428706,54.9295674 33.6171388,54.4570011 C34.1752659,53.9008768 35.0725553,53.7811105 35.9577318,54.1450516 C36.0765318,54.1937937 36.1333694,54.3293432 36.0844518,54.4481811 C36.0355341,54.5670189 35.8999624,54.6227242 35.7802306,54.5744463 C35.0716235,54.2833863 34.3690729,54.3646232 33.9460518,54.7856621 C33.5905835,55.1398547 33.4736471,55.6871589 33.6255247,56.2869189 C33.6567388,56.4113274 33.5812659,56.5375926 33.4564094,56.5686947 C33.4377741,56.5728726 33.4186729,56.5751937 33.3995718,56.5751937 Z",
                              id: "Path",
                              fill: "#212F66"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0316094,1.79603053 C24.1285129,2.16461368 24.1667153,2.40228947 24.2053835,2.65760526 C24.2440518,2.90642211 24.2664141,3.14549053 24.2892424,3.38270211 C24.3279106,3.85666105 24.3474776,4.32133579 24.3479435,4.78601053 C24.3465459,5.71443158 24.3060141,6.63635368 24.2626871,7.55688316 C24.1723059,9.39747789 23.9994635,11.2343589 23.8820612,13.0675263 C23.7320471,14.9020863 23.6607671,16.73154 23.6402682,18.5577442 C23.63328,19.0145274 23.6360753,19.4708463 23.6519153,19.9262368 C23.6579718,20.3820916 23.6826635,20.8370179 23.7096847,21.2919442 C23.7353082,21.7464063 23.7767718,22.2008684 23.8261553,22.6525453 C23.8778682,23.0954021 23.9375012,23.57586 24.0348706,23.9657968 C24.1713741,24.5121726 23.8373365,25.0655116 23.2889929,25.2015253 C22.7406494,25.3375389 22.1848518,25.0047 22.0483482,24.45786 C22.0245882,24.3622326 22.0152706,24.2661411 22.0189976,24.1723705 L22.0199294,24.1561232 C22.0422918,23.6366716 22.0632565,23.2058842 22.0674494,22.73796 C22.0721082,22.2788558 22.0716424,21.8216084 22.0562682,21.3652895 C22.0422918,20.9089705 22.0269176,20.4526516 21.9933741,19.9972611 C21.9696141,19.5418705 21.9332753,19.08648 21.8871529,18.6320179 C21.7101176,16.8132411 21.4841647,14.9972495 21.1720235,13.1868284 L20.2691435,7.76438526 C20.1298447,6.86335263 19.9882165,5.96371263 19.8703482,5.0715 C19.8121129,4.62585789 19.7697176,4.18068 19.7352424,3.74571474 C19.7212659,3.528 19.7044941,3.31260632 19.6975059,3.10788947 C19.6881882,2.91013579 19.6807341,2.69334947 19.6933129,2.61350526 L19.7864894,2.01374526 C19.9700471,0.833257895 21.0793129,0.0241389474 22.2645176,0.207037895 C23.1441035,0.343515789 23.8182353,0.989696842 24.0316094,1.79603053 Z",
                              id: "Path",
                              fill: "url(#linearGradient-167)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.58155294,12.0954695 C8.65376471,12.4357358 8.84990118,13.0336389 9.04137882,13.5939411 L9.67032,15.3514421 C10.1017271,16.5435347 10.5685412,17.7425905 10.9524282,18.9866747 L11.5673929,20.84166 C11.7872894,21.4539537 12.0234918,22.0602126 12.2871812,22.6502242 C12.5462118,23.2430211 12.8201506,23.8283905 13.1229741,24.3896211 C13.2743859,24.66954 13.4230024,24.9508516 13.5869929,25.2126663 C13.7500518,25.4689105 13.92336,25.7376884 14.0836235,25.9108389 L14.0901459,25.9178021 C14.3971624,26.2492484 14.3766635,26.7668432 14.0435576,27.0727579 C13.7104518,27.3791368 13.1914588,27.3582474 12.8844424,27.0263368 C12.8802494,27.0221589 12.8737271,27.0147316 12.87,27.0100895 C12.5923341,26.6939621 12.3934024,26.4200779 12.1912094,26.1322674 C11.9922776,25.8481705 11.7966071,25.5710368 11.61072,25.2887968 L10.5089082,23.6051053 C10.1497129,23.0420179 9.77980235,22.4849653 9.40709647,21.9279126 C9.02786824,21.3745737 8.64817412,20.8193779 8.28478588,20.2544337 C7.53844235,19.1324368 6.92114824,17.9435937 6.34997647,16.7134358 C6.06578824,16.0965 5.80163294,15.4661021 5.56543059,14.8022811 C5.44709647,14.4694421 5.33668235,14.1277832 5.23977882,13.7605926 C5.18899765,13.5776937 5.14613647,13.3864389 5.10513882,13.1794011 C5.08417412,13.0763463 5.06647059,12.9691137 5.05016471,12.8498116 L5.02360941,12.6325611 L5.01568941,12.5090811 C4.95419294,11.5226337 5.70659294,10.6722 6.69705882,10.6109242 C7.59854118,10.5547547 8.38588235,11.1716905 8.56664471,12.0267663 L8.58155294,12.0954695 Z",
                              id: "Path",
                              fill: "url(#linearGradient-168)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M36.9272329,7.23797053 L36.5549929,9.29720842 C36.4189553,9.99398842 36.2759294,10.6926253 36.1179953,11.3907979 C35.7956047,12.7862147 35.3842306,14.1746684 34.8195812,15.5436253 C34.6765553,15.8852842 34.5186212,16.2241579 34.3439153,16.5593179 C34.2591247,16.7268979 34.1626871,16.8935495 34.0699765,17.05788 L33.8072188,17.5002726 C33.4601365,18.0912126 33.1018729,18.6747253 32.7771529,19.2689147 C32.4487059,19.8603189 32.13936,20.4582221 31.8924424,21.0570537 C31.6464565,21.6452084 31.4573082,22.2737495 31.4847953,22.7314611 C31.5178729,23.2875853 31.0925224,23.7647937 30.5348612,23.7982168 C29.9767341,23.8311758 29.4973412,23.4073516 29.4642635,22.8512274 C29.4605365,22.7839168 29.4628659,22.7179989 29.4717176,22.6539379 L29.4787059,22.6061242 C29.6100847,21.6902368 29.9240894,21.0166674 30.2026871,20.3440263 C30.4943294,19.6811337 30.79296,19.0479505 31.0846024,18.4152316 L31.9525412,16.5310011 L32.1687106,16.0630768 C32.2302071,15.9210284 32.2931012,15.7836221 32.3490071,15.6383242 C32.46408,15.3514421 32.5675059,15.05574 32.6592847,14.7526105 C33.0389788,13.5438063 33.2313882,12.2440168 33.3613694,10.9363358 C33.4969412,9.61797789 33.5081224,8.31447474 33.5081224,6.91998632 C33.5081224,5.97114 34.2805553,5.20194316 35.2328188,5.20194316 C36.1850824,5.20194316 36.9570494,5.97160421 36.9570494,6.92045053 C36.9570494,7.02118421 36.9481976,7.12006105 36.9314259,7.21568842 L36.9272329,7.23797053 Z",
                              id: "Path",
                              fill: "url(#linearGradient-169)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M42.6804141,18.7035063 C42.2797553,19.5465126 41.7318776,20.1049579 41.2096235,20.6309084 C40.6808471,21.1531453 40.1320376,21.6154989 39.6041929,22.0820305 C39.07728,22.5480979 38.5499012,23.0007032 38.0747012,23.4751263 C37.8389647,23.7123379 37.6153412,23.9546558 37.4243294,24.2006874 C37.2370447,24.4443979 37.0870306,24.7057484 37.0516235,24.9127863 L37.0427718,24.9643137 C37.00224,25.2005968 36.7772188,25.3593568 36.5400847,25.3189705 C36.3350965,25.2841547 36.1878776,25.1114684 36.1780941,24.9127863 C36.1529365,24.4077253 36.32112,24.0075758 36.4851106,23.6473484 C36.6565553,23.2871211 36.8601459,22.9654232 37.0711906,22.6571874 C37.4946776,22.0421084 37.9479812,21.4771642 38.4008188,20.9275389 C38.8536565,20.3788421 39.2953129,19.8343232 39.7062212,19.3028021 C40.1101412,18.7708168 40.4930965,18.2392958 40.6822447,17.7950463 C40.9184471,17.2384579 41.5632282,16.9780358 42.1218212,17.2138547 C42.6804141,17.4496737 42.9417741,18.0921411 42.7051059,18.6482653 C42.6995153,18.6612632 42.6939247,18.6737968 42.6883341,18.6863305 L42.6804141,18.7035063 Z",
                              id: "Path",
                              fill: "url(#linearGradient-170)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M38.4110682,52.2807821 C37.3469929,50.7804537 35.7094165,49.8487832 34.1370635,49.8487832 C33.3828,49.8487832 32.6760565,50.0655695 32.0927718,50.4763958 C30.4346965,51.6438853 30.1202259,54.1134853 31.2392753,56.2683505 C30.2418212,56.4433579 29.3878588,57.2227674 28.8544235,57.9111916 C27.9170682,56.8982842 26.57952,56.2590663 25.0910259,56.2590663 C22.2649835,56.2590663 19.96632,58.5499453 19.96632,61.3653821 C19.96632,62.5226589 20.3590588,63.5875579 21.0126918,64.4444905 C19.9337082,65.5748432 17.8223294,68.355 16.9296988,70.3316084 L17.0419765,70.3817432 C17.4202729,69.8994284 17.9327435,69.5289884 18.5244141,69.3242716 C19.5176753,67.6772526 20.9027435,65.9239295 21.6434965,65.1319863 C22.5552282,65.9610663 23.7632612,66.4716979 25.0919576,66.4716979 C27.918,66.4716979 30.2166635,64.1808189 30.2166635,61.3653821 C30.2166635,60.3803274 29.9306118,59.4630474 29.4442306,58.6827095 C29.8705129,58.0764505 30.8227765,57.0496168 31.8183671,57.1749537 C32.8829082,58.5768695 34.4510682,59.4458716 35.9642541,59.4458716 C36.7185176,59.4458716 37.4252612,59.2286211 38.0085459,58.8177947 C39.8604282,57.5128989 40.0411906,54.5804811 38.4110682,52.2807821 Z M25.0910259,65.5428126 C22.7788518,65.5428126 20.8980847,63.6683305 20.8980847,61.3649179 C20.8980847,59.0615053 22.7793176,57.1870232 25.0910259,57.1870232 C27.4027341,57.1870232 29.2839671,59.0615053 29.2839671,61.3649179 C29.2839671,63.6683305 27.4032,65.5428126 25.0910259,65.5428126 Z M37.4699859,58.0588105 C37.0446353,58.3582263 36.5237788,58.5165221 35.9633224,58.5165221 C34.6886682,58.5165221 33.3427341,57.7347916 32.4505694,56.4767811 C31.1162824,54.5953358 31.1973459,52.2431811 32.6304,51.2344516 C33.0613412,50.9308579 33.5682212,50.7772042 34.1365976,50.7772042 C35.4112518,50.7772042 36.7571859,51.5589347 37.6493506,52.8169453 C38.9841035,54.6979263 38.90304,57.0496168 37.4699859,58.0588105 Z",
                              id: "Shape",
                              fill: "url(#linearGradient-171)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.06256,57.8545579 C8.05184471,57.8545579 8.04159529,57.8545579 8.03088,57.8540937 C7.51654588,57.8369179 7.11355765,57.4075232 7.13079529,56.8950347 C7.19415529,55.0066263 7.74855529,52.3225611 8.53356706,51.27948 C8.84291294,50.8695821 9.42666353,50.7864884 9.83803765,51.0937958 C10.2494118,51.4015674 10.3332706,51.9836874 10.0243906,52.3935853 C9.60789176,52.94646 9.05535529,55.1055032 8.99339294,56.9567747 C8.97662118,57.4590505 8.56245176,57.8545579 8.06256,57.8545579 Z",
                              id: "Path",
                              fill: "#FF57BC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8169694,57.1717042 C33.8873506,57.9520421 38.6360894,60.9689463 38.9011765,62.5523684 C39.0954494,63.7128947 35.4848612,64.9119505 35.2127859,64.5252632 C34.9407106,64.1385758 33.9702776,62.0496284 32.7282353,60.2698453 C31.8039247,58.9454526 30.8362871,58.0068189 30.7174871,57.4502305 C30.9066353,57.3490326 31.4181741,57.0881463 31.8169694,57.1717042 Z",
                              id: "Path",
                              fill: "url(#linearGradient-172)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "body",
                            transform: "translate(84.000000, 86.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M10.5656776,41.7050634 C8.84439403,30.0941444 9.90211701,22.9221776 10.0504478,20.405122 C10.2814925,16.4743902 12.7652239,13.1989346 13.8626866,10.2892683 C14.7660716,7.89522146 16.0382042,6.35853659 15.191194,5.7804878 C13.9384693,4.92590049 11.6677612,7.89984585 11.6677612,7.89984585 C11.6677612,7.89984585 12.0337361,0.153992195 10.3392537,0.231219512 C8.89522388,0.296885854 9.81940299,4.79780488 9.01074627,5.02902439 C8.20208955,5.2602439 6.83522866,0.809268293 5.60283582,0.982682927 C4.93557851,1.07655805 4.83253254,2.69740683 4.83253254,2.69740683 C4.83253254,2.69740683 4.47441313,2.39635902 4.10104478,2.71682927 C3.56178627,3.17926829 4.03450388,5.9071961 3.58119403,6.99439024 C3.39081313,6.72525073 3.2461791,6.52963902 2.96522866,6.5897561 C0.798952836,7.05219512 1.17509373,18.2876137 0.847472239,20.8097561 C0.322076418,24.849161 -0.0864107463,32.8562927 0.413570149,42.4828859 C2.46524776,42.7136429 6.28118328,42.8468254 10.5656776,41.7050634 Z",
                              id: "Path",
                              fill: "url(#linearGradient-173)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M83.354486,34.9210829 C82.9141146,30.6819044 82.5504501,27.4956995 82.4829851,26.4357893 C82.2519403,22.8135044 82.0980645,19.8076507 81.7126818,16.4161229 C81.3272991,13.0245951 80.0181994,9.32554537 79.7871546,8.09222049 C79.5561099,6.85889561 79.9863152,5.17977951 79.3925301,3.78552585 C78.8920872,2.61000585 78.2853636,3.0821561 78.2853636,3.0821561 C78.2853636,3.0821561 78.2446997,1.40673951 77.5150603,1.46361951 C76.6486424,1.53113561 75.4934185,6.84918439 74.8963988,6.93566049 C74.5535284,6.9856039 74.9735678,0.866148293 73.9338663,0.750538537 C73.1875916,0.667299512 72.6340084,1.70455024 71.9122245,5.05723317 C71.2893278,7.95025171 72.2047272,13.06344 71.7389409,13.06344 C71.2190901,13.06344 70.9302842,10.7512449 70.4104334,9.24831805 C69.8905827,7.74539122 69.2838591,6.27113561 68.504314,6.35807415 C67.7289278,6.44455024 67.5976943,8.27442146 67.9442615,10.875641 C68.2196669,12.9413561 71.5078961,23.3527083 72.8941648,28.0927083 C73.4343475,29.9401522 73.7809146,32.8780273 73.9555845,36.2117502 C75.8760287,36.4845893 79.3398519,36.5502556 83.354486,34.9210829 Z",
                              id: "Path",
                              fill: "url(#linearGradient-174)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M3.51557731,6.69611707 C3.71335164,6.97034341 3.85151642,7.30006244 3.91620896,7.64365463 C3.94855522,7.81568195 3.96611463,7.99140878 3.96703881,8.16852293 C3.96657672,8.34887415 3.95733493,8.51581463 3.91667104,8.71188878 C3.89033194,8.83720976 3.76741612,8.91813659 3.64172776,8.89177756 C3.51650149,8.86541854 3.43563582,8.74240976 3.46197493,8.61662634 C3.46474746,8.60321561 3.46890627,8.58980488 3.47398925,8.57731902 L3.4762997,8.57176976 C3.52620537,8.45014829 3.56733134,8.28875707 3.59274627,8.13985171 C3.61908537,7.98724683 3.6310997,7.83140488 3.62925134,7.67463805 C3.62463045,7.36110439 3.55670328,7.04710829 3.41530388,6.75345951 C3.40144119,6.72432585 3.41345552,6.69010537 3.44210507,6.6762322 C3.46798209,6.66374634 3.49986627,6.67392 3.51557731,6.69611707 Z",
                              id: "Path",
                              fill: "#C66C50"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M4.90831522,2.15820293 C4.84223642,2.77000976 4.92402627,3.38597854 5.03215522,3.99269854 C5.08760597,4.29652098 5.15368478,4.5989561 5.2234603,4.90185366 C5.29231164,5.20660098 5.36994269,5.50348683 5.42816597,5.8290439 C5.45080836,5.95482732 5.36717015,6.07506146 5.24148179,6.09772098 C5.11579343,6.12038049 4.99565015,6.03667902 4.97300776,5.91089561 C4.97162149,5.90395902 4.97069731,5.89748488 4.97023522,5.89101073 L4.96977313,5.88684878 C4.94389612,5.59412488 4.89214209,5.28012878 4.85009194,4.97121951 C4.80665552,4.66092293 4.76691582,4.34785171 4.73734209,4.03385561 C4.68189134,3.40771317 4.65324179,2.76492293 4.7766197,2.13970537 C4.78355104,2.10363512 4.81774567,2.07958829 4.85425075,2.08606244 C4.88844537,2.09161171 4.91154985,2.12398244 4.90831522,2.15820293 Z",
                              id: "Path",
                              fill: "#C66C50"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M9.39566687,3.75916683 C9.4072191,4.29975805 9.37672119,4.83988683 9.33698149,5.37862829 C9.31618746,5.64823024 9.29123463,5.91736976 9.26212299,6.18650927 C9.23116299,6.45796098 9.20297552,6.72062634 9.14752478,7.00548878 C9.12303403,7.13080976 9.00150448,7.2131239 8.87627821,7.18861463 C8.75105194,7.16410537 8.6688,7.0424839 8.69329075,6.91716293 C8.69467701,6.90837659 8.69698746,6.90005268 8.69976,6.89172878 L8.70160836,6.88617951 C8.77600478,6.65033561 8.8370006,6.38304585 8.89568597,6.12546732 C8.95390925,5.86511415 9.00797373,5.60337366 9.05880358,5.34117073 C9.15815284,4.81584 9.24779821,4.28773463 9.29631761,3.75500488 C9.29862806,3.72725854 9.32311881,3.70691122 9.35084418,3.70968585 C9.37579701,3.71246049 9.39520478,3.73373268 9.39566687,3.75916683 Z",
                              id: "Path",
                              fill: "#C66C50"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M12.3548884,7.06745561 C11.9464012,7.49382439 11.6862448,8.05152585 11.403446,8.57916878 L10.5860096,10.1967805 C10.3069075,10.7345971 10.0167152,11.269639 9.67754149,11.7838712 C9.33005015,12.2879298 8.96453731,12.8100234 8.36428299,13.1550029 C8.25384358,13.2188195 8.11244418,13.1804371 8.04867582,13.0694517 C7.98490746,12.9584663 8.0232609,12.8174224 8.13416239,12.7536059 C8.1378591,12.7512937 8.14248,12.7489815 8.14617672,12.7471317 L8.15495642,12.7429698 C8.62767403,12.509438 9.02368478,12.0391376 9.37394866,11.5716117 C9.72513672,11.0943746 10.0384334,10.5815298 10.3420263,10.0626732 L11.2394042,8.48991805 C11.5517767,7.9738361 11.836886,7.42769561 12.2892716,6.99901463 C12.3086794,6.98097951 12.3382531,6.98190439 12.3562746,7.00086439 C12.373834,7.01936195 12.3733719,7.04803317 12.3562746,7.06606829 L12.3548884,7.06745561 Z",
                              id: "Path",
                              fill: "#C66C50"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M71.4589146,12.3101268 C71.5813684,12.6925639 71.8350555,13.010722 72.1183164,13.3020585 C72.4038878,13.5920078 72.7213433,13.8542107 73.0475785,14.1094771 C73.3733516,14.3656683 73.7092907,14.6121483 74.0373743,14.8836 C74.200954,15.020482 74.3636096,15.1619883 74.5160991,15.3284663 C74.6621194,15.497719 74.8261612,15.6836195 74.876529,15.9879044 C74.897323,16.1141502 74.8122985,16.2334595 74.6861481,16.2542693 C74.5599976,16.275079 74.4407785,16.1899902 74.4199845,16.0637444 C74.4190603,16.0554205 74.4181361,16.047559 74.4172119,16.0396976 L74.4172119,16.035998 C74.4102806,15.9208507 74.3123176,15.7552976 74.1921743,15.6105541 C74.0711069,15.4625737 73.9255487,15.3210673 73.7762937,15.182798 C73.4759355,14.9062595 73.1524728,14.641282 72.8368657,14.3647434 C72.5203343,14.0891298 72.2074997,13.80288 71.9237767,13.4828722 C71.6446746,13.1651766 71.3812836,12.7970751 71.2689958,12.3725561 L71.2671475,12.366082 C71.2532848,12.312439 71.285169,12.2578712 71.3383093,12.2435356 C71.3900633,12.2301249 71.4427415,12.259721 71.4589146,12.3101268 Z",
                              id: "Path",
                              fill: "#C66C50"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M78.4221421,2.7954439 C78.4637301,3.17603122 78.4595713,3.54968195 78.4609576,3.92425756 C78.4595713,4.29883317 78.4512537,4.6724839 78.4401636,5.04613463 C78.4147487,5.79528585 78.3870233,6.53657561 78.3227928,7.29358829 C78.3121648,7.42075902 78.199877,7.51509659 78.0728024,7.50446049 C77.9457278,7.49382439 77.8509994,7.38145171 77.8616275,7.25428098 C77.8620896,7.24965659 77.8625516,7.24456976 77.8634758,7.2404078 L77.8639379,7.2343961 C77.972529,6.51067902 78.0496979,5.76430244 78.122246,5.02624976 C78.1569027,4.65629854 78.189249,4.28542244 78.2146639,3.91547122 C78.2373063,3.54598244 78.2645696,3.17279415 78.2479343,2.80977951 C78.2451618,2.76168585 78.282129,2.72052878 78.3301863,2.71729171 C78.3763952,2.71497951 78.4161349,2.75012488 78.4221421,2.7954439 Z",
                              id: "Path",
                              fill: "#C66C50"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M69.7755224,128.326829 C68.7358209,119.656098 69.3882913,107.844018 72.8946269,98.7307317 C75.4744728,92.0253659 83.0989504,80.0791785 84.7934328,69.0190244 C85.9324836,61.5834673 84.4191403,45.1715063 83.354486,34.9210829 C79.3398519,36.5497932 75.8755666,36.4841268 73.9560466,36.2122127 C74.2296036,41.4322244 74.0812728,47.6247454 73.5877612,52.14 C72.7791045,59.5390244 67.9271642,73.6434146 61.8044776,81.504878 C55.681791,89.3663415 50.021194,90.06 45.2847761,90.06 C38.2956716,90.06 25.2416418,88.7882927 16.7507463,65.435122 C13.3719475,56.1428722 11.532369,48.2263785 10.5656776,41.7050634 C6.28118328,42.8468254 2.46524776,42.7141054 0.41264597,42.4828859 C0.828064478,50.4881678 1.87146269,59.6125522 4.00400597,68.5182029 C6.69706388,79.7628702 11.6284836,91.3317073 16.2493791,100.041284 C20.4192752,107.900435 22.5929445,121.431401 27.0313146,132.720462 C29.8569922,139.906765 33.6599893,150.5461 40.6107403,157.682459 C41.3200478,147.439897 54.6813672,137.189936 69.7755224,128.326829 Z",
                              id: "Path",
                              fill: "url(#linearGradient-175)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M3.01328597,57.0908722 C2.56875582,57.0908722 2.13947463,57.0659005 1.7291391,57.0145698 C1.5392203,56.9909854 1.40429015,56.8180332 1.42785672,56.6279707 C1.45142328,56.4379083 1.62609313,56.3024137 1.81416358,56.3264605 C4.89861134,56.7098224 9.12303403,55.5370771 12.8405445,53.2683512 C13.0041242,53.1684644 13.2171475,53.2202576 13.3169588,53.383961 C13.4167701,53.5476644 13.3650161,53.7608488 13.2014364,53.8607356 C9.84528,55.9093405 6.06862209,57.0908722 3.01328597,57.0908722 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M5.8870209,75.6846205 C5.72020657,75.6846205 5.57326209,75.5634615 5.54553672,75.3937463 C5.51503881,75.2046088 5.64303761,75.0265698 5.83203224,74.9955863 C7.9035797,74.6584683 15.4245493,70.3277268 17.4549707,67.7579532 C17.5737278,67.6076605 17.791834,67.5826888 17.9420131,67.7010732 C18.0921922,67.81992 18.1176072,68.0381912 17.9988501,68.1884839 C15.8455128,70.9131746 8.15310806,75.320681 5.94339582,75.6804585 C5.92398806,75.6832332 5.90550448,75.6846205 5.8870209,75.6846205 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M10.9607642,89.3344332 C10.7921015,89.3344332 10.6442328,89.210962 10.6183558,89.0389346 C10.5901684,88.8493346 10.7204776,88.6726829 10.9099343,88.6444741 C13.0965421,88.3175298 22.1530352,81.6348234 23.5051093,78.9845854 C23.5919821,78.8139454 23.8013087,78.7459668 23.9713576,78.8333678 C24.1418687,78.9203063 24.2097958,79.1293288 24.1224609,79.2999688 C22.6719618,82.1435063 13.3613194,88.9797424 11.0125182,89.3307337 C10.9949588,89.3330459 10.9778615,89.3344332 10.9607642,89.3344332 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M16.2498412,100.387651 C16.0908824,100.387651 15.9476346,100.27759 15.9120537,100.116199 C15.8704657,99.9293737 15.9882985,99.7439356 16.1749827,99.7023161 C18.132394,99.267161 30.108831,91.0375961 32.2108764,86.9015415 C32.2977493,86.730439 32.5061516,86.6624605 32.6766627,86.749399 C32.8471737,86.8363376 32.915563,87.0448976 32.8286901,87.2155376 C30.6434687,91.5148332 18.5256322,99.8896039 16.3256239,100.378864 C16.2997469,100.385339 16.274794,100.387651 16.2498412,100.387651 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M78.772406,52.5737678 C76.6444836,52.5737678 74.6062066,52.34856 73.5355451,52.0341015 C73.3520955,51.9799961 73.2467391,51.787159 73.3008036,51.6035707 C73.3548681,51.41952 73.5480215,51.3150088 73.731009,51.3686517 C75.9176167,52.0119044 82.2066555,52.2255512 84.6312394,50.9621678 C84.8003642,50.873842 85.0106149,50.9399707 85.0984119,51.1096859 C85.186671,51.279401 85.1210543,51.4888859 84.9510054,51.5772117 C83.5605779,52.3013912 81.1119654,52.5737678 78.772406,52.5737678 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M82.4598806,67.1405971 C77.9129194,67.1405971 71.9907797,65.1571961 70.4691188,64.3895473 C70.2981457,64.3030712 70.2292943,64.0945112 70.315243,63.9238712 C70.4011916,63.7527688 70.6109803,63.6843278 70.7805672,63.769879 C72.467194,64.6207668 79.696123,67.0083395 84.1612943,66.3304039 C84.3493648,66.30312 84.5272693,66.4321405 84.5559188,66.621278 C84.5845684,66.8104156 84.4542591,66.9875298 84.2652645,67.016201 C83.700591,67.1022146 83.0934054,67.1405971 82.4598806,67.1405971 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M81.0006018,81.7730927 C80.9987534,81.7730927 80.9969051,81.7730927 80.9950567,81.7730927 C73.4130913,81.6528585 67.4373493,76.230761 66.1180836,74.2690946 C66.0113409,74.1100156 66.053391,73.894519 66.2118878,73.7876956 C66.3703845,73.6808722 66.5866424,73.7229541 66.692923,73.8815707 C67.9581242,75.7627727 73.700511,80.963362 81.0056848,81.0789717 C81.1974519,81.0822088 81.3499415,81.2399005 81.3467574,81.4313502 C81.3443964,81.6209502 81.1895964,81.7730927 81.0006018,81.7730927 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M73.7712107,96.99936 C73.7601206,96.99936 73.7490304,96.9988976 73.7379403,96.9979727 C67.1462328,96.3658185 57.8060167,88.9052898 56.790806,86.4437268 C56.7177958,86.2666127 56.8018961,86.0640644 56.9788764,85.990999 C57.1563188,85.9179337 57.3582519,86.00256 57.4312621,86.1792117 C58.3771594,88.4729093 67.5625755,95.7091551 73.803557,96.3075512 C73.9944,96.3260488 74.133951,96.4953015 74.1154675,96.6858263 C74.0988322,96.8652527 73.947729,96.99936 73.7712107,96.99936 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M35.6386567,102.562039 C26.1473373,102.562039 18.5034519,102.066304 16.7359594,101.540974 C16.5525099,101.486406 16.4476155,101.293106 16.5026042,101.109518 C16.5575928,100.92593 16.7512084,100.822343 16.9332716,100.875524 C20.9520645,102.069079 55.6573003,103.100318 72.802671,98.3959259 C72.9888931,98.3436702 73.1778878,98.4541932 73.2282555,98.6387063 C73.2790854,98.8232195 73.1704943,99.0142068 72.9856585,99.0646127 C63.2637564,101.732886 47.9085206,102.562039 35.6386567,102.562039 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.543963,119.033192 C22.4210472,119.033192 22.3018281,118.967526 22.2389839,118.851454 C22.1474901,118.683126 22.2098722,118.472716 22.3785349,118.381153 C28.8833696,114.849969 47.2444979,108.340215 70.176154,108.984855 C70.3674591,108.989941 70.5181003,109.149483 70.5131423,109.341395 C70.5079343,109.533307 70.3517481,109.697473 70.1567463,109.678513 C47.3715725,109.043584 29.1569266,115.490909 22.7084669,118.991573 C22.6562507,119.019781 22.5998758,119.033192 22.543963,119.033192 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2919713,131.1084 C26.1866149,131.1084 26.0826448,131.060306 26.0147176,130.970131 C25.8996573,130.817063 25.9301552,130.599255 26.0831069,130.484107 C36.7204084,122.474663 51.2776155,118.261381 69.3504,117.961721 C69.5509469,117.963108 69.6997397,118.111551 69.7025628,118.303001 C69.7057469,118.494451 69.5532573,118.652142 69.3614901,118.65538 C51.4384227,118.952728 37.0175319,123.118841 26.4994496,131.038572 C26.4375296,131.08574 26.3645194,131.1084 26.2919713,131.1084 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.944289,142.70822 C30.8638854,142.70822 30.7825576,142.680012 30.7169409,142.623132 C30.5723069,142.497348 30.5570579,142.278152 30.6827463,142.133409 C31.9839904,140.635106 52.090431,127.109227 69.4710054,125.198892 C69.6613863,125.17022 69.8323594,125.315426 69.8536155,125.505489 C69.8744096,125.696014 69.737169,125.867116 69.5467881,125.887926 C53.173569,127.687739 32.8139033,140.736843 31.2058316,142.588449 C31.1379045,142.667988 31.0413278,142.70822 30.944289,142.70822 Z",
                              id: "Path",
                              fill: "#FFA2BA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M85.1949887,61.1182537 C78.5908048,65.8943239 82.0962161,73.9856195 83.168726,75.6568741 C83.885889,73.4408663 84.4574937,71.2128351 84.7938949,69.0190244 C85.1081158,66.9648702 85.2194794,64.2235317 85.1949887,61.1182537 Z",
                              id: "Path",
                              fill: "url(#linearGradient-176)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M2.68335403,62.2364312 C3.0696609,64.3308176 3.50448716,66.4307532 4.00446806,68.5182029 C4.54742328,70.7864663 5.18556896,73.0667532 5.88979343,75.335479 C11.4722973,70.4442615 7.54915701,62.6660371 2.68335403,62.2364312 Z",
                              id: "Path",
                              fill: "url(#linearGradient-177)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "left_leg",
                            transform: "translate(152.000000, 230.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M29.02437,0.229152 C29.02437,0.229152 -2.79,14.629692 0.6975,16.785846 C4.185,18.942 13.525455,21.770364 21.079845,24.408846 C29.620035,27.391518 37.4325,31.107846 37.4325,31.107846 C37.4325,31.107846 31.910625,36.44025 26.582655,42.735 C26.155785,43.239504 25.706595,43.794366 25.24299,44.385726 C27.066255,46.986324 31.65999,51.461718 38.398305,53.02374 C46.501395,47.494062 60.216105,37.64838 61.03125,29.452038 C62.145855,18.243918 31.53072,1.330098 29.02437,0.229152 Z",
                              id: "Path",
                              fill: "url(#linearGradient-178)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M56.912745,20.382978 C54.94161,23.071818 52.346445,30.451806 57.636285,36.700356 C59.52558,34.242516 60.800145,31.78098 61.031715,29.4525 C61.307925,26.670798 59.629275,23.538438 56.912745,20.382978 Z",
                              id: "Path",
                              fill: "url(#linearGradient-179)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.24299,44.385726 C20.611125,50.296554 14.51172,59.941266 14.22993,60.921168 C13.919775,61.999014 14.492655,65.295846 15.499845,67.760154 C16.507035,70.224462 22.0875,77.78925 23.09469,76.845846 C24.45342,75.57396 22.86219,66.143154 23.404845,64.371846 C23.9475,62.600538 28.24875,60.06 34.1775,55.902 C35.213985,55.174812 36.68106,54.196296 38.398305,53.024202 C31.65999,51.46218 27.066255,46.986324 25.24299,44.385726 Z",
                              id: "Path",
                              fill: "url(#linearGradient-180)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M41.04555,51.542106 C41.02602,51.542106 41.00649,51.54072 40.986495,51.537024 C36.349515,50.751162 28.324545,44.51832 26.75238,42.413448 C26.637525,42.259602 26.670075,42.042462 26.824455,41.928348 C26.979765,41.814696 27.19785,41.846574 27.312705,41.999958 C28.677945,43.828092 36.582945,50.08773 41.103675,50.853726 C41.293395,50.885604 41.42127,51.06486 41.38872,51.253356 C41.359425,51.42291 41.21202,51.542106 41.04555,51.542106 Z",
                              id: "Path",
                              fill: "#6022B6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.231475,47.050542 C32.13429,47.050542 32.03757,47.010348 31.969215,46.931808 C31.842735,46.787664 31.85715,46.569138 32.00223,46.443012 C32.11476,46.345068 43.283595,36.579312 43.283595,30.415308 C43.283595,22.44165 14.78514,13.012692 7.73109,11.106018 C7.54509,11.056122 7.43535,10.865316 7.486035,10.680516 C7.53672,10.496178 7.728765,10.387608 7.913835,10.437504 C8.274675,10.534986 43.98063,20.62599 43.98063,30.415308 C43.98063,36.89301 32.930835,46.556664 32.46072,46.96461 C32.395155,47.02236 32.313315,47.050542 32.231475,47.050542 Z",
                              id: "Path",
                              fill: "#6022B6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M15.821625,58.093266 C14.908365,59.579058 14.313165,60.631032 14.22993,60.921168 C14.03649,61.594302 14.18715,63.131838 14.572635,64.792266 C16.97901,63.020496 16.47588,59.833158 15.821625,58.093266 Z",
                              id: "Path",
                              fill: "url(#linearGradient-181)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "left_slipper",
                            transform: "translate(163.000000, 290.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M4.00909091,8.892 C4.69636364,8.55 11.5525964,7.33248 12.7525745,8.626152 C13.2405382,9.15192 12.9816655,17.251848 11.6836364,17.860152 C10.5505527,18.390936 7.11006545,14.574672 6.27984,13.402296 C5.44961455,12.22992 4.00909091,8.892 4.00909091,8.892 Z",
                              id: "Path",
                              fill: "url(#linearGradient-182)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M10.9954473,18.525 C10.8442473,18.525 10.6907564,18.488064 10.5491782,18.409176 C2.16445091,13.747032 0.254290909,1.386696 0.237338182,1.26312 C0.169069091,0.7638 0.520036364,0.304152 1.02128727,0.236208 C1.52253818,0.16644 1.98484364,0.51756 2.05265455,1.016424 C2.06869091,1.13088 3.95777455,12.654912 11.4426327,16.816368 C11.88432,17.062152 12.0428509,17.61756 11.7958909,18.0576 C11.6286545,18.356736 11.3166327,18.525 10.9954473,18.525 Z",
                              id: "Path",
                              fill: "url(#linearGradient-183)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "right_leg",
                            transform: "translate(124.000000, 202.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M103.022032,18.6706154 C94.3117452,10.0306154 82.0789848,0.609692308 68.8473,0.346153846 C51.4713096,-5.55111512e-17 34.0558452,10.3846154 29.7216,12.2307692 C14.551974,21.0766154 1.123848,31.3066154 0.4114584,41.5287692 C4.96908,46.176 10.8725328,49.3356923 18.7306452,49.0767692 C44.4277548,48.2307692 52.4772,25.8461538 70.6658904,25.6924615 C77.9202828,25.6310769 85.1273064,28.3389231 91.49841,31.5881538 C94.0005972,29.7009231 99.6806736,23.2712308 103.022032,18.6706154 Z",
                              id: "Path",
                              fill: "url(#linearGradient-184)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M18.1682568,41.0856923 C8.9921772,41.0856923 3.2874876,35.3215385 2.6094636,34.5992308 C2.4780384,34.4593846 2.4859332,34.2406154 2.6266464,34.11 C2.7668952,33.9789231 2.9870208,33.9867692 3.1189104,34.1266154 C3.8433744,34.8978462 10.5014772,41.6229231 21.0842244,40.1953846 C26.5581072,39.4578462 31.953042,35.8218462 38.2001508,31.6121538 C46.769724,25.8373846 56.48265,19.2923077 69.1036488,18.7306154 C84.599748,18.0392308 94.5397656,25.3416923 94.6382184,25.4155385 C94.7919348,25.5304615 94.8221208,25.7473846 94.7064852,25.9001538 C94.5903852,26.0524615 94.3716528,26.0833846 94.2188652,25.968 C94.1218056,25.896 84.3712632,18.7472308 69.1338348,19.4215385 C56.7092772,19.9744615 47.083194,26.4613846 38.5902468,32.1849231 C32.2706916,36.4435385 26.8125984,40.1210769 21.17664,40.8807692 C20.1368484,41.022 19.1328156,41.0856923 18.1682568,41.0856923 Z",
                              id: "Path",
                              fill: "#00E2EC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M11.8672776,40.1284615 C11.7534996,40.1284615 11.6420436,40.0730769 11.57517,39.9710769 C11.4702156,39.8104615 11.5161912,39.5958462 11.677338,39.492 C12.6019584,38.8943077 13.1908176,37.386 13.3802928,35.1295385 C13.73463,30.9124615 12.5685216,25.4113846 11.6908056,24.6092308 C11.5491636,24.48 11.5398756,24.2607692 11.670372,24.12 C11.8008684,23.9796923 12.020994,23.9704615 12.162636,24.0996923 C13.2669792,25.1090769 14.4363384,30.8838462 14.0750352,35.1867692 C13.8637332,37.6993846 13.1847804,39.3433846 12.0576816,40.0721538 C11.9982384,40.1104615 11.9322936,40.1284615 11.8672776,40.1284615 Z",
                              id: "Path",
                              fill: "#00E2EC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M128.716355,33.3078462 C127.942664,32.3847692 118.48005,34.0384615 115.9839,32.8846154 C115.033738,32.4456923 110.235557,25.8258462 103.022032,18.6706154 C99.6806736,23.2712308 94.0005972,29.7004615 91.4988744,31.5881538 C100.82124,36.3424615 108.355201,42.2547692 111.632472,42.3489231 C117.55125,42.5192308 129.490045,34.2309231 128.716355,33.3078462 Z",
                              id: "Path",
                              fill: "url(#linearGradient-185)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M89.3310552,30.8686154 C89.2093824,30.8686154 89.0914248,30.8053846 89.0273376,30.6927692 C88.9330644,30.5266154 88.9920432,30.3152308 89.1592272,30.2210769 C90.7233264,29.3427692 98.6692104,21.5769231 100.544922,16.4755385 C100.610867,16.2955385 100.811488,16.2036923 100.991675,16.2696923 C101.172326,16.3352308 101.265206,16.5336923 101.198797,16.7136923 C99.2334564,22.0606154 91.1626488,29.8915385 89.5019544,30.8243077 C89.448084,30.8543077 89.3891052,30.8686154 89.3310552,30.8686154 Z",
                              id: "Path",
                              fill: "#00E2EC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M70.5888,7.07676923 C75.0326436,7.02461538 78.209604,4.27753846 79.7760252,2.54307692 C76.2512292,1.22861538 72.5889708,0.420461538 68.8473,0.346153846 C65.7130644,0.283846154 62.5783644,0.574153846 59.5184328,1.09707692 C61.1828424,3.66692308 65.1186324,7.14138462 70.5888,7.07676923 Z",
                              id: "Path",
                              fill: "url(#linearGradient-186)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M112.46189,39.4615385 C110.454289,39.3738462 109.043906,40.4321538 108.480125,41.328 C109.763262,41.9506154 110.826738,42.3263077 111.632008,42.3493846 C112.819943,42.3835385 114.251688,42.0729231 115.773062,41.5536923 C115.296124,40.6846154 114.321348,39.5432308 112.46189,39.4615385 Z",
                              id: "Path",
                              fill: "url(#linearGradient-187)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "right_slipper",
                            transform: "translate(240.000000, 231.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M8.094,1.539 C7.114512,1.84908 5.3124,7.328832 8.2992,11.502144 C9.14736,10.685904 12.258192,7.563672 13.178856,6.50256 C14.09952,5.441448 17.271,1.083 17.496264,0.704976 C17.721528,0.326952 12.055728,0.285 8.094,1.539 Z",
                              id: "Path",
                              fill: "url(#linearGradient-188)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M1.254912,18.582 C0.970368,18.582 0.689928,18.449304 0.511632,18.199872 C0.21888,17.790384 0.313728,17.22084 0.724128,16.927632 C1.598736,16.302912 12.736536,7.094904 16.30884,0.857736 C16.558728,0.421344 17.116416,0.26904 17.553264,0.51984 C17.990112,0.770184 18.141504,1.327416 17.89116,1.764264 C14.1018,8.380368 2.725056,17.739768 1.783872,18.412368 C1.623816,18.526824 1.438224,18.582 1.254912,18.582 Z",
                              id: "Path",
                              fill: "url(#linearGradient-189)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "movement",
                            transform: "translate(75.000000, 187.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M87.9379111,87.1460238 L87.97646,87.1330362 C88.2932111,87.0119723 88.4539089,86.6529554 88.33176,86.3333654 C88.2402644,86.0944846 88.0071133,85.9349215 87.7516689,85.9349215 C87.6759644,85.9349215 87.6016533,85.9483731 87.5296644,85.97574 C86.0949956,86.5235423 84.5312111,87.0268154 82.4602533,87.6075508 C80.9136533,88.0282592 79.2620889,88.4100046 77.2598689,88.8107677 C73.9962178,89.4652546 70.5342489,89.9309562 66.6761089,90.2333838 C63.9526067,90.4328377 61.2295689,90.5339562 58.5803778,90.5339562 C54.0715511,90.5339562 49.64168,90.2417331 45.4143067,89.6661 C41.5988956,89.1438092 38.2404978,88.4304138 35.1472978,87.4837038 C33.3141356,86.9205946 31.7587111,86.3157392 30.3918511,85.6343492 C29.6046178,85.2405438 28.8949467,84.8258654 28.2823444,84.4009823 C28.1193244,84.2882677 27.9595556,84.1709146 27.8076822,84.0549531 L27.5949667,83.8870408 L27.3576356,83.6912977 C27.0367044,83.4236585 26.7301711,83.1509169 26.4454667,82.8786392 C25.2002911,81.6888738 24.2895156,80.4332423 23.7386844,79.1460692 C23.1576644,77.7944215 22.9556311,76.3722692 23.1395511,74.9190392 C23.3123244,73.5474462 23.8622267,72.1160169 24.7298089,70.78014 C25.1492022,70.1298277 25.6243289,69.5333215 26.1412556,69.0091754 C26.5824778,68.5592446 27.2317711,68.0151531 27.6855333,67.8166269 L27.7315133,67.7957538 C28.2103556,67.57218 28.5726222,67.1751277 28.7523622,66.6792762 C28.9321022,66.1829608 28.9074867,65.6462908 28.68316,65.1689931 C28.3585133,64.4783262 27.65488,64.0316423 26.8908689,64.0316423 C26.6005911,64.0316423 26.3186733,64.0947254 26.0530111,64.2190362 C24.81666,64.7979162 24.0489333,65.5043538 23.3072156,66.2381585 C22.59708,66.9636138 21.9696156,67.7549354 21.3950978,68.6510862 C20.2274844,70.4939469 19.5219933,72.4541608 19.2999889,74.4760662 C19.18202,75.5633215 19.2126733,76.6371254 19.3919489,77.6673277 C19.5744756,78.7063431 19.9005156,79.7240215 20.3612444,80.6906769 C21.1735578,82.39995 22.4178044,84.0081046 24.0591511,85.4715392 C24.4186311,85.7911292 24.7971533,86.1051531 25.1840356,86.40387 L25.4766356,86.6232692 L25.7984956,86.8519454 C26.0033156,86.9920269 26.2104578,87.1265423 26.4236378,87.2587385 C27.20344,87.7402108 28.0515156,88.1790092 29.0152378,88.6001815 C30.6003867,89.2885292 32.2956089,89.8497831 34.3493822,90.3674354 C37.4997089,91.1462331 40.9407778,91.6555362 45.1779044,91.9704877 C47.4731889,92.1397915 49.8646133,92.2218923 52.4877956,92.2218923 C53.6201111,92.2218923 54.7737911,92.2070492 56.0147867,92.1755077 C59.3792222,92.0999008 62.9034267,91.8568454 66.7889689,91.4338177 C74.7170356,90.5576123 81.6354,89.1558692 87.9379111,87.1460238 Z",
                              id: "Path",
                              fill: "url(#linearGradient-190)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M109.314896,130.321752 C112.170764,129.384318 114.67412,128.240474 116.968476,126.82296 C119.767682,125.068694 121.838176,123.0723 123.295138,120.722919 C125.016833,117.951902 125.779916,114.493465 125.336371,111.471508 C125.210507,110.660705 124.997327,109.857323 124.702404,109.086411 C124.412127,108.301119 124.018278,107.530207 123.531076,106.789908 C122.977922,105.974003 122.367642,105.302354 121.669582,104.741564 C121.277591,104.426612 120.852624,104.149232 120.406758,103.916845 C120.190327,103.804595 119.955318,103.698838 119.687798,103.594936 C119.570758,103.550407 119.443964,103.505878 119.278158,103.454391 L119.15508,103.416819 L119.102133,103.403368 L118.986487,103.374609 C118.782596,103.324514 118.571738,103.299002 118.361344,103.299002 C117.249929,103.299002 116.252767,103.995235 115.879353,105.031004 C115.389364,106.391465 116.099036,107.896182 117.460787,108.385075 L117.580613,108.428677 C117.640527,108.44955 117.71716,108.476917 117.789149,108.543711 C117.826769,108.565048 117.862996,108.587312 117.900151,108.61236 C118.026016,108.687503 118.14352,108.781664 118.267527,108.881391 L118.2731,108.885565 L118.293536,108.902264 C118.593102,109.157843 118.880129,109.474186 119.123962,109.817432 C119.628349,110.492328 120.07468,111.423732 120.40908,112.501246 C120.777849,113.640452 120.956196,114.707298 120.937618,115.666532 C120.925078,115.953189 120.909287,116.223148 120.859127,116.498672 C120.837298,116.624838 120.812682,116.756107 120.784351,116.88552 L120.742551,117.062709 L120.7393,117.075697 L120.735584,117.088221 L120.667311,117.318752 C120.524262,117.813212 120.305044,118.376785 120.0496,118.902323 C119.112816,120.846766 117.473791,122.758276 115.30948,124.428122 C113.488393,125.849347 111.276244,127.101268 108.548562,128.252534 C104.004902,130.122298 98.7933711,131.347315 93.0546956,131.895118 C90.8374378,132.101529 88.5760578,132.206822 86.3323267,132.206822 C83.2200844,132.206822 80.07208,132.005513 76.9751644,131.609852 C76.9528711,131.606605 76.9342933,131.605678 76.9157156,131.605678 C76.6890667,131.605678 76.4977156,131.775445 76.4703133,132.001338 C76.4554511,132.120547 76.4884267,132.238364 76.5622733,132.332988 C76.6365844,132.427613 76.7429422,132.487449 76.8623044,132.502292 C80.9893578,133.005565 84.9975133,133.261145 88.7743756,133.261145 C90.2462,133.261145 91.7166311,133.222645 93.1452622,133.146575 C96.0995933,132.988403 98.7641111,132.702674 101.290689,132.273152 C104.122871,131.805132 106.821758,131.148789 109.314896,130.321752 Z",
                              id: "Path",
                              fill: "url(#linearGradient-191)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M133.123247,115.165115 C133.005742,115.165115 132.906351,115.256956 132.897062,115.374309 C132.822751,116.278809 132.658338,117.157334 132.408467,117.997823 C132.17996,118.761778 131.8581,119.554491 131.424309,120.420955 C130.701169,121.844499 129.672424,123.251345 128.36362,124.602992 C127.13888,125.853985 125.791527,126.917121 124.356858,127.764104 C123.633253,128.188987 122.88364,128.545685 122.180471,128.868058 C121.787087,129.043392 121.405778,129.202027 121.116893,129.320308 L120.597644,129.521617 L120.381213,129.607892 C120.340807,129.625982 120.280893,129.650102 120.203331,129.674222 L120.048671,129.726173 C119.450002,129.929338 119.043149,130.511001 119.060333,131.141368 C119.081233,131.935008 119.71938,132.556562 120.51358,132.556562 L120.553058,132.555635 L120.726296,132.550996 C120.774133,132.550996 120.819649,132.548677 120.876311,132.540792 L120.880027,132.540328 L120.9065,132.537081 C121.046762,132.520382 121.179593,132.504612 121.298027,132.483738 C121.584124,132.435498 121.833067,132.381692 122.062038,132.318609 C122.534378,132.192907 123.0174,132.018965 123.502744,131.798638 C124.309484,131.439621 125.093467,130.959076 126.046507,130.239187 C127.594036,129.065192 128.971113,127.666232 130.137798,126.082198 C131.304018,124.500482 132.196216,122.781468 132.790704,120.973396 C133.402842,119.082759 133.59698,117.141563 133.350824,115.362713 C133.336427,115.25742 133.248647,115.175783 133.143218,115.16697 L133.133464,114.936438 C133.130213,114.935975 133.127427,114.934583 133.123711,114.934119 L133.123711,115.165115 L133.123247,115.165115 Z",
                              id: "Path",
                              fill: "url(#linearGradient-192)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M196.170187,52.1966077 C195.231544,52.1966077 194.461496,52.9596346 194.454064,53.8970677 C194.44524,54.9648415 194.252496,56.2060938 193.86422,57.6917931 C193.527962,58.9678338 193.086276,60.2429469 192.550307,61.4823438 C191.453753,64.0163354 190.077604,66.3828785 188.460873,68.5184262 C186.8042,70.7045331 184.896262,72.7171615 182.7914,74.4997223 C180.510978,76.4437015 178.132558,77.9331115 175.72302,78.9248146 C175.715589,78.9275977 175.703978,78.9336277 175.69376,78.93873 C175.627344,78.9758377 175.5809,79.03521 175.560464,79.1066423 C175.540493,79.1780746 175.549782,79.2532177 175.586009,79.3181562 C175.63524,79.4062869 175.729058,79.4610208 175.829842,79.4610208 C175.878144,79.4610208 175.923196,79.4494246 175.965924,79.4253046 C178.596073,77.95584 180.95638,76.6120777 183.211258,75.0428862 C185.528836,73.4263823 187.674569,71.5478054 189.589009,69.45957 C191.619096,67.2335723 193.327787,64.9050646 194.665387,62.5394492 C195.451227,61.1404892 196.078227,59.8556354 196.580291,58.6120638 C197.240267,56.9556692 197.633187,55.6132985 197.852869,54.2625785 L197.867731,54.1739838 C197.879342,54.0969854 197.886309,54.0116377 197.887298,53.9258262 C197.895133,52.9805077 197.131122,52.2049569 196.184584,52.1970715 L196.177153,51.9660762 C196.174367,51.9660762 196.172044,51.9651485 196.169258,51.9651485 L196.169258,52.1966077 L196.170187,52.1966077 Z",
                              id: "Path",
                              fill: "url(#linearGradient-193)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M17.2104533,8.78524615 L17.2359978,8.76993923 C17.4575378,8.62707462 17.5216311,8.33206846 17.3790467,8.11174154 C17.2912667,7.97537077 17.1412511,7.89373385 16.9782311,7.89373385 C16.8872,7.89373385 16.7980267,7.92017308 16.7209289,7.96980462 C15.5598178,8.71706077 14.34994,9.42628154 13.17954,10.11231 C12.7731511,10.3507269 12.3658333,10.5891438 11.95898,10.8303438 C10.0807667,11.9259485 8.59361556,12.8953869 7.27552222,13.8838431 C5.75632444,15.0545908 4.28589333,16.2517777 3.04954222,17.9735746 C2.34358667,18.9796569 1.87914222,19.9732154 1.63345111,21.0066646 C1.30276667,22.3295538 1.45649778,23.7577362 1.57725333,24.4920046 L1.60372667,24.6562062 C1.62741333,24.7948962 1.66782,24.9363692 1.72262444,25.0736677 C2.03937556,25.8649892 2.79549111,26.3761477 3.64821111,26.3761477 C3.91155111,26.3761477 4.17024667,26.3265162 4.41733111,26.2277169 C5.47858667,25.8037615 5.99690667,24.5959062 5.57240444,23.5355538 C5.30116889,22.8588023 5.13257556,22.3012592 5.12978889,21.6152308 C5.12375111,20.9885746 5.30116889,20.2710046 5.64253556,19.5413746 C6.23841778,18.2639423 7.2523,16.8914215 8.65631556,15.4618477 C9.77191111,14.3180031 11.0835022,13.1412254 12.6644711,11.8656485 C14.2449756,10.6155831 15.7307333,9.60903692 17.2104533,8.78524615 Z",
                              id: "Path",
                              fill: "url(#linearGradient-194)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M207.922024,50.3129285 C207.753431,50.1097638 207.56626,50.0146754 207.334038,50.0146754 C207.280162,50.0146754 207.223036,50.0202415 207.164516,50.0304462 C206.220764,50.1955754 206.167818,51.1942362 206.275104,53.2759777 C206.317833,54.10719 206.36242,54.9671608 206.268138,55.7728615 C206.108833,57.1398162 205.438176,58.1959938 204.948187,58.9664423 C204.681596,59.3862231 204.350447,59.9071223 204.447516,60.0254031 C204.44798,60.0254031 204.448909,60.0249392 204.450767,60.0249392 C204.45634,60.0249392 204.469344,60.0267946 204.489316,60.0267946 C205.310453,60.0267946 207.724171,57.8991323 208.253173,55.1109531 C208.666064,52.93737 208.53602,51.0536908 207.922024,50.3129285 Z",
                              id: "Path",
                              fill: "url(#linearGradient-195)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M150.17904,66.0336023 C149.874364,65.6115023 149.474013,65.4060185 148.955229,65.4060185 C148.867913,65.4060185 148.776418,65.4125123 148.683064,65.4241085 C147.237249,65.6077915 147.312024,67.2590838 147.552607,69.9373315 C147.654784,71.06958 147.760213,72.2403277 147.674756,73.3159869 C147.530778,75.1231315 146.69292,76.5554885 146.080318,77.6014615 C145.564784,78.4823054 145.260109,79.0338185 145.495118,79.2518262 C145.534131,79.2880062 145.571751,79.3023854 145.629807,79.3023854 C146.494602,79.3023854 148.663558,76.7215454 149.962144,72.8312677 C150.961629,69.8380685 151.044764,67.2331085 150.17904,66.0336023 Z",
                              id: "Path",
                              fill: "url(#linearGradient-196)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M12.8511836,1.58032385 C12.8521067,1.18512692 12.7424978,0.874813846 12.5246733,0.656342308 C12.2343956,0.365974615 11.7346533,0.211977692 11.0788578,0.211977692 C9.54526222,0.211977692 7.41067556,1.03484077 5.36851333,2.41385538 C2.77134,4.16719385 0.985551111,5.77163769 0.155588889,6.71046231 C0.188564444,6.69098077 0.22154,6.67149923 0.254051111,6.65201769 C1.36453778,5.99289231 3.04211111,4.99655077 5.10563778,4.45060385 C6.28068222,4.13982692 7.48498667,3.96820385 8.54670667,3.81745385 C11.2925022,3.42643154 12.8465333,3.13003385 12.8511836,1.58032385 Z",
                              id: "Path",
                              fill: "url(#linearGradient-197)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M47.5168467,79.5282785 C47.1369311,79.03521 46.1615978,78.6961385 44.9071333,78.6209954 C44.7120667,78.6093992 44.4784511,78.6038331 44.2146467,78.5968754 C42.4372178,78.55281 39.4619867,78.4795223 37.3134667,76.59306 C34.6220111,74.2297638 34.37632,71.7157177 34.2583511,70.5078623 C34.25092,70.4331831 34.2430244,70.35201 34.2346644,70.2759392 C34.1891489,70.3241792 34.1408467,70.3932923 34.09208,70.4902362 C33.4929467,71.68464 33.8672889,75.1435408 35.6117422,77.4748315 C37.0436244,79.3877331 39.9496533,81.3813438 43.2133044,81.5218892 C43.6048311,81.5385877 43.9522356,81.5469369 44.2754889,81.5469369 C47.0398622,81.5469369 47.54332,80.8994077 47.6710422,80.2662577 C47.7295622,79.9754262 47.6807956,79.74072 47.5168467,79.5282785 Z",
                              id: "Path",
                              fill: "url(#linearGradient-198)"
                            }
                          })
                        ]
                      )
                    ]
                  ),
                  _vm._v(" "),
                  _c(
                    "g",
                    {
                      attrs: {
                        id: "Subscribe",
                        transform: "translate(156.000000, 45.000000)",
                        "fill-rule": "nonzero"
                      }
                    },
                    [
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "Group-4",
                            transform:
                              "translate(35.280000, 359.640000) scale(-1, 1) translate(-35.280000, -359.640000) translate(0.280000, 325.640000)"
                          }
                        },
                        [
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "dog_x5F_tail",
                                transform: "translate(47.880000, 17.640000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M0.09,19.62 C1.40256,19.60812 5.39892,19.45512 8.28,16.47 C12.015,12.6 10.71,5.22 10.71,5.22 C10.71,5.22 12.06252,5.166 12.6,6.345 C13.29768,7.875 12.375,10.665 12.96,10.98 C13.9356,11.50524 14.175,9.225 14.94,9.585 C15.705,9.945 15.60168,11.69928 15.435,13.275 C15.27732,14.76288 14.24232,16.16436 14.60232,16.62768 C15.075,17.23536 16.2,15.705 16.56,16.425 C16.92,17.145 15.615,18.54 14.46732,19.28268 C13.4694,19.92852 11.74464,20.52036 11.78964,20.88036 C11.83464,21.24036 13.45464,21.24036 13.18464,21.96036 C12.91464,22.68036 10.88964,22.41036 9.67464,22.41036 C8.45964,22.41036 6.61464,22.36536 5.62464,23.17536 C4.63464,23.98536 0.09,19.62 0.09,19.62 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-199)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M4.80024,12.66012 C4.74372,12.66012 4.68792,12.63384 4.653,12.58416 C4.59576,12.50316 4.61484,12.39084 4.69584,12.33324 C4.71888,12.31668 7.00812,10.67076 6.90048,8.9514 C6.831,7.84224 6.22476,7.27776 5.52312,6.624 C5.06736,6.1992 4.59612,5.76036 4.22532,5.13144 C2.75832,2.64384 4.32648,0.73836 5.05512,0.21384 C5.13504,0.15588 5.24772,0.17388 5.30604,0.25488 C5.36436,0.33552 5.346,0.44784 5.26536,0.50616 C4.6116,0.97704 3.20508,2.69352 4.53564,4.94856 C4.88016,5.53248 5.33196,5.95332 5.769,6.36048 C6.49584,7.03728 7.182,7.67664 7.26048,8.92872 C7.38072,10.8486 5.0058,12.555 4.90464,12.62664 C4.87224,12.64932 4.83624,12.66012 4.80024,12.66012 Z",
                                  id: "Path",
                                  fill: "#E8878E"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M2.04012,8.03988 C2.00376,8.03988 1.9674,8.02908 1.93572,8.00676 C0.70956,7.1352 0.36864,5.9598 0.2988,5.12748 C0.20016,3.95244 0.59292,2.87244 1.01268,2.45268 C1.08288,2.38248 1.197,2.38248 1.2672,2.45268 C1.3374,2.52288 1.3374,2.637 1.2672,2.7072 C0.89964,3.07476 0.57096,4.06944 0.65736,5.09724 C0.72108,5.85396 1.03068,6.92172 2.14452,7.71336 C2.22552,7.77096 2.24424,7.88328 2.18664,7.96428 C2.15208,8.0136 2.09628,8.03988 2.04012,8.03988 Z",
                                  id: "Path",
                                  fill: "#E8878E"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M16.02036,21.6 C16.01496,21.6 16.01028,21.6 16.00488,21.59928 C15.90624,21.591 15.83244,21.50388 15.84072,21.40488 C15.89544,20.74752 16.70904,20.42568 18.18576,19.84176 C18.63576,19.66392 19.15128,19.4598 19.7298,19.21428 C20.54556,18.8676 21.06684,18.38484 21.27924,17.77968 C21.57768,16.92936 21.19824,16.07364 21.02148,15.74532 C20.97432,15.65784 21.00708,15.54876 21.09456,15.50124 C21.18168,15.45444 21.29112,15.48684 21.33864,15.57432 C21.53808,15.94476 21.96468,16.91316 21.61908,17.89884 C21.3714,18.60372 20.78352,19.15776 19.87056,19.54548 C19.28916,19.7928 18.77076,19.99764 18.31788,20.17656 C17.01972,20.68992 16.23564,20.99988 16.19928,21.43476 C16.19172,21.52908 16.11288,21.6 16.02036,21.6 Z",
                                  id: "Path",
                                  fill: "#E8878E"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "dog_x5F_hose",
                                transform: "translate(30.960000, 16.200000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M0.45324,0.16812 L0.7398,0.18972 C0.86796,0.20556 1.01448,0.22104 1.12752,0.24228 C1.36152,0.28188 1.59336,0.3312 1.81908,0.39564 C2.27196,0.52164 2.70576,0.693 3.11544,0.89964 C3.93552,1.31364 4.65948,1.86624 5.28012,2.50092 C6.5196,3.77424 7.35804,5.37264 7.77384,7.05672 C8.17992,8.70588 8.262,10.40868 8.00028,12.10716 C7.72956,13.79592 7.12656,15.50664 5.91552,17.00136 L2.99556,14.49828 C3.68568,13.7538 4.19688,12.64752 4.44348,11.4678 C4.69584,10.28628 4.70592,9.00648 4.47552,7.80012 C4.25664,6.63156 3.7386,5.52168 2.98116,4.65228 C2.6028,4.2192 2.16468,3.84984 1.69236,3.57732 C1.45656,3.44124 1.21212,3.32892 0.96444,3.24432 C0.8406,3.2004 0.71604,3.16728 0.59112,3.13812 L0.43668,3.105 C0.37224,3.09348 0.26244,3.08268 0.17748,3.07152 L0.45324,0.16812 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-200)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M3.24612,5.21712 C3.15684,5.21712 3.07908,5.15052 3.06792,5.05944 C3.05568,4.9608 3.12552,4.8708 3.22416,4.85856 C3.84588,4.78044 4.96116,4.41216 5.45112,2.81988 C5.47992,2.72484 5.58144,2.6712 5.67576,2.70072 C5.77116,2.72988 5.82408,2.83068 5.79492,2.92572 C5.24628,4.71132 3.97692,5.12712 3.26916,5.21568 C3.26124,5.21676 3.25368,5.21712 3.24612,5.21712 Z",
                                  id: "Path",
                                  fill: "#FFA2BA"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M5.79132,9.11304 C5.31432,9.11304 4.87044,9.03564 4.55472,8.9424 C4.45932,8.91432 4.40496,8.81424 4.43304,8.71884 C4.46076,8.62344 4.56012,8.56836 4.6566,8.59716 C5.44176,8.82828 7.11108,8.96652 7.80336,7.8336 C7.85484,7.74864 7.965,7.72164 8.05104,7.77384 C8.13564,7.82568 8.16264,7.93656 8.1108,8.02152 C7.59492,8.8668 6.64092,9.11304 5.79132,9.11304 Z",
                                  id: "Path",
                                  fill: "#FFA2BA"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M6.71004,13.2858 C5.22252,13.2858 4.41684,12.51612 4.10508,12.12732 C4.0428,12.04956 4.05504,11.93652 4.1328,11.87424 C4.2102,11.81268 4.32324,11.82456 4.38552,11.90196 C4.72824,12.32928 5.74596,13.27104 7.79112,12.79332 C7.8912,12.77064 7.9848,12.83112 8.00784,12.9276 C8.03052,13.02444 7.9704,13.12128 7.87356,13.14396 C7.44624,13.24332 7.05924,13.2858 6.71004,13.2858 Z",
                                  id: "Path",
                                  fill: "#FFA2BA"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "dog_x5F_right_leg",
                                transform: "translate(33.120000, 50.400000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M12.94956,8.76312 C12.77748,8.43048 12.62556,8.08092 12.51,7.71012 C11.76336,5.30892 12.02976,3.00024 12.02976,3.00024 C12.02976,3.00024 8.81964,1.98036 6.26976,1.44036 C3.71988,0.90036 0.30636,0.1728 0.30636,0.1728 C0.38988,2.49048 1.86012,7.23024 4.97988,10.20024 C6.30756,11.46456 7.51032,12.2976 8.56908,12.87036 C9.90108,12.86892 12.06,11.18196 12.94956,8.76312 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-201)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M15.68988,16.62012 C16.67232,16.38 16.13988,13.23 15.84,12.51 C15.58548,11.89872 13.91616,10.63584 12.94956,8.76312 C12.06,11.18196 9.90108,12.86892 8.56908,12.87 C10.818,14.08608 12.41532,14.12136 13.16988,14.58 C13.86252,15.0012 14.63688,16.87752 15.68988,16.62012 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-202)"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "dog_x5F_right_hand",
                                transform: "translate(1.080000, 33.840000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M14.33988,0.20988 C12.92904,1.02996 11.9916,1.4868 9.63,1.55988 C9.50292,1.56384 9.3726,1.56528 9.24012,1.56564 C9.60804,2.78316 9.65952,4.8582 9.03456,6.40332 C11.18412,7.29288 13.42152,7.64856 15.56928,7.389 C16.80192,6.02496 15.68268,1.755 14.33988,0.20988 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-203)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M9.24012,1.56564 C7.35408,1.56564 4.977,1.19664 3.98988,1.22976 C2.43,1.28232 1.50732,1.88964 0.83232,2.58732 C0.25524,3.18348 0.10476,4.3722 0.76464,4.79232 C1.59084,5.31792 3.65976,4.55976 4.79952,4.40964 C5.93928,4.25952 6.83964,5.48964 8.99964,6.38964 C9.0108,6.39432 9.02232,6.39792 9.0342,6.40296 C9.65952,4.8582 9.60804,2.78316 9.24012,1.56564 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-204)"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "dog_x5F_body",
                                transform: "translate(13.680000, 26.280000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M32.175,15.975 C35.1522,12.54996 39.47976,13.617 40.311,14.43888 C40.26348,14.38632 40.21848,14.33124 40.16988,14.27976 C36.63072,10.53072 31.62024,9.50976 26.57988,6.95988 C22.26348,4.77612 17.70012,1.73988 16.38,0.315 C16.38,0.315 14.10012,3.51 8.70984,5.83452 C5.05044,7.4124 0.27,6.885 0.27,6.885 C0.27,6.885 0.69516,10.899 2.34,13.95 C4.815,18.54 13.23,23.31 20.565,25.65 C25.6932,27.28584 29.16324,27.74556 32.805,28.125 C31.995,26.64 29.1492,19.4562 32.175,15.975 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-205)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M31.98384,16.39584 C31.97628,16.39584 31.96908,16.39548 31.96152,16.3944 C19.85868,14.91192 13.35924,5.70672 12.58092,3.95568 C12.5406,3.86496 12.58164,3.7584 12.67236,3.71808 C12.76344,3.67848 12.86964,3.71844 12.90996,3.80952 C13.6746,5.52996 20.06964,14.57532 32.00508,16.03728 C32.10372,16.04916 32.17428,16.13916 32.16204,16.2378 C32.15088,16.32888 32.07348,16.39584 31.98384,16.39584 Z",
                                  id: "Path",
                                  fill: "#00E2EC"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "dog_x5F_left_leg",
                                transform: "translate(44.280000, 39.600000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M14.337,16.55892 C13.40028,13.75524 13.527,5.37012 9.71064,1.11924 C8.8794,0.297 4.55184,-0.77004 1.57464,2.65536 C-1.45116,6.13656 1.39464,13.32036 2.20464,14.80536 C4.15044,17.87364 6.30864,19.86084 8.27208,21.2184 C9.78048,20.93976 13.43412,18.77724 14.337,16.55892 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-206)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M15.705,26.55 C17.22132,26.48448 17.00244,22.72392 16.74,21.105 C16.47,19.44 15.03072,18.37152 14.4,16.74 C14.37804,16.68348 14.35788,16.62048 14.337,16.55892 C13.43412,18.77724 9.78048,20.93976 8.27244,21.2184 C10.35,22.6548 12.20904,23.38632 13.365,23.94036 C13.94604,24.21828 14.31,26.61012 15.705,26.55 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-207)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M12.19536,19.2942 C12.14964,19.2942 12.10392,19.27692 12.06864,19.242 C4.64148,11.89476 5.32404,5.07096 5.58108,2.502 C5.5908,2.403 5.68044,2.3328 5.778,2.34072 C5.87664,2.35044 5.94936,2.43864 5.93892,2.53764 C5.68692,5.0598 5.0166,11.75976 12.32172,18.98604 C12.39228,19.05588 12.393,19.17 12.32316,19.24056 C12.28824,19.27656 12.2418,19.2942 12.19536,19.2942 Z",
                                  id: "Path",
                                  fill: "#00E2EC"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "dog_x5F_left_hand",
                                transform: "translate(11.880000, 32.400000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M22.815,1.665 C21.58524,0.41328 18.855,-0.45 16.38,0.585 C13.06188,1.97244 10.12356,6.31152 8.03016,8.74008 C9.22284,9.00828 10.85508,9.77364 11.565,11.09232 C12.05784,12.00744 12.23604,12.98196 12.29508,13.70772 C15.8598,13.04784 19.91844,11.45952 22.23,9.225 C25.28892,6.26796 24.075,2.94768 22.815,1.665 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-208)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M8.03016,8.74008 C7.55892,9.28656 7.13052,9.73728 6.75,10.035 C4.48596,11.80692 2.35044,13.05828 1.44,13.995 C0.65232,14.805 -0.09,16.065 0.675,16.785 C1.71972,17.76852 3.21768,16.89768 4.905,15.435 C6.255,14.265 6.96132,14.32764 10.54944,13.96332 C11.10996,13.90644 11.69676,13.8186 12.29544,13.70808 C12.2364,12.98232 12.0582,12.0078 11.56536,11.09268 C10.85472,9.77364 9.22284,9.00828 8.03016,8.74008 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-209)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M11.565,11.27268 C11.49048,11.27268 11.421,11.22624 11.39472,11.15172 C11.36232,11.05776 11.412,10.95516 11.50596,10.92276 C16.326,9.24984 21.88908,3.21624 22.65192,1.58868 C22.6944,1.49868 22.80204,1.4598 22.89132,1.50228 C22.98132,1.5444 23.0202,1.65168 22.97808,1.74168 C22.17456,3.45528 16.62012,9.52884 11.62404,11.2626 C11.60424,11.26944 11.5848,11.27268 11.565,11.27268 Z",
                                  id: "Path",
                                  fill: "#00E2EC"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "dog_x5F_head",
                                transform: "translate(2.520000, 7.200000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M5.13252,16.64568 C5.895,16.62732 9.315,15.63732 9.9,14.625 C10.485,13.61268 11.88,14.55732 11.88,14.55732 C11.88,14.55732 12.03768,17.325 9.02232,17.415 C6.00696,17.505 5.13252,16.64568 5.13252,16.64568 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-210)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M7.20252,16.87068 C7.28496,16.62336 7.76268,16.21116 8.61768,15.90732 C9.54072,15.57936 10.30536,15.47964 11.54268,15.45732 C10.42884,16.21476 10.93536,17.34408 10.02024,17.415 C7.89012,17.57988 7.20252,16.87068 7.20252,16.87068 Z",
                                  id: "Path",
                                  fill: "#D039A3"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M13.26024,5.87988 C13.14036,4.91976 13.3506,0.27 13.74048,0.14976 C14.13036,0.02952 16.92,3.08988 16.95024,5.42988 C15.66036,6.12 13.26024,5.87988 13.26024,5.87988 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-211)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M0.27,7.695 C0.54324,7.31916 0.945,7.335 1.35,7.335 C1.755,7.335 9.495,7.425 9.495,7.425 C9.495,7.425 12.42,5.4 14.67,5.13 C16.92,4.86 19.935,5.175 19.935,5.175 C19.935,5.175 21.24,3.825 22.365,2.835 C23.49,1.845 24.795,0.54 25.29,0.675 C25.785,0.81 25.42356,4.3038 24.84,6.03 C24.3,7.62768 22.995,9.225 22.995,9.225 C22.995,9.225 23.49,12.24 24.66,14.805 C25.6788,17.0388 27.54,19.395 27.54,19.395 C27.54,19.395 25.24752,22.99752 20.61,24.66 C14.64732,26.79768 11.43,25.965 11.43,25.965 C11.43,25.965 11.35908,24.39 11.385,23.04 C11.41668,21.39912 11.475,20.025 11.475,20.025 C11.475,20.025 9.46764,19.75896 7.92,19.125 C6.05232,18.36 5.175,17.66232 5.13252,16.64568 C5.50944,16.76088 6.5718,17.04276 8.325,16.695 C11.27268,16.11 11.43,14.805 11.43,14.805 C11.43,14.805 9.306,15.43968 5.94,14.085 C2.25,12.6 -0.80964,9.18 0.27,7.695 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-212)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M3.84084,7.36056 C2.5416,7.34616 1.49256,7.335 1.35,7.335 C0.945,7.335 0.54324,7.31916 0.27,7.695 C-0.26748,8.43444 0.2214,9.65304 1.30284,10.87416 C2.24532,10.40472 3.71088,9.22284 3.84084,7.36056 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-213)"
                                }
                              }),
                              _vm._v(" "),
                              _c("circle", {
                                attrs: {
                                  id: "Oval",
                                  fill: "#212F66",
                                  cx: "12.63024",
                                  cy: "7.80012",
                                  r: "1"
                                }
                              }),
                              _vm._v(" "),
                              _c("circle", {
                                attrs: {
                                  id: "Oval",
                                  fill: "#0090B2",
                                  cx: "12.43908",
                                  cy: "7.515",
                                  r: "1"
                                }
                              }),
                              _vm._v(" "),
                              _c("circle", {
                                attrs: {
                                  id: "Oval",
                                  fill: "#212F66",
                                  cx: "17.07048",
                                  cy: "9.11988",
                                  r: "1"
                                }
                              }),
                              _vm._v(" "),
                              _c("circle", {
                                attrs: {
                                  id: "Oval",
                                  fill: "#0090B2",
                                  cx: "16.74",
                                  cy: "8.88012",
                                  r: "1"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c("g", { attrs: { id: "dog_x5F_helmet" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M24.86304,2.76336 C17.34912,-1.90764 7.47072,0.39708 2.80008,7.911 C-1.87056,15.42492 0.4338,25.30332 7.94808,29.97432 C15.462,34.64532 25.3404,32.3406 30.01104,24.82668 C34.68168,17.31276 32.37768,7.43436 24.86304,2.76336 Z M27.9216,23.67612 C24.18444,29.68848 16.28064,31.5324 10.26864,27.79488 C4.25664,24.05736 2.41236,16.15392 6.15024,10.14156 C9.8874,4.12956 17.7912,2.28528 23.8032,6.0228 C29.81484,9.75996 31.65912,17.66376 27.9216,23.67612 Z",
                                id: "Shape",
                                fill: "url(#radialGradient-214)"
                              }
                            }),
                            _vm._v(" "),
                            _c(
                              "g",
                              {
                                attrs: {
                                  id: "Group",
                                  opacity: "0.5",
                                  transform: "translate(12.600000, 2.880000)",
                                  fill: "#FFFFFF"
                                }
                              },
                              [
                                _c("path", {
                                  attrs: {
                                    d:
                                      "M2.709,1.40868 L2.31156,1.49724 L1.94544,1.5948 C1.6974,1.66572 1.45188,1.74312 1.2096,1.82628 C0.83124,1.9566 0.41904,1.75536 0.28836,1.377 C0.1584,0.99864 0.35928,0.58644 0.738,0.45612 C0.78876,0.43848 0.84528,0.4266 0.8964,0.42084 C1.18152,0.38988 1.46592,0.36648 1.74996,0.351 L2.1852,0.33588 L2.59236,0.33732 C2.89188,0.33804 3.13416,0.58212 3.1330836,0.88164 C3.13272,1.1394 2.95128,1.35468 2.709,1.40868 Z",
                                    id: "Path"
                                  }
                                })
                              ]
                            ),
                            _vm._v(" "),
                            _c(
                              "g",
                              {
                                attrs: {
                                  id: "Group",
                                  opacity: "0.5",
                                  transform: "translate(5.040000, 3.960000)",
                                  fill: "#FFFFFF"
                                }
                              },
                              [
                                _c("path", {
                                  attrs: {
                                    d:
                                      "M6.54516,1.47492 L6.13872,1.65528 L5.77116,1.83384 C5.52204,1.962 5.2758,2.09736 5.03424,2.24064 C4.55256,2.52936 4.09104,2.85228 3.65364,3.20688 C2.7792,3.91536 2.00448,4.75056 1.35756,5.67972 C1.1664,5.95584 0.78732,6.0246 0.5112,5.83308 C0.24048,5.64552 0.17028,5.27616 0.34776,5.00148 C1.02636,3.9582 1.85364,3.00672 2.80044,2.1888 C3.27348,1.77984 3.7764,1.404 4.3038,1.06524 C4.56768,0.89676 4.83768,0.73692 5.11236,0.585 L5.54004,0.36108 L5.94216,0.1674 C6.30036,-0.00504 6.73056,0.14544 6.90336,0.50364 C7.07616,0.86184 6.92568,1.2924 6.56676,1.46484 C6.561,1.46772 6.55092,1.47204 6.54516,1.47492 Z",
                                    id: "Path"
                                  }
                                })
                              ]
                            ),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M30.98772,27.4392 C30.60072,27.12132 30.2814,26.83404 30.06,26.595 C30.06,26.595 29.79432,26.25804 29.40876,25.71948 C25.80516,30.7404 19.74492,33.11172 13.9176,32.1984 C13.932,32.76612 13.95,33.165 13.95,33.165 C13.95,33.165 14.0076,33.70608 14.16132,34.54056 C20.4858,35.3178 26.96688,32.74812 30.98772,27.4392 Z",
                                id: "Path",
                                fill: "url(#linearGradient-215)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M31.9356,12.43692 C31.45896,10.6146 30.66084,8.87976 29.58876,7.33716 C28.51452,5.79672 27.16956,4.44744 25.6302,3.37932 C24.09588,2.30076 22.38192,1.4886 20.5722,1.00476 C18.76536,0.5166 16.87284,0.35928 15.01128,0.52848 C11.28492,0.86148 7.69716,2.5506 5.09508,5.23152 C2.48112,7.89696 0.84672,11.502 0.60444,15.22332 C0.31932,18.9396 1.40004,22.74624 3.60792,25.75908 C5.80032,28.782 9.10368,30.978 12.74184,31.84488 C16.37928,32.72724 20.32272,32.25384 23.66316,30.55356 C25.33716,29.7144 26.86716,28.5786 28.14768,27.20412 C29.4318,25.83324 30.4704,24.23016 31.20912,22.4982 C30.4974,24.24168 29.4822,25.86564 28.21284,27.26388 C26.94636,28.66608 25.42284,29.83608 23.74344,30.71088 C20.37708,32.45292 16.38396,32.95296 12.68676,32.07816 C8.98884,31.2174 5.61744,29.00592 3.366,25.93656 C1.10052,22.87872 -0.02808,19.00044 0.24624,15.19776 C0.51444,11.39256 2.20392,7.72344 4.8816,5.022 C7.54812,2.304 11.2068,0.60804 14.99004,0.29052 C18.774,-0.04968 22.65588,1.02024 25.73136,3.23604 C27.27036,4.3398 28.60452,5.72184 29.66112,7.28748 C30.71484,8.85564 31.48704,10.60776 31.9356,12.43692 Z",
                                id: "Path",
                                fill: "#FFFFFF"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M31.93128,12.438 C31.33872,12.63564 30.76956,12.93624 30.25332,13.34916 C27.8964,15.2334 27.513,18.67248 29.3976,21.03012 C29.90448,21.66444 30.52512,22.15476 31.20588,22.49676 C32.55948,19.23876 32.75964,15.71112 31.93128,12.438 Z",
                                id: "Path",
                                fill: "url(#linearGradient-216)"
                              }
                            })
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "envelopes",
                            transform:
                              "translate(377.500000, 25.000000) scale(1, -1) rotate(161.000000) translate(-377.500000, -25.000000) translate(341.000000, 12.000000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M68.6388521,25.8561205 C68.3218963,25.8561205 68.0611841,25.5994331 68.0529819,25.2761971 C68.0002536,23.0777171 67.4512932,21.5084778 66.3750496,20.4781631 C64.1229645,18.3236527 59.5924301,18.4781405 53.8614476,18.6748153 L52.3504883,18.7259151 C50.1206663,18.7924637 48.7052038,18.3854478 47.8732681,17.4359421 C46.7413668,16.1441866 47.0284432,14.2023939 47.331924,12.1465181 C47.6066971,10.2920705 47.8896725,8.3740452 47.2047902,6.78341521 C45.1794368,2.07569709 33.2323713,2.21117099 23.3258918,5.03770326 C13.059688,7.96584095 5.10532799,11.1476951 5.02623551,11.1791869 C4.72568409,11.299212 4.38470762,11.150666 4.26577596,10.8452556 C4.14625844,10.5404393 4.29389774,10.1952185 4.59503503,10.074005 C4.67471338,10.0419191 12.6812158,6.83926849 23.008936,3.89330529 C31.3534855,1.51300505 45.5924753,0.0637907986 48.279862,6.307474 C49.0989086,8.21183303 48.77668,10.3954584 48.4913612,12.3223965 C48.2177598,14.1726848 47.9816541,15.770445 48.7491441,16.6462718 C49.3244686,17.3034391 50.492108,17.593995 52.3135785,17.5381417 L53.8210226,17.4882303 C59.8256064,17.2820485 64.5705693,17.1198363 67.1782777,19.614814 C68.4941422,20.8738895 69.163206,22.7164534 69.2243021,25.2476763 C69.2317528,25.5756658 68.9757275,25.8483961 68.6523271,25.8561205 C68.6482261,25.8561205 68.6435391,25.8561205 68.6388521,25.8561205 Z",
                              id: "Path",
                              fill: "#FDE1A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M71.9250141,20.7756863 C71.6831039,20.7756863 71.484094,20.5807471 71.4781356,20.3352681 C71.3798223,16.25057 69.7198176,14.3204314 65.7479614,13.672439 C65.5042637,13.6327292 65.3380248,13.4010885 65.377946,13.1550079 C65.4172713,12.9089272 65.6520315,12.7422662 65.8897709,12.7813744 C70.2644136,13.4949481 72.2634501,15.8173718 72.3718926,20.3130065 C72.377851,20.5620955 72.183012,20.769068 71.9363351,20.7750846 C71.9321642,20.7756863 71.9285892,20.7756863 71.9250141,20.7756863 Z",
                              id: "Path",
                              fill: "#FDE1A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.23038988,5.65249276 C8.09431992,5.65249276 7.95997967,5.58646941 7.87580079,5.46215518 C7.7385777,5.2605163 7.78643281,4.98214759 7.98188924,4.84117882 C9.23073472,3.93885972 15.9050816,0.36051319 23.3820107,0.671596175 C23.6207097,0.681707859 23.8063644,0.889294784 23.7971394,1.13494922 C23.7879143,1.38119847 23.5826562,1.57807891 23.3479932,1.56320878 C16.100538,1.26104787 9.67930434,4.70437368 8.47831397,5.57219409 C8.40278361,5.62632134 8.31629846,5.65249276 8.23038988,5.65249276 Z",
                              id: "Path",
                              fill: "#FDE1A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.625607,15.050401 C23.5723683,15.050401 23.5179969,15.0430484 23.4647582,15.0275263 C21.9961637,14.5941332 17.8384497,14.641108 16.4978545,14.6925759 C16.249785,14.6970692 16.0634496,14.5712586 16.0509895,14.4029664 C16.0390957,14.2338573 16.2186347,14.0896653 16.452545,14.0806788 C16.5069164,14.0790449 21.8636334,13.8935968 23.7864558,14.4605616 C24.0033751,14.5246923 24.1075869,14.7036048 24.018667,14.8604596 C23.9518355,14.9785092 23.7932522,15.050401 23.625607,15.050401 Z",
                              id: "Path",
                              fill: "#FDE1A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("polygon", {
                            attrs: {
                              id: "Path",
                              fill: "#FE697A",
                              points:
                                "-0.000453226501 12.4594053 3.90639241 6.13655011 6.99954677 15.1365501"
                            }
                          })
                        ]
                      )
                    ]
                  ),
                  _vm._v(" "),
                  _c(
                    "g",
                    {
                      attrs: {
                        id: "Delivery",
                        transform: "translate(285.000000, -74.000000)"
                      }
                    },
                    [
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "left_drone_arm",
                            transform: "translate(151.000000, 94.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M0.481745455,0.49425283 C-0.393250909,0.887563019 2.29300364,6.02674642 3.14914909,7.4676634 C4.00529455,8.90858038 14.7372218,19.376803 18.8802327,27.9469902 C23.0242909,36.5171774 23.0729891,47.8745321 22.7755636,50.4331404 C22.4786618,52.9917487 29.1178473,54.0477238 29.1178473,54.0477238 C29.1178473,54.0477238 32.3785309,39.8247487 26.1001309,27.2644506 C20.9402182,16.9416272 10.1742545,8.11986792 7.95822545,6.12978113 C5.33271273,3.77096604 1.39339636,0.0842060377 0.481745455,0.49425283 Z",
                              id: "Path",
                              fill: "url(#linearGradient-217)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.3365236,24.1211072 C24.9732655,25.1493623 25.5681164,26.1980151 26.1011782,27.2639275 C26.3101091,27.6823426 26.5069964,28.1028498 26.6960291,28.524403 C25.8550691,28.2215751 21.4261527,28.6792166 20.1008291,30.7451411 C19.7238109,29.7906317 19.31904,28.8528589 18.8807564,27.9469902 C18.7702691,27.7184309 18.6529745,27.4877796 18.5330618,27.2571283 C19.5489164,25.0829389 23.1489164,24.0369011 24.3365236,24.1211072 Z",
                              id: "Path",
                              fill: "url(#linearGradient-218)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.8352291,48.6444158 C29.5985455,51.9425728 29.1183709,54.0472008 29.1183709,54.0472008 C29.1183709,54.0472008 22.4786618,52.9912257 22.7760873,50.4326174 C22.8520145,49.7814589 22.8771491,48.5314438 22.8996655,46.9398974 C25.4183564,46.2871698 28.1674473,47.289797 29.8352291,48.6444158 Z",
                              id: "Path",
                              fill: "url(#linearGradient-219)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.6939345,50.7208008 C24.74496,49.7322951 19.8337745,48.0403291 15.2378182,54.6115381 C10.6418618,61.1827472 9.21181091,67.7931826 12.25728,72.0484642 C15.3022255,76.3037457 22.1519127,78.5176845 25.5445527,75.5050958 C29.5870255,71.9145713 32.31936,61.0624528 30.5054836,55.189997 C29.62944,52.3573268 27.2819782,51.0189215 26.6939345,50.7208008 Z",
                              id: "Path",
                              fill: "url(#linearGradient-220)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M15.2372945,54.6115381 C18.4822691,49.9723608 21.88224,49.453003 24.2878255,49.895477 L24.2878255,49.895477 C21.9948218,50.8588777 13.2741818,62.7596491 13.0621091,73.0306936 L13.0621091,73.0306936 C12.7720145,72.7168823 12.5007709,72.3899955 12.2562327,72.0484642 C9.21128727,67.7931826 10.6408145,61.1827472 15.2372945,54.6115381 Z",
                              id: "Path",
                              fill: "url(#linearGradient-221)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "box",
                            transform: "translate(106.000000, 150.000000)"
                          }
                        },
                        [
                          _c("polygon", {
                            attrs: {
                              id: "Path",
                              fill: "url(#linearGradient-222)",
                              "fill-rule": "nonzero",
                              points:
                                "0 72.6996226 69.7911864 75.6635706 69.7911864 20.2235706 0 20.2235706"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "text",
                            {
                              attrs: {
                                id: "TAHI26",
                                "font-family":
                                  "BanglaSangamMN, Bangla Sangam MN",
                                "font-size": "5.01",
                                "font-weight": "normal",
                                fill: "#4A90E2"
                              }
                            },
                            [
                              _c(
                                "tspan",
                                { attrs: { x: "24.1661024", y: "48.9433962" } },
                                [_vm._v("TAHI26")]
                              )
                            ]
                          ),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M50.0255878,63.895646 C50.0213898,63.895646 50.0171919,63.895646 50.0135186,63.895646 L18.5287729,63.1545283 C18.2438359,63.1477291 18.0160963,62.9155087 18.0160963,62.6315094 L18.0160963,30.6839479 C18.0160963,30.5443019 18.0717193,30.4109321 18.171421,30.3126045 C18.270598,30.214277 18.4164773,30.1624981 18.54504,30.1609291 L50.0297858,30.4224385 C50.3178712,30.4245306 50.5503336,30.65832 50.5503336,30.9454574 L50.5503336,63.3726272 C50.5503336,63.5138423 50.493661,63.6482581 50.3923851,63.7465857 C50.2942576,63.8422981 50.1625464,63.895646 50.0255878,63.895646 Z M19.0655878,62.12052 L49.500842,62.8370558 L49.500842,31.4642921 L19.0655878,31.211674 L19.0655878,62.12052 L19.0655878,62.12052 Z",
                              id: "Shape",
                              fill: "#FFFFFF",
                              "fill-rule": "nonzero"
                            }
                          }),
                          _vm._v(" "),
                          _c("polygon", {
                            attrs: {
                              id: "Path",
                              fill: "url(#linearGradient-223)",
                              "fill-rule": "nonzero",
                              points:
                                "84.6588081 51.7788679 69.7911864 75.6635706 69.7911864 20.2235706 84.6588081 0"
                            }
                          }),
                          _vm._v(" "),
                          _c("polygon", {
                            attrs: {
                              id: "Path",
                              fill: "url(#linearGradient-224)",
                              "fill-rule": "nonzero",
                              points:
                                "84.6588081 0 24.2694915 0 0 20.2235706 69.7911864 20.2235706"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M76.6401681,65.3946181 C76.3505085,65.3946181 76.1154224,65.1603057 76.1154224,64.8715992 L76.1154224,10.9075585 C76.1154224,10.6188521 76.3505085,10.3845396 76.6401681,10.3845396 C76.9298278,10.3845396 77.1649139,10.6188521 77.1649139,10.9075585 L77.1649139,64.8715992 C77.1649139,65.1603057 76.9298278,65.3946181 76.6401681,65.3946181 Z",
                              id: "Path",
                              fill: "#FBC881",
                              "fill-rule": "nonzero"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "Layer_4",
                            transform: "translate(83.000000, 54.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M0.523636364,46.1564151 C0.735185455,43.4063819 4.36346182,10.9833962 24.7418182,4.05339623 C29.9200582,2.2923917 40.4509091,2.52775019 47.6943709,5.92737283 C59.6495127,11.5383192 72.2408727,21.3757811 75.6654545,29.2890566 C80.1163636,39.5752687 79.0025891,63.4474189 78.2967273,65.2586332 C77.3803636,67.6122181 71.0836364,73.2880189 63.7527273,75.0532075 C57.9126109,76.4596053 37.3090909,77.7990566 29.5854545,75.0532075 C21.8618182,72.3073585 -0.261818182,56.355283 0.523636364,46.1564151 Z",
                              id: "Path",
                              fill: "url(#linearGradient-225)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M47.4906764,10.4289962 C49.48992,12.0969034 51.5122036,13.9468211 53.12448,16.1283328 C54.7540364,18.296246 56.0123345,20.7089321 56.9988655,23.1901336 C58.9698327,28.1708423 59.94432,33.4041691 60.7014982,38.5825789 C61.4434909,43.7761562 61.9330909,48.9875162 62.2614109,54.2109057 C62.5755927,59.4363872 62.7531055,64.6676219 62.5719273,69.9406981 L60.0893673,69.8360943 C60.3124364,64.7031872 60.1857164,59.5132709 59.92128,54.3453215 C59.6432291,49.17528 59.2038982,44.0073306 58.5195055,38.8864528 C57.8214982,33.7734204 56.9072291,28.6818317 55.0792145,23.9432808 C54.1644218,21.5818506 53.0098036,19.3276392 51.5247709,17.3145396 C50.0512582,15.2857494 48.2195782,13.5702475 46.2402327,11.8866498 L47.4906764,10.4289962 Z",
                              id: "Path",
                              fill: "url(#linearGradient-226)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M59.6945455,35.3037736 C50.7236073,35.5297177 40.0581818,32.0783162 38.2888145,29.8424106 C38.2888145,29.8424106 37.1127273,42.1683962 38.2254545,51.0816838 C41.8909091,58.0550943 52.8741818,61.9139275 61.1780073,61.2805517 C70.8872727,60.539434 77.4107345,53.5226128 78.90048,49.9535321 L78.90048,49.9535321 C78.6868364,42.5951796 77.8411636,34.318406 75.6649309,29.2895796 C75.1941818,28.2006543 74.5438255,27.0751177 73.75104,25.9297064 C73.1085382,30.8607283 67.4810182,35.1076415 59.6945455,35.3037736 Z",
                              id: "Path",
                              fill: "#FDE1A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M37.1781818,70.4767925 C38.7490909,68.2539623 39.3067636,44.4550347 38.7490909,34.3884906 C38.1380073,23.3616838 34.4290909,15.6251887 26.3561891,12.1167781 C21.0548945,9.81288 13.9156364,11.3835057 10.3947055,15.9437072 C2.47051636,28.0013842 0.670778182,44.2447811 0.523112727,46.1564151 C-0.262341818,56.355283 21.8612945,72.3073585 29.5849309,75.0532075 C29.9305309,75.176117 30.3096436,75.288043 30.7044655,75.3947389 C33.6823855,74.1332174 35.9910982,72.156206 37.1781818,70.4767925 Z",
                              id: "Path",
                              fill: "url(#linearGradient-227)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.64,54.0670755 C8.83636364,50.9289623 9.61029818,29.5139547 20.88,32.4925472 C28.7125527,34.5626558 27.3516218,49.9111675 27.0327273,55.3746226 C26.7850473,59.6189208 25.9854545,66.750283 25.9854545,66.750283 L8.64,54.0670755 Z",
                              id: "Path",
                              fill: "#FDE1A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M20.88,32.4925472 C20.2170764,32.3173358 19.5918545,32.2294687 18.9990982,32.2143011 C25.6896,35.3042966 24.4428218,49.508443 24.1385891,54.7218951 C23.9574109,57.824966 23.4819491,62.4678045 23.2389818,64.7424136 L25.9854545,66.750806 C25.9854545,66.750806 26.7850473,59.6194438 27.0327273,55.3751457 C27.3516218,49.9111675 28.7125527,34.5626558 20.88,32.4925472 Z",
                              id: "Path",
                              fill: "url(#linearGradient-228)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M38.7490909,34.3884906 C38.1380073,23.3616838 34.4290909,15.6251887 26.3561891,12.1167781 C25.6576582,11.8129042 24.9256145,11.5812068 24.1757673,11.4096566 C32.0826764,14.9661849 35.7313745,22.6519472 36.3361745,33.569443 C36.8938473,43.6359872 36.3361745,67.4349147 34.7652655,69.6577449 C33.60384,71.3010702 31.6035491,73.4083132 28.8418909,74.7665932 C29.1021382,74.8738121 29.3503418,74.9700475 29.5849309,75.0532075 C29.9305309,75.176117 30.3096436,75.288043 30.7044655,75.3947389 C33.6818618,74.1332174 35.9910982,72.156206 37.1776582,70.4767925 C38.7490909,68.2539623 39.3067636,44.4550347 38.7490909,34.3884906 Z",
                              id: "Path",
                              fill: "url(#linearGradient-229)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M78.5229382,64.0216936 C78.4580073,64.0787026 78.3920291,64.1341426 78.3276218,64.1916747 L77.7516218,64.7146936 L77.4740945,64.9725419 C77.4044509,65.0358272 77.3316655,65.0991125 77.2515491,65.1603057 C76.6032873,65.6550815 75.7152,66.0321781 74.8182109,66.3397132 C72.9985745,66.9490302 71.04384,67.3303109 69.0859636,67.6394151 C67.1218036,67.9391049 65.1366982,68.1728943 63.1442618,68.3512438 C61.1513018,68.5311623 59.1504873,68.6577328 57.1470545,68.7544913 C55.1446691,68.8632792 53.1391418,68.9365019 51.1330909,68.9757283 C47.12832,69.0295992 43.0916073,69.0698717 39.1528145,68.7916257 C38.1704727,68.7131728 37.2111709,68.6279208 36.3435055,68.4312657 C35.4365673,68.2403638 34.5228218,67.9626408 33.6169309,67.6404611 C31.8035782,66.9893026 30.0200727,66.1519494 28.2732218,65.2319592 C24.77376,63.3904098 21.4088727,61.2209275 18.1288145,58.93272 C14.8456145,56.6445125 11.6577164,54.2009683 8.58973091,51.6219623 C7.05128727,50.338474 5.53169455,49.0304038 4.07703273,47.6642785 C3.35074909,46.9806928 2.63808,46.2845547 1.96363636,45.5659268 C1.54106182,45.1145615 1.11063273,44.6427985 0.745134545,44.1710355 C0.615272727,45.15588 0.547723636,45.8457419 0.523636364,46.1558921 C0.518923636,46.2197004 0.518923636,46.2845547 0.515258182,46.348886 C0.593803636,46.4461675 0.671301818,46.5444951 0.751418182,46.6402075 C1.41957818,47.4320581 2.11496727,48.1862513 2.82292364,48.926846 C4.24145455,50.4028053 5.70711273,51.8228015 7.21361455,53.1967721 C10.2428509,55.9248385 13.392,58.5143049 16.6605382,60.9620332 C19.9385018,63.396686 23.3458036,65.6775713 26.9725091,67.6603358 C28.7921455,68.6409962 30.6678109,69.548434 32.6539636,70.2843215 C33.6483491,70.6488657 34.6704873,70.9726143 35.7397527,71.2095419 C36.8472436,71.4543147 37.9102255,71.5400898 38.9412655,71.6227268 C43.0727564,71.8946966 47.1346036,71.8931275 51.21216,71.738837 C53.2485818,71.6629992 55.2829091,71.5536883 57.3161891,71.407766 C59.3484218,71.2477223 61.3790836,71.04636 63.4071273,70.795834 C65.4351709,70.5432158 67.4616436,70.2471872 69.4792145,69.8408015 C71.4967855,69.4307547 73.5106909,68.9553306 75.4994618,68.1948611 C75.8010764,68.0740438 76.1026909,67.9479962 76.4032582,67.8114883 C77.3824582,66.8093842 78.0453818,65.9076996 78.2977745,65.2591562 C78.3700364,65.0713925 78.4475345,64.643563 78.5229382,64.0216936 Z",
                              id: "Path",
                              fill: "url(#linearGradient-230)"
                            }
                          }),
                          _vm._v(" "),
                          _c("ellipse", {
                            attrs: {
                              id: "Oval",
                              fill: "#9F36AD",
                              transform:
                                "translate(15.942360, 50.727623) rotate(98.412904) translate(-15.942360, -50.727623) ",
                              cx: "15.9423602",
                              cy: "50.7276229",
                              rx: "6.6663014",
                              ry: "3.74794535"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "drone_monitor",
                            transform: "translate(123.000000, 90.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M37.3837569,6.923136 C37.3837569,2.574 34.7808738,0.49896 31.24512,0.49896 C29.8250308,0.49896 28.5170123,0.96888 27.45576,1.754016 L27.4504985,1.749792 C27.4504985,1.749792 25.1932985,3.758304 19.9038738,3.96 C14.5055354,4.16592 11.15604,2.701776 9.93641538,2.043888 C9.77436,1.939872 9.60809538,1.841664 9.43656923,1.752432 C9.42288923,1.743456 9.40710462,1.732896 9.40710462,1.732896 C9.40710462,1.732896 9.40289538,1.735536 9.40236923,1.736064 C8.52737538,1.286208 7.53925846,1.027488 6.48852923,1.027488 C2.95330154,1.027488 0.0868153846,3.903504 0.0868153846,7.451664 C0.0868153846,8.327088 0.262550769,9.160272 0.578769231,9.920592 C0.578769231,9.92112 0.578243077,9.921648 0.578243077,9.922176 C0.986012308,11.484 6.80422154,21.56616 19.8617815,21.6042632 C31.7607508,21.639024 37.3837569,11.22 37.3837569,6.923136 Z",
                                id: "Path",
                                fill: "#C7A0F6"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M6.44012308,10.56 L4.92269538,9.096912 C6.15810462,7.807008 7.82022462,7.09632 9.60230769,7.09632 C11.0781692,7.09632 12.4687938,7.581024 13.6242277,8.497632 L12.3193662,10.154496 C11.53908,9.53568 10.5993692,9.20832 9.60230769,9.20832 C8.39794154,9.207792 7.27512923,9.687744 6.44012308,10.56 Z",
                                id: "Path",
                                fill: "#212F66"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M26.7964892,9.34824 L25.2790615,7.885152 C26.5144708,6.595248 28.1765908,5.88456 29.9586738,5.88456 C31.4345354,5.88456 32.82516,6.369264 33.9805938,7.285872 L32.6757323,8.942736 C31.8954462,8.32392 30.9557354,7.99656 29.9586738,7.99656 C28.7548338,7.99656 27.6314954,8.476512 26.7964892,9.34824 Z",
                                id: "Path",
                                fill: "#212F66"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M19.74708,18.348 C17.3025692,18.348 15.1064031,16.868016 14.4066185,14.74968 L15.4052585,14.417568 C15.96456,16.110336 17.7498,17.292 19.74708,17.292 C21.8369631,17.292 23.6427231,16.041168 24.1394123,14.25072 L25.1533108,14.533728 C24.5308708,16.779312 22.3073446,18.348 19.74708,18.348 Z",
                                id: "Path",
                                fill: "#9F36AD"
                              }
                            })
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "right_drone_arm",
                            transform: "translate(82.000000, 102.000000)",
                            "fill-rule": "nonzero"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M17.1878677,0.435309677 C18.1454677,0.550277419 18.3659262,5.86074194 17.9770985,7.49014839 C17.5882708,9.11955484 10.4357354,22.2964258 9.03248308,31.7028774 C7.62923077,41.109329 9.73384615,52.3448129 10.7861538,54.6964258 C11.8384615,57.0480387 5.78769231,60.030929 5.78769231,60.030929 C5.78769231,60.030929 -1.60634769,47.4367355 0.647169231,33.5893935 C2.49923077,22.2091548 10.17792,10.5916645 11.7069231,8.03415484 C13.5184708,5.00423226 16.19028,0.31563871 17.1878677,0.435309677 Z",
                                id: "Path",
                                fill: "url(#linearGradient-231)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M4.04928,29.9062452 C3.15534462,29.8937032 2.27298462,29.9522323 1.39641231,30.0682452 C1.09387385,31.2383032 0.837636923,32.4156774 0.646643077,33.5904387 C0.571403077,34.0518774 0.508790769,34.5112258 0.454596923,34.969529 C0.751347692,34.8535161 1.05704308,34.7432516 1.37115692,34.6465742 C2.28613846,34.3675161 3.24058154,34.1705032 4.18344923,34.0821871 C5.80137231,33.9264581 7.39193538,34.101 8.70153231,34.7348903 C8.77677231,33.7122 8.88410769,32.6973484 9.03195692,31.7034 C9.06931385,31.4525613 9.11298462,31.1975419 9.15823385,30.9414774 C8.73678462,30.7564839 8.3106,30.5897806 7.87757538,30.4617484 C6.60744,30.0849677 5.31573231,29.9250581 4.04928,29.9062452 Z",
                                id: "Path",
                                fill: "url(#linearGradient-232)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M3.47945538,55.0925419 C4.69592308,58.1674065 5.78769231,60.0314516 5.78769231,60.0314516 C5.78769231,60.0314516 11.8384615,57.0485613 10.7861538,54.6969484 C10.5183415,54.0985935 10.1826554,52.9233097 9.85433538,51.3519097 C7.24303385,51.8530645 4.85850462,53.6580581 3.47945538,55.0925419 Z",
                                id: "Path",
                                fill: "url(#linearGradient-233)"
                              }
                            })
                          ]),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(4.735385, 53.303226)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M2.37979385,2.83395484 C3.95246769,1.31115484 8.15538462,-1.76370968 14.535,3.13548387 C20.9146154,8.03467742 24.2688462,13.9137097 22.6246154,18.8782258 C20.9803846,23.8427419 15.07536,27.9925548 10.9176923,26.1290323 C5.96290154,23.9080645 0.0878676923,14.3709677 0.0657245176,8.23064516 C0.0552461538,5.26865806 1.90520308,3.29382581 2.37979385,2.83395484 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-234)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M12.1452092,5.57436774 C10.8734954,6.22759355 6.51115385,11.7146903 6.44538462,13.8050129 C6.38908615,15.5901484 7.85547692,16.9885742 8.95145538,16.7272839 C10.0474338,16.4659935 14.2061538,10.3862903 15.9603508,9.18905806 C17.05896,8.43863226 12.1452092,5.57436774 12.1452092,5.57436774 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-235)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M23.5127631,10.0926 C23.1507692,10.6481032 22.92084,14.3061677 23.61168,14.8287484 C24.30252,15.351329 26.1866769,13.9685806 27.7551415,13.6529419 C29.48724,13.3043806 31.0115077,13.3655226 31.4713662,12.921329 C31.9312246,12.4771355 32.1601015,9.41951613 29.7929354,8.69469677 C27.4257692,7.96987742 23.9836708,9.36882581 23.5127631,10.0926 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-236)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M23.7100708,21.5240516 C24.7655354,21.2016194 29.4067385,25.7783806 29.4319938,26.8805032 C29.4651415,28.3176 26.7028338,32.0519613 24.3788123,32.0519613 C22.0547908,32.0519613 19.0404554,28.0239097 18.9089169,26.8151806 C18.8142092,25.9492645 23.13972,21.698071 23.7100708,21.5240516 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-237)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M10.7861538,29.3951613 C11.0392338,28.8130065 15.5215385,27.4354839 16.1792308,28.0233871 C16.8369231,28.6112903 19.9649077,31.7143742 19.7965385,33.0532258 C19.665,34.0983871 17.5272369,36.0909871 15.8830062,35.5684065 C14.2387754,35.0458258 10.1616092,30.8322581 10.7861538,29.3951613 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-238)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M29.8687015,8.72396129 C30.4458923,9.87154839 30.2480585,11.3002839 29.9449938,11.5934516 C29.4851354,12.0376452 27.9608677,11.9765032 26.2287692,12.3250645 C25.2143446,12.528871 24.0694338,13.1773935 23.1991754,13.4700387 C23.2533692,14.1180387 23.3796462,14.6521161 23.61168,14.8277032 C24.30252,15.3502839 26.1866769,13.9675355 27.7551415,13.6518968 C29.48724,13.3033355 31.0115077,13.3644774 31.4713662,12.9202839 C31.9254369,12.4818387 32.1501046,9.4932 29.8687015,8.72396129 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-239)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M23.4622523,23.0348323 C24.4361631,22.7374839 28.4528215,26.6035355 29.09052,28.0704194 C29.3099262,27.6084581 29.4388338,27.1893484 29.4314677,26.8805032 C29.4062123,25.7783806 24.7650092,21.2016194 23.7095446,21.5240516 C23.13972,21.698071 18.8142092,25.9492645 18.9083908,26.8151806 C18.9257538,26.973 18.9941538,27.1804645 19.1014892,27.4187613 C20.1979938,25.8750581 23.00976,23.1727935 23.4622523,23.0348323 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-240)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M16.1792308,28.0233871 C15.5215385,27.4354839 11.0392338,28.8130065 10.7861538,29.3951613 C10.6882892,29.619871 10.7161754,29.9172194 10.82088,30.2521935 C12.2625415,29.6778774 14.6402308,29.1087871 15.1058769,29.5252839 C15.7635692,30.1131871 18.8915538,33.216271 18.7231846,34.5551226 C18.7189754,34.5896129 18.7068738,34.6272387 18.6984554,34.6638194 C19.3056369,34.1365355 19.7397138,33.5063032 19.7970646,33.0532258 C19.9649077,31.7143742 16.8369231,28.6112903 16.1792308,28.0233871 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-241)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M14.535,3.13548387 C10.0311231,-0.323477419 6.61428,0.193354839 4.43968615,1.33153548 L4.43968615,1.33153548 C6.92786769,1.56774194 18.8620892,10.3225355 22.1463415,20.0550774 L22.1463415,20.0550774 C22.3304954,19.6694129 22.4925508,19.2769548 22.6246154,18.8787484 C24.2688462,13.9137097 20.9146154,8.03467742 14.535,3.13548387 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-242)"
                                }
                              })
                            ]
                          )
                        ]
                      )
                    ]
                  ),
                  _vm._v(" "),
                  _c(
                    "g",
                    {
                      attrs: {
                        id: "Data",
                        transform: "translate(205.000000, 271.000000)",
                        "fill-rule": "nonzero"
                      }
                    },
                    [
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "background",
                            transform: "translate(38.520000, 28.800000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M155.16,0.18036 C177.12,0.54036 208.26,9.54036 216.72,31.86036 C225.81432,55.85292 224.739,60.98436 239.58,87.12036 C254.40048,113.21964 246.48048,149.93964 230.64048,165.53952 C208.20384,187.63596 188.69832,182.15172 148.86,181.98036 C120.96,181.86048 89.78436,202.09248 73.98,207.36036 C63.36,210.90024 40.68,214.74036 26.28,199.98036 C10.37844,183.68136 13.92012,153.54036 11.16,142.02036 C8.26884,129.9528 -10.87704,87.2838 9.72,54.00036 C34.56,13.86036 89.9928,-0.88812 155.16,0.18036 Z",
                              id: "Path",
                              fill: "url(#linearGradient-243)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M188.08092,242.78688 C196.0074,241.34832 225.36144,235.47132 226.68048,247.38048 C227.79,257.40036 203.99004,256.563 192.6,256.02048 C178.11,255.33036 148.54212,258.48576 147.42828,252.48276 C146.76048,248.88024 155.58048,246.96036 164.68308,246.42288 C172.1664,245.9808 176.47164,244.89396 188.08092,242.78688 Z",
                              id: "Path",
                              fill: "url(#linearGradient-244)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M55.1304,251.83692 C47.88036,251.01864 17.217,246.30696 18.72,258.18048 C19.91988,267.66072 42.54084,263.95236 52.80012,264.78072 C67.29012,265.95072 92.02824,264.411 92.51352,258.34356 C92.80476,254.70288 84.7098,253.4742 76.47912,253.64448 C69.71328,253.78452 65.74896,253.03572 55.1304,251.83692 Z",
                              id: "Path",
                              fill: "url(#linearGradient-245)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "graph_x5F_5",
                            transform: "translate(139.320000, 178.920000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M0.28512,0.82584 C0.28512,0.45072 0.58932,0.14652 0.96444,0.14652 L8.60616,0.14652 C8.98128,0.14652 9.28548,0.45072 9.28548,0.82584 L9.28548,8.46756 C9.28548,8.84268 8.98128,9.14688 8.60616,9.14688 L0.96444,9.14688 C0.58932,9.14688 0.28512,8.84268 0.28512,8.46756 L0.28512,0.82584 Z",
                                id: "Path",
                                fill: "url(#linearGradient-246)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M4.47012,7.2792 C4.35816,7.2792 4.25268,7.227 4.18428,7.13772 L1.97928,4.25772 C1.85832,4.10004 1.88856,3.87432 2.04624,3.75336 C2.20356,3.63276 2.43,3.66192 2.55096,3.82068 L4.43988,6.28776 L6.99948,2.18412 C7.10496,2.01528 7.32708,1.96452 7.49556,2.06928 C7.6644,2.1744 7.71552,2.39652 7.6104,2.56536 L4.7754,7.11036 C4.71276,7.21044 4.60512,7.2738 4.48704,7.27956 C4.48164,7.2792 4.47588,7.2792 4.47012,7.2792 Z",
                                id: "Path",
                                fill: "#FDE1A7"
                              }
                            })
                          ]),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(0.000000, 13.320000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M0.28512,0.77508 C0.28512,0.39996 0.58932,0.09576 0.96444,0.09576 L8.60616,0.09576 C8.98128,0.09576 9.28548,0.39996 9.28548,0.77508 L9.28548,8.4168 C9.28548,8.79192 8.98128,9.09612 8.60616,9.09612 L0.96444,9.09612 C0.58932,9.09612 0.28512,8.79192 0.28512,8.4168 L0.28512,0.77508 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-247)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M4.47012,7.22844 C4.35816,7.22844 4.25268,7.17624 4.18428,7.08696 L1.97928,4.20696 C1.85832,4.04928 1.88856,3.82356 2.04624,3.7026 C2.20356,3.582 2.43,3.61116 2.55096,3.76992 L4.43988,6.237 L6.99948,2.13336 C7.10496,1.96488 7.32708,1.9134 7.49556,2.01852 C7.6644,2.12364 7.71552,2.34576 7.6104,2.5146 L4.7754,7.0596 C4.71276,7.15968 4.60512,7.22304 4.48704,7.2288 C4.48164,7.22844 4.47588,7.22844 4.47012,7.22844 Z",
                                  id: "Path",
                                  fill: "#FDE1A7"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(0.000000, 26.640000)"
                              }
                            },
                            [
                              _c("path", {
                                attrs: {
                                  d:
                                    "M0.28512,0.72468 C0.28512,0.34956 0.58932,0.04536 0.96444,0.04536 L8.60616,0.04536 C8.98128,0.04536 9.28548,0.34956 9.28548,0.72468 L9.28548,8.3664 C9.28548,8.74152 8.98128,9.04572 8.60616,9.04572 L0.96444,9.04572 C0.58932,9.04572 0.28512,8.74152 0.28512,8.3664 L0.28512,0.72468 Z",
                                  id: "Path",
                                  fill: "url(#linearGradient-248)"
                                }
                              }),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M4.47012,7.17768 C4.35816,7.17768 4.25268,7.12548 4.18428,7.0362 L1.97928,4.1562 C1.85832,3.99852 1.88856,3.7728 2.04624,3.65184 C2.20356,3.53124 2.43,3.5604 2.55096,3.71916 L4.43988,6.18624 L6.99948,2.0826 C7.10496,1.91376 7.32708,1.86264 7.49556,1.96776 C7.6644,2.07288 7.71552,2.295 7.6104,2.46384 L4.7754,7.00884 C4.71276,7.10892 4.60512,7.17228 4.48704,7.17804 C4.48164,7.17768 4.47588,7.17768 4.47012,7.17768 Z",
                                  id: "Path",
                                  fill: "#FDE1A7"
                                }
                              })
                            ]
                          )
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "graph_x5F_4",
                            transform: "translate(124.920000, 128.880000)"
                          }
                        },
                        [
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "url(#linearGradient-249)",
                              x: "0.29268",
                              y: "0.31536",
                              width: "50.85",
                              height: "45.315"
                            }
                          }),
                          _vm._v(" "),
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "url(#linearGradient-250)",
                              x: "5.46768",
                              y: "4.17024",
                              width: "19.05012",
                              height: "1.8"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(5.040000, 5.760000)"
                              }
                            },
                            [
                              _c(
                                "g",
                                {
                                  attrs: {
                                    transform: "translate(34.920000, 0.000000)",
                                    id: "Path"
                                  }
                                },
                                [
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M6.00768,0.72036 C6.00768,0.32292 5.68548,0.00036 5.28768,0.00036 L0.96768,0.00036 C0.57024,0.00036 0.24768,0.32292 0.24768,0.72036 L0.24768,34.92036 L6.00768,34.92036 L6.00768,0.72036 Z",
                                      fill: "url(#linearGradient-251)"
                                    }
                                  }),
                                  _vm._v(" "),
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M6.00768,13.74048 L6.00768,0.72036 C6.00768,0.32292 5.68548,0.00036 5.28768,0.00036 L0.96768,0.00036 C0.57024,0.00036 0.24768,0.32292 0.24768,0.72036 L0.24768,13.74048 L6.00768,13.74048 Z",
                                      fill: "url(#linearGradient-252)"
                                    }
                                  })
                                ]
                              ),
                              _vm._v(" "),
                              _c(
                                "g",
                                {
                                  attrs: {
                                    transform: "translate(17.640000, 7.560000)",
                                    id: "Path"
                                  }
                                },
                                [
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M5.91768,0.81036 C5.91768,0.41292 5.59512,0.09036 5.19768,0.09036 L0.87768,0.09036 C0.48024,0.09036 0.15768,0.41292 0.15768,0.81036 L0.15768,27.36036 L5.91768,27.36036 L5.91768,0.81036 Z",
                                      fill: "url(#linearGradient-253)"
                                    }
                                  }),
                                  _vm._v(" "),
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M5.91768,16.14024 L5.91768,0.81036 C5.91768,0.41292 5.59512,0.09036 5.19768,0.09036 L0.87768,0.09036 C0.48024,0.09036 0.15768,0.41292 0.15768,0.81036 L0.15768,16.14024 L5.91768,16.14024 L5.91768,16.14024 Z",
                                      fill: "url(#linearGradient-254)"
                                    }
                                  })
                                ]
                              ),
                              _vm._v(" "),
                              _c(
                                "g",
                                {
                                  attrs: {
                                    transform:
                                      "translate(26.280000, 12.600000)",
                                    id: "Path"
                                  }
                                },
                                [
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M5.96268,0.81036 C5.96268,0.41292 5.64012,0.09036 5.24268,0.09036 L0.92268,0.09036 C0.52524,0.09036 0.20268,0.41292 0.20268,0.81036 L0.20268,22.32036 L5.96268,22.32036 L5.96268,0.81036 Z",
                                      fill: "url(#linearGradient-255)"
                                    }
                                  }),
                                  _vm._v(" "),
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M5.96268,11.10024 L5.96268,0.81036 C5.96268,0.41292 5.64012,0.09036 5.24268,0.09036 L0.92268,0.09036 C0.52524,0.09036 0.20268,0.41292 0.20268,0.81036 L0.20268,11.10024 L5.96268,11.10024 L5.96268,11.10024 Z",
                                      fill: "url(#linearGradient-256)"
                                    }
                                  })
                                ]
                              ),
                              _vm._v(" "),
                              _c(
                                "g",
                                {
                                  attrs: {
                                    transform: "translate(9.000000, 2.520000)",
                                    id: "Path"
                                  }
                                },
                                [
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M5.87268,0.99036 C5.87268,0.59292 5.55012,0.27036 5.15268,0.27036 L0.83268,0.27036 C0.43524,0.27036 0.11268,0.59292 0.11268,0.99036 L0.11268,32.40036 L5.87268,32.40036 L5.87268,0.99036 Z",
                                      fill: "url(#linearGradient-257)"
                                    }
                                  }),
                                  _vm._v(" "),
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M5.87268,12.12048 L5.87268,0.99036 C5.87268,0.59292 5.55012,0.27036 5.15268,0.27036 L0.83268,0.27036 C0.43524,0.27036 0.11268,0.59292 0.11268,0.99036 L0.11268,12.12048 L5.87268,12.12048 Z",
                                      fill: "url(#linearGradient-258)"
                                    }
                                  })
                                ]
                              ),
                              _vm._v(" "),
                              _c(
                                "g",
                                {
                                  attrs: {
                                    transform: "translate(0.360000, 18.360000)",
                                    id: "Path"
                                  }
                                },
                                [
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M5.82768,0.99036 C5.82768,0.59292 5.50512,0.27036 5.10768,0.27036 L0.78768,0.27036 C0.39024,0.27036 0.06768,0.59292 0.06768,0.99036 L0.06768,16.56036 L5.82768,16.56036 L5.82768,0.99036 Z",
                                      fill: "url(#linearGradient-259)"
                                    }
                                  }),
                                  _vm._v(" "),
                                  _c("path", {
                                    attrs: {
                                      d:
                                        "M5.82768,10.08036 L5.82768,0.99036 C5.82768,0.59292 5.50512,0.27036 5.10768,0.27036 L0.78768,0.27036 C0.39024,0.27036 0.06768,0.59292 0.06768,0.99036 L0.06768,10.08036 L5.82768,10.08036 Z",
                                      fill: "url(#linearGradient-260)"
                                    }
                                  })
                                ]
                              ),
                              _vm._v(" "),
                              _c("path", {
                                attrs: {
                                  d:
                                    "M40.92768,35.28036 L0.51768,35.28036 C0.31896,35.28036 0.15768,35.11944 0.15768,34.92036 C0.15768,34.72128 0.31896,34.56036 0.51768,34.56036 L40.92768,34.56036 C41.12676,34.56036 41.28768,34.72128 41.28768,34.92036 C41.28768,35.11944 41.1264,35.28036 40.92768,35.28036 Z",
                                  id: "Path",
                                  fill: "#1AA9E8"
                                }
                              })
                            ]
                          )
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "graph_x5F_1",
                            transform: "translate(56.880000, 61.200000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("rect", {
                              attrs: {
                                id: "Rectangle",
                                fill: "url(#linearGradient-261)",
                                x: "0.18",
                                y: "0.00036",
                                width: "51.03",
                                height: "30.33"
                              }
                            }),
                            _vm._v(" "),
                            _c("polygon", {
                              attrs: {
                                id: "Path",
                                fill: "#00E2EC",
                                points:
                                  "7.1316 25.83036 22.02012 25.83036 22.02012 6.90048"
                              }
                            }),
                            _vm._v(" "),
                            _c("polygon", {
                              attrs: {
                                id: "Path",
                                fill: "#00E2EC",
                                points:
                                  "35.82 21.24036 35.82 25.83036 45 25.83036 45 10.32048"
                              }
                            }),
                            _vm._v(" "),
                            _c("polygon", {
                              attrs: {
                                id: "Path",
                                fill: "#0090B2",
                                points:
                                  "22.02012 6.90048 22.02012 25.83036 35.82 25.83036 35.82 21.24036"
                              }
                            }),
                            _vm._v(" "),
                            _c("polygon", {
                              attrs: {
                                id: "Path",
                                fill: "#0090B2",
                                points:
                                  "49.44024 16.24536 45 10.32048 45 25.83036 49.44024 25.83036"
                              }
                            }),
                            _vm._v(" "),
                            _c("rect", {
                              attrs: {
                                id: "Rectangle",
                                fill: "url(#linearGradient-262)",
                                x: "27.99",
                                y: "3.96036",
                                width: "19.53",
                                height: "1.8"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M16.69896,21.00384 C16.57872,21.00384 16.461,20.94372 16.39296,20.83392 L7.87536,7.137 C7.77024,6.96816 7.82208,6.74604 7.99092,6.64128 C8.15976,6.53616 8.38152,6.588 8.48664,6.75684 L17.00424,20.45376 C17.10936,20.6226 17.05752,20.84472 16.88868,20.94948 C16.82964,20.9862 16.76376,21.00384 16.69896,21.00384 Z",
                                id: "Path",
                                fill: "#1AA9E8"
                              }
                            }),
                            _vm._v(" "),
                            _c("circle", {
                              attrs: {
                                id: "Oval",
                                fill: "#F95FC3",
                                cx: "8.181",
                                cy: "6.94692",
                                r: "1.935"
                              }
                            }),
                            _vm._v(" "),
                            _c("circle", {
                              attrs: {
                                id: "Oval",
                                fill: "#FFFFFF",
                                cx: "16.6986",
                                cy: "20.64384",
                                r: "1.23372"
                              }
                            })
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "diagram",
                            transform: "translate(101.160000, 54.360000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group", fill: "#FFFFFF" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M13.3308,43.8696 C11.691,39.77676 11.17044,35.181 12.08556,30.53268 C13.43088,23.70168 17.59428,18.14328 23.12928,14.82408 L17.94996,4.6458 C9.4068,9.51228 2.94912,17.9262 0.90036,28.32984 C-0.51084,35.49564 0.37224,42.58044 3.03804,48.8268 L13.3308,43.8696 Z",
                                id: "Path"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M26.01504,13.35132 C30.23028,11.55096 35.01144,10.95336 39.84804,11.90556 C46.86444,13.28724 52.53408,17.64504 55.81764,23.40612 L66.11184,18.4482 C61.30944,9.56916 52.72776,2.82312 42.05052,0.72036 C34.60896,-0.7452 27.25416,0.2628 20.83572,3.1734 L26.01504,13.35132 Z",
                                id: "Path"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M67.51908,21.36672 L57.22668,26.32392 C58.869,30.41892 59.39064,35.0172 58.4748,39.6684 C55.95192,52.47828 43.5222,60.81804 30.71232,58.29516 C23.69268,56.91276 18.0216,52.55208 14.7384,46.78776 L4.44456,51.74568 C9.24588,60.6276 17.82936,67.37688 28.50948,69.48036 C47.49696,73.21968 65.92068,60.85836 69.66,41.87124 C71.07192,34.7022 70.1874,27.61452 67.51908,21.36672 Z",
                                id: "Path"
                              }
                            })
                          ]),
                          _vm._v(" "),
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M15.4386,47.94552 C13.03884,44.24652 11.63988,39.83796 11.63988,35.10036 C11.63988,28.13832 14.65056,21.88008 19.44,17.55396 L12.39156,8.56836 C4.94964,14.994 0.2394,24.49692 0.2394,35.10036 C0.2394,42.40404 2.475,49.18464 6.29748,54.79812 L15.4386,47.94552 Z",
                                id: "Path",
                                fill: "url(#linearGradient-263)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M21.98736,15.55128 C25.77528,12.97044 30.35088,11.46024 35.28036,11.46024 C42.43176,11.46024 48.83652,14.64012 53.17128,19.65816 L62.31312,12.80448 C55.88604,5.02092 46.16244,0.06012 35.28036,0.06012 C27.69588,0.06012 20.67444,2.47032 14.93964,6.56604 L21.98736,15.55128 Z",
                                id: "Path",
                                fill: "url(#linearGradient-264)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M64.25784,15.39612 L55.11708,22.24872 C57.51936,25.94916 58.92012,30.35988 58.92012,35.10036 C58.92012,48.15648 48.33612,58.74048 35.28,58.74048 C28.12572,58.74048 21.7188,55.55808 17.38368,50.53644 L8.24184,57.38976 C14.66892,65.17692 24.39468,70.14024 35.27964,70.14024 C54.6318,70.14024 70.3195202,54.45216 70.3195202,35.1 C70.32024,27.79416 68.08284,21.01068 64.25784,15.39612 Z",
                                id: "Path",
                                fill: "url(#linearGradient-265)"
                              }
                            })
                          ]),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M21.57516,40.25268 C23.66028,45.7956 29.00844,49.74048 35.28,49.74048 C39.78072,49.74048 43.80552,47.70792 46.49112,44.5122 L35.28,35.10036 L21.57516,40.25268 Z",
                              id: "Path",
                              fill: "url(#linearGradient-266)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M40.47264,21.41136 L35.28,35.10036 L46.49112,44.5122 C48.62988,41.967 49.92012,38.68488 49.92012,35.10036 C49.92012,28.84392 45.99396,23.50692 40.47264,21.41136 Z",
                              id: "Path",
                              fill: "url(#linearGradient-267)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M40.47264,21.41136 C38.8584,20.79864 37.10916,20.46024 35.28036,20.46024 C27.19512,20.46024 20.64024,27.01476 20.64024,35.10036 C20.64024,36.91404 20.97216,38.6496 21.57516,40.25268 L35.28,35.10036 L40.47264,21.41136 Z",
                              id: "Path",
                              fill: "url(#linearGradient-268)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "graph_x5F_3",
                            transform: "translate(178.920000, 45.360000)"
                          }
                        },
                        [
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "url(#linearGradient-269)",
                              x: "0.03996",
                              y: "0.31536",
                              width: "78.51024",
                              height: "49.185"
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "g",
                            {
                              attrs: {
                                id: "Group",
                                transform: "translate(5.760000, 6.120000)"
                              }
                            },
                            [
                              _c("g", { attrs: { id: "Oval" } }, [
                                _c("circle", {
                                  attrs: {
                                    fill: "#FDE1A7",
                                    cx: "2.22948",
                                    cy: "2.25468",
                                    r: "1.935"
                                  }
                                }),
                                _vm._v(" "),
                                _c("circle", {
                                  attrs: {
                                    fill: "#00E2EC",
                                    cx: "12.61188",
                                    cy: "2.25468",
                                    r: "1.935"
                                  }
                                }),
                                _vm._v(" "),
                                _c("circle", {
                                  attrs: {
                                    fill: "#C7A0F6",
                                    cx: "22.99428",
                                    cy: "2.25468",
                                    r: "1.935"
                                  }
                                })
                              ]),
                              _vm._v(" "),
                              _c("rect", {
                                attrs: {
                                  id: "Rectangle",
                                  fill: "url(#linearGradient-270)",
                                  x: "0.29448",
                                  y: "7.44012",
                                  width: "24.63552",
                                  height: "1.8"
                                }
                              })
                            ]
                          ),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M72.53496,12.45744 C71.34228,10.10952 69.5538,7.95744 67.01472,8.04024 C61.4952,8.22024 57.89448,22.62024 54.05472,22.80024 C50.21496,22.98024 51.53472,8.28036 46.61496,8.40024 C40.4352,8.55108 40.19472,37.02024 32.45472,37.68012 C24.71472,38.34 22.97448,22.38012 19.49472,22.62024 C16.01496,22.86036 14.5188,35.1342 13.91472,37.80036 C13.31064,40.46652 10.25496,40.98024 10.25496,40.98024 L72.53496,40.98024 L72.53496,12.45744 Z",
                              id: "Path",
                              fill: "url(#linearGradient-271)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M72.53496,12.30012 L72.53496,12.30012 C64.01448,12.66012 62.21448,35.58024 53.45496,35.04024 C46.188,34.5924 47.39472,22.26024 41.03496,21.90024 C34.67448,21.54024 31.67496,36.48024 23.99472,36.96012 C20.26044,37.1934 17.27496,34.86024 13.85496,35.16012 C10.43496,35.46 6.89472,40.02012 6.05448,40.98024 L72.53496,40.98024 L72.53496,12.30012 Z",
                              id: "Path",
                              fill: "url(#linearGradient-272)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "graph_x5F_2",
                            transform: "translate(136.080000, 39.240000)"
                          }
                        },
                        [
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "url(#linearGradient-273)",
                              x: "0.11844",
                              y: "0.15048",
                              width: "31.79988",
                              height: "10.08"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.00196,6.94548 C27.7434,6.94548 27.11124,6.13044 26.55324,5.41116 C26.03052,4.73724 25.57908,4.15548 24.67368,4.15548 C23.76792,4.15548 23.31648,4.73724 22.79376,5.41116 C22.23576,6.13044 21.6036,6.94548 20.34504,6.94548 C19.08648,6.94548 18.45432,6.13044 17.89668,5.41116 C17.37396,4.73724 16.92252,4.15548 16.01712,4.15548 C15.11172,4.15548 14.65992,4.73724 14.13756,5.41116 C13.57992,6.13044 12.9474,6.94548 11.6892,6.94548 C10.43136,6.94548 9.7992,6.13044 9.24156,5.41116 C8.7192,4.73724 8.26776,4.15548 7.36272,4.15548 C6.45732,4.15548 6.00588,4.73724 5.48352,5.41116 C4.92588,6.13044 4.29372,6.94548 3.03516,6.94548 C2.83644,6.94548 2.67516,6.7842 2.67516,6.58548 C2.67516,6.38676 2.83644,6.22548 3.03516,6.22548 C3.94092,6.22548 4.392,5.64372 4.91472,4.9698 C5.47236,4.25052 6.10452,3.43548 7.36272,3.43548 C8.62092,3.43548 9.25272,4.25088 9.81072,4.9698 C10.33308,5.64372 10.78416,6.22548 11.6892,6.22548 C12.59496,6.22548 13.04604,5.64372 13.56876,4.9698 C14.1264,4.25052 14.75892,3.43548 16.01712,3.43548 C17.27532,3.43548 17.90784,4.25052 18.46548,4.9698 C18.9882,5.64372 19.43964,6.22548 20.34504,6.22548 C21.2508,6.22548 21.70224,5.64372 22.22496,4.9698 C22.78296,4.25052 23.41512,3.43548 24.67368,3.43548 C25.93224,3.43548 26.56404,4.25052 27.12204,4.9698 C27.64476,5.64372 28.0962,6.22548 29.00196,6.22548 C29.20104,6.22548 29.36196,6.38676 29.36196,6.58548 C29.36196,6.7842 29.20068,6.94548 29.00196,6.94548 Z",
                              id: "Path",
                              fill: "#05C5DA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M4.58748,21.35376 C4.49316,21.35376 4.3992,21.31668 4.32828,21.2436 C4.1904,21.10032 4.19436,20.87244 4.33728,20.73456 L15.4998,9.97128 C15.64272,9.8334 15.8706,9.837 16.00884,9.98028 C16.14672,10.12356 16.14276,10.35144 15.99984,10.48932 L4.83732,21.2526 C4.76748,21.32028 4.67748,21.35376 4.58748,21.35376 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          }),
                          _vm._v(" "),
                          _c("circle", {
                            attrs: {
                              id: "Oval",
                              fill: "#FDE1A7",
                              cx: "4.58748",
                              cy: "20.99376",
                              r: "1.42488"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "girl_x5F_tablet",
                            transform: "translate(187.920000, 129.960000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M10.61568,22.31568 C10.899,22.79916 11.52,22.96152 12.00348,22.67892 L28.5318,15.21648 C29.01564,14.93388 29.178,14.31288 28.8954,13.82904 L21.38616,1.32948 C21.10356,0.846 20.48256,0.68364 19.99872,0.96624 L1.61136,6.0624 C1.12752,6.345 0.96444,6.966 1.24704,7.44984 L10.61568,22.31568 Z",
                              id: "Path",
                              fill: "url(#linearGradient-274)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.79504,14.03712 L21.79764,0.72468 C21.49596,0.20952 20.83428,0.03672 20.31984,0.33768 L0.73584,5.7654 C0.22104,6.06636 0.04752,6.72804 0.34848,7.24284 L10.3266,23.07528 C10.62828,23.59008 11.28996,23.76324 11.8044,23.46228 L29.4084,15.51456 C29.92284,15.2136 30.09672,14.55192 29.79504,14.03712 Z M11.6964,20.82492 L3.24,7.15536 L20.43,1.98036 L27.765,13.99536 L11.6964,20.82492 Z",
                              id: "Shape",
                              fill: "url(#linearGradient-275)"
                            }
                          }),
                          _vm._v(" "),
                          _c("polygon", {
                            attrs: {
                              id: "Path",
                              fill: "#FDE1A7",
                              points:
                                "23.37768 9.85536 10.3176 15.00912 9.25956 13.49244 22.5162 8.53092"
                            }
                          }),
                          _vm._v(" "),
                          _c("circle", {
                            attrs: {
                              id: "Oval",
                              fill: "#F95FC3",
                              cx: "14.45976",
                              cy: "8.57268",
                              r: "1.45152"
                            }
                          }),
                          _vm._v(" "),
                          _c("circle", {
                            attrs: {
                              id: "Oval",
                              fill: "#FE687E",
                              cx: "9.5148",
                              cy: "10.47348",
                              r: "1.45152"
                            }
                          }),
                          _vm._v(" "),
                          _c("circle", {
                            attrs: {
                              id: "Oval",
                              fill: "#00E2EC",
                              cx: "19.10232",
                              cy: "6.87744",
                              r: "1.30608"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "girl_x5F_right_leg",
                            transform: "translate(210.240000, 218.160000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M18.66024,19.68012 C18.2376,12.4902 19.854,3.67344 19.79424,0.91368 L8.04024,0.24012 C8.04024,0.24012 7.8138,8.65044 7.92,15.93036 C8.04024,24.1506 9.75024,47.7306 9.24048,51.42024 C8.9226,53.71992 7.04448,55.20384 5.30568,56.29932 C6.14088,56.727 7.62048,57.02148 9.7362,55.9746 C12.12948,54.7902 14.82552,53.46648 16.72668,53.4006 C16.65,52.15896 16.5726,50.99688 16.56,50.22072 C16.50024,46.47024 19.17,28.35036 18.66024,19.68012 Z",
                              id: "Path",
                              fill: "url(#linearGradient-276)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M9.7362,55.97424 C7.62048,57.02112 6.14124,56.727 5.30568,56.29896 C4.8528,56.58408 4.40928,56.84436 4.00572,57.08412 C2.46744,57.9978 0.0036,58.35672 0.27072,59.31036 C0.48024,60.06024 6.29172,60.40116 9.40572,59.51412 C10.87596,59.09544 13.39524,57.744 13.39524,57.744 L13.4928,59.58144 C13.4928,59.58144 16.2864,59.78952 16.58664,59.4594 C17.0424,58.95756 16.88616,56.00232 16.72668,53.39988 C14.82552,53.46648 12.12948,54.78984 9.7362,55.97424 Z",
                              id: "Path",
                              fill: "url(#linearGradient-277)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "girl_x5F_left_leg",
                            transform: "translate(233.640000, 219.960000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M9.27072,54.42048 C11.7702,53.18316 14.5998,51.79536 16.50852,51.84648 C16.4304,50.60628 16.33896,49.44168 16.29,48.66048 C16.14024,46.26072 16.08048,42.12072 16.38072,33.4206 C16.68096,24.72048 15.12072,18.60084 14.58072,13.4406 C14.04072,8.28036 14.04072,2.8206 13.98024,0.06084 L2.79,1.44036 C2.79,1.44036 3.65076,9.67968 4.41,16.92036 C5.12784,23.76072 9.48024,45.69048 8.97048,49.38012 C8.65692,51.64812 6.41124,53.50536 4.74408,54.69588 C5.55948,55.14912 7.07328,55.50768 9.27072,54.42048 Z",
                              id: "Path",
                              fill: "url(#linearGradient-278)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M0,58.14036 C0,58.65048 5.82624,58.8474 8.94024,57.96036 C10.41048,57.54168 12.92976,56.19024 12.92976,56.19024 L13.02732,58.02768 C13.02732,58.02768 16.02,58.14036 16.31988,57.81024 C16.77348,57.31056 16.67016,54.41508 16.50816,51.84648 C14.59908,51.79536 11.76984,53.18352 9.27036,54.42048 C7.07292,55.50804 5.55912,55.14912 4.74372,54.69588 C4.2804,55.02672 3.8592,55.3086 3.53988,55.53036 C2.07,56.55024 0,57.15036 0,58.14036 Z",
                              id: "Path",
                              fill: "url(#linearGradient-279)"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "girl_x5F_skirt",
                            transform: "translate(212.040000, 176.760000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M32.04,0.24048 C33.3,2.16036 36.72072,8.28072 37.98,14.67036 C39.14244,20.56464 39.06,23.94036 39.69,28.53036 C40.32,33.12036 43.56,43.20036 43.38,43.83036 C43.2,44.46036 41.76,45.40536 38.94048,45.4806 C36.83304,45.53676 35.28072,45.36072 31.50072,46.62072 C27.72072,47.88072 23.46048,48.60072 18.30024,48.06072 C13.14072,47.52072 9.06048,45.36072 6.48072,45.3006 C3.90024,45.24048 0.48024,45.24048 0.12024,44.52048 C-0.23976,43.80048 2.10312,38.232 2.61,34.74036 C3.18312,30.79872 4.44024,23.28012 7.2,15.84036 C9.78696,8.86716 13.44024,0.84024 13.44024,0.84024 C13.44024,0.84024 18.81,0.81036 22.68,0.72036 C26.55,0.63036 32.04,0.24048 32.04,0.24048 Z",
                              id: "Path",
                              fill: "url(#linearGradient-280)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M21.74976,45.90576 C20.60784,45.90576 19.44864,45.84312 18.26244,45.71856 C15.4152,45.42084 12.84876,44.622 10.78668,43.98012 C9.07416,43.44732 7.59528,42.98652 6.47208,42.9606 L5.76072,42.94512 C3.75804,42.90408 1.4886,42.85764 0.45972,42.48 C0.27288,42.41196 0.17748,42.2046 0.24588,42.01812 C0.31392,41.83164 0.5202,41.73516 0.70776,41.80428 C1.62324,42.14016 3.92544,42.18732 5.77512,42.22548 L6.48828,42.2406 C7.71228,42.26904 9.23616,42.74316 11.00016,43.29252 C13.13784,43.95816 15.56028,44.712 18.33696,45.00288 C22.89384,45.47952 27.04176,45.027 31.38588,43.57944 C34.69752,42.47568 36.3438,42.45588 38.08692,42.435 C38.36232,42.43176 38.6406,42.42816 38.93004,42.4206 C41.45544,42.35292 42.50772,41.60124 42.7698,41.37192 C42.9192,41.2416 43.14636,41.25636 43.27776,41.40684 C43.40808,41.5566 43.3926,41.78412 43.24284,41.9148 C42.84792,42.25932 41.63904,43.0686 38.94876,43.1406 C38.65608,43.14816 38.37384,43.1514 38.0952,43.155 C36.40968,43.17516 34.81812,43.19388 31.6134,44.262 C28.2996,45.3672 25.09776,45.90576 21.74976,45.90576 Z",
                              id: "Path",
                              fill: "#CFAEFF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.89852,43.50708 C21.46536,43.50708 19.96236,43.42428 18.38268,43.25868 C15.39828,42.94656 12.74292,42.1272 10.40004,41.40504 C8.7066,40.88268 7.24392,40.4316 6.08508,40.31928 C5.12784,40.22712 4.25808,40.3038 3.49128,40.37184 C2.58336,40.45284 1.79784,40.52268 1.14372,40.2822 C0.95688,40.2138 0.86148,40.0068 0.92988,39.82032 C0.99828,39.63384 1.2042,39.53772 1.39176,39.60648 C1.89432,39.79152 2.60568,39.72816 3.42756,39.65472 C4.22532,39.5838 5.12964,39.50352 6.15456,39.60252 C7.38612,39.72132 8.8812,40.18248 10.61208,40.71672 C12.92364,41.42952 15.54336,42.23772 18.45792,42.54264 C23.55804,43.07508 27.8334,42.73668 31.52736,41.5062 C34.8084,40.41288 35.72424,40.44168 37.10484,40.48344 C37.33848,40.49064 37.58652,40.4982 37.86336,40.50072 C40.48992,40.5252 41.5818,39.83436 42.1776,39.31416 C42.327,39.18348 42.55416,39.19896 42.68556,39.34908 C42.81588,39.49884 42.8004,39.72636 42.65064,39.85704 C41.97672,40.44528 40.76244,41.22144 37.98864,41.22144 C37.94508,41.22144 37.90152,41.22108 37.85688,41.22072 C37.57428,41.2182 37.3212,41.21064 37.08252,41.20308 C35.73,41.16132 34.91388,41.13576 31.75488,42.18876 C29.1132,43.07004 26.18892,43.50672 22.89852,43.50708 Z",
                              id: "Path",
                              fill: "#CFAEFF"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "girl_x5F_right_hand",
                            transform: "translate(205.920000, 137.160000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M4.35024,1.57536 C3.80304,1.75752 2.88,2.25036 3.06,3.15036 C3.24,4.05036 4.86144,5.63076 5.40144,5.87052 C5.94144,6.11028 5.58072,4.68036 5.10048,4.05036 C4.62024,3.42036 5.9598,4.85388 6.39,4.71024 C6.705,4.60512 6.81048,4.00536 6.46524,3.06036 C6.1578,2.21976 7.53048,1.44036 6.93,1.32048 C6.33024,1.20024 5.07024,1.33524 4.35024,1.57536 Z",
                              id: "Path",
                              fill: "url(#linearGradient-281)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M12.79188,11.98872 C12.9474,11.78496 17.32428,8.75088 17.649,8.63208 C18.10548,8.4654 25.2,17.73 26.19,18.765 C27.18,19.8 24.8814,24.96456 22.9914,25.32456 C21.1014,25.68456 12.38256,12.52548 12.79188,11.98872 Z",
                              id: "Path",
                              fill: "url(#linearGradient-282)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M0.27,1.17036 C0.90648,0.53388 4.08024,0.90036 4.5,1.02024 C4.92048,1.14012 5.97024,0.27036 6.60024,0.24012 C7.23024,0.20988 9.15768,0.56268 10.29024,1.20024 C11.5452,1.90692 17.82,8.82036 17.82,8.82036 C17.82,8.82036 17.73072,10.62036 16.155,11.70036 C14.57568,12.78288 13.56264,12.28788 13.56264,12.28788 C13.56264,12.28788 11.34,8.23536 10.575,7.74036 C9.81,7.24536 7.92,8.07804 6.36408,7.69644 C4.89672,7.3368 2.85768,5.44536 3.42072,4.95036 C4.01832,4.42476 5.44716,5.6376 6.09048,5.85036 C7.04268,6.16536 8.82792,5.78736 8.865,5.06268 C8.91,4.185 6.066,3.37104 3.915,2.72268 C2.394,2.2644 -0.24732,1.68768 0.27,1.17036 Z",
                              id: "Path",
                              fill: "url(#linearGradient-283)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M14.10912,12.7584 C13.14612,12.7584 12.59244,12.29256 12.55608,12.26052 C12.40596,12.1302 12.38976,11.90268 12.52008,11.75256 C12.6504,11.60244 12.87864,11.58696 13.02768,11.71692 C13.06908,11.75112 14.1174,12.59316 15.95916,11.39832 C17.37684,10.47816 17.45964,8.8236 17.46036,8.80704 C17.46828,8.60868 17.63568,8.45172 17.83332,8.46144 C18.03168,8.46864 18.18648,8.6346 18.17964,8.83296 C18.17676,8.91576 18.09072,10.8738 16.35084,12.00276 C15.46344,12.57804 14.70744,12.7584 14.10912,12.7584 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "girl_x5F_body",
                            transform: "translate(222.480000, 140.760000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M19.20024,0.18036 C20.16,2.16036 23.76,9.06012 23.52024,14.40036 C23.28048,19.7406 21.83976,25.26048 21.65976,29.40048 C21.47976,33.54048 21.6,36.24048 21.6,36.24048 C21.6,36.24048 17.64072,38.70036 11.64024,38.52036 C5.82264,38.34612 3.00024,36.84024 3.00024,36.84024 C3.00024,36.84024 2.8278,30.48948 2.10024,26.16048 C1.53,22.77036 0.135,20.79036 0.120200894,16.98048 C0.10044,12.105 7.605,5.80536 9.84024,2.40048 C11.67768,-0.39852 19.20024,0.18036 19.20024,0.18036 Z",
                              id: "Path",
                              fill: "url(#linearGradient-284)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M12.27672,38.88972 C12.0636,38.88972 11.84832,38.88648 11.62944,38.88036 C5.79456,38.7054 2.94912,37.22112 2.83104,37.15776 C2.65608,37.06452 2.58948,36.84708 2.68272,36.6714 C2.77596,36.49572 2.99412,36.42912 3.1698,36.52236 C3.19716,36.53712 6.00516,37.99116 11.65176,38.16036 C17.4636,38.33928 21.37212,35.9586 21.41064,35.93448 C21.57948,35.82972 21.8016,35.88192 21.90636,36.05076 C22.01112,36.2196 21.95892,36.44136 21.79044,36.54612 C21.6306,36.64548 17.9496,38.88972 12.27672,38.88972 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "girl_x5F_hairs",
                            transform: "translate(245.520000, 119.520000)",
                            fill: "url(#linearGradient-285)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M1.89,1.66536 C2.79,1.71036 5.54544,0.99648 7.605,0.54036 C11.67048,-0.35964 15.66576,-0.306 16.695,2.52036 C17.58024,4.95036 16.10784,6.96816 16.35048,8.67024 C16.68024,10.98036 23.58072,12.93012 23.715,17.55036 C23.84424,21.9798 20.205,23.58036 19.215,25.51536 C18.225,27.45036 16.254,33.32268 9.405,32.85036 C5.49072,32.58036 4.41072,30.27024 4.41,28.66536 C4.41,26.60472 6.39,25.02036 5.445,23.53536 C4.5,22.05036 1.47096,23.03388 0.81,21.28536 C0.09072,19.38024 1.71,17.82036 2.925,16.87536 C4.14,15.93036 5.94,14.94036 5.535,13.54536 C5.13,12.15036 2.655,11.799 2.745,10.39536 C2.85048,8.76024 5.85288,7.54668 5.355,5.89536 C4.98024,4.65048 2.835,4.90536 0.99,4.54536 C-0.855,4.18536 1.89,1.66536 1.89,1.66536 Z",
                              id: "Path"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "girl_x5F_head",
                            transform: "translate(225.720000, 109.440000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M15.06024,23.34024 C14.82768,25.42536 15.96024,31.50036 15.96024,31.50036 C15.96024,31.50036 13.14,34.42536 9,34.62048 C6.96852,34.71624 6.60024,33.72048 6.60024,33.72048 L7.44048,25.38036 C7.44048,25.38036 8.70552,23.00688 11.28024,22.02048 C13.85424,21.03372 14.82048,21.96036 14.82048,21.96036 L15.06024,23.34024 Z",
                              id: "Path",
                              fill: "url(#linearGradient-286)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M13.92048,8.22024 C10.26,6.66036 7.53336,6.72804 7.53336,6.72804 C4.68,8.28 -2.90592,22.46868 1.86048,25.92 C4.8024,28.05048 9.84924,25.87716 13.20336,22.98096 C13.40856,23.0454 13.62744,23.08068 13.8546,23.08068 C15.02316,23.08068 15.9696,22.16412 15.9696,21.033 C15.9696,20.71008 15.89004,20.40588 15.75288,20.13408 C16.06212,19.647 16.30008,19.17 16.44048,18.71964 C17.26668,16.06644 17.58024,9.78048 13.92048,8.22024 Z",
                              id: "Path",
                              fill: "url(#linearGradient-287)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.235,16.80804 C8.18136,16.80804 8.12628,16.80012 8.07228,16.78284 C7.78824,16.6932 7.6302,16.38972 7.71984,16.10532 C7.88616,15.57936 8.49096,14.60016 8.87508,14.23404 C9.09072,14.0292 9.43308,14.03712 9.63864,14.25312 C9.8442,14.46912 9.83556,14.81076 9.61956,15.01668 C9.3708,15.2532 8.85852,16.08588 8.7498,16.4304 C8.67744,16.6608 8.46468,16.80804 8.235,16.80804 Z",
                              id: "Path",
                              fill: "#0090B2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M3.12804,13.95792 C3.0834,13.95792 3.03768,13.95108 2.99268,13.93668 C2.75544,13.8618 2.6244,13.60908 2.69892,13.3722 C2.85912,12.8646 3.3462,12.07836 3.72024,11.72232 C3.89952,11.55132 4.185,11.5578 4.35636,11.73816 C4.52808,11.91816 4.52052,12.20328 4.34052,12.37464 C4.07988,12.62232 3.6702,13.28652 3.55752,13.64328 C3.49668,13.83516 3.31956,13.95792 3.12804,13.95792 Z",
                              id: "Path",
                              fill: "#0090B2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.26488,18.936 C7.89048,18.936 7.53912,18.84996 7.22196,18.68004 C6.55776,18.32508 6.12216,17.65008 5.99544,16.77924 C5.87268,15.93864 6.05448,15.0102 6.50664,14.16456 C7.21116,12.8466 8.43156,11.9952 9.61596,11.9952 C9.99036,11.9952 10.34172,12.08124 10.65888,12.25116 C12.00096,12.96864 12.32208,14.99436 11.37492,16.767 C10.6704,18.08424 9.44964,18.936 8.26488,18.936 Z M9.6156,12.53484 C8.64324,12.53484 7.58484,13.29228 6.98256,14.41872 C6.58476,15.1632 6.42348,15.97356 6.52968,16.70076 C6.6312,17.39772 6.96744,17.93088 7.47648,18.20304 C7.7148,18.33048 7.98012,18.39528 8.26488,18.39528 C9.23796,18.39528 10.29636,17.6382 10.89864,16.51176 C11.70504,15.00156 11.48328,13.3038 10.404,12.72672 C10.16568,12.59964 9.90036,12.53484 9.6156,12.53484 Z",
                              id: "Shape",
                              fill: "#9F36AD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M2.22768,15.53868 C1.96056,15.53868 1.71108,15.4782 1.48716,15.35868 C0.4086,14.7816 0.24732,13.04964 1.12032,11.41596 C1.78092,10.18008 2.88288,9.35028 3.86208,9.35028 C4.12956,9.35028 4.37868,9.41076 4.6026,9.53064 C5.13792,9.81648 5.46336,10.39896 5.51844,11.17044 C5.57064,11.8962 5.37552,12.71412 4.96944,13.473 C4.30956,14.70852 3.20724,15.53868 2.22768,15.53868 Z M3.86244,9.88992 C3.08916,9.88992 2.15748,10.62216 1.5966,11.67012 C0.89064,12.99132 0.95724,14.46228 1.74168,14.88204 C1.8864,14.95908 2.04984,14.99832 2.22768,14.99832 C3.00168,14.99832 3.93336,14.26644 4.49352,13.21812 C4.85208,12.5478 5.02488,11.83392 4.98024,11.20824 C4.93884,10.62828 4.71456,10.20132 4.34844,10.0062 C4.20336,9.92916 4.03992,9.88992 3.86244,9.88992 Z",
                              id: "Shape",
                              fill: "#9F36AD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M5.49072,12.84012 C4.07268,14.01768 0.13716,15.9606 0.03024,16.65 C-0.11232,17.57268 1.9962,18.08676 2.47644,18.08676 C2.95668,18.08676 3.30768,16.785 4.59072,14.99976 C5.3136,13.99428 6.24456,12.21408 5.49072,12.84012 Z",
                              id: "Path",
                              fill: "url(#linearGradient-288)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M6.92352,14.25528 C6.81624,14.25528 6.71508,14.1912 6.67296,14.08572 C6.30252,13.1598 5.82804,12.88332 5.03208,13.13064 C4.88916,13.17564 4.73832,13.09536 4.6944,12.95316 C4.65012,12.8106 4.72968,12.6594 4.87188,12.61512 C5.94612,12.28104 6.69852,12.69684 7.17444,13.8852 C7.22988,14.0238 7.16256,14.18076 7.02396,14.2362 C6.9912,14.24916 6.957,14.25528 6.92352,14.25528 Z",
                              id: "Path",
                              fill: "#9F36AD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M0.68544,20.12184 C0.7362,20.33352 0.86688,20.55168 1.01736,20.73168 C1.17072,20.91276 1.35684,21.06072 1.56312,21.15252 C1.97532,21.34476 2.45484,21.27168 2.88144,21.0618 C3.01572,20.99556 3.17736,21.05028 3.2436,21.1842 C3.30984,21.31812 3.25476,21.48012 3.1212,21.546 C3.11544,21.54852 3.10932,21.55176 3.10356,21.55392 C2.83716,21.663 2.5488,21.74652 2.24568,21.75444 C1.944,21.7674 1.6326,21.70152 1.36404,21.56076 C1.09476,21.4218 0.87048,21.2184 0.69552,20.98764 C0.5238,20.75328 0.3834,20.50092 0.32508,20.19456 C0.306,20.09484 0.37152,19.99836 0.47124,19.97892 C0.56844,19.9602 0.6624,20.02176 0.68508,20.1168 L0.68544,20.12184 Z",
                              id: "Path",
                              fill: "#954374"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.73504,34.9866 C6.70932,34.9866 6.28092,33.89364 6.26292,33.8454 C6.1938,33.65892 6.28884,33.45192 6.47568,33.3828 C6.66216,33.31476 6.86916,33.40908 6.93792,33.59556 C6.948,33.61788 7.28208,34.34076 8.98344,34.26084 C12.9348,34.07472 15.67404,31.27896 15.7014,31.25052 C15.83964,31.1076 16.06716,31.10292 16.21044,31.24152 C16.35336,31.3794 16.35768,31.60728 16.21944,31.75056 C16.10028,31.87404 13.25124,34.78068 9.01692,34.98012 C8.91972,34.98444 8.82576,34.9866 8.73504,34.9866 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M13.27932,19.06416 C12.89736,19.15776 12.35052,18.99 12.39048,18.21024 C12.465,16.74036 14.98788,14.4864 14.92596,12.40524 C14.85,9.87768 10.10268,9.315 6.84,8.04024 C3.32712,6.66756 3.375,2.60964 4.25232,1.28268 C5.22,-0.18 6.93,0.30024 7.65,1.02024 C8.37,1.74024 8.69976,2.5398 9.33048,2.52036 C10.05768,2.49768 9.78768,1.08036 10.89,1.08036 C12.00672,1.08036 12.97332,3.13992 13.74048,3.99024 C15.05268,5.44536 21.93948,7.71588 22.28976,12.66012 C22.77072,19.44 16.02072,24.7201201 15.27048,24.7201201 C13.99284,24.72048 14.06052,23.24196 14.60592,22.94604 C15.1524,22.65012 16.18092,22.02552 15.92064,20.59776 C15.66,19.17036 14.13,18.85536 13.27932,19.06416 Z",
                              id: "Path",
                              fill: "url(#linearGradient-289)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M14.61744,19.12536 C15.21936,19.35072 15.68844,19.83384 15.87816,20.43648 C15.92316,20.3724 15.9444,20.2914 15.921,20.20968 C15.48864,18.66204 13.2336,17.2872 12.02292,16.54884 C11.76696,16.39296 11.54628,16.25832 11.41596,16.16616 C11.29428,16.08012 11.12544,16.10928 11.03976,16.23096 C10.95336,16.35264 10.98216,16.52112 11.10456,16.60716 C11.24928,16.70976 11.46672,16.84188 11.74176,17.00964 C12.53052,17.49096 13.78692,18.25704 14.61744,19.12536 Z",
                              id: "Path",
                              fill: "#9F36AD"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "girl_x5F_left_hand",
                            transform: "translate(193.320000, 145.440000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M4.54356,0.23832 C5.27184,0.09612 6.09732,2.47536 6.45732,3.82536 C6.81732,5.17536 7.07832,7.46064 8.39988,8.97048 C9.60732,10.35036 13.47012,11.61036 13.47012,11.61036 C13.47012,11.61036 13.88988,13.86036 12.86964,15.12036 C11.85012,16.38036 10.3446,16.31664 10.3446,16.31664 C10.3446,16.31664 5.91012,11.91024 4.04964,10.62036 C2.18988,9.33048 1.05012,7.59024 0.76464,6.34536 C0.45936,5.01336 0.24012,4.35024 0.38988,2.88036 C0.47088,2.0826 0.78444,1.02312 0.78444,1.02312 C0.78444,1.02312 3.54636,5.40576 4.25988,6.54048 C5.01012,6.39036 4.65012,4.32036 4.56012,3.48048 C4.47012,2.6406 3.80268,0.38268 4.54356,0.23832 Z",
                              id: "Path",
                              fill: "url(#linearGradient-290)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M43.56072,1.35612 C46.71,0.81036 48.55932,2.22876 49.545,4.36536 C50.625,6.70536 50.4,9.60048 48.72024,11.28024 C47.04048,12.96 36.22284,25.81524 30.52476,25.65216 C24.165,25.47 10.10232,17.44272 9.96048,16.62012 C9.81792,15.79752 12.44268,11.24532 12.81096,11.3778 C13.17852,11.51028 27.71928,17.00352 29.88,16.42176 C32.04,15.84036 41.37192,1.73556 43.56072,1.35612 Z",
                              id: "Path",
                              fill: "url(#linearGradient-291)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M9.95652,16.97292 C9.78516,16.97292 9.63576,16.85556 9.60552,16.68168 C9.43992,15.7266 11.76984,11.727 12.44016,11.16396 C12.60756,11.0232 12.77244,10.98144 12.93264,11.03904 C13.11984,11.10636 13.21668,11.31264 13.14972,11.49948 C13.10544,11.62188 13.00176,11.70612 12.88296,11.7306 C12.32712,12.1968 10.23552,15.93252 10.31508,16.55964 C10.33992,16.75368 10.206,16.9398 10.01268,16.9686 C9.99396,16.97184 9.97488,16.97292 9.95652,16.97292 Z",
                              id: "Path",
                              fill: "#1AA9E8"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "guy_x5F_tablet",
                            transform: "translate(99.360000, 210.240000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M0.93528,16.40988 C0.93528,16.96752 1.38744,17.41932 1.94508,17.41932 L24.32448,17.41932 C24.88212,17.41932 25.33428,16.96752 25.33428,16.40988 L25.33428,1.602 C25.33428,1.04436 24.88212,0.59256 24.32448,0.59256 L1.94508,0.59256 C1.38744,0.59256 0.93528,1.04436 0.93528,1.602 L0.93528,16.40988 Z",
                              id: "Path",
                              fill: "url(#linearGradient-292)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.1046,0.00612 L1.1646,0.00612 C0.56808,0.00612 0.0846,0.4896 0.0846,1.08612 L0.0846,16.92612 C0.0846,17.52264 0.56808,18.00612 1.1646,18.00612 L25.1046,18.00612 C25.70112,18.00612 26.1846,17.52264 26.1846,16.92612 L26.1846,1.08612 C26.1846,0.48924 25.70112,0.00612 25.1046,0.00612 Z M24.3846,16.20612 L1.8846,16.20612 L1.8846,1.80612 L24.3846,1.80612 L24.3846,16.20612 Z",
                              id: "Shape",
                              fill: "url(#linearGradient-293)"
                            }
                          }),
                          _vm._v(" "),
                          _c("rect", {
                            attrs: {
                              id: "Rectangle",
                              fill: "#FDE1A7",
                              x: "1.14768",
                              y: "10.1106",
                              width: "19.05048",
                              height: "1.8"
                            }
                          }),
                          _vm._v(" "),
                          _c("polygon", {
                            attrs: {
                              id: "Path",
                              fill: "#00E2EC",
                              points:
                                "17.72532 5.85756 20.19816 8.74728 15.26724 8.7606"
                            }
                          }),
                          _vm._v(" "),
                          _c("circle", {
                            attrs: {
                              id: "Oval",
                              fill: "#F95FC3",
                              cx: "11.16",
                              cy: "7.30908",
                              r: "1.45152"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "guy_x5F_left_leg",
                            transform: "translate(70.560000, 182.880000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M8.667,97.78932 C9.33048,99.45036 12.16872,100.1466 14.55012,100.71036 C17.11656,101.31804 18.94464,101.66868 18.84024,102.69036 C18.72036,103.86036 13.14036,104.25024 9.09036,104.13036 C5.04036,104.01048 2.10636,103.53312 1.5066,103.08312 C0.873,102.60792 0.90072,98.31024 1.05048,97.35048 C1.20024,96.39072 8.667,97.78932 8.667,97.78932 Z",
                              id: "Path",
                              fill: "url(#linearGradient-294)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M4.44024,0.24048 C3.90024,2.22048 2.52036,6.7806 2.04012,15.4206 C1.55988,24.0606 2.16,50.58072 2.16,57.06072 C2.16,63.54072 0.60012,75.06036 0.47988,82.86048 C0.35964,90.6606 0.2052,97.99524 0.65988,98.28036 C1.665,98.91036 7.425,99.36036 9.36,98.28036 C9.69768,98.09208 12.84012,70.8606 15.00012,59.46048 C16.425,51.93936 21.96,11.09988 22.32,5.10012 C22.68,-0.89964 4.44024,0.24048 4.44024,0.24048 Z",
                              id: "Path",
                              fill: "url(#linearGradient-295)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M5.69556,96.45588 C3.02508,96.45588 0.96156,95.92236 0.20772,95.54184 C0.03024,95.4522 -0.04104,95.23584 0.0486,95.05836 C0.13788,94.88088 0.35424,94.80924 0.53208,94.89924 C1.5768,95.42628 5.34492,96.26076 9.73656,95.30604 C9.93132,95.26356 10.12248,95.3874 10.1646,95.5818 C10.20672,95.77584 10.0836,95.96772 9.8892,96.00984 C8.40348,96.33276 6.97932,96.45588 5.69556,96.45588 Z",
                              id: "Path",
                              fill: "#CD218F"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "guy_x5F_right_leg",
                            transform: "translate(79.200000, 183.600000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M29.25,99.15048 C29.81988,100.17072 32.35824,101.43684 34.74,102.0006 C37.30644,102.60828 39.13452,102.95892 39.03012,103.9806 C38.91024,105.1506 33.33024,105.54048 29.28024,105.4206 C25.23024,105.30072 22.50036,105.1506 21.90024,104.7006 C21.26664,104.2254 20.94012,100.83024 21.09024,99.87048 C21.24036,98.91072 29.25,99.15048 29.25,99.15048 Z",
                              id: "Path",
                              fill: "url(#linearGradient-296)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.39,3.78036 C24.66,7.38036 27.09,51.03036 27.63,58.23036 C28.17,65.43036 30.53952,98.66556 30.24,99.3006 C29.745,100.35036 22.095,101.52036 20.925,100.48536 C20.17656,99.82332 17.75988,82.98072 15.84,71.9406 C13.92012,60.90048 9.72,41.3406 7.56,33.66072 C5.4,25.98084 1.44,13.41036 3.69,2.25036 C5.76,-0.08964 10.3518,-0.03708 15.39,0.90036 C20.5776,1.86552 24.39,3.78036 24.39,3.78036 Z",
                              id: "Path",
                              fill: "url(#linearGradient-297)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M9.21852,40.923 C8.80092,39.22992 8.3736,37.53972 7.92144,35.85708 C7.47432,34.17372 6.96708,32.508 6.47856,30.83112 C5.49612,27.4806 4.57236,24.10344 3.86856,20.66904 C3.8286,20.47428 3.95388,20.2842 4.149,20.24388 C4.34376,20.20392 4.53384,20.3292 4.57416,20.52396 C4.57416,20.5254 4.57488,20.529 4.57524,20.53044 C5.21244,23.94648 6.07212,27.32292 6.99408,30.68496 C7.45164,32.36616 7.93188,34.04808 8.35092,35.74512 C8.77464,37.44036 9.17244,39.14028 9.56052,40.842 C9.58212,40.93668 9.52308,41.03064 9.42804,41.05224 C9.3348,41.07384 9.24156,41.01588 9.21852,40.923 Z",
                              id: "Path",
                              fill: "#CD218F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M4.21776,20.93688 C4.17096,20.93688 4.12344,20.92788 4.07772,20.90844 C3.02472,20.4642 0.63792,18.74268 0.05148,17.76564 C-0.05076,17.595 0.00432,17.37396 0.17496,17.27172 C0.34524,17.16948 0.56628,17.22456 0.66888,17.3952 C1.14048,18.18108 3.3354,19.81368 4.35816,20.24568 C4.5414,20.32308 4.62708,20.53404 4.54968,20.71728 C4.49136,20.85444 4.35816,20.93688 4.21776,20.93688 Z",
                              id: "Path",
                              fill: "#CD218F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.08608,98.38044 C21.67272,98.38044 20.52936,98.22672 20.04012,98.04348 C19.85364,97.974 19.75932,97.76628 19.82916,97.58016 C19.89864,97.39404 20.10672,97.3008 20.29248,97.3692 C21.44592,97.80048 26.87184,98.0316 29.99016,96.07932 C30.159,95.97348 30.38076,96.02496 30.48624,96.19344 C30.59172,96.36192 30.5406,96.58404 30.37212,96.68952 C28.29996,97.98696 25.34724,98.38044 23.08608,98.38044 Z",
                              id: "Path",
                              fill: "#CD218F"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "guy_x5F_left_hand",
                            transform: "translate(80.640000, 86.040000)",
                            fill: "url(#linearGradient-298)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M9.70488,38.00124 C11.86488,33.68124 20.58012,15.00048 21.48012,13.86036 C22.38012,12.72024 23.08644,12.49632 23.34024,10.77048 C23.55084,9.33768 23.43744,8.34804 23.70024,7.2306 C24.06024,5.7006 26.23176,1.61532 25.68024,0.42048 C25.32024,-0.35964 23.88024,1.71072 23.34024,2.3706 C22.80024,3.03048 21.19644,5.60808 20.8134,5.3694 C20.71152,4.36572 20.84328,0.99072 20.84328,0.99072 C20.16036,1.80072 19.21536,3.87072 18.67536,6.03072 C18.13536,8.19072 18.30024,8.9406 17.10036,11.40084 C15.90048,13.86108 6.03036,24.66072 0.99036,35.91072 C0.69876,36.56124 0.4158,37.22544 0.13896,37.89972 C2.26908,39.39336 5.11596,40.89996 8.54532,41.49828 C8.90424,40.04424 9.29556,38.81952 9.70488,38.00124 Z",
                              id: "Path"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "guy_x5F_body",
                            transform: "translate(73.080000, 123.840000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M20.85012,22.23036 C14.45472,20.4354 15.08472,21.4074 14.38668,21.09528 C13.62096,20.3292 14.56848,9.91656 16.10496,3.69792 C12.6756,3.0996 9.82908,1.59336 7.6986,0.09936 C3.177,11.11788 0.61956,25.155 0.45,36.18036 C0.27,47.88036 0.72,59.58036 0.81,60.12036 C0.9,60.66036 9.0864,65.7 18.18,65.79036 C27.24012,65.88036 30.51,63.54036 30.51,63.54036 C30.51,63.54036 32.32584,31.46508 32.0328,30.5676 C31.73976,29.67012 27.24552,24.02532 20.85012,22.23036 Z",
                              id: "Path",
                              fill: "url(#linearGradient-299)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M19.45512,63.60948 C19.17684,63.60948 18.89388,63.60696 18.60336,63.60192 C7.85808,63.41652 1.19376,58.67784 0.41472,57.81384 C0.28152,57.66624 0.2934,57.43836 0.441,57.30516 C0.5886,57.17232 0.81612,57.1842 0.94932,57.33144 C1.57932,58.0302 8.15112,62.70156 18.6156,62.88192 C27.44712,63.03492 30.39768,60.74676 30.42648,60.72372 C30.58128,60.59952 30.80844,60.62436 30.93264,60.77916 C31.0572,60.93432 31.03236,61.16112 30.8772,61.28532 C30.75552,61.3836 27.87948,63.60948 19.45512,63.60948 Z",
                              id: "Path",
                              fill: "#05C5DA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3016,29.31264 C26.172,29.31264 26.04672,29.2428 25.98264,29.12004 C24.85728,26.97696 21.01104,23.985 19.28376,23.31288 C19.09836,23.24088 19.00656,23.03208 19.07856,22.84704 C19.15056,22.66164 19.35936,22.56984 19.5444,22.64184 C21.41064,23.3676 25.40592,26.47404 26.61984,28.78524 C26.71236,28.96128 26.64468,29.17872 26.46864,29.27124 C26.415,29.29968 26.35776,29.31264 26.3016,29.31264 Z",
                              id: "Path",
                              fill: "#05C5DA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M8.42076,18.37512 C8.24868,18.37512 8.09712,18.252 8.06652,18.07668 C7.33068,13.84848 9.68724,7.0668 10.8198,3.80808 C11.0646,3.1032 11.25828,2.54664 11.3346,2.259 C11.38536,2.06676 11.58264,1.95228 11.77488,2.00376 C11.96712,2.05488 12.0816,2.2518 12.03012,2.44404 C11.94696,2.75796 11.7594,3.2976 11.49948,4.0446 C10.38672,7.24644 8.07156,13.90896 8.77536,17.95356 C8.80956,18.1494 8.67816,18.33588 8.48232,18.37008 C8.4618,18.37332 8.44092,18.37512 8.42076,18.37512 Z",
                              id: "Path",
                              fill: "#05C5DA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M4.05036,19.89036 C3.95028,19.89036 3.85056,19.8486 3.77928,19.7676 C3.64824,19.61784 3.66336,19.39068 3.81312,19.25964 C4.5342,18.62892 8.4222,16.49052 12.92004,18.3888 C13.10328,18.4662 13.18932,18.67716 13.11192,18.8604 C13.03488,19.04364 12.82392,19.12968 12.64032,19.05228 C8.4618,17.28936 4.8294,19.32696 4.28724,19.80144 C4.21884,19.86084 4.13424,19.89036 4.05036,19.89036 Z",
                              id: "Path",
                              fill: "#05C5DA"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "guy_x5F_head",
                            transform: "translate(79.560000, 110.160000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M17.41176,10.84536 C18.78264,13.11552 21.51,13.54536 21.735,14.31036 C21.96,15.07536 20.475,16.60536 20.025,16.87536 C19.575,17.14536 17.415,12.73536 17.235,12.24036 C17.055,11.74536 17.41176,10.84536 17.41176,10.84536 Z",
                                id: "Path",
                                fill: "url(#linearGradient-300)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M13.61268,6.09804 C13.61268,6.09804 7.38,7.92036 4.32,12.1806 C2.63052,14.53284 4.72788,18.67608 6.94512,21.9168 C6.20244,22.55112 5.82012,23.28048 5.82012,23.28048 L5.535,24.07536 C5.37012,25.89048 3.3948,32.13972 2.6748,33.99984 C2.40696,34.69176 4.28256,37.23588 8.37,37.44036 C11.97,37.62036 14.37012,35.91036 14.37012,35.91036 L14.715,28.01268 C14.715,28.01268 14.83596,27.5184 14.96628,26.84556 C16.70724,26.6238 18.68688,25.94124 20.34,24.24024 C24.48,19.98036 15.93,7.96536 13.61268,6.09804 Z",
                                id: "Path",
                                fill: "url(#linearGradient-301)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M12.36024,17.04024 C12.81636,16.73172 12.69036,15.78024 11.61036,14.70024 C10.53036,13.62024 9.39024,12.66012 9.60048,11.52036 C9.80892,10.3896 13.53204,9.18432 15.27984,7.88868 C18.15048,5.76036 19.08036,0.60012 17.34048,0.27036 C14.95332,-0.18216 14.1912,3.09024 13.56048,3.09024 C12.8106,3.09024 13.19436,1.341 12.11868,1.46736 C10.56024,1.65024 9.96012,3.87036 9.06048,4.56012 C7.71192,5.59404 0.54036,7.80012 0.09036,13.14 C-0.27612,17.487 2.44656,19.95876 3.64536,21.51 C4.92048,23.15988 5.31396,24.0084 5.53536,24.075 C5.9328,24.19452 7.68276,23.93388 9.18036,23.31 C10.80036,22.635 11.79036,21.78 11.47536,21.375 C11.16036,20.97 8.80524,20.51784 8.64036,18.54 C8.52048,17.1 9.49536,16.47 10.26036,16.605 C11.02536,16.74 11.85012,17.38548 12.36024,17.04024 Z",
                                id: "Path",
                                fill: "url(#linearGradient-302)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M13.455,18.49536 C13.73688,18.504 13.95,20.41524 15.05268,20.67804 C15.78708,20.85264 18.15012,19.21536 19.21536,18.74304 C19.86228,18.45612 21.01572,18.25956 21.08988,18.55548 C21.16404,18.8514 21.33036,19.93572 21.73536,20.90304 C22.07736,21.71988 22.86036,22.47048 22.47804,24.14304 C21.91644,26.59932 17.64036,28.44072 14.71536,28.01304 C14.64768,27.31536 14.55012,26.23356 14.06268,24.27804 C13.5,22.02048 12.62412,19.9656 12.645,19.55304 C12.67524,18.96048 12.97512,18.48024 13.455,18.49536 Z",
                                id: "Path",
                                fill: "url(#linearGradient-303)"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M16.58988,14.46048 C16.35336,14.46048 16.13628,14.30388 16.07004,14.06484 C15.9462,13.61844 15.37992,12.63564 15.26652,12.4848 C15.08904,12.249 15.13008,11.90952 15.36336,11.7288 C15.59628,11.54844 15.92784,11.58264 16.11216,11.81304 C16.25724,11.99412 16.9362,13.14648 17.1108,13.77612 C17.19072,14.0634 17.02224,14.36112 16.73496,14.44104 C16.68636,14.454 16.6374,14.46048 16.58988,14.46048 Z",
                                id: "Path",
                                fill: "#0090B2"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M19.40616,20.34 C19.46988,20.44692 19.66572,20.57796 19.84032,20.6478 C20.02248,20.72268 20.21904,20.75904 20.40768,20.7378 C20.79036,20.70432 21.1122,20.39364 21.31092,20.00736 C21.34692,19.93644 21.43332,19.90836 21.50424,19.94436 C21.57156,19.97856 21.6,20.05992 21.5712,20.12868 C21.47616,20.35224 21.35196,20.57364 21.16944,20.76048 C20.99088,20.94876 20.7432,21.09096 20.47644,21.14568 C20.20896,21.20148 19.93392,21.1752 19.68228,21.0978 C19.4292,21.0096 19.1952,20.91852 18.97236,20.66112 L18.9684,20.65644 C18.87048,20.5434 18.88272,20.37168 18.99576,20.27376 C19.1088,20.17584 19.28052,20.18808 19.37844,20.30148 C19.38852,20.313 19.39824,20.32704 19.40616,20.34 Z",
                                id: "Path",
                                fill: "#F1D2F8"
                              }
                            }),
                            _vm._v(" "),
                            _c(
                              "g",
                              {
                                attrs: {
                                  transform: "translate(2.160000, 31.320000)",
                                  id: "Path"
                                }
                              },
                              [
                                _c("path", {
                                  attrs: {
                                    d:
                                      "M6.21,6.12036 C9.81,6.30036 12.21012,4.59036 12.21012,4.59036 L12.33576,1.71288 C11.42928,2.20032 9.47268,3.03876 6.89472,2.90988 C3.7656,2.75328 1.93752,1.2276 1.37016,0.20952 C1.03032,1.25424 0.72108,2.1474 0.51516,2.67984 C0.24732,3.37176 2.12256,5.91588 6.21,6.12036 Z",
                                    fill: "url(#linearGradient-304)"
                                  }
                                }),
                                _vm._v(" "),
                                _c("path", {
                                  attrs: {
                                    d:
                                      "M6.74676,6.49368 C6.56496,6.49368 6.38028,6.48936 6.192,6.47964 C3.17124,6.3288 1.22184,4.923 0.47016,3.76524 C0.16236,3.29112 0.05904,2.85948 0.17892,2.54952 C0.25092,2.36412 0.45936,2.27196 0.6444,2.3436 C0.82908,2.41524 0.92124,2.62224 0.85104,2.80728 C0.8406,2.85192 0.86328,3.09348 1.1646,3.50388 C1.9026,4.509 3.62052,5.63004 6.22764,5.76036 C9.66312,5.9292 11.97756,4.31316 12.00096,4.2966 C12.1626,4.18104 12.38724,4.21884 12.50316,4.38084 C12.61836,4.54284 12.58092,4.76748 12.41892,4.88304 C12.32208,4.95252 10.1178,6.49368 6.74676,6.49368 Z",
                                    fill: "#05C5DA"
                                  }
                                })
                              ]
                            )
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "guy_x5F_right_hand",
                            transform: "translate(93.240000, 151.920000)"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d:
                                "M18.69768,53.03268 C17.67744,49.91112 16.60248,29.63736 14.7798,15.5376 C9.72108,15.67152 5.60592,16.93908 3.4236,17.98236 C3.93732,20.35476 4.67712,23.45904 5.85036,27.54036 C9.06048,38.70828 13.36536,51.43536 13.44024,54.18036 C13.48452,55.79964 12.10608,57.70044 11.9304,60.09192 C11.81268,61.69536 12.465,64.30536 13.08024,64.26036 C13.86036,64.20348 13.7952,61.82784 14.10768,60.70536 C14.60268,58.92768 15.66036,58.32036 15.66036,58.32036 C15.66036,58.32036 17.91036,58.32612 21.70404,58.32612 C21.17124,56.41344 19.14228,54.39384 18.69768,53.03268 Z",
                              id: "Path",
                              fill: "url(#linearGradient-305)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M11.58012,2.10024 C7.98012,-1.73988 1.08,2.28024 0.42012,7.32024 C0.279,8.39772 1.26,9.6606 1.98,11.52036 C2.40696,12.62304 2.6748,14.52528 3.42324,17.98236 C5.60556,16.93908 9.72072,15.67152 14.77944,15.5376 C13.90896,8.802 12.86784,3.47364 11.58012,2.10024 Z",
                              id: "Path",
                              fill: "url(#linearGradient-306)"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M3.4236,18.34236 C3.28932,18.34236 3.16044,18.26676 3.09852,18.13788 C3.01284,17.95824 3.0888,17.74332 3.26808,17.65764 C4.39776,17.11764 8.56656,15.34212 14.77008,15.1776 C14.96952,15.17868 15.1344,15.32952 15.13944,15.52824 C15.14484,15.72696 14.98788,15.89256 14.78916,15.8976 C9.97308,16.02504 5.84028,17.22564 3.57876,18.30708 C3.52872,18.3312 3.4758,18.34236 3.4236,18.34236 Z",
                              id: "Path",
                              fill: "#05C5DA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M0.42048,7.68024 C0.405,7.68024 0.38916,7.67916 0.37332,7.67736 C0.1764,7.65144 0.03708,7.47072 0.063,7.27344 C0.44532,4.35492 2.92392,1.5282 5.95656,0.55188 C8.23392,-0.18144 10.37952,0.29304 11.84292,1.85436 C11.979,1.99944 11.97144,2.22732 11.82672,2.3634 C11.682,2.49948 11.45376,2.49228 11.31768,2.3472 C9.58536,0.49932 7.35336,0.8586 6.17724,1.23768 C3.39588,2.133 1.125,4.71096 0.77724,7.3674 C0.75348,7.54812 0.59868,7.68024 0.42048,7.68024 Z",
                              id: "Path",
                              fill: "#05C5DA"
                            }
                          })
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "joints_x5F_4",
                            transform: "translate(199.080000, 88.920000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("polygon", {
                              attrs: {
                                id: "Path",
                                fill: "#F95FC3",
                                points:
                                  "14.34996 29.15424 10.56096 28.82412 14.07096 25.36092"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M0.96048,40.74048 C0.80892,40.74048 0.6678,40.644 0.61848,40.49244 C-1.22904,34.84764 2.41848,31.34952 8.46108,25.55316 C9.70884,24.35652 11.12328,23.00004 12.58488,21.52656 C21.18852,12.85416 19.50876,4.04748 18.78876,1.55484 C18.73368,1.36404 18.84384,1.16424 19.035,1.10916 C19.22688,1.0548 19.4256,1.16424 19.48068,1.3554 C20.22804,3.94308 21.9762,13.08276 13.09608,22.03344 C11.628,23.51304 10.21032,24.87312 8.95968,26.07264 C3.12048,31.67316 -0.40392,35.05356 1.30248,40.26816 C1.3644,40.45716 1.26144,40.66056 1.07208,40.72212 C1.03536,40.73472 0.99756,40.74048 0.96048,40.74048 Z",
                                id: "Path",
                                fill: "#1AA9E8"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M18.04644,23.89572 L16.7688,22.62816 C20.03832,19.33236 22.13712,15.6618 23.0076,11.71872 L24.76548,12.1068 C23.82048,16.38792 21.56004,20.3544 18.04644,23.89572 Z",
                                id: "Path",
                                fill: "#00E2EC"
                              }
                            }),
                            _vm._v(" "),
                            _c("circle", {
                              attrs: {
                                id: "Oval",
                                fill: "#FDE1A7",
                                cx: "19.13508",
                                cy: "1.45548",
                                r: "1.42488"
                              }
                            })
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "joints_x5F_3",
                            transform: "translate(161.640000, 100.440000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("path", {
                              attrs: {
                                d:
                                  "M35.1594,30.66048 C35.1036,30.66048 35.04636,30.64716 34.99308,30.61908 C34.8876,30.56364 32.4144,29.21364 33.00408,25.08948 C33.3378,22.75236 34.86096,20.7864 36.47376,18.70524 C38.57076,15.99876 40.7394,13.20012 40.44132,9.32796 C40.32612,7.82784 39.55608,6.50952 38.1528,5.409 C30.63672,-0.486 7.43184,1.10124 1.53612,2.07576 C1.33704,2.10636 1.15452,1.97532 1.12248,1.77912 C1.08972,1.58292 1.22256,1.39752 1.41876,1.36512 C7.3836,0.37944 30.89124,-1.20132 38.59704,4.84236 C40.16556,6.07248 41.02776,7.56324 41.15916,9.27288 C41.47848,13.42188 39.12192,16.46316 37.04256,19.14624 C35.48988,21.15 34.02324,23.04288 33.71688,25.19136 C33.20244,28.78956 35.24256,29.9358 35.32932,29.98296 C35.50356,30.07728 35.57016,30.29472 35.47692,30.46968 C35.41248,30.591 35.28792,30.66048 35.1594,30.66048 Z",
                                id: "Path",
                                fill: "#1AA9E8"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M28.8864,6.28128 C25.44372,5.71536 21.33684,5.42484 16.6788,5.41836 L16.68168,3.61836 C21.4362,3.6252 25.64028,3.92328 29.17836,4.50504 L28.8864,6.28128 Z",
                                id: "Path",
                                fill: "#C7A0F6"
                              }
                            }),
                            _vm._v(" "),
                            _c("circle", {
                              attrs: {
                                id: "Oval",
                                fill: "#FDE1A7",
                                cx: "1.47708",
                                cy: "1.72044",
                                r: "1.42488"
                              }
                            })
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "joints_x5F_2",
                            transform: "translate(46.440000, 86.040000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("polygon", {
                              attrs: {
                                id: "Path",
                                fill: "#F95FC3",
                                points:
                                  "13.57128 49.30884 12.26808 52.8822 9.83556 48.59388"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M50.86656,79.1784 C50.5818,79.1784 50.29812,79.17624 50.01336,79.17192 C35.6274,78.95448 22.8222,73.35864 13.95684,63.41472 C3.52944,51.71868 -1.4202,36.8946 0.71604,23.76036 C2.3202,13.89888 7.76124,5.85756 16.03728,1.11708 C16.20972,1.01808 16.42968,1.07784 16.52868,1.25064 C16.62768,1.42344 16.56756,1.64304 16.39512,1.74204 C8.31096,6.37236 2.9952,14.23332 1.42668,23.87628 C-0.67536,36.79848 4.20948,51.40008 14.49432,62.93592 C33.01884,83.71404 66.7152,83.75436 91.20744,63.02592 C95.44428,59.44032 99.05652,55.7424 102.54996,52.16616 C110.85984,43.65972 118.0368,36.31284 128.92464,36.0396 C139.09572,35.78472 144.14688,41.0364 146.59524,45.48708 C146.69136,45.66132 146.62764,45.8802 146.4534,45.97596 C146.2788,46.07244 146.05992,46.00836 145.96452,45.83412 C143.61264,41.5584 138.75516,36.51516 128.943,36.75924 C118.34712,37.02528 111.26556,44.27496 103.06512,52.66908 C99.5598,56.2572 95.93532,59.96736 91.67256,63.57492 C79.76124,73.65636 65.30184,79.1784 50.86656,79.1784 Z",
                                id: "Path",
                                fill: "#1AA9E8"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M8.48196,45.333 C6.795,40.53528 5.89716,35.68572 5.81364,30.91896 L7.61328,30.88728 C7.69356,35.46108 8.5572,40.1202 10.18008,44.73576 L8.48196,45.333 Z",
                                id: "Path",
                                fill: "#C7A0F6"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M63.7434,74.86236 L63.35028,73.10592 C67.55832,72.1638 71.72208,70.7472 75.726,68.895 L76.48164,70.52868 C72.36216,72.43488 68.07636,73.89288 63.7434,74.86236 Z",
                                id: "Path",
                                fill: "#00E2EC"
                              }
                            }),
                            _vm._v(" "),
                            _c("circle", {
                              attrs: {
                                id: "Oval",
                                fill: "#FDE1A7",
                                cx: "16.21656",
                                cy: "1.42992",
                                r: "1.42488"
                              }
                            })
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "g",
                        {
                          attrs: {
                            id: "joints_x5F_1",
                            transform: "translate(152.280000, 146.160000)"
                          }
                        },
                        [
                          _c("g", { attrs: { id: "Group" } }, [
                            _c("polygon", {
                              attrs: {
                                id: "Path",
                                fill: "#00E2EC",
                                points:
                                  "30.46788 42.75 26.73 43.4556 29.17404 39.17268"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M2.9592,51.0732 C2.4624,51.0732 1.98324,51.05988 1.52568,51.03396 C1.32732,51.02316 1.1754,50.85288 1.18656,50.65416 C1.19808,50.4558 1.37232,50.30568 1.56636,50.3154 C8.5086,50.70924 20.44728,48.17916 24.88104,39.61476 C26.86536,35.78184 27.42192,30.28572 28.01052,24.46704 C28.98684,14.82372 29.99628,4.8528 37.4922,0.234 C37.6614,0.12924 37.8828,0.18252 37.98756,0.35172 C38.0916,0.52092 38.0394,0.74268 37.86984,0.84708 C30.67704,5.27904 29.6856,15.07068 28.72728,24.53976 C28.13112,30.42864 27.56772,35.99136 25.5204,39.94632 C21.2238,48.24468 10.19988,51.0732 2.9592,51.0732 Z",
                                id: "Path",
                                fill: "#1AA9E8"
                              }
                            }),
                            _vm._v(" "),
                            _c("path", {
                              attrs: {
                                d:
                                  "M31.69332,35.78292 L29.94192,35.36748 C30.67668,32.27292 31.03524,28.72656 31.41576,24.9714 C31.52268,23.91552 31.63032,22.85172 31.74768,21.78864 L33.53724,21.98628 C33.4206,23.04396 33.31296,24.10236 33.20676,25.15284 C32.82048,28.96884 32.45544,32.57244 31.69332,35.78292 Z",
                                id: "Path",
                                fill: "#F95FC3"
                              }
                            }),
                            _vm._v(" "),
                            _c("circle", {
                              attrs: {
                                id: "Oval",
                                fill: "#C7A0F6",
                                cx: "1.54548",
                                cy: "50.67468",
                                r: "1.42488"
                              }
                            })
                          ])
                        ]
                      )
                    ]
                  ),
                  _vm._v(" "),
                  _c(
                    "g",
                    {
                      attrs: {
                        id: "Group-2",
                        transform:
                          "translate(214.000000, 311.000000) scale(-1, 1) rotate(-159.000000) translate(-214.000000, -311.000000) translate(196.000000, 277.000000)",
                        "fill-rule": "nonzero"
                      }
                    },
                    [
                      _c("path", {
                        attrs: {
                          d:
                            "M9.75565797,67.9983702 C9.71624281,67.9983702 9.6758663,67.9965833 9.6354898,67.9912226 C9.10867254,67.9304678 8.7347092,67.4837414 8.80104203,66.9941292 C9.50570818,61.7495612 15.4362477,59.3247302 21.1706728,56.9794166 C27.640527,54.3339028 33.7517995,51.8349153 33.8681223,45.7951743 C33.950798,41.5459127 30.1438704,39.3667813 25.7370632,36.8436705 C21.3898595,34.354511 16.4610419,31.5338804 15.7698345,26.1115153 C14.9507683,19.6875896 20.0324399,14.3322334 24.1143123,10.0293646 C26.3475175,7.67600992 28.4576706,5.45220586 29.0152509,3.64564427 C29.1613754,3.17211428 29.6939607,2.89782426 30.2034738,3.03273564 C30.7139481,3.16854047 31.0090812,3.66351333 30.8629567,4.13793677 C30.1861695,6.33225688 28.0404467,8.59269251 25.5563303,11.2114027 C21.5282932,15.4570905 16.9619028,20.2692273 17.6800278,25.9006604 C18.2616417,30.4644174 22.3829293,32.8240263 26.7464759,35.3212269 C31.2436494,37.8961579 35.8936769,40.5577539 35.7917743,45.8264451 C35.6523793,53.0089123 28.3701882,55.9867905 21.9464785,58.6144353 C16.4610419,60.8570018 11.2793904,62.9762719 10.7102739,67.2148121 C10.6477865,67.6677926 10.2334466,67.9983702 9.75565797,67.9983702 Z",
                          id: "Path",
                          fill: "#FDE1A7"
                        }
                      }),
                      _vm._v(" "),
                      _c("path", {
                        attrs: {
                          d:
                            "M4.6346254,35.5666076 C4.37437297,35.5666076 4.11741488,35.4650608 3.95818872,35.2755674 C-2.05616791,28.1509764 0.987797141,21.400839 3.43658576,18.8268108 C3.71880041,18.5312373 4.23601093,18.4795573 4.59289716,18.7125707 C4.9508815,18.9446775 5.01347386,19.3726245 4.73235732,19.6672913 C4.66866685,19.733478 -1.51699516,26.411082 5.30886585,34.4985536 C5.56911827,34.8068204 5.47687691,35.230234 5.103519,35.4451142 C4.96076451,35.5276209 4.79604778,35.5666076 4.6346254,35.5666076 Z",
                          id: "Path",
                          fill: "#FDE1A7"
                        }
                      }),
                      _vm._v(" "),
                      _c("circle", {
                        attrs: {
                          id: "Oval",
                          fill: "#FE697A",
                          cx: "30.8103696",
                          cy: "3.63206259",
                          r: "3.5"
                        }
                      })
                    ]
                  ),
                  _vm._v(" "),
                  _c(
                    "g",
                    {
                      attrs: {
                        id: "Group-3",
                        transform:
                          "translate(437.000000, 220.500000) rotate(119.000000) translate(-437.000000, -220.500000) translate(380.000000, 203.000000)",
                        fill: "#FDE1A7",
                        "fill-rule": "nonzero"
                      }
                    },
                    [
                      _c("path", {
                        attrs: {
                          d:
                            "M111.779496,34.8177154 C109.547685,34.8177154 103.95476,33.7941204 91.7712156,26.8112604 C90.1714358,25.8942076 88.5480139,24.9487436 86.9001619,23.9890738 C70.6304801,14.5139138 52.1920328,3.78076563 31.023715,5.60382241 C15.3442968,6.95967157 7.90019823,16.2091198 5.45403247,19.2491262 C5.21445953,19.5458662 5.025323,19.7818376 4.88189447,19.9420456 C4.5926732,20.2679861 4.09461367,20.2979758 3.76914123,20.0075494 C3.44366879,19.7187014 3.41451024,19.2191365 3.70373151,18.8939853 C3.83455094,18.7464045 4.0079261,18.5309523 4.22700924,18.2586776 C6.7772001,15.0884529 14.5396784,5.44519279 30.8889552,4.03173189 C52.549028,2.15027415 71.2207437,13.0317923 87.6937473,22.6253327 C89.3376589,23.5826348 90.9579285,24.5265204 92.554556,25.4412056 C108.085817,34.3418266 112.432805,33.1864348 112.474573,33.1753859 C112.87964,33.0514812 113.323323,33.269301 113.460447,33.671794 C113.597571,34.0734979 113.40607,34.507559 113.01046,34.6590858 C112.894614,34.7032811 112.524221,34.8177154 111.779496,34.8177154 Z",
                          id: "Path"
                        }
                      }),
                      _vm._v(" "),
                      _c("path", {
                        attrs: {
                          d:
                            "M1.01403382,9.29974269 C0.887512439,9.29974269 0.760991061,9.25702549 0.655173181,9.17000897 C0.407497998,8.96512462 0.367624594,8.59174464 0.565458022,8.33544144 C2.66417931,5.62843659 8.74717382,-0.568721779 19.9124938,0.401907953 C20.2291806,0.429595028 20.4638202,0.715958486 20.4377492,1.04266597 C20.4109113,1.36937345 20.1271967,1.61064653 19.8166442,1.58454157 C9.21108554,0.66770387 3.44784506,6.51837828 1.46337641,9.07666398 C1.34989057,9.22300994 1.18272899,9.29974269 1.01403382,9.29974269 Z",
                          id: "Path"
                        }
                      })
                    ]
                  )
                ]
              )
            ]
          )
        ])
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col d-flex align-items-center col-md-6" },
      [
        _c("div", [
          _c("h2", { staticClass: "mb-5" }, [
            _vm._v("Science fiction in market research")
          ]),
          _vm._v(" "),
          _c("p", [
            _vm._v(
              "With the virtual tachistoscope we measure the level of memory, attention and conciseness of your advertising material, packaging, logos etc. Since motifs of this kind are viewed only very fleetingly in most cases, it is important to know what the viewer subconsciously perceives in such short time intervals and whether the first fleeting impression corresponds to your ideas."
            )
          ])
        ])
      ]
    )
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HowItWorks.vue?vue&type=template&id=2c1b2bd2&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/HowItWorks.vue?vue&type=template&id=2c1b2bd2&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _vm._m(0)
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "howContainer" }, [
      _c("h2", [_vm._v("Here's how it works")]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "d-flex justify-content-around align-items-center",
          attrs: { id: "exp2" }
        },
        [
          _c("div", [
            _c("i", { staticClass: "fas fa-sign-in-alt" }),
            _vm._v(" "),
            _c("h4", [
              _c(
                "span",
                { staticStyle: { color: "#d6d6d6", "font-size": "2rem" } },
                [_vm._v("1.")]
              ),
              _vm._v("\n                Register\n            ")
            ]),
            _vm._v(" "),
            _c("p", [
              _vm._v("Easy registration, in just 2 minutes and no obligations")
            ])
          ]),
          _vm._v(" "),
          _c("div", [
            _c("i", { staticClass: "fas fa-plus-square" }),
            _vm._v(" "),
            _c("h4", [
              _c(
                "span",
                { staticStyle: { color: "#d6d6d6", "font-size": "2rem" } },
                [_vm._v("2.")]
              ),
              _vm._v("\n                Add all your products\n            ")
            ]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Through your admin panel you can add images of your product to be tested for free."
              )
            ])
          ]),
          _vm._v(" "),
          _c("div", [
            _c("i", { staticClass: "fas fa-check" }),
            _vm._v(" "),
            _c("h4", [
              _c(
                "span",
                { staticStyle: { color: "#d6d6d6", "font-size": "2rem" } },
                [_vm._v("3.")]
              ),
              _vm._v("\n                Receiving feedback\n            ")
            ]),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Our testers will use AI to give you feedback on your product."
              )
            ])
          ])
        ]
      )
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ShowImage.vue?vue&type=template&id=59ad00fa&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/ShowImage.vue?vue&type=template&id=59ad00fa&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "container" }, [
    _c(
      "div",
      {
        staticClass: "row justify-content-center",
        staticStyle: { display: "flex", "justify-content": "center" }
      },
      [
        _c("div", { staticClass: "col-md-8" }, [
          _c("h3", [_vm._v("Testing instructions:")]),
          _vm._v(" "),
          _c("div", [
            _c("video", {
              attrs: {
                id: "video",
                width: "720",
                height: "560",
                autoplay: "",
                muted: ""
              },
              domProps: { muted: true }
            }),
            _vm._v(" "),
            _c("span", [
              _vm._v(
                "\n                    Stand straight for the duration of the test and look straight at the screen.\n                    "
              ),
              _c("br"),
              _vm._v(
                "\n                    Press play, after countdown you will be shown a picture for a split second.\n                    "
              ),
              _c("br"),
              _vm._v(" "),
              _vm.counter
                ? _c("h4", { staticStyle: { color: "red" } }, [
                    _vm._v("remaining tests: " + _vm._s(this.products.length))
                  ])
                : _vm._e()
            ])
          ]),
          _vm._v(" "),
          _vm.isVisible
            ? _c("div", { staticClass: "card dark mb-5" }, [
                _c(
                  "div",
                  {
                    staticClass: "card-header d-flex justify-content-center",
                    staticStyle: {
                      background: "#313945",
                      padding: "8px",
                      "text-align": "center"
                    }
                  },
                  [_vm._v("Product ID: " + _vm._s(_vm.products[0].id))]
                ),
                _vm._v(" "),
                _c("div", { staticStyle: { "min-height": "380px" } }, [
                  _vm.imageId === _vm.products[0].id
                    ? _c("div", {
                        staticClass:
                          "d-flex justify-content-center align-items-center"
                      })
                    : _vm._e(),
                  _vm._v(" "),
                  _vm.countDown == 0
                    ? _c("div", { staticClass: "card-body" }, [
                        _vm.imageId === _vm.products[0].id
                          ? _c("div", {
                              staticClass: "circular",
                              style: {
                                backgroundImage:
                                  "url(https://tahi26.de/storage/" +
                                  _vm.products[0].img_path +
                                  ")"
                              },
                              attrs: { id: "productImage" }
                            })
                          : _vm._e()
                      ])
                    : _vm._e()
                ]),
                _vm._v(" "),
                _c(
                  "div",
                  {
                    staticClass: "card-footer d-flex justify-content-center ",
                    staticStyle: {
                      background: "#323a45",
                      padding: "7px",
                      display: "flex",
                      "justify-content": "center"
                    }
                  },
                  [
                    _c("i", {
                      staticClass: "fas fa-play-circle",
                      on: {
                        click: function($event) {
                          return _vm.showImage(_vm.products[0].id)
                        }
                      }
                    })
                  ]
                )
              ])
            : _c("h2", [_vm._v("Test Finish ")])
        ])
      ]
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/vue/dist/vue.common.dev.js":
/*!*************************************************!*\
  !*** ./node_modules/vue/dist/vue.common.dev.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
 * Vue.js v2.6.11
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */


/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (isDef(data) && isDef(data.nativeOn)) {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (!(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.11';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    warn &&
    modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.',
      range
    );
  }

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead.",
        el.rawAttrsMap['v-model']
      );
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.',
      el.rawAttrsMap['v-model']
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(
        binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
        'because the latter already expands to a value binding internally',
        el.rawAttrsMap[binding]
      );
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecesarry `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (staticClass) {
    var res = parseText(staticClass, options.delimiters);
    if (res) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.',
        el.rawAttrsMap['class']
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    {
      var res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.',
          el.rawAttrsMap['style']
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being passed as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (!stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag."),
            { start: stack[i].start, end: stack[i].end }
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:|^#/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        {
          checkRootConstraints(element);
        }
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else {
        warnOnce(
          "Component template should contain exactly one root element. " +
          "If you are using v-if on multiple elements, " +
          "use v-else-if to chain them instead.",
          { start: element.start }
        );
      }
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated
          }, {});
        }
        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2(
              "Invalid dynamic argument expression: attribute names cannot contain " +
              "spaces, quotes, <, >, / or =.",
              {
                start: attr.start + attr.name.indexOf("["),
                end: attr.start + attr.name.length
              }
            );
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.',
          { start: element.start }
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (options.outputSourceRange) {
        element.end = end$1;
      }
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.',
              { start: start }
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored."),
              { start: start }
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    {
      if (el.tag === 'template') {
        warn$2(
          "<template> cannot be keyed. Place the key on real elements instead.",
          getRawBindingAttr(el, 'key')
        );
      }
      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;
        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2(
            "Do not use v-for index as key on <transition-group> children, " +
            "this is the same as not using keys.",
            getRawBindingAttr(el, 'key'),
            true /* tip */
          );
        }
      }
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else {
      warn$2(
        ("Invalid v-for expression: " + exp),
        el.rawAttrsMap['v-for']
      );
    }
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if.",
      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored.",
          children[i]
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (slotScope) {
      warn$2(
        "the \"scope\" attribute for scoped slots have been deprecated and " +
        "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
        "can also be used on plain elements in addition to <template> to " +
        "denote scoped slots.",
        el.rawAttrsMap['scope'],
        true
      );
    }
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (el.attrsMap['v-for']) {
      warn$2(
        "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
        "(v-for takes higher priority). Use a wrapper <template> for the " +
        "scoped slot to make it clearer.",
        el.rawAttrsMap['slot-scope'],
        true
      );
    }
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (el.slotTarget || el.slotScope) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.parent && !maybeComponent(el.parent)) {
            warn$2(
              "<template v-slot> can only appear at the root level inside " +
              "the receiving component",
              el
            );
          }
        }
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        {
          if (!maybeComponent(el)) {
            warn$2(
              "v-slot can only be used on components or <template>.",
              slotBinding$1
            );
          }
          if (el.slotScope || el.slotTarget) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.scopedSlots) {
            warn$2(
              "To avoid scope ambiguity, the default slot should also use " +
              "<template> syntax when there are other named slots.",
              slotBinding$1
            );
          }
        }
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else {
      warn$2(
        "v-slot shorthand syntax requires a slot name.",
        binding
      );
    }
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead.",
        getRawBindingAttr(el, 'key')
      );
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          value.trim().length === 0
        ) {
          warn$2(
            ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
          );
        }
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);
        if (res) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.',
            list[i]
          );
        }
      }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + "($event)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ")($event)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      state.warn(
        "v-once can only be used inside v-for that is keyed. ",
        el.rawAttrsMap['v-once']
      );
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (state.maybeComponent(el) &&
    el.tag !== 'slot' &&
    el.tag !== 'template' &&
    !el.key
  ) {
    state.warn(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      el.rawAttrsMap['v-for'],
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn(
      'Inline-template components must have exactly one child element.',
      { start: el.start }
    );
  }
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (name === 'v-slot' || name[0] === '#') {
            checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stripped = exp.replace(stripStringRE, '');
  var keywordMatch = stripped.match(unaryOperatorsRE);
  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

function checkFunctionParameterExpression (exp, text, warn, range) {
  try {
    new Function(exp, '');
  } catch (e) {
    warn(
      "invalid function parameter expression: " + (e.message) + " in\n\n" +
      "    " + exp + "\n\n" +
      "  Raw expression: " + (text.trim()) + "\n",
      range
    );
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1(
              "Error compiling template:\n\n" + (e.msg) + "\n\n" +
              generateCodeFrame(template, e.start, e.end),
              vm
            );
          });
        } else {
          warn$$1(
            "Error compiling template:\n\n" + template + "\n\n" +
            compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
            vm
          );
        }
      }
      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
        } else {
          compiled.tips.forEach(function (msg) { return tip(msg, vm); });
        }
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function (msg, range, tip) {
            var data = { msg: msg };
            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }
              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }
            (tip ? tips : errors).push(data);
          };
        }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      {
        detectErrors(compiled.ast, warn);
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (!template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile end');
        measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

module.exports = Vue;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.js":
/*!*********************************************!*\
  !*** ./node_modules/vue/dist/vue.common.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

if (false) {} else {
  module.exports = __webpack_require__(/*! ./vue.common.dev.js */ "./node_modules/vue/dist/vue.common.dev.js")
}


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * First we will load all of this project's JavaScript dependencies which
 * includes Vue and other libraries. It is a great starting point when
 * building robust, powerful web applications using Vue and Laravel.
 */
__webpack_require__(/*! ./bootstrap */ "./resources/js/bootstrap.js");

window.Vue = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.common.js");
/**
 * The following block of code may be used to automatically register your
 * Vue components. It will recursively scan this directory for the Vue
 * components and automatically register them with their "basename".
 *
 * Eg. ./components/ExampleComponent.vue -> <example-component></example-component>
 */

Vue.component('example-component', __webpack_require__(/*! ./components/ExampleComponent.vue */ "./resources/js/components/ExampleComponent.vue")["default"]);
Vue.component('home-main-component', __webpack_require__(/*! ./components/HomeMainComponent.vue */ "./resources/js/components/HomeMainComponent.vue")["default"]);
Vue.component('show-image-component', __webpack_require__(/*! ./components/ShowImage.vue */ "./resources/js/components/ShowImage.vue")["default"]);
Vue.component('home-2-component', __webpack_require__(/*! ./components/Home2Component.vue */ "./resources/js/components/Home2Component.vue")["default"]);
Vue.component('home-3-component', __webpack_require__(/*! ./components/Home3Component.vue */ "./resources/js/components/Home3Component.vue")["default"]);
Vue.component('how-it-works-component', __webpack_require__(/*! ./components/HowItWorks.vue */ "./resources/js/components/HowItWorks.vue")["default"]);
/**
 * Next, we will create a fresh Vue application instance and attach it to
 * the page. Then, you may begin adding components to this application
 * or customize the JavaScript scaffolding to fit your unique needs.
 */

var app = new Vue({
  el: '#app'
});

/***/ }),

/***/ "./resources/js/bootstrap.js":
/*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

window._ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/**
 * We'll load jQuery and the Bootstrap jQuery plugin which provides support
 * for JavaScript based Bootstrap features such as modals and tabs. This
 * code may be modified to fit the specific needs of your application.
 */

try {
  window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js")["default"];
  window.$ = window.jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

  __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js");
} catch (e) {}
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */


window.axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */
// import Echo from 'laravel-echo';
// window.Pusher = require('pusher-js');
// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: process.env.MIX_PUSHER_APP_KEY,
//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,
//     encrypted: true
// });

/***/ }),

/***/ "./resources/js/components/ExampleComponent.vue":
/*!******************************************************!*\
  !*** ./resources/js/components/ExampleComponent.vue ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ExampleComponent.vue?vue&type=template&id=299e239e& */ "./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e&");
/* harmony import */ var _ExampleComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ExampleComponent.vue?vue&type=script&lang=js& */ "./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _ExampleComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__["render"],
  _ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/ExampleComponent.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js&":
/*!*******************************************************************************!*\
  !*** ./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./ExampleComponent.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ExampleComponent.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e&":
/*!*************************************************************************************!*\
  !*** ./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e& ***!
  \*************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./ExampleComponent.vue?vue&type=template&id=299e239e& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ExampleComponent.vue?vue&type=template&id=299e239e&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ExampleComponent_vue_vue_type_template_id_299e239e___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/components/Home2Component.vue":
/*!****************************************************!*\
  !*** ./resources/js/components/Home2Component.vue ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Home2Component_vue_vue_type_template_id_2cded535_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Home2Component.vue?vue&type=template&id=2cded535&scoped=true& */ "./resources/js/components/Home2Component.vue?vue&type=template&id=2cded535&scoped=true&");
/* harmony import */ var _Home2Component_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Home2Component.vue?vue&type=script&lang=js& */ "./resources/js/components/Home2Component.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Home2Component_vue_vue_type_style_index_0_id_2cded535_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css& */ "./resources/js/components/Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Home2Component_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Home2Component_vue_vue_type_template_id_2cded535_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Home2Component_vue_vue_type_template_id_2cded535_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "2cded535",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/Home2Component.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/Home2Component.vue?vue&type=script&lang=js&":
/*!*****************************************************************************!*\
  !*** ./resources/js/components/Home2Component.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./Home2Component.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home2Component.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css&":
/*!*************************************************************************************************************!*\
  !*** ./resources/js/components/Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css& ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_style_index_0_id_2cded535_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader!../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home2Component.vue?vue&type=style&index=0&id=2cded535&scoped=true&lang=css&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_style_index_0_id_2cded535_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_style_index_0_id_2cded535_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_style_index_0_id_2cded535_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_style_index_0_id_2cded535_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_style_index_0_id_2cded535_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./resources/js/components/Home2Component.vue?vue&type=template&id=2cded535&scoped=true&":
/*!***********************************************************************************************!*\
  !*** ./resources/js/components/Home2Component.vue?vue&type=template&id=2cded535&scoped=true& ***!
  \***********************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_template_id_2cded535_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./Home2Component.vue?vue&type=template&id=2cded535&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home2Component.vue?vue&type=template&id=2cded535&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_template_id_2cded535_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home2Component_vue_vue_type_template_id_2cded535_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/components/Home3Component.vue":
/*!****************************************************!*\
  !*** ./resources/js/components/Home3Component.vue ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Home3Component_vue_vue_type_template_id_0ebc9ed4_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Home3Component.vue?vue&type=template&id=0ebc9ed4&scoped=true& */ "./resources/js/components/Home3Component.vue?vue&type=template&id=0ebc9ed4&scoped=true&");
/* harmony import */ var _Home3Component_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Home3Component.vue?vue&type=script&lang=js& */ "./resources/js/components/Home3Component.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Home3Component_vue_vue_type_style_index_0_id_0ebc9ed4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css& */ "./resources/js/components/Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Home3Component_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Home3Component_vue_vue_type_template_id_0ebc9ed4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Home3Component_vue_vue_type_template_id_0ebc9ed4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "0ebc9ed4",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/Home3Component.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/Home3Component.vue?vue&type=script&lang=js&":
/*!*****************************************************************************!*\
  !*** ./resources/js/components/Home3Component.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./Home3Component.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home3Component.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css&":
/*!*************************************************************************************************************!*\
  !*** ./resources/js/components/Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css& ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_style_index_0_id_0ebc9ed4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader!../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home3Component.vue?vue&type=style&index=0&id=0ebc9ed4&scoped=true&lang=css&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_style_index_0_id_0ebc9ed4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_style_index_0_id_0ebc9ed4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_style_index_0_id_0ebc9ed4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_style_index_0_id_0ebc9ed4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_style_index_0_id_0ebc9ed4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./resources/js/components/Home3Component.vue?vue&type=template&id=0ebc9ed4&scoped=true&":
/*!***********************************************************************************************!*\
  !*** ./resources/js/components/Home3Component.vue?vue&type=template&id=0ebc9ed4&scoped=true& ***!
  \***********************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_template_id_0ebc9ed4_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./Home3Component.vue?vue&type=template&id=0ebc9ed4&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/Home3Component.vue?vue&type=template&id=0ebc9ed4&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_template_id_0ebc9ed4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Home3Component_vue_vue_type_template_id_0ebc9ed4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/components/HomeMainComponent.vue":
/*!*******************************************************!*\
  !*** ./resources/js/components/HomeMainComponent.vue ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _HomeMainComponent_vue_vue_type_template_id_6e28316c_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HomeMainComponent.vue?vue&type=template&id=6e28316c&scoped=true& */ "./resources/js/components/HomeMainComponent.vue?vue&type=template&id=6e28316c&scoped=true&");
/* harmony import */ var _HomeMainComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HomeMainComponent.vue?vue&type=script&lang=js& */ "./resources/js/components/HomeMainComponent.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _HomeMainComponent_vue_vue_type_style_index_0_id_6e28316c_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css& */ "./resources/js/components/HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _HomeMainComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _HomeMainComponent_vue_vue_type_template_id_6e28316c_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _HomeMainComponent_vue_vue_type_template_id_6e28316c_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "6e28316c",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/HomeMainComponent.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/HomeMainComponent.vue?vue&type=script&lang=js&":
/*!********************************************************************************!*\
  !*** ./resources/js/components/HomeMainComponent.vue?vue&type=script&lang=js& ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./HomeMainComponent.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HomeMainComponent.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css&":
/*!****************************************************************************************************************!*\
  !*** ./resources/js/components/HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css& ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_style_index_0_id_6e28316c_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader!../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HomeMainComponent.vue?vue&type=style&index=0&id=6e28316c&scoped=true&lang=css&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_style_index_0_id_6e28316c_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_style_index_0_id_6e28316c_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_style_index_0_id_6e28316c_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_style_index_0_id_6e28316c_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_style_index_0_id_6e28316c_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./resources/js/components/HomeMainComponent.vue?vue&type=template&id=6e28316c&scoped=true&":
/*!**************************************************************************************************!*\
  !*** ./resources/js/components/HomeMainComponent.vue?vue&type=template&id=6e28316c&scoped=true& ***!
  \**************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_template_id_6e28316c_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./HomeMainComponent.vue?vue&type=template&id=6e28316c&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HomeMainComponent.vue?vue&type=template&id=6e28316c&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_template_id_6e28316c_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_HomeMainComponent_vue_vue_type_template_id_6e28316c_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/components/HowItWorks.vue":
/*!************************************************!*\
  !*** ./resources/js/components/HowItWorks.vue ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _HowItWorks_vue_vue_type_template_id_2c1b2bd2_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HowItWorks.vue?vue&type=template&id=2c1b2bd2&scoped=true& */ "./resources/js/components/HowItWorks.vue?vue&type=template&id=2c1b2bd2&scoped=true&");
/* harmony import */ var _HowItWorks_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HowItWorks.vue?vue&type=script&lang=js& */ "./resources/js/components/HowItWorks.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _HowItWorks_vue_vue_type_style_index_0_id_2c1b2bd2_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css& */ "./resources/js/components/HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _HowItWorks_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _HowItWorks_vue_vue_type_template_id_2c1b2bd2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _HowItWorks_vue_vue_type_template_id_2c1b2bd2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "2c1b2bd2",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/HowItWorks.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/HowItWorks.vue?vue&type=script&lang=js&":
/*!*************************************************************************!*\
  !*** ./resources/js/components/HowItWorks.vue?vue&type=script&lang=js& ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./HowItWorks.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HowItWorks.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css&":
/*!*********************************************************************************************************!*\
  !*** ./resources/js/components/HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css& ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_style_index_0_id_2c1b2bd2_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader!../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HowItWorks.vue?vue&type=style&index=0&id=2c1b2bd2&scoped=true&lang=css&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_style_index_0_id_2c1b2bd2_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_style_index_0_id_2c1b2bd2_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_style_index_0_id_2c1b2bd2_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_style_index_0_id_2c1b2bd2_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_style_index_0_id_2c1b2bd2_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./resources/js/components/HowItWorks.vue?vue&type=template&id=2c1b2bd2&scoped=true&":
/*!*******************************************************************************************!*\
  !*** ./resources/js/components/HowItWorks.vue?vue&type=template&id=2c1b2bd2&scoped=true& ***!
  \*******************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_template_id_2c1b2bd2_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./HowItWorks.vue?vue&type=template&id=2c1b2bd2&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/HowItWorks.vue?vue&type=template&id=2c1b2bd2&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_template_id_2c1b2bd2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_HowItWorks_vue_vue_type_template_id_2c1b2bd2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/components/ShowImage.vue":
/*!***********************************************!*\
  !*** ./resources/js/components/ShowImage.vue ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ShowImage_vue_vue_type_template_id_59ad00fa_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ShowImage.vue?vue&type=template&id=59ad00fa&scoped=true& */ "./resources/js/components/ShowImage.vue?vue&type=template&id=59ad00fa&scoped=true&");
/* harmony import */ var _ShowImage_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ShowImage.vue?vue&type=script&lang=js& */ "./resources/js/components/ShowImage.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _ShowImage_vue_vue_type_style_index_0_id_59ad00fa_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css& */ "./resources/js/components/ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _ShowImage_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _ShowImage_vue_vue_type_template_id_59ad00fa_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _ShowImage_vue_vue_type_template_id_59ad00fa_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "59ad00fa",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/components/ShowImage.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/components/ShowImage.vue?vue&type=script&lang=js&":
/*!************************************************************************!*\
  !*** ./resources/js/components/ShowImage.vue?vue&type=script&lang=js& ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib??ref--4-0!../../../node_modules/vue-loader/lib??vue-loader-options!./ShowImage.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ShowImage.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/components/ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css&":
/*!********************************************************************************************************!*\
  !*** ./resources/js/components/ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css& ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_style_index_0_id_59ad00fa_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader!../../../node_modules/css-loader??ref--6-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--6-2!../../../node_modules/vue-loader/lib??vue-loader-options!./ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ShowImage.vue?vue&type=style&index=0&id=59ad00fa&scoped=true&lang=css&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_style_index_0_id_59ad00fa_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_style_index_0_id_59ad00fa_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_style_index_0_id_59ad00fa_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_style_index_0_id_59ad00fa_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_style_index_0_id_59ad00fa_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./resources/js/components/ShowImage.vue?vue&type=template&id=59ad00fa&scoped=true&":
/*!******************************************************************************************!*\
  !*** ./resources/js/components/ShowImage.vue?vue&type=template&id=59ad00fa&scoped=true& ***!
  \******************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_template_id_59ad00fa_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./ShowImage.vue?vue&type=template&id=59ad00fa&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/components/ShowImage.vue?vue&type=template&id=59ad00fa&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_template_id_59ad00fa_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ShowImage_vue_vue_type_template_id_59ad00fa_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 0:
/*!*************************************************************!*\
  !*** multi ./resources/js/app.js ./resources/sass/app.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Users/Maslina/Documents/laravel/f26/resources/js/app.js */"./resources/js/app.js");
module.exports = __webpack_require__(/*! /Users/Maslina/Documents/laravel/f26/resources/sass/app.scss */"./resources/sass/app.scss");


/***/ })

/******/ });